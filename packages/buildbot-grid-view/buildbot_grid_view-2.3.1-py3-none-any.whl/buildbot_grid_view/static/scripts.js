!function(){var t=(0,eval)("this");void 0===t.BOWERDEPS&&(t.BOWERDEPS={})}();class GridState{constructor(t,e,s){e.addGroup({name:"grid",caption:"Grid View",icon:"cubes",order:4}),t.state({name:"grid",controller:"gridController",controllerAs:"C",templateUrl:"grid_view/views/grid.html",url:"/grid?branch&tag&result",reloadOnSearch:!1,data:{group:"grid",caption:"Grid View"}}),s.addSettingsGroup({name:"Grid",caption:"Grid related settings",items:[{type:"bool",name:"fullChanges",caption:"Show avatar and time ago in change details",defaultValue:!1},{type:"bool",name:"leftToRight",caption:"Show most recent changes on the right",defaultValue:!1},{type:"integer",name:"revisionLimit",caption:"Maximum number of revisions to display",default_value:5},{type:"integer",name:"changeFetchLimit",caption:"Maximum number of changes to fetch",default_value:100},{type:"integer",name:"buildFetchLimit",caption:"Maximum number of builds to fetch",default_value:1e3}]})}}angular.module("grid_view",["ui.router","ui.bootstrap","ngAnimate","guanlecoja.ui","bbData"]).config(["$stateProvider","glMenuServiceProvider","bbSettingsServiceProvider",GridState]);class Grid{constructor(t,e,s,i,a,r){this.onChange=this.onChange.bind(this),this.changeBranch=this.changeBranch.bind(this),this.changeResult=this.changeResult.bind(this),this.toggleTag=this.toggleTag.bind(this),this.resetTags=this.resetTags.bind(this),this.refresh=this.refresh.bind(this),this.isBuilderDisplayed=this.isBuilderDisplayed.bind(this),this.isTagToggled=this.isTagToggled.bind(this),this.$scope=t,this.$stateParams=e,this.$state=s,_.mixin(this.$scope,i),this.data=a.open().closeOnDestroy(this.$scope),this.branch=this.$stateParams.branch,this.tags=null!=this.$stateParams.tag?this.$stateParams.tag:[],angular.isArray(this.tags)||(this.tags=[this.tags]),this.result=this.$stateParams.result,this.results=(()=>{var t=[];for(var e in i.resultsTexts){var s=i.resultsTexts[e];t.push({code:e+"",text:s})}return t})();var l=r.getSettingsGroup("Grid");this.revisionLimit=l.revisionLimit.value,this.changeFetchLimit=l.changeFetchLimit.value,this.buildFetchLimit=l.buildFetchLimit.value,this.fullChanges=l.fullChanges.value,this.leftToRight=l.leftToRight.value,this.buildsets=this.data.getBuildsets({limit:this.buildFetchLimit,order:"-bsid"}),this.changes=this.data.getChanges({limit:this.changeFetchLimit,order:"-changeid"}),this.builders=this.data.getBuilders(),this.buildrequests=this.data.getBuildrequests({limit:this.buildFetchLimit,order:"-buildrequestid"}),this.builds=this.data.getBuilds({limit:this.buildFetchLimit,order:"-buildrequestid"}),this.buildsets.onChange=this.changes.onChange=this.builders.onChange=this.buildrequests.change=this.builds.onChange=this.onChange}dataReady(){for(var t=0,e=[this.buildsets,this.changes,this.builders,this.buildrequests,this.builds];t<e.length;t++){var s=e[t];if(!(s.$resolved&&s.length>0))return!1}return!0}dataFetched(){for(var t=0,e=[this.buildsets,this.changes,this.builders,this.buildrequests,this.builds];t<e.length;t++){if(!e[t].$resolved)return!1}return!0}onChange(){var t,e,s,i,a,r;if(this.dataReady()){for(var l={},n={},h={},d=0,g=Array.from(this.changes);d<g.length;d++)h[(e=g[d]).sourcestamp.ssid]=e,e.buildsets={};for(var u=0,c=Array.from(this.buildsets);u<c.length;u++)t=c[u],null!=(i=h[_.last(t.sourcestamps).ssid])&&(i.buildsets[t.bsid]=t,null==i.branch&&(i.branch="master"),n[i.branch]=!0,this.branch&&i.branch!==this.branch||(l[i.changeid]=i));l=(()=>{for(var t=[],e=0,s=Object.keys(l||{});e<s.length;e++){var a=s[e];i=l[a],t.push(i)}return t})(),this.leftToRight?(l.sort((t,e)=>t.changeid-e.changeid),l.length>this.revisionLimit&&(l=l.slice(l.length-this.revisionLimit))):(l.sort((t,e)=>e.changeid-t.changeid),l.length>this.revisionLimit&&(l=l.slice(0,this.revisionLimit))),this.$scope.changes=l,this.$scope.branches=(()=>{var t=[];for(var e in n)t.push(e);return t})();for(var o={},b=0,p=Array.from(this.buildrequests);b<p.length;b++)(null!=o[(s=p[b]).buildsetid]?o[s.buildsetid]:o[s.buildsetid]=[]).push(s);for(var m={},v=0,f=Array.from(this.builds);v<f.length;v++){var C=f[v];(null!=m[C.buildrequestid]?m[C.buildrequestid]:m[C.buildrequestid]=[]).push(C)}for(var y=0,$=Array.from(this.builders);y<$.length;y++)(r=$[y]).builds={};for(var T={},w=0,B=Array.from(this.$scope.changes);w<B.length;w++){e=B[w];for(var P=0,L=Object.keys(e.buildsets||{});P<L.length;P++){var R=L[P];t=e.buildsets[R];var S=o[R];if(null!=S)for(var q=0,x=Array.from(S);q<x.length;q++){var F=null!=m[(s=x[q]).buildrequestid]?m[s.buildrequestid]:[];if(null!=this.result&&""!==this.result&&!isNaN(this.result))for(a=0;a<F.length;)parseInt(F[a].results)!==parseInt(this.result)?F.splice(a,1):a+=1;F.length>0&&(r=this.builders.get(F[0].builderid),this.isBuilderDisplayed(r)&&(T[r.builderid]=r,r.builds[e.changeid]=F))}}}return this.$scope.builders=(()=>{for(var t=[],e=0,s=Object.keys(T||{});e<s.length;e++)a=s[e],r=T[a],t.push(r);return t})()}}changeBranch(t){return this.branch=t,this.refresh()}changeResult(t){return this.result=t,this.refresh()}toggleTag(t){var e=this.tags.indexOf(t);return e<0?this.tags.push(t):this.tags.splice(e,1),this.refresh()}resetTags(){return this.tags=[],this.refresh()}refresh(){this.$stateParams.branch=this.branch,0===this.tags.length?this.$stateParams.tag=void 0:this.$stateParams.tag=this.tags,this.$stateParams.result=this.result;var t={branch:this.$stateParams.branch,tag:this.$stateParams.tag,result:this.$stateParams.result};return this.$state.transitionTo(this.$state.current,t,{notify:!1}),this.onChange()}isBuilderDisplayed(t){for(var e=0,s=Array.from(this.tags);e<s.length;e++){var i=s[e];if(t.tags.indexOf(i)<0)return!1}return!0}isTagToggled(t){return this.tags.indexOf(t)>=0}}angular.module("grid_view").controller("gridController",["$scope","$stateParams","$state","resultsService","dataService","bbSettingsService",Grid]),angular.module("grid_view").run(["$templateCache",function(t){t.put("grid_view/views/grid.html",'<div class="container grid"><div class="load-indicator" ng-hide="C.dataFetched()"><div class="spinner"><i class="fa fa-circle-o-notch fa-spin fa-2x"></i><p>loading</p></div></div><p ng-show="C.dataFetched() &amp;&amp; C.changes.length == 0">No changes. Grid View needs a changesource to be setup, and<a href="#/changes"> changes</a> to be in the system.</p><div class="form-inline" ng-show="C.dataReady()"><div class="form-group"><label>Branch</label><select class="form-control" ng-model="C.branch" ng-change="C.changeBranch(C.branch)" ng-options="br for br in branches | orderBy"><option value="">(all)</option></select></div><div class="form-group"><label>Results</label><select class="form-control" ng-model="C.result" ng-change="C.changeResult(C.result)" ng-options="r.code as r.text for r in C.results"><option value="">(all)</option></select></div></div><table class="table table-condensed table-striped table-hover" ng-show="C.dataReady()"><thead><tr><th>Builder</th><th><span ng-show="C.tags.length == 0">Tags</span><span ng-show="C.tags.length &lt; 5" ng-repeat="tag in C.tags"><span class="builder-tag label clickable label-success" ng-click="C.toggleTag(tag)">{{ tag }}</span></span><span ng-show="C.tags.length &gt;= 5"><span class="label label-success">{{ C.tags.length }} tags</span></span><span ng-show="C.tags.length &gt; 0"><span class="label label-danger clickable" ng-click="C.resetTags()" uib-tooltip="Reset tags filter">x</span></span></th><th class="change" ng-repeat="ch in changes track by ch.changeid"><changedetails change="ch" compact="!C.fullChanges"></changedetails></th></tr></thead><tbody><tr ng-repeat="b in builders | orderBy: \'name\'"><th><a ui-sref="builder({builder: b.builderid})">{{ b.name }}</a></th><td><span ng-repeat="tag in b.tags"><span class="builder-tag label clickable" ng-click="C.toggleTag(tag)" ng-class="C.isTagToggled(tag) ? \'label-success\': \'label-default\'">{{ tag }}</span></span></td><td ng-repeat="ch in changes track by ch.changeid"><a ng-repeat="build in b.builds[ch.changeid] | orderBy: \'buildid\'" ui-sref="build({builder: b.builderid, build: build.number})"><span class="badge-status" ng-class="results2class(build, \'pulse\')">{{ build.number }}</span></a></td></tr></tbody></table></div>')}]);