
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND COMPOPER ELSE EQUAL FALSE FLOAT FOR GRAPH ID IF IN INT IS K_MEANS LINEAR_REGRESSION LOGISTIC_REGRESSION MAIN MAX MEAN MEDIAN MIN MINUS NOT OPEN_FILE OR OUT RANGE RELOP RETURN SIZE STD STRING SUM TRUE TYPE TYPE_BOOL TYPE_FLOAT TYPE_INT TYPE_STRING VAR VOID WHEN WHILE WITHempty :\n    program : program_d\n    program_d : declaracion program_d\n                 | program_f\n    program_f : funcion program_f\n                 | program_m\n    program_m : main\n    main_id : void MAIN\n    main : main_id '(' r_main_par bloque_void\n    r_main_par : ')'\n    bloque_void : '{' bloqueD bloqueE '}'\n    bloque_return : '{' bloqueD bloqueE return '}'\n    return : RETURN expresion ';'\n    bloqueD : declaracion bloqueD\n               | empty\n    bloqueE : estatuto bloqueE\n               | empty\n    bloque_simp : '{' bloqueE '}'\n    declaracion : type ID equal expresion ';'\n                    | type ID ';'\n    estatuto : asignacion\n                | condicion\n                | when\n                | in ';'\n                | out\n                | ciclo_w\n                | ciclo_f\n                | llamada ';'\n                | llamada_graph ';'\n                | open ';'\n    equal : EQUAL\n    asignacion : id equal expresion ';'\n    lpar_cond : '('\n    rpar_cond : ')'\n    else : ELSE\n    when_id : ID\n    when : WHEN when_id '{' whencase '}'\n    when_is : IS valor\n    case : when_is bloque_simp\n    whencase : case whencase\n                 | empty\n    condicion : IF lpar_cond expresion rpar_cond bloque_simp\n                 | IF lpar_cond expresion rpar_cond bloque_simp else bloque_simp\n     in : IN '(' ')'\n    out : OUT '(' outD ')' ';'\n    outD : expresion\n            | expresion ',' outD\n            | empty\n    for : FOR ID WITH rango\n    while_keyword : WHILE\n    while : while_keyword '(' expresion ')'\n    \n    ciclo_w : while bloque_simp\n\n    ciclo_f : for bloque_simp\n    rango : RANGE '(' expresion ',' expresion ')'\n    llamada : llamada_id lpar llamadaD rpar\n    llamada_id : ID\n    expresionL : expresion\n    \n    llamadaD : expresionL ',' llamadaD\n                | expresionL\n                | empty\n    llamada_graph : GRAPH '(' ID ',' ID ',' constant_s ')'\n    llamada_analisis : analisis_id '(' ID ')'\n    \n    analisis_id : MEAN\n                   | STD\n                   | VAR\n                   | MIN\n                   | MAX\n                   | MEDIAN\n                   | SIZE\n    llamada_clasificador : clasificador_id '(' ID ',' ID ')'\n    llamada_kmeans : K_MEANS '(' constant_i ',' ID ')'\n    clasificador_id  : LOGISTIC_REGRESSION\n                        | LINEAR_REGRESSION\n    open : OPEN_FILE '(' STRING ',' ID ')'\n    expresion : not expr\n                 | not expr and expresion\n                 | not expr or expresion\n    not : NOT\n           | empty\n    and : AND\n    or : OR\n    simp_oper : SUM\n                 | MINUS\n    comp_oper : COMPOPER\n    relop : RELOP\n    lpar : '('\n    rpar : ')'\n    expr : exp\n            | exp relop exp\n    exp : termino\n           | termino simp_oper exp\n    termino : factor comp_oper termino\n               | factor\n    factor : lpar expresion rpar\n              | valor\n    minus : MINUS\n             | empty\n    constant_i : minus INT\n    constant_f : minus FLOAT\n    constant_b : TRUE\n                  | FALSE\n    constant_s : STRING\n    llamada_type : TYPE '(' ID ')'\n    valor : llamada\n             | llamada_analisis\n             | llamada_clasificador\n             | llamada_kmeans\n             | llamada_type\n             | id\n             | arreglo\n             | in\n             | constant_b\n             | constant_i\n             | constant_f\n             | constant_s\n    id : ID indice\n    indice : lbracket expresion rbracket\n              | lbracket expresion rbracket lbracket expresion rbracket\n              | empty\n    lbracket : '['\n    rbracket : ']'\n    arreglo : '[' arregloD ']'\n               | arregloD\n    arregloD : '[' arregloE ']' ',' arregloD\n                | '[' arregloE ']'\n    arregloE : expresion ',' arregloE\n                | expresion\n                | empty\n    funcion_type_id : type ID\n    funcion_void_id : void ID\n    funcion : funcion_void\n               | funcion_type\n    funcion_void : funcion_void_id '(' params r_func_par bloque_void\n    funcion_type : funcion_type_id '(' params r_func_par bloque_return\n    r_func_par : ')'\n    void : VOID\n    params : type ID\n              | type ID ',' params\n              | empty\n    typeA : TYPE_BOOL\n            | TYPE_FLOAT\n            | TYPE_INT\n            | TYPE_STRING\n    type : typeA\n            | typeA '[' INT ']' '[' INT ']'\n            | typeA '[' INT ']'\n\n    "
    
_lr_action_items = {'TYPE_BOOL':([0,3,6,9,10,26,27,32,52,53,98,99,100,101,103,187,234,],[12,12,12,-131,-132,12,12,-20,12,-19,-133,12,-134,12,12,-11,-12,]),'TYPE_FLOAT':([0,3,6,9,10,26,27,32,52,53,98,99,100,101,103,187,234,],[13,13,13,-131,-132,13,13,-20,13,-19,-133,13,-134,13,13,-11,-12,]),'TYPE_INT':([0,3,6,9,10,26,27,32,52,53,98,99,100,101,103,187,234,],[14,14,14,-131,-132,14,14,-20,14,-19,-133,14,-134,14,14,-11,-12,]),'TYPE_STRING':([0,3,6,9,10,26,27,32,52,53,98,99,100,101,103,187,234,],[15,15,15,-131,-132,15,15,-20,15,-19,-133,15,-134,15,15,-11,-12,]),'VOID':([0,3,6,9,10,32,53,98,100,187,234,],[20,20,20,-131,-132,-20,-19,-133,-134,-11,-12,]),'$end':([1,2,4,7,11,21,23,51,187,],[0,-2,-4,-6,-7,-3,-5,-9,-11,]),'ID':([5,8,12,13,14,15,19,20,24,31,32,33,37,43,44,45,46,52,53,58,60,79,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,121,123,124,126,127,131,137,139,141,142,143,145,146,147,153,160,162,173,183,185,189,190,191,192,193,194,195,198,199,200,201,202,204,207,211,212,217,223,230,236,243,245,246,247,248,256,257,261,265,272,274,],[22,-144,-140,-141,-142,-143,29,-136,34,-1,-20,-31,49,75,-78,-79,-146,-1,-19,-1,-86,-1,-1,75,-1,-15,163,-1,-1,-80,-81,75,-85,75,-82,-83,75,-84,-1,175,-1,-120,177,180,-1,-79,75,75,-21,-22,-23,-25,-26,-27,197,205,-14,-79,-1,-145,-24,-28,-29,-30,-1,-1,-33,-1,-52,75,-53,225,-1,-1,231,232,-1,-79,-1,-32,75,-1,-18,263,264,-42,-37,-45,-1,-43,-1,]),'[':([8,12,13,14,15,31,33,43,44,45,46,58,60,75,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,209,210,214,217,223,230,243,245,265,274,],[25,-140,-141,-142,-143,-1,-31,79,-78,-79,97,-1,-86,123,127,-1,-1,-80,-81,79,-85,79,-82,-83,79,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,123,-121,127,-1,-79,-1,79,-1,-1,-1,]),'(':([16,17,18,22,29,30,31,33,34,43,44,45,58,60,73,74,75,76,77,78,79,81,86,87,88,89,90,91,92,93,94,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,152,154,157,158,159,161,173,183,193,194,195,198,204,207,217,223,230,245,251,265,274,],[26,27,28,-129,-130,-8,-1,-31,-129,60,-78,-79,-1,-86,60,119,-56,124,125,126,-1,132,-63,-64,-65,-66,-67,-68,-69,-72,-73,-1,-1,-80,-81,60,-85,60,-82,-83,60,-84,-1,-1,-120,-1,-79,195,198,202,203,204,-50,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,-1,265,-1,-1,]),'MAIN':([19,20,],[30,-136,]),';':([22,42,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,144,148,149,150,163,164,165,166,167,168,169,170,181,182,184,206,208,209,210,213,218,233,235,244,253,254,266,270,275,],[32,53,-75,-88,-90,-93,-95,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-116,-119,-98,-99,189,190,191,192,32,-76,-77,-89,-91,-92,-94,-87,-122,-125,-44,-55,-62,-117,-121,-103,236,-124,255,261,-70,-71,-118,-74,-61,]),'EQUAL':([22,75,120,122,151,163,209,210,266,],[33,-1,-116,-119,33,33,-117,-121,-118,]),'INT':([25,31,33,43,44,45,58,60,79,84,95,96,97,106,107,108,109,110,111,112,113,114,115,116,118,121,123,125,127,131,173,179,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[35,-1,-31,-1,-78,-79,-1,-86,-1,133,-96,-97,135,-1,-1,-80,-81,-1,-85,-1,-82,-83,-1,-84,-1,-1,-120,-1,-1,-79,-79,133,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,-1,-1,-1,-1,]),')':([26,27,28,36,38,39,49,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,99,117,118,120,122,132,133,134,136,164,165,166,167,168,169,170,171,172,173,174,175,180,181,182,184,198,206,207,208,209,210,213,219,221,222,223,227,229,231,232,233,245,253,254,262,264,266,273,276,],[-1,-1,41,48,-139,48,-137,-75,-88,-90,-93,-95,-86,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-1,170,-1,-116,-119,184,-98,-99,-138,-76,-77,-89,-91,-92,-94,-87,170,-59,-60,-57,208,213,-122,-125,-44,-1,-55,-1,-62,-117,-121,-103,238,244,-46,-48,249,-58,253,254,-124,-1,-70,-71,-47,270,-118,275,277,]),'NOT':([31,33,58,60,79,106,107,108,109,118,121,123,127,183,193,194,195,198,204,207,217,230,245,265,274,],[44,-31,44,-86,44,44,44,-80,-81,44,44,-120,44,44,44,44,-33,44,44,44,44,44,44,44,44,]),'K_MEANS':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,77,-78,-79,-1,-86,-1,-1,-1,-80,-81,77,-85,77,-82,-83,77,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,77,-1,-1,-1,]),'TYPE':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,78,-78,-79,-1,-86,-1,-1,-1,-80,-81,78,-85,78,-82,-83,78,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,78,-1,-1,-1,]),'IN':([31,32,33,43,44,45,52,53,58,60,79,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,137,139,141,142,143,145,146,147,162,173,183,189,190,191,192,193,194,195,198,199,200,201,204,207,217,223,230,236,243,245,246,256,257,261,265,272,274,],[-1,-20,-31,81,-78,-79,-1,-19,-1,-86,-1,-1,81,-1,-15,-1,-1,-80,-81,81,-85,81,-82,-83,81,-84,-1,-1,-120,-1,-79,81,81,-21,-22,-23,-25,-26,-27,-14,-79,-1,-24,-28,-29,-30,-1,-1,-33,-1,-52,81,-53,-1,-1,-1,-79,-1,-32,81,-1,-18,-42,-37,-45,-1,-43,-1,]),'TRUE':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,82,-78,-79,-1,-86,-1,-1,-1,-80,-81,82,-85,82,-82,-83,82,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,82,-1,-1,-1,]),'FALSE':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,83,-78,-79,-1,-86,-1,-1,-1,-80,-81,83,-85,83,-82,-83,83,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,83,-1,-1,-1,]),'STRING':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,203,204,207,217,223,230,243,245,265,269,274,],[-1,-31,85,-78,-79,-1,-86,-1,-1,-1,-80,-81,85,-85,85,-82,-83,85,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,226,-1,-1,-1,-79,-1,85,-1,-1,85,-1,]),'MEAN':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,86,-78,-79,-1,-86,-1,-1,-1,-80,-81,86,-85,86,-82,-83,86,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,86,-1,-1,-1,]),'STD':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,87,-78,-79,-1,-86,-1,-1,-1,-80,-81,87,-85,87,-82,-83,87,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,87,-1,-1,-1,]),'VAR':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,88,-78,-79,-1,-86,-1,-1,-1,-80,-81,88,-85,88,-82,-83,88,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,88,-1,-1,-1,]),'MIN':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,89,-78,-79,-1,-86,-1,-1,-1,-80,-81,89,-85,89,-82,-83,89,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,89,-1,-1,-1,]),'MAX':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,90,-78,-79,-1,-86,-1,-1,-1,-80,-81,90,-85,90,-82,-83,90,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,90,-1,-1,-1,]),'MEDIAN':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,91,-78,-79,-1,-86,-1,-1,-1,-80,-81,91,-85,91,-82,-83,91,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,91,-1,-1,-1,]),'SIZE':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,92,-78,-79,-1,-86,-1,-1,-1,-80,-81,92,-85,92,-82,-83,92,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,92,-1,-1,-1,]),'LOGISTIC_REGRESSION':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,93,-78,-79,-1,-86,-1,-1,-1,-80,-81,93,-85,93,-82,-83,93,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,93,-1,-1,-1,]),'LINEAR_REGRESSION':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,94,-78,-79,-1,-86,-1,-1,-1,-80,-81,94,-85,94,-82,-83,94,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,94,-1,-1,-1,]),'MINUS':([31,33,43,44,45,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,79,80,82,83,85,106,107,108,109,110,111,112,113,114,115,116,118,120,121,122,123,125,127,131,133,134,168,169,170,173,181,182,183,184,193,194,195,198,204,206,207,208,209,210,213,217,223,230,233,243,245,253,254,265,266,274,],[-1,-31,95,-78,-79,114,-93,-1,-95,-86,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-1,-123,-100,-101,-102,-1,-1,-80,-81,95,-85,95,-82,-83,95,-84,-1,-116,-1,-119,-120,95,-1,-79,-98,-99,-92,-94,-87,-79,-122,-125,-1,-44,-1,-1,-33,-1,-1,-55,-1,-62,-117,-121,-103,-1,-79,-1,-124,95,-1,-70,-71,-1,-118,-1,]),'FLOAT':([31,33,43,44,45,58,60,79,84,95,96,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,173,183,193,194,195,198,204,207,217,223,230,243,245,265,274,],[-1,-31,-1,-78,-79,-1,-86,-1,134,-96,-97,-1,-1,-80,-81,-1,-85,-1,-82,-83,-1,-84,-1,-1,-120,-1,-79,-79,-1,-1,-1,-33,-1,-1,-1,-1,-79,-1,-1,-1,-1,-1,]),'IF':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,162,189,190,191,192,199,200,201,236,246,256,257,261,272,],[-20,-1,-19,-1,152,-1,-15,152,152,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-30,-52,152,-53,-32,-18,-42,-37,-45,-43,]),'WHEN':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,162,189,190,191,192,199,200,201,236,246,256,257,261,272,],[-20,-1,-19,-1,153,-1,-15,153,153,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-30,-52,153,-53,-32,-18,-42,-37,-45,-43,]),'OUT':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,162,189,190,191,192,199,200,201,236,246,256,257,261,272,],[-20,-1,-19,-1,154,-1,-15,154,154,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-30,-52,154,-53,-32,-18,-42,-37,-45,-43,]),'GRAPH':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,162,189,190,191,192,199,200,201,236,246,256,257,261,272,],[-20,-1,-19,-1,157,-1,-15,157,157,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-30,-52,157,-53,-32,-18,-42,-37,-45,-43,]),'OPEN_FILE':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,162,189,190,191,192,199,200,201,236,246,256,257,261,272,],[-20,-1,-19,-1,158,-1,-15,158,158,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-30,-52,158,-53,-32,-18,-42,-37,-45,-43,]),'FOR':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,162,189,190,191,192,199,200,201,236,246,256,257,261,272,],[-20,-1,-19,-1,160,-1,-15,160,160,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-30,-52,160,-53,-32,-18,-42,-37,-45,-43,]),'WHILE':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,162,189,190,191,192,199,200,201,236,246,256,257,261,272,],[-20,-1,-19,-1,161,-1,-15,161,161,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-30,-52,161,-53,-32,-18,-42,-37,-45,-43,]),'}':([32,52,53,102,103,104,138,139,140,141,142,143,145,146,147,162,188,189,190,191,192,199,200,201,216,220,224,236,239,240,241,246,255,256,257,258,259,261,272,],[-20,-1,-19,-1,-1,-15,187,-1,-17,-21,-22,-23,-25,-26,-27,-14,-16,-24,-28,-29,-30,-52,-1,-53,234,-1,246,-32,257,-1,-41,-18,-13,-42,-37,-40,-39,-45,-43,]),'RETURN':([32,53,101,103,104,137,139,140,141,142,143,145,146,147,162,186,188,189,190,191,192,199,201,236,246,256,257,261,272,],[-20,-19,-1,-1,-15,-1,-1,-17,-21,-22,-23,-25,-26,-27,-14,217,-16,-24,-28,-29,-30,-52,-53,-32,-18,-42,-37,-45,-43,]),']':([35,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,79,80,82,83,85,120,122,127,128,129,130,131,133,134,135,164,165,166,167,168,169,170,176,181,182,183,184,206,208,209,210,213,215,233,252,253,254,266,],[46,-75,-88,-90,-93,-95,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-1,-123,-100,-101,-102,-116,-119,-1,181,182,-127,-128,-98,-99,185,-76,-77,-89,-91,-92,-94,-87,210,-122,-125,-1,-44,-55,-62,-117,-121,-103,-126,-124,210,-70,-71,-118,]),'{':([40,41,47,48,50,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,155,156,170,181,182,184,196,197,206,208,209,210,213,233,237,238,242,249,250,253,254,260,266,267,268,277,],[52,-10,52,-135,101,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-116,-119,-98,-99,200,200,-87,-122,-125,-44,220,-36,-55,-62,-117,-121,-103,-124,200,-34,200,-51,-49,-70,-71,-38,-118,200,-35,-54,]),',':([49,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,130,133,134,164,165,166,167,168,169,170,172,174,177,178,181,182,184,206,208,209,210,213,222,225,226,233,253,254,263,266,271,],[99,-75,-88,-90,-93,-95,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-116,-119,183,-98,-99,-76,-77,-89,-91,-92,-94,-87,207,-57,211,212,-122,214,-44,-55,-62,-117,-121,-103,245,247,248,-124,-70,-71,269,-118,274,]),'AND':([54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,166,167,168,169,170,181,182,184,206,208,209,210,213,233,253,254,266,],[108,-88,-90,-93,-95,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-116,-119,-98,-99,-89,-91,-92,-94,-87,-122,-125,-44,-55,-62,-117,-121,-103,-124,-70,-71,-118,]),'OR':([54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,166,167,168,169,170,181,182,184,206,208,209,210,213,233,253,254,266,],[109,-88,-90,-93,-95,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-116,-119,-98,-99,-89,-91,-92,-94,-87,-122,-125,-44,-55,-62,-117,-121,-103,-124,-70,-71,-118,]),'RELOP':([55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,167,168,169,170,181,182,184,206,208,209,210,213,233,253,254,266,],[111,-90,-93,-95,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-116,-119,-98,-99,-91,-92,-94,-87,-122,-125,-44,-55,-62,-117,-121,-103,-124,-70,-71,-118,]),'SUM':([56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,168,169,170,181,182,184,206,208,209,210,213,233,253,254,266,],[113,-93,-95,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-116,-119,-98,-99,-92,-94,-87,-122,-125,-44,-55,-62,-117,-121,-103,-124,-70,-71,-118,]),'COMPOPER':([57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,169,170,181,182,184,206,208,209,210,213,233,253,254,266,],[116,-95,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-1,-123,-100,-101,-102,-116,-119,-98,-99,-94,-87,-122,-125,-44,-55,-62,-117,-121,-103,-124,-70,-71,-118,]),'WITH':([205,],[228,]),'IS':([220,240,246,259,],[243,243,-18,-39,]),'RANGE':([228,],[251,]),'ELSE':([246,256,],[-18,268,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_d':([0,3,],[2,21,]),'declaracion':([0,3,52,101,103,],[3,3,103,103,103,]),'program_f':([0,3,6,],[4,4,23,]),'type':([0,3,6,26,27,52,99,101,103,],[5,5,24,37,37,105,37,105,105,]),'funcion':([0,3,6,],[6,6,6,]),'program_m':([0,3,6,],[7,7,7,]),'typeA':([0,3,6,26,27,52,99,101,103,],[8,8,8,8,8,8,8,8,8,]),'funcion_void':([0,3,6,],[9,9,9,]),'funcion_type':([0,3,6,],[10,10,10,]),'main':([0,3,6,],[11,11,11,]),'funcion_void_id':([0,3,6,],[16,16,16,]),'funcion_type_id':([0,3,6,],[17,17,17,]),'main_id':([0,3,6,],[18,18,18,]),'void':([0,3,6,],[19,19,19,]),'equal':([22,151,163,],[31,193,31,]),'params':([26,27,99,],[36,39,136,]),'empty':([26,27,31,43,52,58,75,79,99,101,102,103,106,107,110,112,115,118,121,125,127,137,139,183,193,194,198,200,204,207,217,220,230,240,243,245,265,274,],[38,38,45,96,104,45,122,131,38,104,140,104,45,45,96,96,96,173,45,96,131,140,140,131,45,45,223,140,45,173,45,241,45,241,96,223,45,45,]),'r_main_par':([28,],[40,]),'expresion':([31,58,79,106,107,118,121,127,183,193,194,198,204,207,217,230,245,265,274,],[42,117,130,164,165,174,176,130,130,218,219,222,227,174,235,252,222,271,276,]),'not':([31,58,79,106,107,118,121,127,183,193,194,198,204,207,217,230,245,265,274,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'r_func_par':([36,39,],[47,50,]),'bloque_void':([40,47,],[51,98,]),'expr':([43,],[54,]),'exp':([43,110,112,],[55,166,167,]),'termino':([43,110,112,115,],[56,56,56,168,]),'factor':([43,110,112,115,],[57,57,57,57,]),'lpar':([43,73,110,112,115,],[58,118,58,58,58,]),'valor':([43,110,112,115,243,],[59,59,59,59,260,]),'llamada':([43,102,110,112,115,137,139,200,243,],[61,148,61,61,61,148,148,148,61,]),'llamada_analisis':([43,110,112,115,243,],[62,62,62,62,62,]),'llamada_clasificador':([43,110,112,115,243,],[63,63,63,63,63,]),'llamada_kmeans':([43,110,112,115,243,],[64,64,64,64,64,]),'llamada_type':([43,110,112,115,243,],[65,65,65,65,65,]),'id':([43,102,110,112,115,137,139,200,243,],[66,151,66,66,66,151,151,151,66,]),'arreglo':([43,110,112,115,243,],[67,67,67,67,67,]),'in':([43,102,110,112,115,137,139,200,243,],[68,144,68,68,68,144,144,144,68,]),'constant_b':([43,110,112,115,243,],[69,69,69,69,69,]),'constant_i':([43,110,112,115,125,243,],[70,70,70,70,178,70,]),'constant_f':([43,110,112,115,243,],[71,71,71,71,71,]),'constant_s':([43,110,112,115,243,269,],[72,72,72,72,72,273,]),'llamada_id':([43,102,110,112,115,137,139,200,243,],[73,73,73,73,73,73,73,73,73,]),'analisis_id':([43,110,112,115,243,],[74,74,74,74,74,]),'clasificador_id':([43,110,112,115,243,],[76,76,76,76,76,]),'arregloD':([43,79,110,112,115,214,243,],[80,128,80,80,80,233,80,]),'minus':([43,110,112,115,125,243,],[84,84,84,84,179,84,]),'bloque_return':([50,],[100,]),'bloqueD':([52,101,103,],[102,137,162,]),'and':([54,],[106,]),'or':([54,],[107,]),'relop':([55,],[110,]),'simp_oper':([56,],[112,]),'comp_oper':([57,],[115,]),'indice':([75,],[120,]),'lbracket':([75,209,],[121,230,]),'arregloE':([79,127,183,],[129,129,215,]),'bloqueE':([102,137,139,200,],[138,186,188,224,]),'estatuto':([102,137,139,200,],[139,139,139,139,]),'asignacion':([102,137,139,200,],[141,141,141,141,]),'condicion':([102,137,139,200,],[142,142,142,142,]),'when':([102,137,139,200,],[143,143,143,143,]),'out':([102,137,139,200,],[145,145,145,145,]),'ciclo_w':([102,137,139,200,],[146,146,146,146,]),'ciclo_f':([102,137,139,200,],[147,147,147,147,]),'llamada_graph':([102,137,139,200,],[149,149,149,149,]),'open':([102,137,139,200,],[150,150,150,150,]),'while':([102,137,139,200,],[155,155,155,155,]),'for':([102,137,139,200,],[156,156,156,156,]),'while_keyword':([102,137,139,200,],[159,159,159,159,]),'rpar':([117,171,],[169,206,]),'llamadaD':([118,207,],[171,229,]),'expresionL':([118,207,],[172,172,]),'lpar_cond':([152,],[194,]),'when_id':([153,],[196,]),'bloque_simp':([155,156,237,242,267,],[199,201,256,259,272,]),'rbracket':([176,252,],[209,266,]),'return':([186,],[216,]),'outD':([198,245,],[221,262,]),'rpar_cond':([219,],[237,]),'whencase':([220,240,],[239,258,]),'case':([220,240,],[240,240,]),'when_is':([220,240,],[242,242,]),'rango':([228,],[250,]),'else':([256,],[267,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',20),
  ('program -> program_d','program',1,'p_program','parser.py',27),
  ('program_d -> declaracion program_d','program_d',2,'p_program_d','parser.py',33),
  ('program_d -> program_f','program_d',1,'p_program_d','parser.py',34),
  ('program_f -> funcion program_f','program_f',2,'p_program_f','parser.py',39),
  ('program_f -> program_m','program_f',1,'p_program_f','parser.py',40),
  ('program_m -> main','program_m',1,'p_program_m','parser.py',45),
  ('main_id -> void MAIN','main_id',2,'p_main_id','parser.py',50),
  ('main -> main_id ( r_main_par bloque_void','main',4,'p_main','parser.py',65),
  ('r_main_par -> )','r_main_par',1,'p_r_main_par','parser.py',81),
  ('bloque_void -> { bloqueD bloqueE }','bloque_void',4,'p_bloque_void','parser.py',87),
  ('bloque_return -> { bloqueD bloqueE return }','bloque_return',5,'p_bloque_return','parser.py',93),
  ('return -> RETURN expresion ;','return',3,'p_return','parser.py',99),
  ('bloqueD -> declaracion bloqueD','bloqueD',2,'p_bloqueD','parser.py',105),
  ('bloqueD -> empty','bloqueD',1,'p_bloqueD','parser.py',106),
  ('bloqueE -> estatuto bloqueE','bloqueE',2,'p_bloqueE','parser.py',111),
  ('bloqueE -> empty','bloqueE',1,'p_bloqueE','parser.py',112),
  ('bloque_simp -> { bloqueE }','bloque_simp',3,'p_bloque_simp','parser.py',117),
  ('declaracion -> type ID equal expresion ;','declaracion',5,'p_declaracion','parser.py',122),
  ('declaracion -> type ID ;','declaracion',3,'p_declaracion','parser.py',123),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','parser.py',196),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','parser.py',197),
  ('estatuto -> when','estatuto',1,'p_estatuto','parser.py',198),
  ('estatuto -> in ;','estatuto',2,'p_estatuto','parser.py',199),
  ('estatuto -> out','estatuto',1,'p_estatuto','parser.py',200),
  ('estatuto -> ciclo_w','estatuto',1,'p_estatuto','parser.py',201),
  ('estatuto -> ciclo_f','estatuto',1,'p_estatuto','parser.py',202),
  ('estatuto -> llamada ;','estatuto',2,'p_estatuto','parser.py',203),
  ('estatuto -> llamada_graph ;','estatuto',2,'p_estatuto','parser.py',204),
  ('estatuto -> open ;','estatuto',2,'p_estatuto','parser.py',205),
  ('equal -> EQUAL','equal',1,'p_equal','parser.py',210),
  ('asignacion -> id equal expresion ;','asignacion',4,'p_asignacion','parser.py',216),
  ('lpar_cond -> (','lpar_cond',1,'p_lpar_cond','parser.py',233),
  ('rpar_cond -> )','rpar_cond',1,'p_rpar_cond','parser.py',238),
  ('else -> ELSE','else',1,'p_else','parser.py',244),
  ('when_id -> ID','when_id',1,'p_when_id','parser.py',250),
  ('when -> WHEN when_id { whencase }','when',5,'p_when','parser.py',262),
  ('when_is -> IS valor','when_is',2,'p_when_is','parser.py',273),
  ('case -> when_is bloque_simp','case',2,'p_case','parser.py',283),
  ('whencase -> case whencase','whencase',2,'p_whencase','parser.py',290),
  ('whencase -> empty','whencase',1,'p_whencase','parser.py',291),
  ('condicion -> IF lpar_cond expresion rpar_cond bloque_simp','condicion',5,'p_condicion','parser.py',296),
  ('condicion -> IF lpar_cond expresion rpar_cond bloque_simp else bloque_simp','condicion',7,'p_condicion','parser.py',297),
  ('in -> IN ( )','in',3,'p_in','parser.py',304),
  ('out -> OUT ( outD ) ;','out',5,'p_out','parser.py',311),
  ('outD -> expresion','outD',1,'p_outD','parser.py',316),
  ('outD -> expresion , outD','outD',3,'p_outD','parser.py',317),
  ('outD -> empty','outD',1,'p_outD','parser.py',318),
  ('for -> FOR ID WITH rango','for',4,'p_for','parser.py',325),
  ('while_keyword -> WHILE','while_keyword',1,'p_while_keyword','parser.py',367),
  ('while -> while_keyword ( expresion )','while',4,'p_while','parser.py',375),
  ('ciclo_w -> while bloque_simp','ciclo_w',2,'p_ciclo_w','parser.py',383),
  ('ciclo_f -> for bloque_simp','ciclo_f',2,'p_ciclo_f','parser.py',399),
  ('rango -> RANGE ( expresion , expresion )','rango',6,'p_rango','parser.py',437),
  ('llamada -> llamada_id lpar llamadaD rpar','llamada',4,'p_llamada','parser.py',445),
  ('llamada_id -> ID','llamada_id',1,'p_llamada_id','parser.py',462),
  ('expresionL -> expresion','expresionL',1,'p_expresionL','parser.py',471),
  ('llamadaD -> expresionL , llamadaD','llamadaD',3,'p_llamadaD','parser.py',478),
  ('llamadaD -> expresionL','llamadaD',1,'p_llamadaD','parser.py',479),
  ('llamadaD -> empty','llamadaD',1,'p_llamadaD','parser.py',480),
  ('llamada_graph -> GRAPH ( ID , ID , constant_s )','llamada_graph',8,'p_llamada_graph','parser.py',485),
  ('llamada_analisis -> analisis_id ( ID )','llamada_analisis',4,'p_llamada_analisis','parser.py',512),
  ('analisis_id -> MEAN','analisis_id',1,'p_analisis_id','parser.py',530),
  ('analisis_id -> STD','analisis_id',1,'p_analisis_id','parser.py',531),
  ('analisis_id -> VAR','analisis_id',1,'p_analisis_id','parser.py',532),
  ('analisis_id -> MIN','analisis_id',1,'p_analisis_id','parser.py',533),
  ('analisis_id -> MAX','analisis_id',1,'p_analisis_id','parser.py',534),
  ('analisis_id -> MEDIAN','analisis_id',1,'p_analisis_id','parser.py',535),
  ('analisis_id -> SIZE','analisis_id',1,'p_analisis_id','parser.py',536),
  ('llamada_clasificador -> clasificador_id ( ID , ID )','llamada_clasificador',6,'p_llamada_clasificador','parser.py',543),
  ('llamada_kmeans -> K_MEANS ( constant_i , ID )','llamada_kmeans',6,'p_llamada_kmeans','parser.py',577),
  ('clasificador_id -> LOGISTIC_REGRESSION','clasificador_id',1,'p_clasificador_id','parser.py',607),
  ('clasificador_id -> LINEAR_REGRESSION','clasificador_id',1,'p_clasificador_id','parser.py',608),
  ('open -> OPEN_FILE ( STRING , ID )','open',6,'p_open','parser.py',616),
  ('expresion -> not expr','expresion',2,'p_expresion','parser.py',637),
  ('expresion -> not expr and expresion','expresion',4,'p_expresion','parser.py',638),
  ('expresion -> not expr or expresion','expresion',4,'p_expresion','parser.py',639),
  ('not -> NOT','not',1,'p_not','parser.py',649),
  ('not -> empty','not',1,'p_not','parser.py',650),
  ('and -> AND','and',1,'p_and','parser.py',658),
  ('or -> OR','or',1,'p_or','parser.py',665),
  ('simp_oper -> SUM','simp_oper',1,'p_simp_oper','parser.py',672),
  ('simp_oper -> MINUS','simp_oper',1,'p_simp_oper','parser.py',673),
  ('comp_oper -> COMPOPER','comp_oper',1,'p_comp_oper','parser.py',681),
  ('relop -> RELOP','relop',1,'p_relop','parser.py',689),
  ('lpar -> (','lpar',1,'p_lpar','parser.py',697),
  ('rpar -> )','rpar',1,'p_rpar','parser.py',704),
  ('expr -> exp','expr',1,'p_expr','parser.py',711),
  ('expr -> exp relop exp','expr',3,'p_expr','parser.py',712),
  ('exp -> termino','exp',1,'p_exp','parser.py',725),
  ('exp -> termino simp_oper exp','exp',3,'p_exp','parser.py',726),
  ('termino -> factor comp_oper termino','termino',3,'p_termino','parser.py',740),
  ('termino -> factor','termino',1,'p_termino','parser.py',741),
  ('factor -> lpar expresion rpar','factor',3,'p_factor','parser.py',755),
  ('factor -> valor','factor',1,'p_factor','parser.py',756),
  ('minus -> MINUS','minus',1,'p_minus','parser.py',770),
  ('minus -> empty','minus',1,'p_minus','parser.py',771),
  ('constant_i -> minus INT','constant_i',2,'p_constant_i','parser.py',777),
  ('constant_f -> minus FLOAT','constant_f',2,'p_constant_f','parser.py',790),
  ('constant_b -> TRUE','constant_b',1,'p_constant_b','parser.py',803),
  ('constant_b -> FALSE','constant_b',1,'p_constant_b','parser.py',804),
  ('constant_s -> STRING','constant_s',1,'p_constant_s','parser.py',813),
  ('llamada_type -> TYPE ( ID )','llamada_type',4,'p_llamada_type','parser.py',822),
  ('valor -> llamada','valor',1,'p_valor','parser.py',837),
  ('valor -> llamada_analisis','valor',1,'p_valor','parser.py',838),
  ('valor -> llamada_clasificador','valor',1,'p_valor','parser.py',839),
  ('valor -> llamada_kmeans','valor',1,'p_valor','parser.py',840),
  ('valor -> llamada_type','valor',1,'p_valor','parser.py',841),
  ('valor -> id','valor',1,'p_valor','parser.py',842),
  ('valor -> arreglo','valor',1,'p_valor','parser.py',843),
  ('valor -> in','valor',1,'p_valor','parser.py',844),
  ('valor -> constant_b','valor',1,'p_valor','parser.py',845),
  ('valor -> constant_i','valor',1,'p_valor','parser.py',846),
  ('valor -> constant_f','valor',1,'p_valor','parser.py',847),
  ('valor -> constant_s','valor',1,'p_valor','parser.py',848),
  ('id -> ID indice','id',2,'p_id','parser.py',855),
  ('indice -> lbracket expresion rbracket','indice',3,'p_indice','parser.py',903),
  ('indice -> lbracket expresion rbracket lbracket expresion rbracket','indice',6,'p_indice','parser.py',904),
  ('indice -> empty','indice',1,'p_indice','parser.py',905),
  ('lbracket -> [','lbracket',1,'p_lbracket','parser.py',914),
  ('rbracket -> ]','rbracket',1,'p_rbracket','parser.py',920),
  ('arreglo -> [ arregloD ]','arreglo',3,'p_arreglo','parser.py',926),
  ('arreglo -> arregloD','arreglo',1,'p_arreglo','parser.py',927),
  ('arregloD -> [ arregloE ] , arregloD','arregloD',5,'p_arregloD','parser.py',936),
  ('arregloD -> [ arregloE ]','arregloD',3,'p_arregloD','parser.py',937),
  ('arregloE -> expresion , arregloE','arregloE',3,'p_arregloE','parser.py',948),
  ('arregloE -> expresion','arregloE',1,'p_arregloE','parser.py',949),
  ('arregloE -> empty','arregloE',1,'p_arregloE','parser.py',950),
  ('funcion_type_id -> type ID','funcion_type_id',2,'p_funcion_type_id','parser.py',959),
  ('funcion_void_id -> void ID','funcion_void_id',2,'p_funcion_void_id','parser.py',974),
  ('funcion -> funcion_void','funcion',1,'p_funcion','parser.py',989),
  ('funcion -> funcion_type','funcion',1,'p_funcion','parser.py',990),
  ('funcion_void -> funcion_void_id ( params r_func_par bloque_void','funcion_void',5,'p_funcion_void','parser.py',996),
  ('funcion_type -> funcion_type_id ( params r_func_par bloque_return','funcion_type',5,'p_funcion_type','parser.py',1001),
  ('r_func_par -> )','r_func_par',1,'p_r_func_par','parser.py',1006),
  ('void -> VOID','void',1,'p_void','parser.py',1012),
  ('params -> type ID','params',2,'p_params','parser.py',1018),
  ('params -> type ID , params','params',4,'p_params','parser.py',1019),
  ('params -> empty','params',1,'p_params','parser.py',1020),
  ('typeA -> TYPE_BOOL','typeA',1,'p_typeA','parser.py',1043),
  ('typeA -> TYPE_FLOAT','typeA',1,'p_typeA','parser.py',1044),
  ('typeA -> TYPE_INT','typeA',1,'p_typeA','parser.py',1045),
  ('typeA -> TYPE_STRING','typeA',1,'p_typeA','parser.py',1046),
  ('type -> typeA','type',1,'p_type','parser.py',1052),
  ('type -> typeA [ INT ] [ INT ]','type',7,'p_type','parser.py',1053),
  ('type -> typeA [ INT ]','type',4,'p_type','parser.py',1054),
]
