
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND COMPOPER ELSE EQUAL FALSE FLOAT FOR GRAPH ID IF IN INT IS K_MEANS LINEAR_REGRESSION LOGISTIC_REGRESSION MAIN MAX MEAN MEDIAN MIN MINUS NOT OR OUT RANGE RELOP RETURN SIZE STD STRING SUM TRUE TYPE TYPE_BOOL TYPE_FLOAT TYPE_INT TYPE_STRING VAR VOID WHEN WHILE WITHempty :\n    program : program_d\n    program_d : declaracion program_d\n                 | program_f\n    program_f : funcion program_f\n                 | program_m\n    program_m : main\n    main_id : void MAIN\n    main : main_id '(' r_main_par bloque_void\n    r_main_par : ')'\n    bloque_void : '{' bloqueD bloqueE '}'\n    bloque_return : '{' bloqueD bloqueE return '}'\n    return : RETURN expresion ';'\n    bloqueD : declaracion bloqueD\n               | empty\n    bloqueE : estatuto bloqueE\n               | empty\n    bloque_simp : '{' bloqueE '}'\n    declaracion : type ID equal expresion ';'\n                    | type ID ';'\n    estatuto : asignacion\n                | condicion\n                | when\n                | in ';'\n                | out\n                | ciclo_w\n                | ciclo_f\n                | llamada ';'\n                | llamada_graph ';'\n    equal : EQUAL\n    asignacion : id equal expresion ';'\n    lpar_cond : '('\n    rpar_cond : ')'\n    else : ELSE\n    when_id : ID\n    when : WHEN when_id '{' whencase '}'\n    when_is : IS valor\n    case : when_is bloque_simp\n    whencase : case whencase\n                 | empty\n    condicion : IF lpar_cond expresion rpar_cond bloque_simp\n                 | IF lpar_cond expresion rpar_cond bloque_simp else bloque_simp\n     in : IN '(' ')'\n    out : OUT '(' outD ')' ';'\n    outD : expresion\n            | expresion ',' outD\n            | empty\n    for : FOR ID WITH rango\n    while_keyword : WHILE\n    while : while_keyword '(' expresion ')'\n    \n    ciclo_w : while bloque_simp\n\n    ciclo_f : for bloque_simp\n    rango : RANGE '(' expresion ',' expresion ')'\n    llamada : llamada_id lpar llamadaD rpar\n    llamada_id : ID\n    expresionL : expresion\n    \n    llamadaD : expresionL ',' llamadaD\n                | expresionL\n                | empty\n    llamada_graph : GRAPH '(' ID ',' ID ',' constant_s ')'\n    llamada_analisis : analisis_id '(' ID ')'\n    \n    analisis_id : MEAN\n                   | STD\n                   | VAR\n                   | MIN\n                   | MAX\n                   | MEDIAN\n                   | SIZE\n    llamada_clasificador : clasificador_id '(' ID ',' ID ')'\n    llamada_kmeans : K_MEANS '(' constant_i ',' ID ')'\n    clasificador_id  : LOGISTIC_REGRESSION\n                        | LINEAR_REGRESSION\n    expresion : not expr\n                 | not expr and expresion\n                 | not expr or expresion\n    not : NOT\n           | empty\n    and : AND\n    or : OR\n    simp_oper : SUM\n                 | MINUS\n    comp_oper : COMPOPER\n    relop : RELOP\n    lpar : '('\n    rpar : ')'\n    expr : exp\n            | exp relop exp\n    exp : termino\n           | termino simp_oper exp\n    termino : factor comp_oper termino\n               | factor\n    factor : lpar expresion rpar\n              | valor\n    minus : MINUS\n             | empty\n    constant_i : minus INT\n    constant_f : minus FLOAT\n    constant_b : TRUE\n                  | FALSE\n    constant_s : STRING\n    llamada_type : TYPE '(' ID ')'\n    valor : llamada\n             | llamada_analisis\n             | llamada_clasificador\n             | llamada_kmeans\n             | llamada_type\n             | id\n             | arreglo\n             | in\n             | constant_b\n             | constant_i\n             | constant_f\n             | constant_s\n    id : ID indice\n    indice : lbracket expresion rbracket\n              | lbracket expresion rbracket lbracket expresion rbracket\n              | empty\n    lbracket : '['\n    rbracket : ']'\n    arreglo : '[' arregloD ']'\n               | arregloD\n    arregloD : '[' arregloE ']' ',' arregloD\n                | '[' arregloE ']'\n    arregloE : expresion ',' arregloE\n                | expresion\n                | empty\n    funcion_type_id : type ID\n    funcion_void_id : void ID\n    funcion : funcion_void\n               | funcion_type\n    funcion_void : funcion_void_id '(' params r_func_par bloque_void\n    funcion_type : funcion_type_id '(' params r_func_par bloque_return\n    r_func_par : ')'\n    void : VOID\n    params : type ID\n              | type ID ',' params\n              | empty\n    typeA : TYPE_BOOL\n            | TYPE_FLOAT\n            | TYPE_INT\n            | TYPE_STRING\n    type : typeA\n            | typeA '[' INT ']' '[' INT ']'\n            | typeA '[' INT ']'\n\n    "
    
_lr_action_items = {'TYPE_BOOL':([0,3,6,9,10,26,27,32,52,53,98,99,100,101,103,185,229,],[12,12,12,-129,-130,12,12,-20,12,-19,-131,12,-132,12,12,-11,-12,]),'TYPE_FLOAT':([0,3,6,9,10,26,27,32,52,53,98,99,100,101,103,185,229,],[13,13,13,-129,-130,13,13,-20,13,-19,-131,13,-132,13,13,-11,-12,]),'TYPE_INT':([0,3,6,9,10,26,27,32,52,53,98,99,100,101,103,185,229,],[14,14,14,-129,-130,14,14,-20,14,-19,-131,14,-132,14,14,-11,-12,]),'TYPE_STRING':([0,3,6,9,10,26,27,32,52,53,98,99,100,101,103,185,229,],[15,15,15,-129,-130,15,15,-20,15,-19,-131,15,-132,15,15,-11,-12,]),'VOID':([0,3,6,9,10,32,53,98,100,185,229,],[20,20,20,-129,-130,-20,-19,-131,-132,-11,-12,]),'$end':([1,2,4,7,11,21,23,51,185,],[0,-2,-4,-6,-7,-3,-5,-9,-11,]),'ID':([5,8,12,13,14,15,19,20,24,31,32,33,37,43,44,45,46,52,53,58,60,79,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,121,123,124,126,127,131,137,139,141,142,143,145,146,147,152,158,160,171,181,183,187,188,189,190,191,192,195,196,197,198,199,200,203,207,208,213,219,225,231,238,240,241,242,250,251,255,258,264,266,],[22,-142,-138,-139,-140,-141,29,-134,34,-1,-20,-30,49,75,-76,-77,-144,-1,-19,-1,-84,-1,-1,75,-1,-15,161,-1,-1,-78,-79,75,-83,75,-80,-81,75,-82,-1,173,-1,-118,175,178,-1,-77,75,75,-21,-22,-23,-25,-26,-27,194,201,-14,-77,-1,-143,-24,-28,-29,-1,-1,-32,-1,-51,75,-52,221,-1,-1,226,227,-1,-77,-1,-31,75,-1,-18,257,-41,-36,-44,-1,-42,-1,]),'[':([8,12,13,14,15,31,33,43,44,45,46,58,60,75,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,205,206,210,213,219,225,238,240,258,266,],[25,-138,-139,-140,-141,-1,-30,79,-76,-77,97,-1,-84,123,127,-1,-1,-78,-79,79,-83,79,-80,-81,79,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,123,-119,127,-1,-77,-1,79,-1,-1,-1,]),'(':([16,17,18,22,29,30,31,33,34,43,44,45,58,60,73,74,75,76,77,78,79,81,86,87,88,89,90,91,92,93,94,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,151,153,156,157,159,171,181,190,191,192,195,200,203,213,219,225,240,245,258,266,],[26,27,28,-127,-128,-8,-1,-30,-127,60,-76,-77,-1,-84,60,119,-55,124,125,126,-1,132,-62,-63,-64,-65,-66,-67,-68,-71,-72,-1,-1,-78,-79,60,-83,60,-80,-81,60,-82,-1,-1,-118,-1,-77,192,195,199,200,-49,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,-1,258,-1,-1,]),'MAIN':([19,20,],[30,-134,]),';':([22,42,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,144,148,149,161,162,163,164,165,166,167,168,179,180,182,202,204,205,206,209,214,228,230,239,247,248,259,267,],[32,53,-73,-86,-88,-91,-93,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-114,-117,-96,-97,187,188,189,32,-74,-75,-87,-89,-90,-92,-85,-120,-123,-43,-54,-61,-115,-119,-101,231,-122,249,255,-69,-70,-116,-60,]),'EQUAL':([22,75,120,122,150,161,205,206,259,],[33,-1,-114,-117,33,33,-115,-119,-116,]),'INT':([25,31,33,43,44,45,58,60,79,84,95,96,97,106,107,108,109,110,111,112,113,114,115,116,118,121,123,125,127,131,171,177,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[35,-1,-30,-1,-76,-77,-1,-84,-1,133,-94,-95,135,-1,-1,-78,-79,-1,-83,-1,-80,-81,-1,-82,-1,-1,-118,-1,-1,-77,-77,133,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,-1,-1,-1,-1,]),')':([26,27,28,36,38,39,49,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,99,117,118,120,122,132,133,134,136,162,163,164,165,166,167,168,169,170,171,172,173,178,179,180,182,195,202,203,204,205,206,209,215,217,218,219,222,224,226,227,228,240,247,248,256,259,265,268,],[-1,-1,41,48,-137,48,-135,-73,-86,-88,-91,-93,-84,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-1,168,-1,-114,-117,182,-96,-97,-136,-74,-75,-87,-89,-90,-92,-85,168,-58,-59,-56,204,209,-120,-123,-43,-1,-54,-1,-61,-115,-119,-101,233,239,-45,-47,243,-57,247,248,-122,-1,-69,-70,-46,-116,267,269,]),'NOT':([31,33,58,60,79,106,107,108,109,118,121,123,127,181,190,191,192,195,200,203,213,225,240,258,266,],[44,-30,44,-84,44,44,44,-78,-79,44,44,-118,44,44,44,44,-32,44,44,44,44,44,44,44,44,]),'K_MEANS':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,77,-76,-77,-1,-84,-1,-1,-1,-78,-79,77,-83,77,-80,-81,77,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,77,-1,-1,-1,]),'TYPE':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,78,-76,-77,-1,-84,-1,-1,-1,-78,-79,78,-83,78,-80,-81,78,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,78,-1,-1,-1,]),'IN':([31,32,33,43,44,45,52,53,58,60,79,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,137,139,141,142,143,145,146,147,160,171,181,187,188,189,190,191,192,195,196,197,198,200,203,213,219,225,231,238,240,241,250,251,255,258,264,266,],[-1,-20,-30,81,-76,-77,-1,-19,-1,-84,-1,-1,81,-1,-15,-1,-1,-78,-79,81,-83,81,-80,-81,81,-82,-1,-1,-118,-1,-77,81,81,-21,-22,-23,-25,-26,-27,-14,-77,-1,-24,-28,-29,-1,-1,-32,-1,-51,81,-52,-1,-1,-1,-77,-1,-31,81,-1,-18,-41,-36,-44,-1,-42,-1,]),'TRUE':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,82,-76,-77,-1,-84,-1,-1,-1,-78,-79,82,-83,82,-80,-81,82,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,82,-1,-1,-1,]),'FALSE':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,83,-76,-77,-1,-84,-1,-1,-1,-78,-79,83,-83,83,-80,-81,83,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,83,-1,-1,-1,]),'STRING':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,262,266,],[-1,-30,85,-76,-77,-1,-84,-1,-1,-1,-78,-79,85,-83,85,-80,-81,85,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,85,-1,-1,85,-1,]),'MEAN':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,86,-76,-77,-1,-84,-1,-1,-1,-78,-79,86,-83,86,-80,-81,86,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,86,-1,-1,-1,]),'STD':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,87,-76,-77,-1,-84,-1,-1,-1,-78,-79,87,-83,87,-80,-81,87,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,87,-1,-1,-1,]),'VAR':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,88,-76,-77,-1,-84,-1,-1,-1,-78,-79,88,-83,88,-80,-81,88,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,88,-1,-1,-1,]),'MIN':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,89,-76,-77,-1,-84,-1,-1,-1,-78,-79,89,-83,89,-80,-81,89,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,89,-1,-1,-1,]),'MAX':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,90,-76,-77,-1,-84,-1,-1,-1,-78,-79,90,-83,90,-80,-81,90,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,90,-1,-1,-1,]),'MEDIAN':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,91,-76,-77,-1,-84,-1,-1,-1,-78,-79,91,-83,91,-80,-81,91,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,91,-1,-1,-1,]),'SIZE':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,92,-76,-77,-1,-84,-1,-1,-1,-78,-79,92,-83,92,-80,-81,92,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,92,-1,-1,-1,]),'LOGISTIC_REGRESSION':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,93,-76,-77,-1,-84,-1,-1,-1,-78,-79,93,-83,93,-80,-81,93,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,93,-1,-1,-1,]),'LINEAR_REGRESSION':([31,33,43,44,45,58,60,79,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,94,-76,-77,-1,-84,-1,-1,-1,-78,-79,94,-83,94,-80,-81,94,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,94,-1,-1,-1,]),'MINUS':([31,33,43,44,45,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,79,80,82,83,85,106,107,108,109,110,111,112,113,114,115,116,118,120,121,122,123,125,127,131,133,134,166,167,168,171,179,180,181,182,190,191,192,195,200,202,203,204,205,206,209,213,219,225,228,238,240,247,248,258,259,266,],[-1,-30,95,-76,-77,114,-91,-1,-93,-84,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-1,-121,-98,-99,-100,-1,-1,-78,-79,95,-83,95,-80,-81,95,-82,-1,-114,-1,-117,-118,95,-1,-77,-96,-97,-90,-92,-85,-77,-120,-123,-1,-43,-1,-1,-32,-1,-1,-54,-1,-61,-115,-119,-101,-1,-77,-1,-122,95,-1,-69,-70,-1,-116,-1,]),'FLOAT':([31,33,43,44,45,58,60,79,84,95,96,106,107,108,109,110,111,112,113,114,115,116,118,121,123,127,131,171,181,190,191,192,195,200,203,213,219,225,238,240,258,266,],[-1,-30,-1,-76,-77,-1,-84,-1,134,-94,-95,-1,-1,-78,-79,-1,-83,-1,-80,-81,-1,-82,-1,-1,-118,-1,-77,-77,-1,-1,-1,-32,-1,-1,-1,-1,-77,-1,-1,-1,-1,-1,]),'IF':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,160,187,188,189,196,197,198,231,241,250,251,255,264,],[-20,-1,-19,-1,151,-1,-15,151,151,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-51,151,-52,-31,-18,-41,-36,-44,-42,]),'WHEN':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,160,187,188,189,196,197,198,231,241,250,251,255,264,],[-20,-1,-19,-1,152,-1,-15,152,152,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-51,152,-52,-31,-18,-41,-36,-44,-42,]),'OUT':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,160,187,188,189,196,197,198,231,241,250,251,255,264,],[-20,-1,-19,-1,153,-1,-15,153,153,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-51,153,-52,-31,-18,-41,-36,-44,-42,]),'GRAPH':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,160,187,188,189,196,197,198,231,241,250,251,255,264,],[-20,-1,-19,-1,156,-1,-15,156,156,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-51,156,-52,-31,-18,-41,-36,-44,-42,]),'FOR':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,160,187,188,189,196,197,198,231,241,250,251,255,264,],[-20,-1,-19,-1,158,-1,-15,158,158,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-51,158,-52,-31,-18,-41,-36,-44,-42,]),'WHILE':([32,52,53,101,102,103,104,137,139,141,142,143,145,146,147,160,187,188,189,196,197,198,231,241,250,251,255,264,],[-20,-1,-19,-1,159,-1,-15,159,159,-21,-22,-23,-25,-26,-27,-14,-24,-28,-29,-51,159,-52,-31,-18,-41,-36,-44,-42,]),'}':([32,52,53,102,103,104,138,139,140,141,142,143,145,146,147,160,186,187,188,189,196,197,198,212,216,220,231,234,235,236,241,249,250,251,252,253,255,264,],[-20,-1,-19,-1,-1,-15,185,-1,-17,-21,-22,-23,-25,-26,-27,-14,-16,-24,-28,-29,-51,-1,-52,229,-1,241,-31,251,-1,-40,-18,-13,-41,-36,-39,-38,-44,-42,]),'RETURN':([32,53,101,103,104,137,139,140,141,142,143,145,146,147,160,184,186,187,188,189,196,198,231,241,250,251,255,264,],[-20,-19,-1,-1,-15,-1,-1,-17,-21,-22,-23,-25,-26,-27,-14,213,-16,-24,-28,-29,-51,-52,-31,-18,-41,-36,-44,-42,]),']':([35,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,79,80,82,83,85,120,122,127,128,129,130,131,133,134,135,162,163,164,165,166,167,168,174,179,180,181,182,202,204,205,206,209,211,228,246,247,248,259,],[46,-73,-86,-88,-91,-93,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-1,-121,-98,-99,-100,-114,-117,-1,179,180,-125,-126,-96,-97,183,-74,-75,-87,-89,-90,-92,-85,206,-120,-123,-1,-43,-54,-61,-115,-119,-101,-124,-122,206,-69,-70,-116,]),'{':([40,41,47,48,50,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,154,155,168,179,180,182,193,194,202,204,205,206,209,228,232,233,237,243,244,247,248,254,259,260,261,269,],[52,-10,52,-133,101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-114,-117,-96,-97,197,197,-85,-120,-123,-43,216,-35,-54,-61,-115,-119,-101,-122,197,-33,197,-50,-48,-69,-70,-37,-116,197,-34,-53,]),',':([49,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,130,133,134,162,163,164,165,166,167,168,170,172,175,176,179,180,182,202,204,205,206,209,218,221,228,247,248,257,259,263,],[99,-73,-86,-88,-91,-93,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-114,-117,181,-96,-97,-74,-75,-87,-89,-90,-92,-85,203,-56,207,208,-120,210,-43,-54,-61,-115,-119,-101,240,242,-122,-69,-70,262,-116,266,]),'AND':([54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,164,165,166,167,168,179,180,182,202,204,205,206,209,228,247,248,259,],[108,-86,-88,-91,-93,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-114,-117,-96,-97,-87,-89,-90,-92,-85,-120,-123,-43,-54,-61,-115,-119,-101,-122,-69,-70,-116,]),'OR':([54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,164,165,166,167,168,179,180,182,202,204,205,206,209,228,247,248,259,],[109,-86,-88,-91,-93,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-114,-117,-96,-97,-87,-89,-90,-92,-85,-120,-123,-43,-54,-61,-115,-119,-101,-122,-69,-70,-116,]),'RELOP':([55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,165,166,167,168,179,180,182,202,204,205,206,209,228,247,248,259,],[111,-88,-91,-93,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-114,-117,-96,-97,-89,-90,-92,-85,-120,-123,-43,-54,-61,-115,-119,-101,-122,-69,-70,-116,]),'SUM':([56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,166,167,168,179,180,182,202,204,205,206,209,228,247,248,259,],[113,-91,-93,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-114,-117,-96,-97,-90,-92,-85,-120,-123,-43,-54,-61,-115,-119,-101,-122,-69,-70,-116,]),'COMPOPER':([57,59,61,62,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,120,122,133,134,167,168,179,180,182,202,204,205,206,209,228,247,248,259,],[116,-93,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-1,-121,-98,-99,-100,-114,-117,-96,-97,-92,-85,-120,-123,-43,-54,-61,-115,-119,-101,-122,-69,-70,-116,]),'WITH':([201,],[223,]),'IS':([216,235,241,253,],[238,238,-18,-38,]),'RANGE':([223,],[245,]),'ELSE':([241,250,],[-18,261,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_d':([0,3,],[2,21,]),'declaracion':([0,3,52,101,103,],[3,3,103,103,103,]),'program_f':([0,3,6,],[4,4,23,]),'type':([0,3,6,26,27,52,99,101,103,],[5,5,24,37,37,105,37,105,105,]),'funcion':([0,3,6,],[6,6,6,]),'program_m':([0,3,6,],[7,7,7,]),'typeA':([0,3,6,26,27,52,99,101,103,],[8,8,8,8,8,8,8,8,8,]),'funcion_void':([0,3,6,],[9,9,9,]),'funcion_type':([0,3,6,],[10,10,10,]),'main':([0,3,6,],[11,11,11,]),'funcion_void_id':([0,3,6,],[16,16,16,]),'funcion_type_id':([0,3,6,],[17,17,17,]),'main_id':([0,3,6,],[18,18,18,]),'void':([0,3,6,],[19,19,19,]),'equal':([22,150,161,],[31,190,31,]),'params':([26,27,99,],[36,39,136,]),'empty':([26,27,31,43,52,58,75,79,99,101,102,103,106,107,110,112,115,118,121,125,127,137,139,181,190,191,195,197,200,203,213,216,225,235,238,240,258,266,],[38,38,45,96,104,45,122,131,38,104,140,104,45,45,96,96,96,171,45,96,131,140,140,131,45,45,219,140,45,171,45,236,45,236,96,219,45,45,]),'r_main_par':([28,],[40,]),'expresion':([31,58,79,106,107,118,121,127,181,190,191,195,200,203,213,225,240,258,266,],[42,117,130,162,163,172,174,130,130,214,215,218,222,172,230,246,218,263,268,]),'not':([31,58,79,106,107,118,121,127,181,190,191,195,200,203,213,225,240,258,266,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'r_func_par':([36,39,],[47,50,]),'bloque_void':([40,47,],[51,98,]),'expr':([43,],[54,]),'exp':([43,110,112,],[55,164,165,]),'termino':([43,110,112,115,],[56,56,56,166,]),'factor':([43,110,112,115,],[57,57,57,57,]),'lpar':([43,73,110,112,115,],[58,118,58,58,58,]),'valor':([43,110,112,115,238,],[59,59,59,59,254,]),'llamada':([43,102,110,112,115,137,139,197,238,],[61,148,61,61,61,148,148,148,61,]),'llamada_analisis':([43,110,112,115,238,],[62,62,62,62,62,]),'llamada_clasificador':([43,110,112,115,238,],[63,63,63,63,63,]),'llamada_kmeans':([43,110,112,115,238,],[64,64,64,64,64,]),'llamada_type':([43,110,112,115,238,],[65,65,65,65,65,]),'id':([43,102,110,112,115,137,139,197,238,],[66,150,66,66,66,150,150,150,66,]),'arreglo':([43,110,112,115,238,],[67,67,67,67,67,]),'in':([43,102,110,112,115,137,139,197,238,],[68,144,68,68,68,144,144,144,68,]),'constant_b':([43,110,112,115,238,],[69,69,69,69,69,]),'constant_i':([43,110,112,115,125,238,],[70,70,70,70,176,70,]),'constant_f':([43,110,112,115,238,],[71,71,71,71,71,]),'constant_s':([43,110,112,115,238,262,],[72,72,72,72,72,265,]),'llamada_id':([43,102,110,112,115,137,139,197,238,],[73,73,73,73,73,73,73,73,73,]),'analisis_id':([43,110,112,115,238,],[74,74,74,74,74,]),'clasificador_id':([43,110,112,115,238,],[76,76,76,76,76,]),'arregloD':([43,79,110,112,115,210,238,],[80,128,80,80,80,228,80,]),'minus':([43,110,112,115,125,238,],[84,84,84,84,177,84,]),'bloque_return':([50,],[100,]),'bloqueD':([52,101,103,],[102,137,160,]),'and':([54,],[106,]),'or':([54,],[107,]),'relop':([55,],[110,]),'simp_oper':([56,],[112,]),'comp_oper':([57,],[115,]),'indice':([75,],[120,]),'lbracket':([75,205,],[121,225,]),'arregloE':([79,127,181,],[129,129,211,]),'bloqueE':([102,137,139,197,],[138,184,186,220,]),'estatuto':([102,137,139,197,],[139,139,139,139,]),'asignacion':([102,137,139,197,],[141,141,141,141,]),'condicion':([102,137,139,197,],[142,142,142,142,]),'when':([102,137,139,197,],[143,143,143,143,]),'out':([102,137,139,197,],[145,145,145,145,]),'ciclo_w':([102,137,139,197,],[146,146,146,146,]),'ciclo_f':([102,137,139,197,],[147,147,147,147,]),'llamada_graph':([102,137,139,197,],[149,149,149,149,]),'while':([102,137,139,197,],[154,154,154,154,]),'for':([102,137,139,197,],[155,155,155,155,]),'while_keyword':([102,137,139,197,],[157,157,157,157,]),'rpar':([117,169,],[167,202,]),'llamadaD':([118,203,],[169,224,]),'expresionL':([118,203,],[170,170,]),'lpar_cond':([151,],[191,]),'when_id':([152,],[193,]),'bloque_simp':([154,155,232,237,260,],[196,198,250,253,264,]),'rbracket':([174,246,],[205,259,]),'return':([184,],[212,]),'outD':([195,240,],[217,256,]),'rpar_cond':([215,],[232,]),'whencase':([216,235,],[234,252,]),'case':([216,235,],[235,235,]),'when_is':([216,235,],[237,237,]),'rango':([223,],[244,]),'else':([250,],[260,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',20),
  ('program -> program_d','program',1,'p_program','parser.py',33),
  ('program_d -> declaracion program_d','program_d',2,'p_program_d','parser.py',39),
  ('program_d -> program_f','program_d',1,'p_program_d','parser.py',40),
  ('program_f -> funcion program_f','program_f',2,'p_program_f','parser.py',45),
  ('program_f -> program_m','program_f',1,'p_program_f','parser.py',46),
  ('program_m -> main','program_m',1,'p_program_m','parser.py',51),
  ('main_id -> void MAIN','main_id',2,'p_main_id','parser.py',56),
  ('main -> main_id ( r_main_par bloque_void','main',4,'p_main','parser.py',71),
  ('r_main_par -> )','r_main_par',1,'p_r_main_par','parser.py',87),
  ('bloque_void -> { bloqueD bloqueE }','bloque_void',4,'p_bloque_void','parser.py',93),
  ('bloque_return -> { bloqueD bloqueE return }','bloque_return',5,'p_bloque_return','parser.py',99),
  ('return -> RETURN expresion ;','return',3,'p_return','parser.py',105),
  ('bloqueD -> declaracion bloqueD','bloqueD',2,'p_bloqueD','parser.py',111),
  ('bloqueD -> empty','bloqueD',1,'p_bloqueD','parser.py',112),
  ('bloqueE -> estatuto bloqueE','bloqueE',2,'p_bloqueE','parser.py',117),
  ('bloqueE -> empty','bloqueE',1,'p_bloqueE','parser.py',118),
  ('bloque_simp -> { bloqueE }','bloque_simp',3,'p_bloque_simp','parser.py',123),
  ('declaracion -> type ID equal expresion ;','declaracion',5,'p_declaracion','parser.py',128),
  ('declaracion -> type ID ;','declaracion',3,'p_declaracion','parser.py',129),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','parser.py',202),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','parser.py',203),
  ('estatuto -> when','estatuto',1,'p_estatuto','parser.py',204),
  ('estatuto -> in ;','estatuto',2,'p_estatuto','parser.py',205),
  ('estatuto -> out','estatuto',1,'p_estatuto','parser.py',206),
  ('estatuto -> ciclo_w','estatuto',1,'p_estatuto','parser.py',207),
  ('estatuto -> ciclo_f','estatuto',1,'p_estatuto','parser.py',208),
  ('estatuto -> llamada ;','estatuto',2,'p_estatuto','parser.py',209),
  ('estatuto -> llamada_graph ;','estatuto',2,'p_estatuto','parser.py',210),
  ('equal -> EQUAL','equal',1,'p_equal','parser.py',215),
  ('asignacion -> id equal expresion ;','asignacion',4,'p_asignacion','parser.py',221),
  ('lpar_cond -> (','lpar_cond',1,'p_lpar_cond','parser.py',238),
  ('rpar_cond -> )','rpar_cond',1,'p_rpar_cond','parser.py',243),
  ('else -> ELSE','else',1,'p_else','parser.py',249),
  ('when_id -> ID','when_id',1,'p_when_id','parser.py',255),
  ('when -> WHEN when_id { whencase }','when',5,'p_when','parser.py',267),
  ('when_is -> IS valor','when_is',2,'p_when_is','parser.py',278),
  ('case -> when_is bloque_simp','case',2,'p_case','parser.py',288),
  ('whencase -> case whencase','whencase',2,'p_whencase','parser.py',295),
  ('whencase -> empty','whencase',1,'p_whencase','parser.py',296),
  ('condicion -> IF lpar_cond expresion rpar_cond bloque_simp','condicion',5,'p_condicion','parser.py',301),
  ('condicion -> IF lpar_cond expresion rpar_cond bloque_simp else bloque_simp','condicion',7,'p_condicion','parser.py',302),
  ('in -> IN ( )','in',3,'p_in','parser.py',309),
  ('out -> OUT ( outD ) ;','out',5,'p_out','parser.py',316),
  ('outD -> expresion','outD',1,'p_outD','parser.py',321),
  ('outD -> expresion , outD','outD',3,'p_outD','parser.py',322),
  ('outD -> empty','outD',1,'p_outD','parser.py',323),
  ('for -> FOR ID WITH rango','for',4,'p_for','parser.py',330),
  ('while_keyword -> WHILE','while_keyword',1,'p_while_keyword','parser.py',372),
  ('while -> while_keyword ( expresion )','while',4,'p_while','parser.py',380),
  ('ciclo_w -> while bloque_simp','ciclo_w',2,'p_ciclo_w','parser.py',388),
  ('ciclo_f -> for bloque_simp','ciclo_f',2,'p_ciclo_f','parser.py',404),
  ('rango -> RANGE ( expresion , expresion )','rango',6,'p_rango','parser.py',442),
  ('llamada -> llamada_id lpar llamadaD rpar','llamada',4,'p_llamada','parser.py',450),
  ('llamada_id -> ID','llamada_id',1,'p_llamada_id','parser.py',467),
  ('expresionL -> expresion','expresionL',1,'p_expresionL','parser.py',476),
  ('llamadaD -> expresionL , llamadaD','llamadaD',3,'p_llamadaD','parser.py',483),
  ('llamadaD -> expresionL','llamadaD',1,'p_llamadaD','parser.py',484),
  ('llamadaD -> empty','llamadaD',1,'p_llamadaD','parser.py',485),
  ('llamada_graph -> GRAPH ( ID , ID , constant_s )','llamada_graph',8,'p_llamada_graph','parser.py',490),
  ('llamada_analisis -> analisis_id ( ID )','llamada_analisis',4,'p_llamada_analisis','parser.py',517),
  ('analisis_id -> MEAN','analisis_id',1,'p_analisis_id','parser.py',535),
  ('analisis_id -> STD','analisis_id',1,'p_analisis_id','parser.py',536),
  ('analisis_id -> VAR','analisis_id',1,'p_analisis_id','parser.py',537),
  ('analisis_id -> MIN','analisis_id',1,'p_analisis_id','parser.py',538),
  ('analisis_id -> MAX','analisis_id',1,'p_analisis_id','parser.py',539),
  ('analisis_id -> MEDIAN','analisis_id',1,'p_analisis_id','parser.py',540),
  ('analisis_id -> SIZE','analisis_id',1,'p_analisis_id','parser.py',541),
  ('llamada_clasificador -> clasificador_id ( ID , ID )','llamada_clasificador',6,'p_llamada_clasificador','parser.py',548),
  ('llamada_kmeans -> K_MEANS ( constant_i , ID )','llamada_kmeans',6,'p_llamada_kmeans','parser.py',582),
  ('clasificador_id -> LOGISTIC_REGRESSION','clasificador_id',1,'p_clasificador_id','parser.py',611),
  ('clasificador_id -> LINEAR_REGRESSION','clasificador_id',1,'p_clasificador_id','parser.py',612),
  ('expresion -> not expr','expresion',2,'p_expresion','parser.py',620),
  ('expresion -> not expr and expresion','expresion',4,'p_expresion','parser.py',621),
  ('expresion -> not expr or expresion','expresion',4,'p_expresion','parser.py',622),
  ('not -> NOT','not',1,'p_not','parser.py',632),
  ('not -> empty','not',1,'p_not','parser.py',633),
  ('and -> AND','and',1,'p_and','parser.py',641),
  ('or -> OR','or',1,'p_or','parser.py',648),
  ('simp_oper -> SUM','simp_oper',1,'p_simp_oper','parser.py',655),
  ('simp_oper -> MINUS','simp_oper',1,'p_simp_oper','parser.py',656),
  ('comp_oper -> COMPOPER','comp_oper',1,'p_comp_oper','parser.py',664),
  ('relop -> RELOP','relop',1,'p_relop','parser.py',672),
  ('lpar -> (','lpar',1,'p_lpar','parser.py',680),
  ('rpar -> )','rpar',1,'p_rpar','parser.py',687),
  ('expr -> exp','expr',1,'p_expr','parser.py',694),
  ('expr -> exp relop exp','expr',3,'p_expr','parser.py',695),
  ('exp -> termino','exp',1,'p_exp','parser.py',708),
  ('exp -> termino simp_oper exp','exp',3,'p_exp','parser.py',709),
  ('termino -> factor comp_oper termino','termino',3,'p_termino','parser.py',723),
  ('termino -> factor','termino',1,'p_termino','parser.py',724),
  ('factor -> lpar expresion rpar','factor',3,'p_factor','parser.py',738),
  ('factor -> valor','factor',1,'p_factor','parser.py',739),
  ('minus -> MINUS','minus',1,'p_minus','parser.py',753),
  ('minus -> empty','minus',1,'p_minus','parser.py',754),
  ('constant_i -> minus INT','constant_i',2,'p_constant_i','parser.py',760),
  ('constant_f -> minus FLOAT','constant_f',2,'p_constant_f','parser.py',773),
  ('constant_b -> TRUE','constant_b',1,'p_constant_b','parser.py',786),
  ('constant_b -> FALSE','constant_b',1,'p_constant_b','parser.py',787),
  ('constant_s -> STRING','constant_s',1,'p_constant_s','parser.py',796),
  ('llamada_type -> TYPE ( ID )','llamada_type',4,'p_llamada_type','parser.py',805),
  ('valor -> llamada','valor',1,'p_valor','parser.py',820),
  ('valor -> llamada_analisis','valor',1,'p_valor','parser.py',821),
  ('valor -> llamada_clasificador','valor',1,'p_valor','parser.py',822),
  ('valor -> llamada_kmeans','valor',1,'p_valor','parser.py',823),
  ('valor -> llamada_type','valor',1,'p_valor','parser.py',824),
  ('valor -> id','valor',1,'p_valor','parser.py',825),
  ('valor -> arreglo','valor',1,'p_valor','parser.py',826),
  ('valor -> in','valor',1,'p_valor','parser.py',827),
  ('valor -> constant_b','valor',1,'p_valor','parser.py',828),
  ('valor -> constant_i','valor',1,'p_valor','parser.py',829),
  ('valor -> constant_f','valor',1,'p_valor','parser.py',830),
  ('valor -> constant_s','valor',1,'p_valor','parser.py',831),
  ('id -> ID indice','id',2,'p_id','parser.py',838),
  ('indice -> lbracket expresion rbracket','indice',3,'p_indice','parser.py',886),
  ('indice -> lbracket expresion rbracket lbracket expresion rbracket','indice',6,'p_indice','parser.py',887),
  ('indice -> empty','indice',1,'p_indice','parser.py',888),
  ('lbracket -> [','lbracket',1,'p_lbracket','parser.py',897),
  ('rbracket -> ]','rbracket',1,'p_rbracket','parser.py',903),
  ('arreglo -> [ arregloD ]','arreglo',3,'p_arreglo','parser.py',909),
  ('arreglo -> arregloD','arreglo',1,'p_arreglo','parser.py',910),
  ('arregloD -> [ arregloE ] , arregloD','arregloD',5,'p_arregloD','parser.py',919),
  ('arregloD -> [ arregloE ]','arregloD',3,'p_arregloD','parser.py',920),
  ('arregloE -> expresion , arregloE','arregloE',3,'p_arregloE','parser.py',931),
  ('arregloE -> expresion','arregloE',1,'p_arregloE','parser.py',932),
  ('arregloE -> empty','arregloE',1,'p_arregloE','parser.py',933),
  ('funcion_type_id -> type ID','funcion_type_id',2,'p_funcion_type_id','parser.py',942),
  ('funcion_void_id -> void ID','funcion_void_id',2,'p_funcion_void_id','parser.py',957),
  ('funcion -> funcion_void','funcion',1,'p_funcion','parser.py',972),
  ('funcion -> funcion_type','funcion',1,'p_funcion','parser.py',973),
  ('funcion_void -> funcion_void_id ( params r_func_par bloque_void','funcion_void',5,'p_funcion_void','parser.py',979),
  ('funcion_type -> funcion_type_id ( params r_func_par bloque_return','funcion_type',5,'p_funcion_type','parser.py',984),
  ('r_func_par -> )','r_func_par',1,'p_r_func_par','parser.py',989),
  ('void -> VOID','void',1,'p_void','parser.py',995),
  ('params -> type ID','params',2,'p_params','parser.py',1001),
  ('params -> type ID , params','params',4,'p_params','parser.py',1002),
  ('params -> empty','params',1,'p_params','parser.py',1003),
  ('typeA -> TYPE_BOOL','typeA',1,'p_typeA','parser.py',1026),
  ('typeA -> TYPE_FLOAT','typeA',1,'p_typeA','parser.py',1027),
  ('typeA -> TYPE_INT','typeA',1,'p_typeA','parser.py',1028),
  ('typeA -> TYPE_STRING','typeA',1,'p_typeA','parser.py',1029),
  ('type -> typeA','type',1,'p_type','parser.py',1035),
  ('type -> typeA [ INT ] [ INT ]','type',7,'p_type','parser.py',1036),
  ('type -> typeA [ INT ]','type',4,'p_type','parser.py',1037),
]
