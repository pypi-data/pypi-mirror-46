.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.pubsub.utils.notification

.. highlight:: python



.. _wx.lib.pubsub.utils.notification.NotifyByPubsubMessage:

==========================================================================================================================================
|phoenix_title|  **wx.lib.pubsub.utils.notification.NotifyByPubsubMessage**
==========================================================================================================================================

Handle pubsub notification messages by generating
messages of a 'pubsub.' subtopic. Also provides
an example of how to create a notification handler.  

Use it by calling::

    import pubsub.utils
    pubsub.utils.useNotifyByPubsubMessage()
    ...
    pub.setNotificationFlags(...) # optional
    
E.g. whenever a listener is unsubscribed, a 'pubsub.unsubscribe'
message is generated. If you have subscribed a listener of 
this topic, your listener will be notified of what listener 
unsubscribed from what topic. 



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>NotifyByPubsubMessage</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.pubsub.utils.notification.NotifyByPubsubMessage_inheritance.png" alt="Inheritance diagram of NotifyByPubsubMessage" usemap="#dummy" class="inheritance"/></center>
   </div>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.pubsub.core.notificationmgr.INotificationHandler.html" title="wx.lib.pubsub.core.notificationmgr.INotificationHandler" alt="" coords="7,5,373,35"/> <area shape="rect" id="node2" href="wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.html" title="wx.lib.pubsub.utils.notification.NotifyByPubsubMessage" alt="" coords="5,83,376,112"/> </map> 
   </p>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.pubsub.core.notificationmgr.INotificationHandler`

|


|method_summary| Methods Summary
================================

======================================================================================== ================================================================================
:meth:`~wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.__init__`                 
:meth:`~wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.createNotificationTopics` Create the notification topics. The root of the topics created
:meth:`~wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.notifyDeadListener`       
:meth:`~wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.notifyDelTopic`           
:meth:`~wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.notifyNewTopic`           
:meth:`~wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.notifySend`               Stage must be 'pre' or 'post'. Note that any pubsub sendMessage
:meth:`~wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.notifySubscribe`          
:meth:`~wx.lib.pubsub.utils.notification.NotifyByPubsubMessage.notifyUnsubscribe`        
======================================================================================== ================================================================================


|


|api| Class API
===============


.. class:: NotifyByPubsubMessage(INotificationHandler)

   Handle pubsub notification messages by generating
   messages of a 'pubsub.' subtopic. Also provides
   an example of how to create a notification handler.  
   
   Use it by calling::
   
       import pubsub.utils
       pubsub.utils.useNotifyByPubsubMessage()
       ...
       pub.setNotificationFlags(...) # optional
       
   E.g. whenever a listener is unsubscribed, a 'pubsub.unsubscribe'
   message is generated. If you have subscribed a listener of 
   this topic, your listener will be notified of what listener 
   unsubscribed from what topic. 

   .. method:: __init__(self, topicMgr=None)


   .. method:: createNotificationTopics(self, topicMgr)

      Create the notification topics. The root of the topics created
      is self.topicRoot. The topicMgr is (usually) pub.topicMgr.


   .. method:: notifyDeadListener(self, pubListener, topicObj)


   .. method:: notifyDelTopic(self, topicName)


   .. method:: notifyNewTopic(self, topicObj, desc, required, argsDocs)


   .. method:: notifySend(self, stage, topicObj, pubListener=None)

      Stage must be 'pre' or 'post'. Note that any pubsub sendMessage
      operation resulting from this notification (which sends a message; 
      listener could handle by sending another message!) will NOT themselves
      lead to a send notification. 


   .. method:: notifySubscribe(self, pubListener, topicObj, newSub)


   .. method:: notifyUnsubscribe(self, pubListener, topicObj)


