.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.dialogs

.. highlight:: python



.. _wx.lib.dialogs.MultiMessageDialog:

==========================================================================================================================================
|phoenix_title|  **wx.lib.dialogs.MultiMessageDialog**
==========================================================================================================================================

A dialog like :class:`wx.MessageDialog`, but with an optional 2nd message string
that is shown in a scrolled window, and also allows passing in the icon to
be shown instead of the stock error, question, etc. icons. The btnLabels
can be used if you'd like to change the stock labels on the buttons, it's
a dictionary mapping stock IDs to label strings.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>MultiMessageDialog</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.dialogs.MultiMessageDialog_inheritance.png" alt="Inheritance diagram of MultiMessageDialog" usemap="#dummy" class="inheritance"/></center>
   </div>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="67,83,177,112"/> <area shape="rect" id="node5" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="62,160,183,189"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="24,5,105,35"/> <area shape="rect" id="node3" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="131,5,232,35"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window" alt="" coords="78,237,167,267"/> <area shape="rect" id="node9" href="wx.NonOwnedWindow.html" title="wx.NonOwnedWindow" alt="" coords="43,315,201,344"/> <area shape="rect" id="node6" href="wx.lib.dialogs.MultiMessageDialog.html" title="wx.lib.dialogs.MultiMessageDialog" alt="" coords="5,547,240,576"/> <area shape="rect" id="node7" href="wx.Dialog.html" title="wx.Dialog" alt="" coords="81,469,163,499"/> <area shape="rect" id="node8" href="wx.TopLevelWindow.html" title="wx.TopLevelWindow" alt="" coords="51,392,193,421"/> </map> 
   </p>

|


|super_classes| Known Superclasses
==================================

:class:`wx.Dialog`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.dialogs.MultiMessageDialog.__init__`                              
:meth:`~wx.lib.dialogs.MultiMessageDialog.OnButton`                              
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: MultiMessageDialog(wx.Dialog)

   A dialog like :class:`wx.MessageDialog`, but with an optional 2nd message string
   that is shown in a scrolled window, and also allows passing in the icon to
   be shown instead of the stock error, question, etc. icons. The btnLabels
   can be used if you'd like to change the stock labels on the buttons, it's
   a dictionary mapping stock IDs to label strings.

   .. method:: __init__(self, parent, message, caption = "Message Box", msg2="", style = wx.OK | wx.CANCEL, pos = wx.DefaultPosition, icon=None, btnLabels=None)


   .. method:: OnButton(self, evt)


