(dp1
S'wx.GetAccelFromString'
p2
S''
sS'wx.DisplaySizeMM'
p3
VReturns the display size in millimeters.
p4
sS'wx.AutoBufferedPaintDCFactory'
p5
VCheck if the window is natively double buffered and will return a :ref:`wx.PaintDC`  if it is, a :ref:`wx.BufferedPaintDC`  otherwise.
p6
sS'wx.IsDragResultOk'
p7
S'Returns ``True`` if res indicates that something was done during a DnD operation, i.e.'
p8
sS'wx.LoadFileSelector'
p9
VAsk for filename to load.
p10
sS'wx.ColourDisplay'
p11
S'Returns ``True`` if the display is colour, ``False`` otherwise.'
p12
sS'wx.FileSelectorEx'
p13
VAn extended version of FileSelector.
p14
sS'wx.GetTranslation'
p15
VThis function returns the translation of `string`  in the current  ``locale()`` .
p16
sS'wx.GetUserName'
p17
S'This function returns the full user name (something like "Mr. John Smith").'
p18
sS'wx.IsPlatform64Bit'
p19
S'Returns ``True`` if the operating system the program is running under is 64 bit.'
p20
sS'wx.adv.CreateFileTipProvider'
p21
S'This function creates a :ref:`wx.adv.TipProvider`  which may be used with :ref:`wx.adv.ShowTip`.'
p22
sS'wx.GetTopLevelWindows'
p23
S"Returns a list-like object of the the application's top-level windows, (frames,dialogs, etc.)"
p24
sS'wx.HandleFatalExceptions'
p25
S'If `doIt`  is ``True``, the fatal exceptions (also known as general protection faults under Windows or segmentation violations in the Unix world) will be caught and passed to :meth:`wx.App.OnFatalException` .'
p26
sS'wx.adv.GenericAboutBox'
p27
VThis function does the same thing as :ref:`wx.adv.AboutBox`  except that it always uses the generic wxWidgets version of the dialog instead of the native one.
p28
sS'wx.DateTimeFromJDN'
p29
S'Compatibility wrapper for :meth:`DateTime.FromJDN`'
p30
sS'wx.FindWindowById'
p31
S'FindWindowById(id, parent=None) . Window'
p32
sS'wx.GetApp'
p33
S'Returns the current application object.'
p34
sS'wx.GetKeyState'
p35
VFor normal keys, returns ``True`` if the specified key is currently down.
p36
sS'wx.LaunchDefaultBrowser'
p37
S"Opens the `url`  in user's default browser."
p38
sS'wx.GetFullHostName'
p39
S'Returns the ``FQDN`` (fully qualified domain host name) or an empty string on error.'
p40
sS'wx.StripMenuCodes'
p41
VStrips any menu codes from `str`  and returns the result.
p42
sS'wx.InfoMessageBox'
p43
VShows a message box with the information about the wxWidgets build used, including its version, most important build parameters and the version of the underlying GUI toolkit.
p44
sS'wx.GetClientDisplayRect'
p45
VReturns the dimensions of the work area on the display.
p46
sS'wx.SysErrorMsg'
p47
S'Returns the error message corresponding to the given system error code.'
p48
sS'wx.Now'
p49
S'Returns a string representing the current date and time.'
p50
sS'wx.LogStatus'
p51
S'Messages logged by this function will appear in the statusbar of the `frame`  or of the top level application window by default (i.e.'
p52
sS'wx.Abort'
p53
S'Exits the program immediately.'
p54
sS'wx.version'
p55
S'Returns a string containing version and port info'
p56
sS'wx.propgrid.RegisterEditor'
p57
S'Use PropertyGrid.DoRegisterEditor instead'
p58
sS'wx.LaunchDefaultApplication'
p59
S'Opens the `document`  in the application associated with the files of this type.'
p60
sS'wx.GetLocale'
p61
S'Get the current locale object (note that it may be ``None``!)'
p62
sS'wx.adv.AboutBox'
p63
VThis function shows the standard about dialog containing the information specified in `info`.
p64
sS'wx.DisplayDepth'
p65
S'Returns the depth of the display (a value of 1 denotes a monochrome display).'
p66
sS'wx.NewEventType'
p67
S'Generates a new unique event type.'
p68
sS'wx.richtext.TextAttrCollectCommonAttributes'
p69
V:param `currentStyle`:
p70
sS'wx.Usleep'
p71
S'Sleeps for the specified number of milliseconds.'
p72
sS'wx.GetTextFromUser'
p73
VPop up a dialog box with title set to `caption`,  ``message`` , and a   ``default_value`` .
p74
sS'wx.GetMousePosition'
p75
VReturns the mouse position in screen coordinates.
p76
sS'wx.LogGeneric'
p77
S'Logs a message with the given LogLevel.'
p78
sS'wx.Sleep'
p79
S'Sleeps for the specified number of seconds.'
p80
sS'wx.MilliSleep'
p81
S'Sleeps for the specified number of milliseconds.'
p82
sS'wx.BitmapFromImage'
p83
S'A compatibility wrapper for the wx.Bitmap(wx.Image) constructor'
p84
sS'wx.DateTimeFromDMY'
p85
S'Compatibility wrapper for :meth:`DateTime.FromDMY`'
p86
sS'wx.IsBusy'
p87
S'Returns ``True`` if between two :ref:`wx.BeginBusyCursor`  and :ref:`wx.EndBusyCursor`  calls.'
p88
sS'wx.html.HtmlWinParser_AddTagHandler'
p89
S''
sS'wx.richtext.RichTextSplitParaCharStyles'
p90
S'Split into paragraph and character styles.'
p91
sS'wx.richtext.RichTextTabsEq'
p92
S'Compare tabs.'
p93
sS'wx.SysErrorCode'
p94
S'Returns the error code from the last system call.'
p95
sS'wx.FileSelector'
p96
VPops up a file selector box.
p97
sS'wx.EnableTopLevelWindows'
p98
VThis function enables or disables all top level windows.
p99
sS'wx.Shutdown'
p100
S'This function shuts down or reboots the computer depending on the value of the `flags`.'
p101
sS'wx.richtext.RichTextCombineBitlists'
p102
S'Combine two bitlists.'
p103
sS'wx.GetFontFromUser'
p104
VShows the font selection dialog and returns the font selected by user or invalid font (use :meth:`wx.Font.IsOk`   to test whether a font is valid) if the dialog was cancelled.
p105
sS'wx.GetEmailAddress'
p106
S"Copies the user's email address into the supplied buffer, by concatenating the values returned by :ref:`wx.GetFullHostName`  and :ref:`wx.GetUserId`."
p107
sS'wx.richtext.RichTextModuleInit'
p108
S''
sS'wx.ImageFromBuffer'
p109
S'Creates a :class:`Image` from the data in `dataBuffer`.  The `dataBuffer`'
p110
sS'wx.IsPlatformLittleEndian'
p111
S'Returns ``True`` if the current platform is little endian (instead of big endian).'
p112
sS'wx.LogDebug'
p113
S'The right functions for debug output.'
p114
sS'wx.Exit'
p115
VExits application after calling :meth:`wx.App.OnExit` .
p116
sS'wx.FindWindowByName'
p117
VFind a window by its name (as given in a window constructor or `Create`  function call). If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases.
p118
sS'wx.DateTimeFromHMS'
p119
S'Compatibility wrapper for :meth:`DateTime.FromHMS`'
p120
sS'wx.BeginBusyCursor'
p121
VChanges the cursor to the given cursor for all windows in the application.
p122
sS'wx.YieldIfNeeded'
p123
S'Convenience function for wx.GetApp().Yield(True)'
p124
sS'wx.GetSingleChoice'
p125
VPops up a dialog box containing a message, OK/Cancel buttons and a single-selection listbox.
p126
sS'wx.adv.ShowTip'
p127
VThis function shows a "startup tip" to the user.
p128
sS'wx.WakeUpIdle'
p129
VThis function wakes up the (internal and platform dependent) idle system, i.e.
p130
sS'wx.richtext.RichTextHasStyle'
p131
S'Utilities'
p132
sS'wx.GetBatteryState'
p133
VReturns battery state as one of  ``BATTERY_NORMAL_STATE`` ,   ``BATTERY_LOW_STATE`` ,   ``BATTERY_CRITICAL_STATE`` ,   ``BATTERY_SHUTDOWN_STATE``   or   ``BATTERY_UNKNOWN_STATE`` .
p134
sS'wx.GetUserId'
p135
S'This function returns the "user id" also known as "login name" under Unix (i.e.'
p136
sS'wx.GetDisplaySizeMM'
p137
VReturns the display size in millimeters.
p138
sS'wx.MessageBox'
p139
VShow a general purpose message dialog.
p140
sS'wx.NewId'
p141
S'Generates an integer identifier unique to this run of the program.'
p142
sS'wx.DateTimeFromTimeT'
p143
S'Compatibility wrapper for :meth:`DateTime.FromTimeT`'
p144
sS'wx.QueueEvent'
p145
S'Queue an event for processing on the given object.'
p146
sS'wx.Execute'
p147
VExecutes another program in Unix or Windows.
p148
sS'wx.FFont'
p149
S''
sS'wx.ImageFromBitmap'
p150
S'Create a :class:`Image` from a :class:`wx.Bitmap`'
p151
sS'wx.EndBusyCursor'
p152
S'Changes the cursor back to the original cursor, for all windows in the application.'
p153
sS'wx.GetProcessId'
p154
S'Returns the number uniquely identifying the current process in the system.'
p155
sS'wx.NewIdRef'
p156
S'Reserves a new Window ``ID`` (or range of WindowIDs) and returns a'
p157
sS'wx.richtext.TextAttrEq'
p158
S'Compare two attribute objects.'
p159
sS'wx.GetOsDescription'
p160
S'Returns the string containing the description of the current platform in a user-readable form.'
p161
sS'wx.richtext.RichTextBitlistsEqPartial'
p162
S'Compare two bitlists.'
p163
sS'wx.SafeShowMessage'
p164
VThis function shows a message to the user in a safe way and should be safe to call even before the application has been initialized or if it is currently in some other strange state (for example, about to crash).
p165
sS'wx.GetDisplaySize'
p166
VReturns the display size in pixels.
p167
sS'wx.GetActiveWindow'
p168
S'Gets the currently active window (implemented for MSW and GTK only currently, always returns ``None`` in the other ports).'
p169
sS'wx.EmptyImage'
p170
S'A compatibility wrapper for the wx.Image(width, height) constructor'
p171
sS'wx.GetOsVersion'
p172
VGets the version and the operating system ``ID`` for currently running OS.
p173
sS'wx.CallAfter'
p174
S'Call the specified function after the current and pending event'
p175
sS'wx.GetPowerType'
p176
VReturns the type of power source as one of  ``POWER_SOCKET`` ,   ``POWER_BATTERY``   or   ``POWER_UNKNOWN`` .
p177
sS'wx.GetDisplayPPI'
p178
VReturns the display resolution in pixels per inch.
p179
sS'wx.SaveFileSelector'
p180
VAsk for filename to save.
p181
sS'wx.FindWindowAtPointer'
p182
S'Find the deepest window at the mouse pointer position, returning the window and current pointer position in screen coordinates.'
p183
sS'wx.GetPasswordFromUser'
p184
VSimilar to :ref:`wx.GetTextFromUser`  but the text entered in the dialog is not shown on screen but replaced with stars.
p185
sS'wx.richtext.RichTextDecimalToRoman'
p186
S'Convert a decimal to Roman numerals.'
p187
sS'wx.richtext.RichTextRemoveStyle'
p188
S':param `destStyle`:'
p189
sS'wx.GetLibraryVersionInfo'
p190
S'Get wxWidgets version information.'
p191
sS'wx.SafeYield'
p192
VCalls :meth:`wx.App.SafeYield` .
p193
sS'wx.Kill'
p194
VEquivalent to the Unix kill function: send the given signal `sig`  to the process with ``PID`` `pid`.
p195
sS'wx.GetStockLabel'
p196
VReturns label that should be used for given `id`  element.
p197
sS'wx.LogWarning'
p198
S"For warnings - they are also normally shown to the user, but don't interrupt the program work."
p199
sS'wx.GetMouseState'
p200
VReturns the current state of the mouse.
p201
sS'wx.ClientDisplayRect'
p202
VReturns the dimensions of the work area on the display.
p203
sS'wx.MicroSleep'
p204
S'Sleeps for the specified number of microseconds.'
p205
sS'wx.FindWindowAtPoint'
p206
VFind the deepest window at the given mouse position in screen coordinates, returning the window if found, or ``None`` if not.
p207
sS'wx.DisplaySize'
p208
VReturns the display size in pixels.
p209
sS'wx.ImageFromStream'
p210
S'Load an image from a stream (file-like object)'
p211
sS'wx.pydate2wxdate'
p212
S'Convert a Python date or datetime to a :class:`DateTime` object'
p213
sS'wx.xrc.EmptyXmlResource'
p214
S'A compatibility wrapper for the XmlResource(flags, domain) constructor'
p215
sS'wx.EmptyBitmap'
p216
S'A compatibility wrapper for the wx.Bitmap(width, height, depth) constructor'
p217
sS'wx.Yield'
p218
S'Calls :meth:`wx.AppConsole.Yield` .'
p219
sS'wx.IsMainThread'
p220
S'Returns ``True`` if the current thread is what  considers the GUI thread.'
p221
sS'wx.InitAllImageHandlers'
p222
S'Initializes all available image handlers.'
p223
sS'wx.FindWindowByLabel'
p224
VFind a window by its label. Depending on the type of window, the label may be a window title or panel item label. If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if non-NULL, the search will be limited to the given window hierarchy. The search is recursive in both cases.
p225
sS'wx.LogVerbose'
p226
S'For verbose output.'
p227
sS'wx.BitmapFromBuffer'
p228
S'A compatibility wrapper for :meth:`wx.Bitmap.FromBuffer` and :meth:`wx.Bitmap.FromBufferAndAlpha`'
p229
sS'wx.Trap'
p230
S'Generate a debugger exception meaning that the control is passed to the debugger if one is attached to the process.'
p231
sS'wx.xrc.XRCCTRL'
p232
S'Returns the child window associated with the string ``ID`` in an ``XML`` resource.'
p233
sS'wx.IntersectRect'
p234
S'Calculate and return the intersection of r1 and r2.  Returns None if there'
p235
sS'wx.DirSelector'
p236
VPops up a directory selector dialog.
p237
sS'wx.RegisterId'
p238
S'Ensures that Ids subsequently generated by :ref:`wx.NewId`  do not clash with the given `id`.'
p239
sS'wx.GetTopLevelParent'
p240
S'Returns the first top level parent of the given window, or in other words, the frame or dialog containing it, or ``None``.'
p241
sS'wx.DisableAsserts'
p242
VDisable the condition checks in the assertions.
p243
sS'wx.ImageFromDataWithAlpha'
p244
S'Compatibility wrapper for creating an image from ``RGB`` and Alpha data'
p245
sS'wx.PostEvent'
p246
S'In a GUI application, this function posts `event`  to the specified `dest`  object using :meth:`wx.EvtHandler.AddPendingEvent` .'
p247
sS'wx.propgrid.PGGetDefaultImageWildcard'
p248
S':rtype: `string`'
p249
sS'wx.GetColourFromUser'
p250
VShows the colour selection dialog and returns the colour selected by user or invalid colour (use :meth:`wx.Colour.IsOk`   to test whether a colour is valid) if the dialog was cancelled.
p251
sS'wx.LogMessage'
p252
S'For all normal, informational messages.'
p253
sS'wx.Shell'
p254
S'Executes a command in an interactive shell window.'
p255
sS'wx.SetCursor'
p256
VGlobally sets the cursor; only has an effect on Windows, Mac and GTK+.
p257
sS'wx.EmptyBitmapRGBA'
p258
S'A compatibility wrapper for :meth:`wx.Bitmap.FromRGBA`'
p259
sS'wx.EmptyIcon'
p260
S'A compatibility wrapper for the :class:`Icon` constructor'
p261
sS'wx.Bell'
p262
S'Ring the system bell.'
p263
sS'wx.LogError'
p264
S'The functions to use for error messages, i.e.'
p265
sS'wx.BitmapFromBufferRGBA'
p266
S'A compatibility wrapper for :meth:`wx.Bitmap.FromBufferRGBA`'
p267
sS'wx.LogSysError'
p268
S'Mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.'
p269
sS'wx.ImageFromData'
p270
S'Compatibility wrapper for creating an image from ``RGB`` data'
p271
sS'wx.richtext.RichTextApplyStyle'
p272
S'Apply one style to another.'
p273
sS'wx.LogFatalError'
p274
S'Like :ref:`wx.LogError`, but also terminates the program with the exit code 3.'
p275
sS'wx.xrc.XRCID'
p276
S'Returns a numeric ``ID`` that is equivalent to the string ``ID`` used in an ``XML`` resource.'
p277
sS'wx.MacThemeColour'
p278
S':rtype: :ref:`wx.Colour`'
p279
sS'wx.GetHomeDir'
p280
VReturn the (current) user's home directory.
p281
sS'wx.GetUserHome'
p282
S'Returns the home directory for the given user.'
p283
sS'wx.GetNumberFromUser'
p284
VShows a dialog asking the user for numeric input.
p285
sS'wx.FindMenuItemId'
p286
VFind a menu item identifier associated with the given frame's menu bar.
p287
sS'wx.GetHostName'
p288
S"Copies the current host machine's name into the supplied buffer."
p289
sS'wx.date2pydate'
p290
S'Convert a :class:`DateTime` object to a Python datetime.'
p291
s.