.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.eventwatcher

.. highlight:: python



.. _wx.lib.eventwatcher.EventWatcher:

==========================================================================================================================================
|phoenix_title|  **wx.lib.eventwatcher.EventWatcher**
==========================================================================================================================================

A frame that will catch and display all events sent to some widget.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>EventWatcher</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.eventwatcher.EventWatcher_inheritance.png" alt="Inheritance diagram of EventWatcher" usemap="#dummy" class="inheritance"/></center>
   </div>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Window.html" title="wx.Window" alt="" coords="78,237,167,267"/> <area shape="rect" id="node8" href="wx.NonOwnedWindow.html" title="wx.NonOwnedWindow" alt="" coords="43,315,201,344"/> <area shape="rect" id="node2" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="62,160,183,189"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="24,5,105,35"/> <area shape="rect" id="node7" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="67,83,177,112"/> <area shape="rect" id="node4" href="wx.Frame.html" title="wx.Frame" alt="" coords="81,469,163,499"/> <area shape="rect" id="node9" href="wx.lib.eventwatcher.EventWatcher.html" title="wx.lib.eventwatcher.EventWatcher" alt="" coords="5,547,240,576"/> <area shape="rect" id="node5" href="wx.TopLevelWindow.html" title="wx.TopLevelWindow" alt="" coords="51,392,193,421"/> <area shape="rect" id="node6" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="131,5,232,35"/> </map> 
   </p>

|


|super_classes| Known Superclasses
==================================

:class:`wx.Frame`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.eventwatcher.EventWatcher.__init__`                               
:meth:`~wx.lib.eventwatcher.EventWatcher.buildWatchList`                         
:meth:`~wx.lib.eventwatcher.EventWatcher.onAddModule`                            
:meth:`~wx.lib.eventwatcher.EventWatcher.onClear`                                
:meth:`~wx.lib.eventwatcher.EventWatcher.onCloseWindow`                          
:meth:`~wx.lib.eventwatcher.EventWatcher.onToggleSelectEvents`                   
:meth:`~wx.lib.eventwatcher.EventWatcher.onToggleWatch`                          
:meth:`~wx.lib.eventwatcher.EventWatcher.onWatchedEvent`                         
:meth:`~wx.lib.eventwatcher.EventWatcher.unwatch`                                
:meth:`~wx.lib.eventwatcher.EventWatcher.updateBindings`                         
:meth:`~wx.lib.eventwatcher.EventWatcher.watch`                                  
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: EventWatcher(wx.Frame)

   A frame that will catch and display all events sent to some widget.

   .. method:: __init__(self, \*args, \*\*kw)


   .. method:: buildWatchList(self, exclusions)


   .. method:: onAddModule(self, evt)


   .. method:: onClear(self, evt)


   .. method:: onCloseWindow(self, evt)


   .. method:: onToggleSelectEvents(self, evt)


   .. method:: onToggleWatch(self, evt)


   .. method:: onWatchedEvent(self, evt)


   .. method:: unwatch(self)


   .. method:: updateBindings(self)


   .. method:: watch(self, widget)


