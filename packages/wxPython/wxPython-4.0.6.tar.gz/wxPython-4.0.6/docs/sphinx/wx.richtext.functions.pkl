(dp1
S'RichTextDecimalToRoman'
p2
S'\n.. function:: wx.richtext.RichTextDecimalToRoman(n)\n\n   Convert a decimal to Roman numerals.                  \n\n\n   :param `n`: \n   :type `n`: long\n\n\n\n\n   :rtype: `string`\n\n\n\n\n\n'
p3
sS'RichTextCombineBitlists'
p4
S'\n.. function:: wx.richtext.RichTextCombineBitlists(valueA, valueB, flagsA, flagsB)\n\n   Combine two bitlists.                  \n\n\n   :param `valueA`: \n   :type `valueA`: int\n   :param `valueB`: \n   :type `valueB`: int\n   :param `flagsA`: \n   :type `flagsA`: int\n   :param `flagsB`: \n   :type `flagsB`: int\n\n\n\n\n   :rtype: `bool`\n\n\n\n\n\n'
p5
sS'RichTextApplyStyle'
p6
S'\n.. function:: wx.richtext.RichTextApplyStyle(destStyle, style, compareWith=None)\n\n   Apply one style to another.                  \n\n\n   :param `destStyle`: \n   :type `destStyle`: wx.richtext.RichTextAttr\n   :param `style`: \n   :type `style`: wx.richtext.RichTextAttr\n   :param `compareWith`: \n   :type `compareWith`: wx.richtext.RichTextAttr\n\n\n\n\n   :rtype: `bool`\n\n\n\n\n\n'
p7
sS'RichTextBitlistsEqPartial'
p8
S'\n.. function:: wx.richtext.RichTextBitlistsEqPartial(valueA, valueB, flags)\n\n   Compare two bitlists.                  \n\n\n   :param `valueA`: \n   :type `valueA`: int\n   :param `valueB`: \n   :type `valueB`: int\n   :param `flags`: \n   :type `flags`: int\n\n\n\n\n   :rtype: `bool`\n\n\n\n\n\n'
p9
sS'TextAttrEq'
p10
S'\n.. function:: wx.richtext.TextAttrEq(attr1, attr2)\n\n   Compare two attribute objects.                  \n\n\n   :param `attr1`: \n   :type `attr1`: wx.richtext.RichTextAttr\n   :param `attr2`: \n   :type `attr2`: wx.richtext.RichTextAttr\n\n\n\n\n   :rtype: `bool`\n\n\n\n\n\n'
p11
sS'RichTextTabsEq'
p12
S'\n.. function:: wx.richtext.RichTextTabsEq(tabs1, tabs2)\n\n   Compare tabs.                  \n\n\n   :param `tabs1`: \n   :type `tabs1`: list of integers\n   :param `tabs2`: \n   :type `tabs2`: list of integers\n\n\n\n\n   :rtype: `bool`\n\n\n\n\n\n'
p13
sS'RichTextRemoveStyle'
p14
S'\n.. function:: wx.richtext.RichTextRemoveStyle(destStyle, style)\n\n\n\n\n   :param `destStyle`: \n   :type `destStyle`: wx.richtext.RichTextAttr\n   :param `style`: \n   :type `style`: wx.richtext.RichTextAttr\n\n\n\n\n   :rtype: `bool`\n\n\n\n\n\n'
p15
sS'RichTextModuleInit'
p16
S'\n.. function:: wx.richtext.RichTextModuleInit()\n\n\n\n'
p17
sS'RichTextHasStyle'
p18
S'\n.. function:: wx.richtext.RichTextHasStyle(flags, style)\n\n\n\n   Utilities                  \n\n\n   :param `flags`: \n   :type `flags`: int\n   :param `style`: \n   :type `style`: int\n\n\n\n\n   :rtype: `bool`\n\n\n\n\n\n'
p19
sS'TextAttrCollectCommonAttributes'
p20
V\u000a.. function:: wx.richtext.TextAttrCollectCommonAttributes(currentStyle, attr, clashingAttr, absentAttr)\u000a\u000a\u000a\u000a\u000a   :param `currentStyle`: \u000a   :type `currentStyle`: wx.TextAttr\u000a   :param `attr`: \u000a   :type `attr`: wx.TextAttr\u000a   :param `clashingAttr`: \u000a   :type `clashingAttr`: wx.TextAttr\u000a   :param `absentAttr`: \u000a   :type `absentAttr`: wx.TextAttr\u000a\u000a\u000a\u000a\u000a
p21
sS'RichTextSplitParaCharStyles'
p22
S'\n.. function:: wx.richtext.RichTextSplitParaCharStyles(style, parStyle, charStyle)\n\n   Split into paragraph and character styles.                  \n\n\n   :param `style`: \n   :type `style`: wx.richtext.RichTextAttr\n   :param `parStyle`: \n   :type `parStyle`: wx.richtext.RichTextAttr\n   :param `charStyle`: \n   :type `charStyle`: wx.richtext.RichTextAttr\n\n\n\n\n   :rtype: `bool`\n\n\n\n\n\n'
p23
s.