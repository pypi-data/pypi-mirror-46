#
# PySNMP MIB module TIMETRA-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source TIMETRA-CHASSIS-MIB.mib
# Produced by pysmi-0.3.4 at Mon May 20 16:59:06 2019
# On host ? platform Linux version 4.15.0-48-generic by user ?
# Using Python version 3.6.7 (default, Oct 22 2018, 11:32:17)
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Integer32, Counter32, Counter64, ObjectIdentity, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, Gauge32, NotificationType, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Counter32", "Counter64", "ObjectIdentity", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "Gauge32", "NotificationType", "ModuleIdentity", "iso")
TimeInterval, DisplayString, TextualConvention, RowStatus, TimeStamp, DateAndTime, MacAddress, TruthValue, RowPointer = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "DisplayString", "TextualConvention", "RowStatus", "TimeStamp", "DateAndTime", "MacAddress", "TruthValue", "RowPointer")
tmnxSRObjs, timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRConfs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRConfs")
TmnxInternalSchedWeightMode, TItemDescription, THPolPIRRateOverride, TNamedItem, THsmdaWeightOverride, THsmdaPIRMRateOverride, TmnxIngPolicerStatModeOverride, TmnxPortID, TmnxActionType, TmnxEnabledDisabled, TPlcrBurstSizeBytesOverride, TmnxUuid, TLNamedItemOrEmpty, TNamedItemOrEmpty, TmnxIngPolicerStatMode, THPolCIRRateOverride, TmnxAdminState, TmnxOperState, TIngPolicerId, TPerPacketOffsetOvr, TmnxIpSecIsaOperFlags, TLevel = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxInternalSchedWeightMode", "TItemDescription", "THPolPIRRateOverride", "TNamedItem", "THsmdaWeightOverride", "THsmdaPIRMRateOverride", "TmnxIngPolicerStatModeOverride", "TmnxPortID", "TmnxActionType", "TmnxEnabledDisabled", "TPlcrBurstSizeBytesOverride", "TmnxUuid", "TLNamedItemOrEmpty", "TNamedItemOrEmpty", "TmnxIngPolicerStatMode", "THPolCIRRateOverride", "TmnxAdminState", "TmnxOperState", "TIngPolicerId", "TPerPacketOffsetOvr", "TmnxIpSecIsaOperFlags", "TLevel")
tmnxChassisMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 2))
tmnxChassisMIBModule.setRevisions(('2017-07-01 00:00', '2016-01-01 00:00', '2015-01-01 00:00', '2014-01-01 00:00', '2011-02-01 00:00', '2009-02-28 00:00', '2008-07-01 00:00', '2008-01-01 00:00', '2007-01-01 00:00', '2006-03-16 00:00', '2005-08-31 00:00', '2005-01-24 00:00', '2004-01-15 00:00', '2003-08-15 00:00', '2003-01-20 00:00', '2000-08-14 00:00',))
if mibBuilder.loadTexts: tmnxChassisMIBModule.setLastUpdated('201707010000Z')
if mibBuilder.loadTexts: tmnxChassisMIBModule.setOrganization('Nokia')
class TmnxAlarmState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("alarmActive", 1), ("alarmCleared", 2))

class TmnxChassisIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32)

class TmnxChassisIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 32)

class TmnxPhysChassisIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100)

class TmnxPhysChassisIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class TmnxHwIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class TmnxHwIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class TmnxHwClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("physChassis", 3), ("container", 4), ("powerSupply", 5), ("fan", 6), ("sensor", 7), ("ioModule", 8), ("cpmModule", 9), ("fabricModule", 10), ("mdaModule", 11), ("flashDiskModule", 12), ("port", 13), ("mcm", 14), ("ccm", 15), ("alarmInputModule", 19), ("pcm", 20), ("powerShelf", 21), ("powerShelfController", 22), ("cpmCarrier", 23))

class TmnxPhysChassisClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("routerChassis", 3), ("ethSatChassis", 5), ("tdmSatChassis", 6))

class TmnxPhysChassisRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 9))
    namedValues = NamedValues(("standalone", 1), ("master", 2), ("extension", 3), ("sat-ethernet", 6), ("sat-tdm", 7), ("primary", 8), ("secondary", 9))

class TmnxCardType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxCardSuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalid-card-type", 0), ("unassigned", 1), ("supp-card-type-2", 2), ("supp-card-type-3", 3), ("supp-card-type-4", 4), ("supp-card-type-5", 5), ("supp-card-type-6", 6), ("supp-card-type-7", 7), ("supp-card-type-8", 8), ("supp-card-type-9", 9), ("supp-card-type-10", 10), ("supp-card-type-11", 11), ("supp-card-type-12", 12), ("supp-card-type-13", 13), ("supp-card-type-14", 14), ("supp-card-type-15", 15), ("supp-card-type-16", 16), ("supp-card-type-17", 17), ("supp-card-type-18", 18), ("supp-card-type-19", 19), ("supp-card-type-20", 20), ("supp-card-type-21", 21), ("supp-card-type-22", 22), ("supp-card-type-23", 23), ("supp-card-type-24", 24), ("supp-card-type-25", 25), ("supp-card-type-26", 26), ("supp-card-type-27", 27), ("supp-card-type-28", 28), ("supp-card-type-29", 29), ("supp-card-type-30", 30), ("supp-card-type-31", 31), ("supp-card-type-32", 32), ("supp-card-type-33", 33), ("supp-card-type-34", 34), ("supp-card-type-35", 35), ("supp-card-type-36", 36), ("supp-card-type-37", 37), ("supp-card-type-38", 38), ("supp-card-type-39", 39), ("supp-card-type-40", 40), ("supp-card-type-41", 41), ("supp-card-type-42", 42), ("supp-card-type-43", 43), ("supp-card-type-44", 44), ("supp-card-type-45", 45), ("supp-card-type-46", 46), ("supp-card-type-47", 47), ("supp-card-type-48", 48), ("supp-card-type-49", 49), ("supp-card-type-50", 50), ("supp-card-type-51", 51), ("supp-card-type-52", 52), ("supp-card-type-53", 53), ("supp-card-type-54", 54), ("supp-card-type-55", 55), ("supp-card-type-56", 56), ("supp-card-type-57", 57), ("supp-card-type-58", 58), ("supp-card-type-59", 59), ("supp-card-type-60", 60), ("supp-card-type-61", 61), ("supp-card-type-62", 62), ("supp-card-type-63", 63), ("supp-card-type-64", 64), ("supp-card-type-65", 65), ("supp-card-type-66", 66), ("supp-card-type-67", 67), ("supp-card-type-68", 68), ("supp-card-type-69", 69), ("supp-card-type-70", 70), ("supp-card-type-71", 71), ("supp-card-type-72", 72), ("supp-card-type-73", 73), ("supp-card-type-74", 74), ("supp-card-type-75", 75), ("supp-card-type-76", 76), ("supp-card-type-77", 77), ("supp-card-type-78", 78), ("supp-card-type-79", 79), ("supp-card-type-80", 80), ("supp-card-type-81", 81), ("supp-card-type-82", 82), ("supp-card-type-83", 83), ("supp-card-type-84", 84), ("supp-card-type-85", 85), ("supp-card-type-86", 86), ("supp-card-type-87", 87), ("supp-card-type-88", 88), ("supp-card-type-89", 89), ("supp-card-type-90", 90), ("supp-card-type-91", 91), ("supp-card-type-92", 92), ("supp-card-type-93", 93), ("supp-card-type-94", 94), ("supp-card-type-95", 95), ("supp-card-type-96", 96), ("supp-card-type-97", 97), ("supp-card-type-98", 98), ("supp-card-type-99", 99), ("supp-card-type-100", 100), ("supp-card-type-101", 101), ("supp-card-type-102", 102), ("supp-card-type-103", 103))

class TmnxPEQType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxPEQSuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalidPEQType", 0), ("unassigned", 1), ("suppPEQType2", 2), ("suppPEQType3", 3), ("suppPEQType4", 4), ("suppPEQType5", 5), ("suppPEQType6", 6), ("suppPEQType7", 7), ("suppPEQType8", 8), ("suppPEQType9", 9), ("suppPEQType10", 10), ("suppPEQType11", 11), ("suppPEQType12", 12), ("suppPEQType13", 13), ("suppPEQType14", 14), ("suppPEQType15", 15))

class TmnxFabricType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxFabricSuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalidCardType", 0), ("unassigned", 1), ("suppCardType2", 2), ("suppCardType3", 3), ("suppCardType4", 4), ("suppCardType5", 5), ("suppCardType6", 6), ("suppCardType7", 7), ("suppCardType8", 8), ("suppCardType9", 9), ("suppCardType10", 10), ("suppCardType11", 11), ("suppCardType12", 12), ("suppCardType13", 13), ("suppCardType14", 14), ("suppCardType15", 15), ("suppCardType16", 16), ("suppCardType17", 17), ("suppCardType18", 18), ("suppCardType19", 19), ("suppCardType20", 20), ("suppCardType21", 21), ("suppCardType22", 22), ("suppCardType23", 23), ("suppCardType24", 24), ("suppCardType25", 25), ("suppCardType26", 26), ("suppCardType27", 27), ("suppCardType28", 28), ("suppCardType29", 29), ("suppCardType30", 30), ("suppCardType31", 31), ("suppCardType32", 32), ("suppCardType33", 33), ("suppCardType34", 34), ("suppCardType35", 35), ("suppCardType36", 36), ("suppCardType37", 37), ("suppCardType38", 38), ("suppCardType39", 39), ("suppCardType40", 40), ("suppCardType41", 41), ("suppCardType42", 42), ("suppCardType43", 43), ("suppCardType44", 44), ("suppCardType45", 45), ("suppCardType46", 46), ("suppCardType47", 47), ("suppCardType48", 48), ("suppCardType49", 49), ("suppCardType50", 50), ("suppCardType51", 51), ("suppCardType52", 52), ("suppCardType53", 53), ("suppCardType54", 54), ("suppCardType55", 55), ("suppCardType56", 56), ("suppCardType57", 57), ("suppCardType58", 58), ("suppCardType59", 59), ("suppCardType60", 60), ("suppCardType61", 61), ("suppCardType62", 62), ("suppCardType63", 63), ("suppCardType64", 64), ("suppCardType65", 65), ("suppCardType66", 66), ("suppCardType67", 67), ("suppCardType68", 68), ("suppCardType69", 69), ("suppCardType70", 70), ("suppCardType71", 71), ("suppCardType72", 72), ("suppCardType73", 73), ("suppCardType74", 74), ("suppCardType75", 75), ("suppCardType76", 76), ("suppCardType77", 77), ("suppCardType78", 78), ("suppCardType79", 79))

class TmnxCardRebootType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cardReset", 1), ("notApplicable", 2), ("cardPowerCycle", 3))

class TmnxChassisType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxDeviceState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("deviceStateUnknown", 1), ("deviceNotEquipped", 2), ("deviceStateOk", 3), ("deviceStateFailed", 4), ("deviceStateOutOfService", 5), ("deviceNotProvisioned", 6), ("deviceNotApplicable", 7))

class TmnxLEDState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("ledNotApplicable", 0), ("ledOff", 1), ("ledRed", 2), ("ledAmber", 3), ("ledYellow", 4), ("ledGreen", 5), ("ledAmberBlink", 6), ("ledYellowBlink", 7), ("ledGreenBlink", 8), ("ledRedBlink", 9))

class TmnxMdaType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxMDASuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalid-MDA-type", 0), ("unassigned", 1), ("supp-MDA-type-2", 2), ("supp-MDA-type-3", 3), ("supp-MDA-type-4", 4), ("supp-MDA-type-5", 5), ("supp-MDA-type-6", 6), ("supp-MDA-type-7", 7), ("supp-MDA-type-8", 8), ("supp-MDA-type-9", 9), ("supp-MDA-type-10", 10), ("supp-MDA-type-11", 11), ("supp-MDA-type-12", 12), ("supp-MDA-type-13", 13), ("supp-MDA-type-14", 14), ("supp-MDA-type-15", 15), ("supp-MDA-type-16", 16), ("supp-MDA-type-17", 17), ("supp-MDA-type-18", 18), ("supp-MDA-type-19", 19), ("supp-MDA-type-20", 20), ("supp-MDA-type-21", 21), ("supp-MDA-type-22", 22), ("supp-MDA-type-23", 23), ("supp-MDA-type-24", 24), ("supp-MDA-type-25", 25), ("supp-MDA-type-26", 26), ("supp-MDA-type-27", 27), ("supp-MDA-type-28", 28), ("supp-MDA-type-29", 29), ("supp-MDA-type-30", 30), ("supp-MDA-type-31", 31), ("supp-MDA-type-32", 32), ("supp-MDA-type-33", 33), ("supp-MDA-type-34", 34), ("supp-MDA-type-35", 35), ("supp-MDA-type-36", 36), ("supp-MDA-type-37", 37), ("supp-MDA-type-38", 38), ("supp-MDA-type-39", 39), ("supp-MDA-type-40", 40), ("supp-MDA-type-41", 41), ("supp-MDA-type-42", 42), ("supp-MDA-type-43", 43), ("supp-MDA-type-44", 44), ("supp-MDA-type-45", 45), ("supp-MDA-type-46", 46), ("supp-MDA-type-47", 47), ("supp-MDA-type-48", 48), ("supp-MDA-type-49", 49), ("supp-MDA-type-50", 50), ("supp-MDA-type-51", 51), ("supp-MDA-type-52", 52), ("supp-MDA-type-53", 53), ("supp-MDA-type-54", 54), ("supp-MDA-type-55", 55), ("supp-MDA-type-56", 56), ("supp-MDA-type-57", 57), ("supp-MDA-type-58", 58), ("supp-MDA-type-59", 59), ("supp-MDA-type-60", 60), ("supp-MDA-type-61", 61), ("supp-MDA-type-62", 62), ("supp-MDA-type-63", 63), ("supp-MDA-type-64", 64), ("supp-MDA-type-65", 65), ("supp-MDA-type-66", 66), ("supp-MDA-type-67", 67), ("supp-MDA-type-68", 68), ("supp-MDA-type-69", 69), ("supp-MDA-type-70", 70), ("supp-MDA-type-71", 71), ("supp-MDA-type-72", 72), ("supp-MDA-type-73", 73), ("supp-MDA-type-74", 74), ("supp-MDA-type-75", 75), ("supp-MDA-type-76", 76), ("supp-MDA-type-77", 77), ("supp-MDA-type-78", 78), ("supp-MDA-type-79", 79), ("supp-MDA-type-80", 80), ("supp-MDA-type-81", 81), ("supp-MDA-type-82", 82), ("supp-MDA-type-83", 83), ("supp-MDA-type-84", 84), ("supp-MDA-type-85", 85), ("supp-MDA-type-86", 86), ("supp-MDA-type-87", 87), ("supp-MDA-type-88", 88), ("supp-MDA-type-89", 89), ("supp-MDA-type-90", 90), ("supp-MDA-type-91", 91), ("supp-MDA-type-92", 92), ("supp-MDA-type-93", 93), ("supp-MDA-type-94", 94), ("supp-MDA-type-95", 95), ("supp-MDA-type-96", 96), ("supp-MDA-type-97", 97), ("supp-MDA-type-98", 98), ("supp-MDA-type-99", 99), ("supp-MDA-type-100", 100), ("supp-MDA-type-101", 101), ("supp-MDA-type-102", 102), ("supp-MDA-type-103", 103), ("supp-MDA-type-104", 104), ("supp-MDA-type-105", 105), ("supp-MDA-type-106", 106), ("supp-MDA-type-107", 107), ("supp-MDA-type-108", 108), ("supp-MDA-type-109", 109), ("supp-MDA-type-110", 110), ("supp-MDA-type-111", 111), ("supp-MDA-type-112", 112), ("supp-MDA-type-113", 113), ("supp-MDA-type-114", 114), ("supp-MDA-type-115", 115), ("supp-MDA-type-116", 116), ("supp-MDA-type-117", 117), ("supp-MDA-type-118", 118), ("supp-MDA-type-119", 119), ("supp-MDA-type-120", 120), ("supp-MDA-type-121", 121), ("supp-MDA-type-122", 122), ("supp-MDA-type-123", 123), ("supp-MDA-type-124", 124), ("supp-MDA-type-125", 125), ("supp-MDA-type-126", 126), ("supp-MDA-type-127", 127), ("supp-MDA-type-128", 128), ("supp-MDA-type-129", 129), ("supp-MDA-type-130", 130), ("supp-MDA-type-131", 131), ("supp-MDA-type-132", 132), ("supp-MDA-type-133", 133), ("supp-MDA-type-134", 134), ("supp-MDA-type-135", 135), ("supp-MDA-type-136", 136), ("supp-MDA-type-137", 137), ("supp-MDA-type-138", 138), ("supp-MDA-type-139", 139), ("supp-MDA-type-140", 140), ("supp-MDA-type-141", 141), ("supp-MDA-type-142", 142), ("supp-MDA-type-143", 143), ("supp-MDA-type-144", 144), ("supp-MDA-type-145", 145), ("supp-MDA-type-146", 146), ("supp-MDA-type-147", 147), ("supp-MDA-type-148", 148), ("supp-MDA-type-149", 149), ("supp-MDA-type-150", 150), ("supp-MDA-type-151", 151), ("supp-MDA-type-152", 152), ("supp-MDA-type-153", 153), ("supp-MDA-type-154", 154), ("supp-MDA-type-155", 155), ("supp-MDA-type-156", 156), ("supp-MDA-type-157", 157), ("supp-MDA-type-158", 158), ("supp-MDA-type-159", 159), ("supp-MDA-type-160", 160), ("supp-MDA-type-161", 161), ("supp-MDA-type-162", 162), ("supp-MDA-type-163", 163), ("supp-MDA-type-164", 164), ("supp-MDA-type-165", 165), ("supp-MDA-type-166", 166), ("supp-MDA-type-167", 167), ("supp-MDA-type-168", 168), ("supp-MDA-type-169", 169), ("supp-MDA-type-170", 170), ("supp-MDA-type-171", 171), ("supp-MDA-type-172", 172), ("supp-MDA-type-173", 173), ("supp-MDA-type-174", 174), ("supp-MDA-type-175", 175), ("supp-MDA-type-176", 176), ("supp-MDA-type-177", 177), ("supp-MDA-type-178", 178), ("supp-MDA-type-179", 179), ("supp-MDA-type-180", 180), ("supp-MDA-type-181", 181), ("supp-MDA-type-182", 182), ("supp-MDA-type-183", 183), ("supp-MDA-type-184", 184), ("supp-MDA-type-185", 185), ("supp-MDA-type-186", 186), ("supp-MDA-type-187", 187), ("supp-MDA-type-188", 188), ("supp-MDA-type-189", 189), ("supp-MDA-type-190", 190), ("supp-MDA-type-191", 191), ("supp-MDA-type-192", 192), ("supp-MDA-type-193", 193), ("supp-MDA-type-194", 194), ("supp-MDA-type-195", 195), ("supp-MDA-type-196", 196), ("supp-MDA-type-197", 197), ("supp-MDA-type-198", 198), ("supp-MDA-type-199", 199))

class TmnxMDAChanType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("unknown", 0), ("sonetSts768", 1), ("sonetSts192", 2), ("sonetSts48", 3), ("sonetSts12", 4), ("sonetSts3", 5), ("sonetSts1", 6), ("sdhTug3", 7), ("sonetVtg", 8), ("sonetVt15", 9), ("sonetVt2", 10), ("sonetVt3", 11), ("sonetVt6", 12), ("pdhTu3", 13), ("pdhDs3", 14), ("pdhE3", 15), ("pdhDs1", 16), ("pdhE1", 17), ("pdhDs0Grp", 18))

class TmnxMdaAtmMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("max8kVc", 1), ("max16kVc", 2))

class TmnxCcmType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxMcmType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxSlotNum(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class TmnxSlotNumOrZero(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 128)

class TmnxPortAdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3), ("diagnose", 4))

class TmnxChassisMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4))
    namedValues = NamedValues(("modeD", 4))

class TmnxSETSRefSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("otherCPM", 0), ("reference1", 1), ("reference2", 2), ("bits", 3), ("bits2", 4), ("ptp", 5), ("noReference", 6))

class TmnxSETSRefQualified(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("qualified", 1), ("not-qualified", 2))

class TmnxSETSRefAlarm(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("los", 0), ("oof", 1), ("oopir", 2))

class TmnxSETSStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notPresent", 1), ("masterFreerun", 2), ("masterHoldover", 3), ("masterLocked", 4), ("slave", 5), ("acquiring", 6))

class TmnxBITSIfType(TextualConvention, Integer32):
    reference = "G.703, 'Physical/Electrical Characteristics of Hierarchical Digital Interfaces', Section 13, November 2001."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("t1-esf", 1), ("t1-sf", 2), ("e1-pcm30crc", 3), ("e1-pcm31crc", 4), ("g703-2048khz", 5))

class TmnxSSMQualityLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("unknown", 0), ("prs", 1), ("stu", 2), ("st2", 3), ("tnc", 4), ("st3e", 5), ("st3", 6), ("smc", 7), ("st4", 8), ("dus", 9), ("prc", 10), ("ssua", 11), ("ssub", 12), ("sec", 13), ("dnu", 14), ("inv", 15), ("pno", 16), ("eec1", 17), ("eec2", 18), ("failed", 19))

class TmnxRefInState(TextualConvention, Integer32):
    reference = "IEEE Std 1588-2008 'IEEE Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems'. G.703, 'Physical/Electrical Characteristics of Hierarchical Digital Interfaces', Section 13, November 2001."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("disabled", 0), ("unqualified", 1), ("standby", 2), ("up", 3), ("previousFailure", 4), ("lowQuality", 5), ("lof", 6), ("ais", 7), ("ghost", 8), ("validating", 9), ("reserved-10", 10), ("reserved-11", 11), ("reserved-12", 12), ("fer", 13), ("reserved-14", 14), ("reserved-15", 15), ("reserved-16", 16), ("ptpAdminDisabled", 17), ("ptpOperDown", 18), ("ptpNoParentClock", 19), ("operSpeedNotSupported", 20), ("cpmUnsupBITS2048khz", 21))

class TmnxBITSOutSource(TextualConvention, Integer32):
    reference = 'ITU-T G.8264/Y.1364 Distribution of timing through packet networks, Section A.7.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("lineRef", 1), ("internalClock", 2))

class TmnxCcagId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8)

class TmnxCcagRate(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 100000000)

class TmnxCcagRateOption(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("aggregate", 1), ("cca", 2))

class TmnxChassisPemType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("unknown", 1), ("pem", 2), ("pem-3", 3), ("peq", 4))

class TmnxCardSlotBitMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("slot1", 0), ("slot2", 1), ("slot3", 2), ("slot4", 3), ("slot5", 4), ("slot6", 5), ("slot7", 6), ("slot8", 7), ("slot9", 8), ("slot10", 9), ("slot11", 10), ("slot12", 11), ("slot13", 12), ("slot14", 13), ("slot15", 14), ("slot16", 15), ("slot17", 16), ("slot18", 17), ("slot19", 18), ("slot20", 19), ("slot21", 20), ("slot22", 21), ("slot23", 22), ("slot24", 23))

class TmnxTunnelGroupId(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 16)

class TmnxTunnelGroupIdOrZero(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 16)

class TmnxPowerSupAssignType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("dc", 1), ("acSingle", 2), ("acMultiple", 3), ("default", 4), ("dcMultiple", 5))

class TmnxPCMType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unassigned", 1), ("indeterminate", 2), ("dual", 3), ("quad", 4))

class TmnxFpGeneration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("fp2", 1), ("fp3", 2), ("fp4", 3))

class TmnxPMType(TextualConvention, Unsigned32):
    status = 'current'

class TmnxPMSuppType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("invalidPMType", 0), ("unassigned", 1), ("suppPMType2", 2), ("suppPMType3", 3), ("suppPMType4", 4), ("suppPMType5", 5), ("suppPMType6", 6), ("suppPMType7", 7), ("suppPMType8", 8), ("suppPMType9", 9), ("suppPMType10", 10), ("suppPMType11", 11), ("suppPMType12", 12), ("suppPMType13", 13), ("suppPMType14", 14), ("suppPMType15", 15))

class TmnxCardFunctionalLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("unknown", 0), ("unrestricted", 1), ("he", 2), ("er", 3), ("cr", 4), ("he1200g-plus", 5), ("er1200g-plus", 6), ("cr1200g-plus", 7), ("he400g", 8), ("er400g", 9), ("cr400g", 10), ("he400g-plus", 11), ("er400g-plus", 12), ("cr400g-plus", 13), ("he800g-plus", 14), ("er800g-plus", 15), ("cr800g-plus", 16))

class TmnxCardFunctionalUpgrade(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("unknown", 0), ("cr-er", 1), ("er-he", 2), ("cr400g-cr1200gp", 3), ("er400g-er1200gp", 4), ("he400g-he1200gp", 5), ("cr-er1200gp", 6), ("er-he1200gp", 7), ("cr-er400gp", 8), ("er-he400gp", 9), ("cr-er800gp", 10), ("er-he800gp", 11), ("cr400g-cr800gp", 12), ("er400g-er800gp", 13), ("he400g-he800gp", 14), ("cr800g-cr1200gp", 15), ("er800g-er1200gp", 16), ("he800g-he1200gp", 17))

class TmnxMDAFunctionalLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))
    namedValues = NamedValues(("unknown", 0), ("unrestricted", 1), ("he2400g", 2), ("he1600g", 3), ("he1200g", 4), ("er2400g", 5), ("er1600g", 6), ("er1200g", 7), ("cr2400g", 8), ("cr1600g", 9), ("cr1200g", 10), ("he2400g-plus", 11), ("er2400g-plus", 12), ("cr2400g-plus", 13), ("he3600g", 14), ("er3600g", 15), ("cr3600g", 16), ("he3600gdd", 17), ("er3600gdd", 18), ("cr3600gdd", 19), ("he4800g", 20), ("er4800g", 21), ("cr4800g", 22), ("he4800g-plus", 23), ("er4800g-plus", 24), ("cr4800g-plus", 25), ("he600g", 26), ("er600g", 27), ("cr600g", 28), ("he1200g-plus", 29), ("er1200g-plus", 30), ("cr1200g-plus", 31))

class TmnxMDAFunctionalUpgrade(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("unknown", 0), ("cr1200g-cr1600g", 1), ("cr1600g-cr2400g", 2), ("er1200g-er1600g", 3), ("er1600g-er2400g", 4), ("he1200g-he1600g", 5), ("he1600g-he2400g", 6), ("cr1200g-er1200g", 7), ("er1200g-he1200g", 8), ("cr1600g-er1600g", 9), ("er1600g-he1600g", 10), ("cr2400g-er2400g", 11), ("er2400g-he2400g", 12), ("any2400g-2400g-plus", 13), ("cr3600g-cr4800g", 14), ("er3600g-er4800g", 15), ("he3600g-he4800g", 16), ("cr3600g-er3600g", 17), ("er3600g-he3600g", 18), ("cr4800g-er4800g", 19), ("er4800g-he4800g", 20), ("any3600g-3600gdd", 21), ("any4800g-4800g-plus", 22), ("cr600g-cr1200g", 23), ("er600g-er1200g", 24), ("he600g-he1200g", 25), ("cr600g-er600g", 26), ("er600g-he600g", 27), ("any1200g-1200g-plus", 28))

class TmnxGnssConstellation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("gps", 1), ("gps-glonass", 2))

class TmnxCardFilterProfile(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("profile-a", 1))

class TmnxCpmPowerShelfCommsFailStatus(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("cpmA", 0), ("cpmB", 1))

tmnxHwObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2))
tmnxChassisObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1))
tmnxChassisTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTotalNumber.setStatus('current')
tmnxChassisLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisLastChange.setStatus('current')
tmnxChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: tmnxChassisTable.setStatus('current')
tmnxChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"))
if mibBuilder.loadTexts: tmnxChassisEntry.setStatus('current')
tmnxChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 1), TmnxChassisIndex())
if mibBuilder.loadTexts: tmnxChassisIndex.setStatus('current')
tmnxChassisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisRowStatus.setStatus('current')
tmnxChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 3), TLNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisName.setStatus('current')
tmnxChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 4), TmnxChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisType.setStatus('current')
tmnxChassisLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 5), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisLocation.setStatus('current')
tmnxChassisCoordinates = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 6), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisCoordinates.setStatus('current')
tmnxChassisNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumSlots.setStatus('current')
tmnxChassisNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumPorts.setStatus('current')
tmnxChassisNumPwrSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumPwrSupplies.setStatus('current')
tmnxChassisNumFanTrays = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumFanTrays.setStatus('current')
tmnxChassisNumFans = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumFans.setStatus('current')
tmnxChassisCriticalLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 12), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisCriticalLEDState.setStatus('current')
tmnxChassisMajorLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 13), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisMajorLEDState.setStatus('current')
tmnxChassisMinorLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 14), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisMinorLEDState.setStatus('current')
tmnxChassisBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisBaseMacAddress.setStatus('current')
tmnxChassisCLLICode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisCLLICode.setStatus('current')
tmnxChassisReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 17), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisReboot.setStatus('current')
tmnxChassisUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 18), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisUpgrade.setStatus('current')
tmnxChassisAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 19), TmnxChassisMode().clone('modeD')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisAdminMode.setStatus('current')
tmnxChassisOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 20), TmnxChassisMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisOperMode.setStatus('current')
tmnxChassisModeForce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 21), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisModeForce.setStatus('current')
tmnxChassisUpdateWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 600)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisUpdateWaitTime.setStatus('obsolete')
tmnxChassisUpdateTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisUpdateTimeLeft.setStatus('current')
tmnxChassisOverTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stateOk", 1), ("stateOverTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisOverTempState.setStatus('current')
tmnxChassisMixedModeIomAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 25), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisMixedModeIomAdminMode.setStatus('current')
tmnxChassisMixedModeIomUpgrList = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 26), Bits().clone(namedValues=NamedValues(("iomSlot1", 0), ("iomSlot2", 1), ("iomSlot3", 2), ("iomSlot4", 3), ("iomSlot5", 4), ("iomSlot6", 5), ("iomSlot7", 6), ("iomSlot8", 7), ("iomSlot9", 8), ("iomSlot10", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisMixedModeIomUpgrList.setStatus('current')
tmnxChassisRedForcedSingleSfm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisRedForcedSingleSfm.setStatus('current')
tmnxChassisOperNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisOperNumSlots.setStatus('current')
tmnxChassisOperTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("extended", 2), ("paired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisOperTopology.setStatus('current')
tmnxChassisFabricSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("speed6g", 1), ("speed10g", 2), ("speedS4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFabricSpeed.setStatus('current')
tmnxChassisPortIdScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("schemeA", 1), ("schemeB", 2), ("schemeC", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPortIdScheme.setStatus('current')
tmnxChassisVsrCongestionMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisVsrCongestionMgmt.setStatus('current')
tmnxChassisAlarmLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 34), TmnxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisAlarmLEDState.setStatus('current')
tmnxChassisFPGenerationFP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFPGenerationFP2.setStatus('current')
tmnxChassisFPGenerationFP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFPGenerationFP3.setStatus('current')
tmnxChassisFPGenerationFP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFPGenerationFP4.setStatus('current')
tmnxChassisNumPhysicalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisNumPhysicalPorts.setStatus('current')
tmnxChassisFPGenerationVFP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFPGenerationVFP.setStatus('current')
tmnxChassisSystemProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("profileA", 1), ("profileB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisSystemProfile.setStatus('current')
tmnxChassisFanTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4), )
if mibBuilder.loadTexts: tmnxChassisFanTable.setStatus('obsolete')
tmnxChassisFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisFanIndex"))
if mibBuilder.loadTexts: tmnxChassisFanEntry.setStatus('obsolete')
tmnxChassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxChassisFanIndex.setStatus('obsolete')
tmnxChassisFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanOperStatus.setStatus('obsolete')
tmnxChassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("unknown", 1), ("halfSpeed", 2), ("fullSpeed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanSpeed.setStatus('obsolete')
tmnxChassisFanRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("fan1", 1), ("hfFan2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanRevision.setStatus('obsolete')
tmnxChassisFanSpeedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisFanSpeedPercent.setStatus('obsolete')
tmnxChassisPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5), )
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTable.setStatus('obsolete')
tmnxChassisPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyId"))
if mibBuilder.loadTexts: tmnxChassisPowerSupplyEntry.setStatus('obsolete')
tmnxChassisPowerSupplyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxChassisPowerSupplyId.setStatus('obsolete')
tmnxChassisPowerSupplyACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyACStatus.setStatus('obsolete')
tmnxChassisPowerSupplyDCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 3), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyDCStatus.setStatus('obsolete')
tmnxChassisPowerSupplyTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 4), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTempStatus.setStatus('obsolete')
tmnxChassisPowerSupplyTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 5), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyTempThreshold.setStatus('obsolete')
tmnxChassisPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 6), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupply1Status.setStatus('obsolete')
tmnxChassisPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 7), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupply2Status.setStatus('obsolete')
tmnxChassisPowerSupplyAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 8), TmnxPowerSupAssignType().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyAssignedType.setStatus('obsolete')
tmnxChassisPowerSupplyInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 9), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyInputStatus.setStatus('obsolete')
tmnxChassisPowerSupplyOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 10), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyOutputStatus.setStatus('obsolete')
tmnxChassisPowerSupplyPemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 11), TmnxChassisPemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyPemType.setStatus('obsolete')
tmnxChassisPowerSupplyPemACRect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 12), Bits().clone(namedValues=NamedValues(("acRect1", 0), ("acRect2", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyPemACRect.setStatus('obsolete')
tmnxChassisPowerSupplyInFeedDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 13), Bits().clone(namedValues=NamedValues(("inputFeedA", 0), ("inputFeedB", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyInFeedDown.setStatus('obsolete')
tmnxChassisPowerSupplyFanDir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("frontToBack", 1), ("backToFront", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerSupplyFanDir.setStatus('obsolete')
tmnxChassisTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6), )
if mibBuilder.loadTexts: tmnxChassisTypeTable.setStatus('current')
tmnxChassisTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisTypeIndex"))
if mibBuilder.loadTexts: tmnxChassisTypeEntry.setStatus('current')
tmnxChassisTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 1), TmnxChassisType())
if mibBuilder.loadTexts: tmnxChassisTypeIndex.setStatus('current')
tmnxChassisTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeName.setStatus('current')
tmnxChassisTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeDescription.setStatus('current')
tmnxChassisTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisTypeStatus.setStatus('current')
tmnxHwLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwLastChange.setStatus('current')
tmnxHwTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8), )
if mibBuilder.loadTexts: tmnxHwTable.setStatus('current')
tmnxHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"))
if mibBuilder.loadTexts: tmnxHwEntry.setStatus('current')
tmnxHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 1), TmnxHwIndex())
if mibBuilder.loadTexts: tmnxHwIndex.setStatus('current')
tmnxHwID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwID.setStatus('current')
tmnxHwMfgString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgString.setStatus('obsolete')
tmnxHwMfgBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgBoardNumber.setStatus('current')
tmnxHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSerialNumber.setStatus('current')
tmnxHwManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwManufactureDate.setStatus('current')
tmnxHwClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 7), TmnxHwClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwClass.setStatus('current')
tmnxHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwName.setStatus('current')
tmnxHwAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 9), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAlias.setStatus('current')
tmnxHwAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 10), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAssetID.setStatus('current')
tmnxHwCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwCLEI.setStatus('current')
tmnxHwIsFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwIsFRU.setStatus('current')
tmnxHwContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwContainedIn.setStatus('current')
tmnxHwParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwParentRelPos.setStatus('current')
tmnxHwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3), ("diagnose", 4), ("operateSwitch", 5))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwAdminState.setStatus('current')
tmnxHwOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("diagnosing", 4), ("failed", 5), ("booting", 6), ("empty", 7), ("provisioned", 8), ("unprovisioned", 9), ("upgrade", 10), ("downgrade", 11), ("inServiceUpgrade", 12), ("inServiceDowngrade", 13), ("resetPending", 14), ("softReset", 15), ("preExtension", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwOperState.setStatus('current')
tmnxHwTempSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTempSensor.setStatus('current')
tmnxHwTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 18), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTemperature.setStatus('current')
tmnxHwTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 19), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwTempThreshold.setStatus('current')
tmnxHwBootCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwBootCodeVersion.setStatus('current')
tmnxHwSoftwareCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSoftwareCodeVersion.setStatus('current')
tmnxHwSwLastBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwLastBoot.setStatus('current')
tmnxHwSwState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("hwFailure", 1), ("swFailure", 2), ("hwInitting", 3), ("swDownloading", 4), ("swInitting", 5), ("swInitted", 6), ("swRunning", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwState.setStatus('obsolete')
tmnxHwAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 24), TmnxAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwAlarmState.setStatus('current')
tmnxHwLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 25), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwLastAlarmEvent.setStatus('current')
tmnxHwClearAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 26), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxHwClearAlarms.setStatus('current')
tmnxHwSwImageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwSwImageSource.setStatus('current')
tmnxHwMfgDeviations = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 28), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgDeviations.setStatus('current')
tmnxHwBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 29), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwBaseMacAddress.setStatus('current')
tmnxHwFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwFailureReason.setStatus('current')
tmnxHwEquippedPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pfUnknown", 0), ("pf7750", 1), ("pf7450", 2), ("pf7710", 3), ("pf7950", 4), ("pf7705", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwEquippedPlatform.setStatus('current')
tmnxHwMfgAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwMfgAssemblyNumber.setStatus('current')
tmnxHwFirmwareCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwFirmwareCodeVersion.setStatus('current')
tmnxHwPowerZone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwPowerZone.setStatus('current')
tmnxHwFirmwareRevisionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 0), ("acceptable", 1), ("notAcceptable", 2), ("upgradePending", 3), ("upgrading", 4), ("upgradeNextHardReset", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwFirmwareRevisionStatus.setStatus('current')
tmnxHwContainsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9), )
if mibBuilder.loadTexts: tmnxHwContainsTable.setStatus('current')
tmnxHwContainsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if mibBuilder.loadTexts: tmnxHwContainsEntry.setStatus('current')
tmnxHwContainedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9, 1, 1), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwContainedIndex.setStatus('current')
tmnxCcmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10), )
if mibBuilder.loadTexts: tmnxCcmTable.setStatus('current')
tmnxCcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcmIndex"))
if mibBuilder.loadTexts: tmnxCcmEntry.setStatus('current')
tmnxCcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxCcmIndex.setStatus('current')
tmnxCcmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmOperStatus.setStatus('current')
tmnxCcmHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 3), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmHwIndex.setStatus('current')
tmnxCcmEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 4), TmnxCcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmEquippedType.setStatus('current')
tmnxCcmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11), )
if mibBuilder.loadTexts: tmnxCcmTypeTable.setStatus('current')
tmnxCcmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcmTypeIndex"))
if mibBuilder.loadTexts: tmnxCcmTypeEntry.setStatus('current')
tmnxCcmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 1), TmnxCcmType())
if mibBuilder.loadTexts: tmnxCcmTypeIndex.setStatus('current')
tmnxCcmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeName.setStatus('current')
tmnxCcmTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeDescription.setStatus('current')
tmnxCcmTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcmTypeStatus.setStatus('current')
tmnxFanTrayComponentTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12), )
if mibBuilder.loadTexts: tmnxFanTrayComponentTable.setStatus('obsolete')
tmnxFanTrayComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisFanIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFanTrayCompIndex"))
if mibBuilder.loadTexts: tmnxFanTrayComponentEntry.setStatus('current')
tmnxFanTrayCompIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxFanTrayCompIndex.setStatus('obsolete')
tmnxFanTrayCompSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFanTrayCompSpeed.setStatus('obsolete')
tmnxHwResourceTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13), )
if mibBuilder.loadTexts: tmnxHwResourceTable.setStatus('current')
tmnxHwResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"))
if mibBuilder.loadTexts: tmnxHwResourceEntry.setStatus('current')
tmnxHwResourceCurrentVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceCurrentVoltage.setStatus('current')
tmnxHwResourcePeakVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakVoltage.setStatus('current')
tmnxHwResourcePeakVoltageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakVoltageTime.setStatus('current')
tmnxHwResourceMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinVoltage.setStatus('current')
tmnxHwResourceMinVoltageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinVoltageTime.setStatus('current')
tmnxHwResourceCurrentWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceCurrentWattage.setStatus('current')
tmnxHwResourcePeakWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakWattage.setStatus('current')
tmnxHwResourcePeakWattageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakWattageTime.setStatus('current')
tmnxHwResourceMinWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinWattage.setStatus('current')
tmnxHwResourceMinWattageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinWattageTime.setStatus('current')
tmnxHwResourceCurrentAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceCurrentAmperage.setStatus('current')
tmnxHwResourcePeakAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakAmperage.setStatus('current')
tmnxHwResourcePeakAmperageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourcePeakAmperageTime.setStatus('current')
tmnxHwResourceMinAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinAmperage.setStatus('current')
tmnxHwResourceMinAmperageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMinAmperageTime.setStatus('current')
tmnxHwResourceMaxRequiredWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 16), Integer32()).setUnits('Wattage').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHwResourceMaxRequiredWattage.setStatus('current')
tmnxPEQTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 14), )
if mibBuilder.loadTexts: tmnxPEQTypeTable.setStatus('current')
tmnxPEQTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 14, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxPEQTypeIndex"))
if mibBuilder.loadTexts: tmnxPEQTypeEntry.setStatus('current')
tmnxPEQTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 14, 1, 1), TmnxPEQType())
if mibBuilder.loadTexts: tmnxPEQTypeIndex.setStatus('current')
tmnxPEQTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 14, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPEQTypeName.setStatus('current')
tmnxPEQTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 14, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPEQTypeDescription.setStatus('current')
tmnxPEQTypeNumInputFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 14, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPEQTypeNumInputFeed.setStatus('current')
tmnxChassisPEQTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPEQTableLastChg.setStatus('obsolete')
tmnxChassisPEQTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 16), )
if mibBuilder.loadTexts: tmnxChassisPEQTable.setStatus('obsolete')
tmnxChassisPEQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 16, 1), )
tmnxChassisPowerSupplyEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQEntry"))
tmnxChassisPEQEntry.setIndexNames(*tmnxChassisPowerSupplyEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxChassisPEQEntry.setStatus('obsolete')
tmnxChassisPEQLastChangedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 16, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPEQLastChangedTime.setStatus('obsolete')
tmnxChassisPEQAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 16, 1, 2), TmnxPEQType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisPEQAssignedType.setStatus('obsolete')
tmnxChassisPEQEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 16, 1, 3), TmnxPEQType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPEQEquippedType.setStatus('obsolete')
tmnxChassisPEQSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 16, 1, 4), TmnxPEQSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPEQSupportedTypes.setStatus('obsolete')
tmnxChassisPEQAvailableWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 16, 1, 5), Unsigned32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPEQAvailableWattage.setStatus('obsolete')
tmnxChassisPEQInputPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 16, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 60), ValueRangeConstraint(80, 80), ))).setUnits('amperes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisPEQInputPowerMode.setStatus('obsolete')
tmnxChassisPowerMgmtTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPowerMgmtTableLastChg.setStatus('current')
tmnxChassisPowerMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 18), )
if mibBuilder.loadTexts: tmnxChassisPowerMgmtTable.setStatus('current')
tmnxChassisPowerMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 18, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtZone"))
if mibBuilder.loadTexts: tmnxChassisPowerMgmtEntry.setStatus('current')
tmnxChassisPwrMgmtZone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: tmnxChassisPwrMgmtZone.setStatus('current')
tmnxChassisPwrMgmtChangedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 18, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisPwrMgmtChangedTime.setStatus('current')
tmnxChassisPwrMgmtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("basic", 1), ("advanced", 2))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisPwrMgmtMode.setStatus('current')
tmnxChassisPwrMgmtSafetyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 18, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisPwrMgmtSafetyLevel.setStatus('current')
tmnxChassisPwrMgmtSafetyAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 18, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120000))).setUnits('watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisPwrMgmtSafetyAlert.setStatus('current')
tChassisResTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19), )
if mibBuilder.loadTexts: tChassisResTable.setStatus('current')
tChassisResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"))
if mibBuilder.loadTexts: tChassisResEntry.setStatus('current')
tChassisResSapIngQosPolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResSapIngQosPolTotal.setStatus('current')
tChassisResSapIngQosPolAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResSapIngQosPolAlloc.setStatus('current')
tChassisResSapEgrQosPolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResSapEgrQosPolTotal.setStatus('current')
tChassisResSapEgrQosPolAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResSapEgrQosPolAlloc.setStatus('current')
tChassisResIngQGrpTmplTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResIngQGrpTmplTotal.setStatus('current')
tChassisResIngQGrpTmplAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResIngQGrpTmplAlloc.setStatus('current')
tChassisResEgrQGrpTmplTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResEgrQGrpTmplTotal.setStatus('current')
tChassisResEgrQGrpTmplAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResEgrQGrpTmplAlloc.setStatus('current')
tChassisResPortEgrQGrpInstTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResPortEgrQGrpInstTotal.setStatus('current')
tChassisResPortEgrQGrpInstAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResPortEgrQGrpInstAlloc.setStatus('current')
tChassisResFPIngQGrpInstTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResFPIngQGrpInstTotal.setStatus('current')
tChassisResFPIngQGrpInstAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResFPIngQGrpInstAlloc.setStatus('current')
tChassisResPortEgrVPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResPortEgrVPortTotal.setStatus('current')
tChassisResPortEgrVPortAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResPortEgrVPortAlloc.setStatus('current')
tChassisResDynSvcNHEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResDynSvcNHEntryTotal.setStatus('current')
tChassisResDynSvcNHEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResDynSvcNHEntryAlloc.setStatus('current')
tChassisResIpSecNHEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResIpSecNHEntryTotal.setStatus('current')
tChassisResIpSecNHEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResIpSecNHEntryAlloc.setStatus('current')
tChassisResSubNHEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResSubNHEntryTotal.setStatus('current')
tChassisResSubNHEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResSubNHEntryAlloc.setStatus('current')
tChassisResSapTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResSapTotal.setStatus('current')
tChassisResSapAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 19, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tChassisResSapAlloc.setStatus('current')
tmnxPhysChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21), )
if mibBuilder.loadTexts: tmnxPhysChassisTable.setStatus('current')
tmnxPhysChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisClass"), (0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNum"))
if mibBuilder.loadTexts: tmnxPhysChassisEntry.setStatus('current')
tmnxPhysChassisClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 1), TmnxPhysChassisClass())
if mibBuilder.loadTexts: tmnxPhysChassisClass.setStatus('current')
tmnxPhysChassisNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 2), TmnxPhysChassisIndex())
if mibBuilder.loadTexts: tmnxPhysChassisNum.setStatus('current')
tmnxPhysChassisRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 3), TmnxPhysChassisRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisRole.setStatus('current')
tmnxPhysChassisState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 4), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisState.setStatus('current')
tmnxPhysChassisHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 5), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisHwIndex.setStatus('current')
tmnxPhysChassisNumPwrSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisNumPwrSupplies.setStatus('current')
tmnxPhysChassisNumFanTrays = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisNumFanTrays.setStatus('current')
tmnxPhysChassisNumFans = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisNumFans.setStatus('obsolete')
tmnxPhysChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 9), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisName.setStatus('current')
tmnxPhysChassisDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 10), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPhysChassisDescription.setStatus('current')
tmnxPhysChassisMonitorFilterDoor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPhysChassisMonitorFilterDoor.setStatus('current')
tmnxPhysChassisFilterDoorState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("notMonitored", 1), ("closed", 2), ("open", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisFilterDoorState.setStatus('current')
tmnxChassisHwEventObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22))
tmnxCardHwEventTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 1), )
if mibBuilder.loadTexts: tmnxCardHwEventTable.setStatus('current')
tmnxCardHwEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardHwEventSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardHwEventType"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardHwEventComplex"))
if mibBuilder.loadTexts: tmnxCardHwEventEntry.setStatus('current')
tmnxCardHwEventSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 1, 1, 1), TmnxSlotNum())
if mibBuilder.loadTexts: tmnxCardHwEventSlotNum.setStatus('current')
tmnxCardHwEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tChipParity", 1))))
if mibBuilder.loadTexts: tmnxCardHwEventType.setStatus('current')
tmnxCardHwEventComplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxCardHwEventComplex.setStatus('current')
tmnxCardHwEventNumOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardHwEventNumOccurrences.setStatus('current')
tmnxCardHwEventLastOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardHwEventLastOccurTime.setStatus('current')
tmnxMdaHwEventTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 2), )
if mibBuilder.loadTexts: tmnxMdaHwEventTable.setStatus('current')
tmnxMdaHwEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMdaHwEventType"))
if mibBuilder.loadTexts: tmnxMdaHwEventEntry.setStatus('current')
tmnxMdaHwEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ingrXplErr", 1))))
if mibBuilder.loadTexts: tmnxMdaHwEventType.setStatus('current')
tmnxMdaHwEventNumOccurrences = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaHwEventNumOccurrences.setStatus('current')
tmnxMdaHwEventLastOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 22, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaHwEventLastOccurTime.setStatus('current')
tmnxChassisMgmtEthRedObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 23))
tmnxChassisMgmtEthRed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 23, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisMgmtEthRed.setStatus('current')
tmnxChassisMgmtEthRedRevertTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 23, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisMgmtEthRedRevertTime.setStatus('current')
tmnxChassisMgmtEthRedStandby = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 23, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisMgmtEthRedStandby.setStatus('current')
tmnxPhysChassisObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24))
tmnxPhysChassisFanTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 1), )
if mibBuilder.loadTexts: tmnxPhysChassisFanTable.setStatus('current')
tmnxPhysChassisFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisClass"), (0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanIndex"))
if mibBuilder.loadTexts: tmnxPhysChassisFanEntry.setStatus('current')
tmnxPhysChassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxPhysChassisFanIndex.setStatus('current')
tmnxPhysChassisFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 1, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisFanOperStatus.setStatus('current')
tmnxPhysChassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("unknown", 1), ("halfSpeed", 2), ("fullSpeed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisFanSpeed.setStatus('obsolete')
tmnxPhysChassisFanRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("fan1", 1), ("hfFan2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisFanRevision.setStatus('current')
tmnxPhysChassisFanSpeedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisFanSpeedPercent.setStatus('current')
tmnxPhysChassisFanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chassis", 1), ("pcm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisFanType.setStatus('current')
tmnxPhysChassisPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2), )
if mibBuilder.loadTexts: tmnxPhysChassisPowerSupplyTable.setStatus('current')
tmnxPhysChassisPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisClass"), (0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupId"))
if mibBuilder.loadTexts: tmnxPhysChassisPowerSupplyEntry.setStatus('current')
tmnxPhysChassPowerSupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxPhysChassPowerSupId.setStatus('current')
tmnxPhysChassPowerSupACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupACStatus.setStatus('current')
tmnxPhysChassPowerSupDCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 3), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupDCStatus.setStatus('current')
tmnxPhysChassPowerSupTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 4), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupTempStatus.setStatus('current')
tmnxPhysChassPowerSupTempThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 5), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupTempThrshld.setStatus('current')
tmnxPhysChassPowerSup1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 6), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSup1Status.setStatus('current')
tmnxPhysChassPowerSup2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 7), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSup2Status.setStatus('current')
tmnxPhysChassPowerSupAssignType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 8), TmnxPowerSupAssignType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupAssignType.setStatus('current')
tmnxPhysChassPowerSupInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 9), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupInputStatus.setStatus('current')
tmnxPhysChassPowerSupOutptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 10), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupOutptStatus.setStatus('current')
tmnxPhysChassPowerSupPemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 11), TmnxChassisPemType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupPemType.setStatus('current')
tmnxPhysChassPowerSupPemACRect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 12), Bits().clone(namedValues=NamedValues(("acRect1", 0), ("acRect2", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupPemACRect.setStatus('current')
tmnxPhysChassPowerSupInFeedDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 13), Bits().clone(namedValues=NamedValues(("inputFeedA", 0), ("inputFeedB", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupInFeedDown.setStatus('current')
tmnxPhysChassPowerSupFanDir = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("frontToBack", 1), ("backToFront", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassPowerSupFanDir.setStatus('current')
tmnxPhysChassisPEQTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPEQTableLastChg.setStatus('current')
tmnxPhysChassisPEQTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 4), )
if mibBuilder.loadTexts: tmnxPhysChassisPEQTable.setStatus('current')
tmnxPhysChassisPEQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 4, 1), )
tmnxPhysChassisPowerSupplyEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPEQEntry"))
tmnxPhysChassisPEQEntry.setIndexNames(*tmnxPhysChassisPowerSupplyEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxPhysChassisPEQEntry.setStatus('current')
tmnxPhysChassisPEQLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 4, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPEQLastChangeTime.setStatus('current')
tmnxPhysChassisPEQAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 4, 1, 2), TmnxPEQType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPhysChassisPEQAssignedType.setStatus('current')
tmnxPhysChassisPEQEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 4, 1, 3), TmnxPEQType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPEQEquippedType.setStatus('current')
tmnxPhysChassisPEQSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 4, 1, 4), TmnxPEQSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPEQSupportedTypes.setStatus('current')
tmnxPhysChassisPEQAvailableWatt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 4, 1, 5), Unsigned32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPEQAvailableWatt.setStatus('current')
tmnxPhysChassisPEQInputPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 60), ValueRangeConstraint(80, 80), ))).setUnits('amperes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPhysChassisPEQInputPowerMode.setStatus('current')
tmnxPhysChassisPCMTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPCMTableLastChg.setStatus('current')
tmnxPhysChassisPCMTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 6), )
if mibBuilder.loadTexts: tmnxPhysChassisPCMTable.setStatus('current')
tmnxPhysChassisPCMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisClass"), (0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMId"))
if mibBuilder.loadTexts: tmnxPhysChassisPCMEntry.setStatus('current')
tmnxPhysChassisPCMId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: tmnxPhysChassisPCMId.setStatus('current')
tmnxPhysChassisPCMEntryLastChg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPCMEntryLastChg.setStatus('current')
tmnxPhysChassisPCMEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 6, 1, 3), TmnxPCMType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPCMEquippedType.setStatus('current')
tmnxPhysChassisPCMAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 6, 1, 4), TmnxPCMType().clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPhysChassisPCMAssignedType.setStatus('current')
tmnxPhysChassisPCMInFeedDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 6, 1, 5), Bits().clone(namedValues=NamedValues(("inputFeedA", 0), ("inputFeedB2", 1), ("inputFeedA2", 2), ("inputFeedB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPCMInFeedDown.setStatus('current')
tmnxPhysChassisPMTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 7), )
if mibBuilder.loadTexts: tmnxPhysChassisPMTypeTable.setStatus('current')
tmnxPhysChassisPMTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 7, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMTypeIndex"))
if mibBuilder.loadTexts: tmnxPhysChassisPMTypeEntry.setStatus('current')
tmnxPhysChassisPMTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 7, 1, 1), TmnxPMType())
if mibBuilder.loadTexts: tmnxPhysChassisPMTypeIndex.setStatus('current')
tmnxPhysChassisPMTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 7, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMTypeName.setStatus('current')
tmnxPhysChassisPMTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 7, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMTypeDescription.setStatus('current')
tmnxPhysChassisPMTypeNumInFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMTypeNumInFeed.setStatus('current')
tmnxPhysChassisPMTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMTableLastChange.setStatus('current')
tmnxPhysChassisPMTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9), )
if mibBuilder.loadTexts: tmnxPhysChassisPMTable.setStatus('current')
tmnxPhysChassisPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxPowerModuleHwIndex"))
if mibBuilder.loadTexts: tmnxPhysChassisPMEntry.setStatus('current')
tmnxPowerModuleHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1, 1), TmnxHwIndex())
if mibBuilder.loadTexts: tmnxPowerModuleHwIndex.setStatus('current')
tmnxPhysChassisPMEntryLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMEntryLastChange.setStatus('current')
tmnxPhysChassisPMAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1, 3), TmnxPMType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPhysChassisPMAssignedType.setStatus('current')
tmnxPhysChassisPMEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1, 4), TmnxPMType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMEquippedType.setStatus('current')
tmnxPhysChassisPMSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1, 5), TmnxPMSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMSupportedTypes.setStatus('current')
tmnxPhysChassisPMAvailableWatt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1, 6), Unsigned32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMAvailableWatt.setStatus('current')
tmnxPhysChassisPMOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("ok", 1), ("failed", 2), ("disabled", 3), ("notEquipped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMOutputStatus.setStatus('current')
tmnxPhysChassisPMInputFeedDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 24, 9, 1, 8), Bits().clone(namedValues=NamedValues(("inputFeedA", 0), ("inputFeedB", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPhysChassisPMInputFeedDown.setStatus('current')
tmnxBluetoothTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBluetoothTableLastChange.setStatus('current')
tmnxBluetoothTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 26))
tmnxBluetoothPasskey = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 26, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone('123456')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBluetoothPasskey.setStatus('current')
tmnxBluetoothAdvertisingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 26, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 3600), )).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBluetoothAdvertisingTimeout.setStatus('current')
tmnxBluetoothPowerState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("enabled-manual", 1), ("enabled-automatic", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBluetoothPowerState.setStatus('current')
tmnxBluetoothPairingButton = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 26, 4), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBluetoothPairingButton.setStatus('current')
tmnxBluetoothDeviceTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBluetoothDeviceTableLastChg.setStatus('current')
tmnxBluetoothDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 28), )
if mibBuilder.loadTexts: tmnxBluetoothDeviceTable.setStatus('current')
tmnxBluetoothDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 28, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxBluetoothDeviceMacAddress"))
if mibBuilder.loadTexts: tmnxBluetoothDeviceEntry.setStatus('current')
tmnxBluetoothDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 28, 1, 1), MacAddress())
if mibBuilder.loadTexts: tmnxBluetoothDeviceMacAddress.setStatus('current')
tmnxBluetoothDeviceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 28, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBluetoothDeviceRowStatus.setStatus('current')
tmnxBluetoothDeviceEntryLastChg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 28, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBluetoothDeviceEntryLastChg.setStatus('current')
tmnxBluetoothDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 28, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBluetoothDeviceDescription.setStatus('current')
tmnxBluetoothModuleTableLastChg = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBluetoothModuleTableLastChg.setStatus('current')
tmnxBluetoothModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 30), )
if mibBuilder.loadTexts: tmnxBluetoothModuleTable.setStatus('current')
tmnxBluetoothModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 30, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"))
if mibBuilder.loadTexts: tmnxBluetoothModuleEntry.setStatus('current')
tmnxBluetoothModuleEntryLastChg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 30, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBluetoothModuleEntryLastChg.setStatus('current')
tmnxBluetoothModuleCfgIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 30, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 32), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxBluetoothModuleCfgIdentifier.setStatus('current')
tmnxBluetoothModuleIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 30, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 32), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBluetoothModuleIdentifier.setStatus('current')
tmnxBluetoothModuleConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 30, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBluetoothModuleConnected.setStatus('current')
tmnxBluetoothModuleConnectedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 30, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBluetoothModuleConnectedMac.setStatus('current')
tmnxSlotObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 2))
tmnxCardObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3))
tmnxCardLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLastChange.setStatus('current')
tmnxCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2), )
if mibBuilder.loadTexts: tmnxCardTable.setStatus('current')
tmnxCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"))
if mibBuilder.loadTexts: tmnxCardEntry.setStatus('current')
tmnxCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 1), TmnxSlotNum())
if mibBuilder.loadTexts: tmnxCardSlotNum.setStatus('current')
tmnxCardSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 2), TmnxCardSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardSupportedTypes.setStatus('current')
tmnxCardAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 3), TmnxCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardAllowedTypes.setStatus('obsolete')
tmnxCardAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 4), TmnxCardType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardAssignedType.setStatus('current')
tmnxCardEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 5), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardEquippedType.setStatus('current')
tmnxCardHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 6), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardHwIndex.setStatus('current')
tmnxCardClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 10), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardClockSource.setStatus('current')
tmnxCardNumMdaSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNumMdaSlots.setStatus('current')
tmnxCardNumMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNumMdas.setStatus('current')
tmnxCardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 13), TmnxCardRebootType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardReboot.setStatus('current')
tmnxCardMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 14), Unsigned32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardMemorySize.setStatus('current')
tmnxCardNamedPoolAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 15), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardNamedPoolAdminMode.setStatus('current')
tmnxCardNamedPoolOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 16), TmnxAdminState().clone('outOfService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardNamedPoolOperMode.setStatus('current')
tmnxCardSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 17), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardSoftReset.setStatus('current')
tmnxCardLastBootupReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("hardReboot", 0), ("softReset", 1), ("powerCycle", 2), ("clearCard", 3), ("activitySwitch", 4), ("configChange", 5), ("runtimeFail", 6), ("bootFail", 7), ("unexpected", 8), ("issuTimeout", 9), ("reinserted", 10), ("issuHardReboot", 11), ("ccmFail", 12), ("powerChange", 13), ("levelChange", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLastBootupReason.setStatus('current')
tmnxCardCmplx1IngrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1IngrFcsOccur.setStatus('obsolete')
tmnxCardCmplx1IngrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1IngrFcsOccurTime.setStatus('obsolete')
tmnxCardCmplx1EgrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1EgrFcsOccur.setStatus('obsolete')
tmnxCardCmplx1EgrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1EgrFcsOccurTime.setStatus('obsolete')
tmnxCardCmplx2IngrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2IngrFcsOccur.setStatus('obsolete')
tmnxCardCmplx2IngrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2IngrFcsOccurTime.setStatus('obsolete')
tmnxCardCmplx2EgrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2EgrFcsOccur.setStatus('obsolete')
tmnxCardCmplx2EgrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2EgrFcsOccurTime.setStatus('obsolete')
tmnxCardCmplx1MemParityOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1MemParityOccur.setStatus('obsolete')
tmnxCardCmplx1MemParityOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 28), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1MemParityOccurTime.setStatus('obsolete')
tmnxCardCmplx2MemParityOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2MemParityOccur.setStatus('obsolete')
tmnxCardCmplx2MemParityOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2MemParityOccurTime.setStatus('obsolete')
tmnxCardCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 31), Bits().clone(namedValues=NamedValues(("sr", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardCapability.setStatus('current')
tmnxCardCmplx1CAMErrorOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1CAMErrorOccur.setStatus('obsolete')
tmnxCardCmplx1CAMErrorOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 33), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1CAMErrorOccurTime.setStatus('obsolete')
tmnxCardCmplx2CAMErrorOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2CAMErrorOccur.setStatus('obsolete')
tmnxCardCmplx2CAMErrorOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 35), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2CAMErrorOccurTime.setStatus('obsolete')
tmnxCardFailOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 36), Bits().clone(namedValues=NamedValues(("memoryEventGroupA", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardFailOnError.setStatus('current')
tmnxCardCmplx1EgrFcsSrcSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 37), TmnxCardSlotBitMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx1EgrFcsSrcSlots.setStatus('obsolete')
tmnxCardCmplx2EgrFcsSrcSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 38), TmnxCardSlotBitMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmplx2EgrFcsSrcSlots.setStatus('obsolete')
tmnxCardHardResetUnsupMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardHardResetUnsupMdas.setStatus('current')
tmnxCardCmpl1BufMemErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1BufMemErrOccur.setStatus('obsolete')
tmnxCardCmpl1BufMemErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 41), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1BufMemErrOccurTime.setStatus('obsolete')
tmnxCardCmpl2BufMemErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2BufMemErrOccur.setStatus('obsolete')
tmnxCardCmpl2BufMemErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 43), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2BufMemErrOccurTime.setStatus('obsolete')
tmnxCardCmpl1StatMemErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1StatMemErrOccur.setStatus('obsolete')
tmnxCardCmpl1StatMemErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 45), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1StatMemErrOccurTime.setStatus('obsolete')
tmnxCardCmpl2StatMemErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2StatMemErrOccur.setStatus('obsolete')
tmnxCardCmpl2StatMemErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 47), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2StatMemErrOccurTime.setStatus('obsolete')
tmnxCardCmpl1IntMemErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1IntMemErrOccur.setStatus('obsolete')
tmnxCardCmpl1IntMemErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 49), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1IntMemErrOccurTime.setStatus('obsolete')
tmnxCardCmpl2IntMemErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2IntMemErrOccur.setStatus('obsolete')
tmnxCardCmpl2IntMemErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 51), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2IntMemErrOccurTime.setStatus('obsolete')
tmnxCardCmpl1ChipIfDownOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1ChipIfDownOcc.setStatus('obsolete')
tmnxCardCmpl1ChipIfDownOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 53), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1ChipIfDownOccTime.setStatus('obsolete')
tmnxCardCmpl2ChipIfDownOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2ChipIfDownOcc.setStatus('obsolete')
tmnxCardCmpl2ChipIfDownOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 55), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2ChipIfDownOccTime.setStatus('obsolete')
tmnxCardCmpl1ChipIfCellOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1ChipIfCellOcc.setStatus('obsolete')
tmnxCardCmpl1ChipIfCellOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 57), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl1ChipIfCellOccTime.setStatus('obsolete')
tmnxCardCmpl2ChipIfCellOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2ChipIfCellOcc.setStatus('obsolete')
tmnxCardCmpl2ChipIfCellOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 59), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardCmpl2ChipIfCellOccTime.setStatus('obsolete')
tmnxCardResetOnRecoverableError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 60), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardResetOnRecoverableError.setStatus('current')
tmnxCardVmHypervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 61), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardVmHypervisor.setStatus('obsolete')
tmnxCardVmCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 62), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardVmCpu.setStatus('obsolete')
tmnxCardVmNumCores = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardVmNumCores.setStatus('obsolete')
tmnxCardAssignedLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 64), TmnxCardFunctionalLevel().clone('unrestricted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardAssignedLevel.setStatus('current')
tmnxCardEquippedLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 65), TmnxCardFunctionalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardEquippedLevel.setStatus('current')
tmnxCardLicensedLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 66), TmnxCardFunctionalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLicensedLevel.setStatus('current')
tmnxCardLicensedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 67), Unsigned32()).setUnits('gigabps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLicensedBandwidth.setStatus('current')
tmnxCardFilterScaleProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 68), TmnxCardFilterProfile().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardFilterScaleProfile.setStatus('current')
tmnxCpmCardLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardLastChange.setStatus('current')
tmnxCpmCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4), )
if mibBuilder.loadTexts: tmnxCpmCardTable.setStatus('current')
tmnxCpmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardNum"))
if mibBuilder.loadTexts: tmnxCpmCardEntry.setStatus('current')
tmnxCpmCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 1), TmnxSlotNum())
if mibBuilder.loadTexts: tmnxCpmCardSlotNum.setStatus('current')
tmnxCpmCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: tmnxCpmCardNum.setStatus('current')
tmnxCpmCardSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 3), TmnxCardSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardSupportedTypes.setStatus('current')
tmnxCpmCardAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 4), TmnxCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardAllowedTypes.setStatus('obsolete')
tmnxCpmCardAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 5), TmnxCardType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardAssignedType.setStatus('current')
tmnxCpmCardEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 6), TmnxCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardEquippedType.setStatus('current')
tmnxCpmCardHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 7), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardHwIndex.setStatus('current')
tmnxCpmCardBootOptionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 8), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionVersion.setStatus('current')
tmnxCpmCardBootOptionLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionLastModified.setStatus('current')
tmnxCpmCardConfigBootedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 10), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigBootedVersion.setStatus('current')
tmnxCpmCardIndexBootedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 11), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardIndexBootedVersion.setStatus('current')
tmnxCpmCardConfigLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigLastModified.setStatus('current')
tmnxCpmCardConfigLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigLastSaved.setStatus('current')
tmnxCpmCardRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("singleton", 1), ("redundantActive", 2), ("redundantStandby", 3), ("redundantSplit", 4), ("redundantDisabled", 5), ("redundantSyncing", 6), ("redundantExtActive", 7), ("redundantExtStandby", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardRedundant.setStatus('current')
tmnxCpmCardClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 15), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardClockSource.setStatus('current')
tmnxCpmCardNumCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardNumCpus.setStatus('current')
tmnxCpmCardCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("mips", 2), ("pentium-pc", 3), ("arm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCpuType.setStatus('current')
tmnxCpmCardMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 18), Unsigned32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardMemorySize.setStatus('current')
tmnxCpmCardSwitchToRedundantCard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardSwitchToRedundantCard.setStatus('current')
tmnxCpmCardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 20), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardReboot.setStatus('current')
tmnxCpmCardRereadBootOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 21), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardRereadBootOptions.setStatus('current')
tmnxCpmCardConfigFileLastBooted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastBooted.setStatus('current')
tmnxCpmCardConfigFileLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastSaved.setStatus('current')
tmnxCpmCardConfigFileLastBootedHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigFileLastBootedHeader.setStatus('current')
tmnxCpmCardIndexFileLastBootedHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardIndexFileLastBootedHeader.setStatus('current')
tmnxCpmCardBootOptionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionSource.setStatus('current')
tmnxCpmCardConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigSource.setStatus('current')
tmnxCpmCardBootOptionLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardBootOptionLastSaved.setStatus('current')
tmnxCpmCardMasterSlaveRefState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primaryRef", 1), ("secondaryRef", 2), ("notInitialized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardMasterSlaveRefState.setStatus('current')
tmnxCpmCardConfigUserLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 31), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardConfigUserLastModified.setStatus('current')
tmnxCpmCardCmplxCAMErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxCAMErrOccur.setStatus('current')
tmnxCpmCardCmplxCAMErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 33), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxCAMErrOccurTime.setStatus('current')
tmnxCpmCardOscillatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tcxo", 2), ("ocxo", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardOscillatorType.setStatus('current')
tmnxCpmCardCmplxMemErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxMemErrOccur.setStatus('current')
tmnxCpmCardCmplxMemErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 36), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxMemErrOccurTime.setStatus('current')
tmnxCpmCardCmplBufMemErrOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplBufMemErrOcc.setStatus('current')
tmnxCpmCardCmplBufMemErrOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 38), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplBufMemErrOccTime.setStatus('current')
tmnxCpmCardCmplStatMemErrOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplStatMemErrOcc.setStatus('current')
tmnxCpmCardCmplStatMemErrOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 40), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplStatMemErrOccTime.setStatus('current')
tmnxCpmCardCmplIntMemErrOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplIntMemErrOcc.setStatus('current')
tmnxCpmCardCmplIntMemErrOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 42), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplIntMemErrOccTime.setStatus('current')
tmnxCpmCardCmplChipIfDownOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplChipIfDownOcc.setStatus('current')
tmnxCpmCardCmplChipIfDownOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 44), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplChipIfDownOccTime.setStatus('current')
tmnxCpmCardCmplChipIfCellOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplChipIfCellOcc.setStatus('current')
tmnxCpmCardCmplChipIfCellOccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 46), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplChipIfCellOccTime.setStatus('current')
tmnxCpmCardRebootHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 47), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCpmCardRebootHold.setStatus('current')
tmnxCpmCardUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 49), TmnxUuid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardUuid.setStatus('current')
tmnxCpmCardCmplxIngrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxIngrFcsOccur.setStatus('current')
tmnxCpmCardCmplxIngrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 51), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxIngrFcsOccurTime.setStatus('current')
tmnxCpmCardCmplxEgrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxEgrFcsOccur.setStatus('current')
tmnxCpmCardCmplxEgrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 53), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxEgrFcsOccurTime.setStatus('current')
tmnxCpmCardCmplxEgrFcsSrcSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 54), TmnxCardSlotBitMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardCmplxEgrFcsSrcSlots.setStatus('current')
tmnxCpmCardVmHypervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 55), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardVmHypervisor.setStatus('obsolete')
tmnxCpmCardVmCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 56), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardVmCpu.setStatus('obsolete')
tmnxCpmCardVmNumCores = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmCardVmNumCores.setStatus('obsolete')
tmnxFabricLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricLastChange.setStatus('current')
tmnxFabricTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6), )
if mibBuilder.loadTexts: tmnxFabricTable.setStatus('current')
tmnxFabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFabricSlotNum"))
if mibBuilder.loadTexts: tmnxFabricEntry.setStatus('current')
tmnxFabricSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tmnxFabricSlotNum.setStatus('current')
tmnxFabricAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 2), TmnxFabricType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFabricAssignedType.setStatus('current')
tmnxFabricEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 3), TmnxFabricType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricEquippedType.setStatus('current')
tmnxFabricHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 4), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricHwIndex.setStatus('current')
tmnxFabricSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 5), TmnxFabricSuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricSupportedTypes.setStatus('current')
tmnxFabricReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 6), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFabricReboot.setStatus('current')
tmnxCpmFlashTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7), )
if mibBuilder.loadTexts: tmnxCpmFlashTable.setStatus('current')
tmnxCpmFlashEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmFlashId"))
if mibBuilder.loadTexts: tmnxCpmFlashEntry.setStatus('current')
tmnxCpmFlashId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tmnxCpmFlashId.setStatus('current')
tmnxCpmFlashOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashOperStatus.setStatus('current')
tmnxCpmFlashSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashSerialNumber.setStatus('current')
tmnxCpmFlashFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 4), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashFirmwareRevision.setStatus('current')
tmnxCpmFlashModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 5), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashModelNumber.setStatus('current')
tmnxCpmFlashCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 6), Unsigned32()).setUnits('sectors').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashCapacity.setStatus('current')
tmnxCpmFlashUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 7), Unsigned32()).setUnits('sectors').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashUsed.setStatus('current')
tmnxCpmFlashHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 8), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashHwIndex.setStatus('current')
tmnxCpmFlashPercentageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 9), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCpmFlashPercentageUsed.setStatus('current')
tmnxMDATable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8), )
if mibBuilder.loadTexts: tmnxMDATable.setStatus('current')
tmnxMDAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxMDAEntry.setStatus('current')
tmnxMDASlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: tmnxMDASlotNum.setStatus('current')
tmnxMDASupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 2), TmnxMDASuppType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDASupportedTypes.setStatus('current')
tmnxMDAAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 3), TmnxMdaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAllowedTypes.setStatus('obsolete')
tmnxMDAAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 4), TmnxMdaType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAssignedType.setStatus('current')
tmnxMDAEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 5), TmnxMdaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAEquippedType.setStatus('current')
tmnxMDAHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 6), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAHwIndex.setStatus('current')
tmnxMDAMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxPorts.setStatus('current')
tmnxMDAEquippedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAEquippedPorts.setStatus('current')
tmnxMDATxTimingSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cpmCardA", 1), ("cpmCardB", 2), ("local", 3), ("holdover", 4), ("notApplicable", 5), ("cpmCardC", 6), ("cpmCardD", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDATxTimingSelected.setStatus('current')
tmnxMDASyncIfTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qualified", 1), ("not-qualified", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDASyncIfTimingStatus.setStatus('current')
tmnxMDANetworkIngQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 12), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDANetworkIngQueues.setStatus('current')
tmnxMDACapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 13), Bits().clone(namedValues=NamedValues(("isEthernet", 0), ("isSonet", 1), ("isTDM", 2), ("supportsPPP", 3), ("supportsFR", 4), ("supportsATM", 5), ("supportscHDLC", 6), ("isCMA", 7), ("supportsCEM", 8), ("isSerial", 9), ("isWireless", 10), ("isCellular", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDACapabilities.setStatus('current')
tmnxMDAMinChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 14), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMinChannelization.setStatus('current')
tmnxMDAMaxChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 15), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxChannelization.setStatus('current')
tmnxMDAMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMaxChannels.setStatus('current')
tmnxMDAChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAChannelsInUse.setStatus('current')
tmnxMDACcagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 18), TmnxCcagId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDACcagId.setStatus('current')
tmnxMDAReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAReboot.setStatus('current')
tmnxMDAHiBwMcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastSource.setStatus('obsolete')
tmnxMDAHiBwMcastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastAlarm.setStatus('obsolete')
tmnxMDAHiBwMcastTapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastTapCount.setStatus('obsolete')
tmnxMDAHiBwMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHiBwMcastGroup.setStatus('obsolete')
tmnxMDAClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("adaptive", 1), ("differential", 2))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAClockMode.setStatus('current')
tmnxMDADiffTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(19440, 19440), ValueRangeConstraint(77760, 77760), ValueRangeConstraint(103680, 103680), ))).setUnits('kilohertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDADiffTimestampFreq.setStatus('current')
tmnxMDAIngHsmdaSchedPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 26), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngHsmdaSchedPolicy.setStatus('obsolete')
tmnxMDAMcPathMgmtBwPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 27), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtBwPlcyName.setStatus('obsolete')
tmnxMDAMcPathMgmtPriPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtPriPathLimit.setStatus('obsolete')
tmnxMDAMcPathMgmtSecPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtSecPathLimit.setStatus('obsolete')
tmnxMDAMcPathMgmtAncPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAncPathLimit.setStatus('obsolete')
tmnxMDAMcPathMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 31), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAdminState.setStatus('obsolete')
tmnxMDAIngNamedPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 32), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngNamedPoolPolicy.setStatus('current')
tmnxMDAEgrNamedPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 33), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrNamedPoolPolicy.setStatus('current')
tmnxMDAIngHsmdaPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 34), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngHsmdaPoolPolicy.setStatus('obsolete')
tmnxMDAEgrHsmdaPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 35), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrHsmdaPoolPolicy.setStatus('current')
tmnxMDAMcPathMgmtPriInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 36), Gauge32()).setUnits('kilobps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtPriInUseBw.setStatus('obsolete')
tmnxMDAMcPathMgmtSecInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 37), Gauge32()).setUnits('kilobps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtSecInUseBw.setStatus('obsolete')
tmnxMDAMcPathMgmtAncInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 38), Gauge32()).setUnits('kilobps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtAncInUseBw.setStatus('obsolete')
tmnxMDAMcPathMgmtBlkHoleInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 39), Gauge32()).setUnits('kilobps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAMcPathMgmtBlkHoleInUseBw.setStatus('obsolete')
tmnxMDASynchronousEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDASynchronousEthernet.setStatus('current')
tmnxMDAXplErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 41), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAXplErrorTime.setStatus('current')
tmnxMDAXplFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAXplFailedCount.setStatus('current')
tmnxMDAAtmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 43), TmnxMdaAtmMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAtmMode.setStatus('current')
tmnxMDAEgrHsmdaThrshLoBrstMult = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 65536), )).clone(-1)).setUnits('bytes per megabit of rate').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrHsmdaThrshLoBrstMult.setStatus('current')
tmnxMDAEgrHsmdaThrshHiBrstInc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65536)).clone(-1)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrHsmdaThrshHiBrstInc.setStatus('current')
tmnxMDAIsaTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 46), TmnxTunnelGroupIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIsaTunnelGroup.setStatus('current')
tmnxMDAIsaTunnelGroupInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAIsaTunnelGroupInUse.setStatus('current')
tmnxMDAHwPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAHwPowerPriority.setStatus('current')
tmnxMDAFailOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 49), Bits().clone(namedValues=NamedValues(("eventGroupA", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAFailOnError.setStatus('current')
tmnxMDAEgrXplErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1000)).setUnits('xpl errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrXplErrThreshold.setStatus('current')
tmnxMDAEgrXplErrWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(60)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAEgrXplErrWindow.setStatus('current')
tmnxMDAIngrXplErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1000)).setUnits('xpl errors').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngrXplErrThreshold.setStatus('current')
tmnxMDAIngrXplErrWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(60)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAIngrXplErrWindow.setStatus('current')
tmnxMDAResetOnRecoverableError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 54), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAResetOnRecoverableError.setStatus('current')
tmnxMDAAssignedLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 55), TmnxMDAFunctionalLevel().clone('unrestricted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMDAAssignedLevel.setStatus('current')
tmnxMDAEquippedLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 56), TmnxMDAFunctionalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAEquippedLevel.setStatus('current')
tmnxMDALicensedLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 57), TmnxMDAFunctionalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDALicensedLevel.setStatus('current')
tmnxMDALicensedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 58), Unsigned32()).setUnits('gigabps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDALicensedBandwidth.setStatus('current')
tmnxCardTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9), )
if mibBuilder.loadTexts: tmnxCardTypeTable.setStatus('current')
tmnxCardTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardTypeIndex"))
if mibBuilder.loadTexts: tmnxCardTypeEntry.setStatus('current')
tmnxCardTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 1), TmnxCardType())
if mibBuilder.loadTexts: tmnxCardTypeIndex.setStatus('current')
tmnxCardTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeName.setStatus('current')
tmnxCardTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeDescription.setStatus('current')
tmnxCardTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardTypeStatus.setStatus('current')
tmnxMdaTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10), )
if mibBuilder.loadTexts: tmnxMdaTypeTable.setStatus('current')
tmnxMdaTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxMdaTypeIndex"))
if mibBuilder.loadTexts: tmnxMdaTypeEntry.setStatus('current')
tmnxMdaTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 1), TmnxMdaType())
if mibBuilder.loadTexts: tmnxMdaTypeIndex.setStatus('current')
tmnxMdaTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeName.setStatus('current')
tmnxMdaTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeDescription.setStatus('current')
tmnxMdaTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaTypeStatus.setStatus('current')
tmnxSyncIfTimingTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11), )
if mibBuilder.loadTexts: tmnxSyncIfTimingTable.setStatus('current')
tmnxSyncIfTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1), )
tmnxCpmCardEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingEntry"))
tmnxSyncIfTimingEntry.setIndexNames(*tmnxCpmCardEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxSyncIfTimingEntry.setStatus('current')
tmnxSyncIfTimingRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRevert.setStatus('current')
tmnxSyncIfTimingRefOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 2), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder1.setStatus('current')
tmnxSyncIfTimingRefOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 3), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder2.setStatus('current')
tmnxSyncIfTimingRef1SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 4), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1SrcPort.setStatus('current')
tmnxSyncIfTimingRef1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 5), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1AdminStatus.setStatus('current')
tmnxSyncIfTimingRef1InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1InUse.setStatus('current')
tmnxSyncIfTimingRef1Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 7), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1Qualified.setStatus('current')
tmnxSyncIfTimingRef1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 8), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1Alarm.setStatus('current')
tmnxSyncIfTimingRef2SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 9), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2SrcPort.setStatus('current')
tmnxSyncIfTimingRef2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 10), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2AdminStatus.setStatus('current')
tmnxSyncIfTimingRef2InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2InUse.setStatus('current')
tmnxSyncIfTimingRef2Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 12), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2Qualified.setStatus('current')
tmnxSyncIfTimingRef2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 13), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2Alarm.setStatus('current')
tmnxSyncIfTimingFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 14), Integer32()).setUnits('parts-per-million').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingFreqOffset.setStatus('current')
tmnxSyncIfTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 15), TmnxSETSStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingStatus.setStatus('current')
tmnxSyncIfTimingRefOrder3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 16), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder3.setStatus('current')
tmnxSyncIfTimingBITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 17), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSIfType.setStatus('current')
tmnxSyncIfTimingBITSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 18), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSAdminStatus.setStatus('current')
tmnxSyncIfTimingBITSInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSInUse.setStatus('current')
tmnxSyncIfTimingBITSQualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 20), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSQualified.setStatus('current')
tmnxSyncIfTimingBITSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 21), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSAlarm.setStatus('current')
tmnxSyncIfTimingRef1SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 22), TmnxHwIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1SrcHw.setStatus('current')
tmnxSyncIfTimingRef1BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 23), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1BITSIfType.setStatus('current')
tmnxSyncIfTimingRef2SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 24), TmnxHwIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2SrcHw.setStatus('current')
tmnxSyncIfTimingRef2BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 25), TmnxBITSIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2BITSIfType.setStatus('current')
tmnxSyncIfTimingBITSOutAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 26), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutAdmStatus.setStatus('current')
tmnxSyncIfTimingBITSOutLineLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lengthNotApplicable", 0), ("length0To110", 1), ("length110To220", 2), ("length220To330", 3), ("length330To440", 4), ("length440To550", 5), ("length550To660", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutLineLen.setStatus('current')
tmnxSyncIfTimingRef1CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 28), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1CfgQltyLevel.setStatus('current')
tmnxSyncIfTimingRef1RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 29), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1RxQltyLevel.setStatus('current')
tmnxSyncIfTimingRef2CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 30), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2CfgQltyLevel.setStatus('current')
tmnxSyncIfTimingRef2RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 31), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2RxQltyLevel.setStatus('current')
tmnxSyncIfTimingBITSCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 32), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSCfgQltyLevel.setStatus('current')
tmnxSyncIfTimingBITSRxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 33), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSRxQltyLevel.setStatus('current')
tmnxSyncIfTimingBITS2InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2InUse.setStatus('current')
tmnxSyncIfTimingBITS2Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 35), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2Qualified.setStatus('current')
tmnxSyncIfTimingBITS2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 36), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2Alarm.setStatus('current')
tmnxSyncIfTimingBITS2RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 37), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2RxQltyLevel.setStatus('current')
tmnxSyncIfTimingRef1State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 38), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1State.setStatus('current')
tmnxSyncIfTimingRef2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 39), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2State.setStatus('current')
tmnxSyncIfTimingBITSState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 40), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSState.setStatus('current')
tmnxSyncIfTimingBITS2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 41), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2State.setStatus('current')
tmnxSyncIfTimingRef1NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef1NationalUse.setStatus('current')
tmnxSyncIfTimingRef2NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRef2NationalUse.setStatus('current')
tmnxSyncIfTimingBITSNationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSNationalUse.setStatus('current')
tmnxSyncIfTimingQLSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 45), TmnxEnabledDisabled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingQLSelection.setStatus('current')
tmnxSyncIfTimingOtherCPMInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 46), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingOtherCPMInUse.setStatus('current')
tmnxSyncIfTimingOtherCPMQual = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 47), TmnxSETSRefQualified().clone('not-qualified')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingOtherCPMQual.setStatus('current')
tmnxSyncIfTimingOtherCPMAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 48), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingOtherCPMAlarm.setStatus('current')
tmnxSyncIfTimingOtherCPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 49), TmnxRefInState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingOtherCPMState.setStatus('current')
tmnxSyncIfTimingBITSOutRefSel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 50), TmnxSETSRefSource().clone('noReference')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutRefSel.setStatus('current')
tmnxSyncIfTimingBITSTxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 51), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSTxQltyLevel.setStatus('current')
tmnxSyncIfTimingBITS2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 52), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITS2AdminStatus.setStatus('current')
tmnxSyncIfTimingSystemQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 53), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingSystemQltyLevel.setStatus('current')
tmnxSyncIfTimingRefOrder4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 54), TmnxSETSRefSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingRefOrder4.setStatus('current')
tmnxSyncIfTimingPTPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 55), TmnxPortAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPAdminStatus.setStatus('current')
tmnxSyncIfTimingPTPInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPInUse.setStatus('current')
tmnxSyncIfTimingPTPQualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 57), TmnxSETSRefQualified()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPQualified.setStatus('current')
tmnxSyncIfTimingPTPAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 58), TmnxSETSRefAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPAlarm.setStatus('current')
tmnxSyncIfTimingPTPCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 59), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPCfgQltyLevel.setStatus('current')
tmnxSyncIfTimingPTPRxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 60), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPRxQltyLevel.setStatus('current')
tmnxSyncIfTimingPTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 61), TmnxRefInState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingPTPState.setStatus('current')
tmnxSyncIfTimingBITSOutSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 62), TmnxBITSOutSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutSource.setStatus('current')
tmnxSyncIfTimingBITSOutQlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 63), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutQlMin.setStatus('current')
tmnxSyncIfTimingBITSOutSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 64), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingBITSOutSquelch.setStatus('current')
tmnxSyncIfTimingQlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 66), TmnxSSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingQlMin.setStatus('current')
tmnxSyncIfTimingWaitToRestorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 67), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSyncIfTimingWaitToRestorTime.setStatus('current')
tmnxCcagTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12), )
if mibBuilder.loadTexts: tmnxCcagTable.setStatus('current')
tmnxCcagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"))
if mibBuilder.loadTexts: tmnxCcagEntry.setStatus('current')
tmnxCcagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 1), TmnxCcagId())
if mibBuilder.loadTexts: tmnxCcagId.setStatus('current')
tmnxCcagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagRowStatus.setStatus('current')
tmnxCcagLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagLastChanged.setStatus('current')
tmnxCcagDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagDescription.setStatus('current')
tmnxCcagAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 5), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagAdminStatus.setStatus('current')
tmnxCcagOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 6), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagOperStatus.setStatus('current')
tmnxCcagCcaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 7), TmnxCcagRate().clone(-1)).setUnits('kilobps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagCcaRate.setStatus('current')
tmnxCcagAccessAdaptQos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link", 1), ("distribute", 2), ("portFair", 3))).clone('distribute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagAccessAdaptQos.setStatus('current')
tmnxCcagPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13), )
if mibBuilder.loadTexts: tmnxCcagPathTable.setStatus('current')
tmnxCcagPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathId"))
if mibBuilder.loadTexts: tmnxCcagPathEntry.setStatus('current')
tmnxCcagPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2))))
if mibBuilder.loadTexts: tmnxCcagPathId.setStatus('current')
tmnxCcagPathLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathLastChanged.setStatus('current')
tmnxCcagPathRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 3), TmnxCcagRate().clone(-1)).setUnits('kilobps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathRate.setStatus('current')
tmnxCcagPathRateOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 4), TmnxCcagRateOption().clone('aggregate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathRateOption.setStatus('current')
tmnxCcagPathWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathWeight.setStatus('current')
tmnxCcagPathCcTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14), )
if mibBuilder.loadTexts: tmnxCcagPathCcTable.setStatus('current')
tmnxCcagPathCcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcType"))
if mibBuilder.loadTexts: tmnxCcagPathCcEntry.setStatus('current')
tmnxCcagPathCcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sapsap", 1), ("sapnet", 2), ("netsap", 3))))
if mibBuilder.loadTexts: tmnxCcagPathCcType.setStatus('current')
tmnxCcagPathCcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcLastChanged.setStatus('current')
tmnxCcagPathCcEgrPoolResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcEgrPoolResvCbs.setStatus('current')
tmnxCcagPathCcEgrPoolSlpPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 4), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcEgrPoolSlpPlcy.setStatus('current')
tmnxCcagPathCcIngPoolResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcIngPoolResvCbs.setStatus('current')
tmnxCcagPathCcIngPoolSlpPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 6), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcIngPoolSlpPlcy.setStatus('current')
tmnxCcagPathCcAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcAcctPolicyId.setStatus('current')
tmnxCcagPathCcCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcCollectStats.setStatus('current')
tmnxCcagPathCcQueuePlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 9), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcQueuePlcy.setStatus('current')
tmnxCcagPathCcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcMac.setStatus('current')
tmnxCcagPathCcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCcagPathCcMtu.setStatus('current')
tmnxCcagPathCcUserAssignedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 12), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcUserAssignedMac.setStatus('current')
tmnxCcagPathCcHwMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCcagPathCcHwMac.setStatus('current')
tmnxMcmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15), )
if mibBuilder.loadTexts: tmnxMcmTable.setStatus('current')
tmnxMcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMcmSlotNum"))
if mibBuilder.loadTexts: tmnxMcmEntry.setStatus('current')
tmnxMcmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: tmnxMcmSlotNum.setStatus('current')
tmnxMcmSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 2), TmnxMcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmSupportedTypes.setStatus('current')
tmnxMcmAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 3), TmnxMcmType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMcmAssignedType.setStatus('current')
tmnxMcmEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 4), TmnxMcmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmEquippedType.setStatus('current')
tmnxMcmHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 5), TmnxHwIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmHwIndex.setStatus('current')
tmnxMcmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16), )
if mibBuilder.loadTexts: tmnxMcmTypeTable.setStatus('current')
tmnxMcmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxMcmTypeIndex"))
if mibBuilder.loadTexts: tmnxMcmTypeEntry.setStatus('current')
tmnxMcmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 1), TmnxMcmType())
if mibBuilder.loadTexts: tmnxMcmTypeIndex.setStatus('current')
tmnxMcmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeName.setStatus('current')
tmnxMcmTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeDescription.setStatus('current')
tmnxMcmTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcmTypeStatus.setStatus('current')
tmnxIPsecIsaGrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTableLastChanged.setStatus('current')
tmnxIPsecIsaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18), )
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTable.setStatus('current')
tmnxIPsecIsaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpId"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpEntry.setStatus('current')
tmnxIPsecIsaGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 1), TmnxTunnelGroupId())
if mibBuilder.loadTexts: tmnxIPsecIsaGrpId.setStatus('current')
tmnxIPsecIsaGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpRowStatus.setStatus('current')
tmnxIPsecIsaGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpLastChanged.setStatus('current')
tmnxIPsecIsaGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpDescription.setStatus('current')
tmnxIPsecIsaGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpAdminState.setStatus('current')
tmnxIPsecIsaGrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 6), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpOperState.setStatus('current')
tmnxIPsecIsaGrpIsaChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 7), TmnxChassisIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpIsaChassis.setStatus('current')
tmnxIPsecIsaGrpPrimaryIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 8), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpPrimaryIsa.setStatus('current')
tmnxIPsecIsaGrpBackupIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 9), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpBackupIsa.setStatus('current')
tmnxIPsecIsaGrpActiveIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 10), TmnxHwIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpActiveIsa.setStatus('current')
tmnxIPsecIsaGrpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTunnels.setStatus('current')
tmnxIPsecIsaGrpMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpMaxTunnels.setStatus('current')
tmnxIPsecIsaGrpTunnelReassembly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTunnelReassembly.setStatus('current')
tmnxIPsecIsaGrpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 14), TmnxIpSecIsaOperFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpOperFlags.setStatus('current')
tmnxIPsecIsaGrpMultiActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpMultiActive.setStatus('current')
tmnxIPsecIsaGrpActiveMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpActiveMda.setStatus('current')
tmnxIPsecIsaGrpIpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpIpTunnels.setStatus('current')
tmnxIPsecIsaGrpIpMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpIpMaxTunnels.setStatus('current')
tmnxIPsecIsaGrpIPsecRespondOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpIPsecRespondOnly.setStatus('current')
tmnxIPsecIsaGrpIsaScaleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("tunnelLimit2k", 1), ("tunnelLimit32k", 2), ("tunnelLimit8", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpIsaScaleMode.setStatus('current')
tmnxIPsecIsaGrpDpCpuUsageCollEn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpDpCpuUsageCollEn.setStatus('current')
tmnxIPsecIsaGrpTrafficFwdCollEn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 22), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTrafficFwdCollEn.setStatus('current')
tmnxHsmdaMdaSchOvrTblLastChangd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrTblLastChangd.setStatus('obsolete')
tmnxHsmdaMdaSchOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20), )
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrTable.setStatus('obsolete')
tmnxHsmdaMdaSchOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrEntry.setStatus('obsolete')
tmnxHsmdaMdaSchOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrRowStatus.setStatus('obsolete')
tmnxHsmdaMdaSchOvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrLastChanged.setStatus('obsolete')
tmnxHsmdaMdaSchOvrMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 3), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrMaxRate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrGrp1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 4), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrGrp1Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrGrp2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 5), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrGrp2Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 6), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass1Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass1WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 7), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass1WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 8), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass2Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass2WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 9), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass2WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 10), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass3Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass3WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 11), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass3WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 12), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass4Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass4WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 13), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass4WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass5Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 14), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass5Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass5WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 15), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass5WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 16), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass6Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass6WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 17), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass6WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass7Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 18), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass7Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass7WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 19), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass7WtInGrp.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass8Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 20), THsmdaPIRMRateOverride().clone(-2)).setUnits('megabps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass8Rate.setStatus('obsolete')
tmnxHsmdaMdaSchOvrClass8WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 21), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaMdaSchOvrClass8WtInGrp.setStatus('obsolete')
tmnxFPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21), )
if mibBuilder.loadTexts: tmnxFPTable.setStatus('current')
tmnxFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"))
if mibBuilder.loadTexts: tmnxFPEntry.setStatus('current')
tmnxFPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxFPNum.setStatus('current')
tmnxFPMcPathMgmtBwPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 2), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPMcPathMgmtBwPlcyName.setStatus('current')
tmnxFPMcPathMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 3), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPMcPathMgmtAdminState.setStatus('current')
tmnxFPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPLastChanged.setStatus('current')
tmnxFPHiBwMcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPHiBwMcastSource.setStatus('current')
tmnxFPHiBwMcastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPHiBwMcastAlarm.setStatus('current')
tmnxFPHiBwMcastTapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPHiBwMcastTapCount.setStatus('current')
tmnxFPHiBwMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPHiBwMcastGroup.setStatus('current')
tmnxFPWredBufAllocMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(2500)).setUnits('centipercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredBufAllocMin.setStatus('current')
tmnxFPWredBufAllocMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(2500)).setUnits('centipercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredBufAllocMax.setStatus('current')
tmnxFPWredResvCbsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(2500)).setUnits('centipercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredResvCbsMin.setStatus('current')
tmnxFPWredResvCbsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(2500)).setUnits('centipercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredResvCbsMax.setStatus('current')
tmnxFPWredSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 13), TNamedItemOrEmpty().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredSlopePolicy.setStatus('current')
tmnxFPWredAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 14), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPWredAdminState.setStatus('current')
tmnxFPHiBwMcastDefaultPathsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPHiBwMcastDefaultPathsOnly.setStatus('current')
tmnxFPDCpuProtDynEnfrcPlcrPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 32000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPDCpuProtDynEnfrcPlcrPool.setStatus('current')
tmnxFPStablePoolSizing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPStablePoolSizing.setStatus('current')
tmnxFPIngressBufferAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2000, 8000)).clone(5000)).setUnits('centipercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPIngressBufferAllocation.setStatus('current')
tmnxFPPlcyAcctStatsPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 19), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 128000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPPlcyAcctStatsPool.setStatus('current')
tmnxFPPlcyAcctStatsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPPlcyAcctStatsInUse.setStatus('current')
tmnxFPInitExtractDropPrioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uniform", 1), ("l3Classify", 2))).clone('uniform')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPInitExtractDropPrioMode.setStatus('current')
tmnxFPEgrHsPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 22), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPEgrHsPoolPolicy.setStatus('current')
tmnxFPEgrHsFixedHighThreshDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65536), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFPEgrHsFixedHighThreshDelta.setStatus('current')
tmnxFPMcPathMgmtPriInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 24), Gauge32()).setUnits('kilobps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPMcPathMgmtPriInUseBw.setStatus('current')
tmnxFPMcPathMgmtSecInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 25), Gauge32()).setUnits('kilobps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPMcPathMgmtSecInUseBw.setStatus('current')
tmnxFPMcPathMgmtBlkHoleInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 26), Gauge32()).setUnits('kilobps').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPMcPathMgmtBlkHoleInUseBw.setStatus('current')
tmnxFPGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 27), TmnxFpGeneration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPGeneration.setStatus('current')
tmnxFPAccIngQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpTableLastChgd.setStatus('current')
tmnxFPAccIngQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23), )
if mibBuilder.loadTexts: tmnxFPAccIngQGrpTable.setStatus('current')
tmnxFPAccIngQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"))
if mibBuilder.loadTexts: tmnxFPAccIngQGrpEntry.setStatus('current')
tmnxFPAccIngQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxFPAccIngQGrpName.setStatus('current')
tmnxFPAccIngQGrpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tmnxFPAccIngQGrpInstanceId.setStatus('current')
tmnxFPAccIngQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpRowStatus.setStatus('current')
tmnxFPAccIngQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpLastChgd.setStatus('current')
tmnxFPAccIngQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpAcctgPolId.setStatus('current')
tmnxFPAccIngQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpCollectStats.setStatus('current')
tmnxFPAccIngQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 7), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpDescr.setStatus('current')
tmnxFPAccIngQGrpPolicerPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPolicerPol.setStatus('current')
tmnxFPNetIngQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpTableLastChgd.setStatus('current')
tmnxFPNetIngQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25), )
if mibBuilder.loadTexts: tmnxFPNetIngQGrpTable.setStatus('current')
tmnxFPNetIngQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"))
if mibBuilder.loadTexts: tmnxFPNetIngQGrpEntry.setStatus('current')
tmnxFPNetIngQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxFPNetIngQGrpName.setStatus('current')
tmnxFPNetIngQGrpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tmnxFPNetIngQGrpInstanceId.setStatus('current')
tmnxFPNetIngQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpRowStatus.setStatus('current')
tmnxFPNetIngQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpLastChgd.setStatus('current')
tmnxFPNetIngQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpAcctgPolId.setStatus('current')
tmnxFPNetIngQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpCollectStats.setStatus('current')
tmnxFPNetIngQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 7), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpDescr.setStatus('current')
tmnxFPNetIngQGrpPolicerPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPolicerPol.setStatus('current')
tmnxFabricTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26), )
if mibBuilder.loadTexts: tmnxFabricTypeTable.setStatus('current')
tmnxFabricTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxFabricTypeIndex"))
if mibBuilder.loadTexts: tmnxFabricTypeEntry.setStatus('current')
tmnxFabricTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 1), TmnxFabricType())
if mibBuilder.loadTexts: tmnxFabricTypeIndex.setStatus('current')
tmnxFabricTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricTypeName.setStatus('current')
tmnxFabricTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricTypeDescription.setStatus('current')
tmnxFabricTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFabricTypeStatus.setStatus('current')
tmnxFPNetIngQGrpPStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27), )
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPStatTable.setStatus('current')
tmnxFPNetIngQGrpPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPStatPolicerId"))
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPStatEntry.setStatus('current')
tmnxFPNetIngQGrpPStatPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPStatPolicerId.setStatus('current')
tmnxFPNetIngQGrpPStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 2), TmnxIngPolicerStatMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQGrpPStatMode.setStatus('current')
tmnxFPNetIngQgPStOffHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioPkts.setStatus('current')
tmnxFPNetIngQgPStOffHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioPktsL.setStatus('current')
tmnxFPNetIngQgPStOffHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioPktsH.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioPkts.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioPktsL.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioPktsH.setStatus('current')
tmnxFPNetIngQgPStOffLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioPkts.setStatus('current')
tmnxFPNetIngQgPStOffLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioPktsL.setStatus('current')
tmnxFPNetIngQgPStOffLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioPktsH.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioPkts.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioPktsL.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioPktsH.setStatus('current')
tmnxFPNetIngQgPStOffHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioOcts.setStatus('current')
tmnxFPNetIngQgPStOffHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioOctsL.setStatus('current')
tmnxFPNetIngQgPStOffHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffHPrioOctsH.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioOcts.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioOctsL.setStatus('current')
tmnxFPNetIngQgPStDrpHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpHPrioOctsH.setStatus('current')
tmnxFPNetIngQgPStOffLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioOcts.setStatus('current')
tmnxFPNetIngQgPStOffLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioOctsL.setStatus('current')
tmnxFPNetIngQgPStOffLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStOffLPrioOctsH.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioOcts.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioOctsL.setStatus('current')
tmnxFPNetIngQgPStDrpLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStDrpLPrioOctsH.setStatus('current')
tmnxFPNetIngQgPStFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfPkts.setStatus('current')
tmnxFPNetIngQgPStFwdInProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfPktsL.setStatus('current')
tmnxFPNetIngQgPStFwdInProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfPktsH.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfPkts.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfPktsL.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfPktsH.setStatus('current')
tmnxFPNetIngQgPStFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfOcts.setStatus('current')
tmnxFPNetIngQgPStFwdInProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfOctsL.setStatus('current')
tmnxFPNetIngQgPStFwdInProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdInProfOctsH.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfOcts.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfOctsL.setStatus('current')
tmnxFPNetIngQgPStFwdOutProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStFwdOutProfOctsH.setStatus('current')
tmnxFPNetIngQgPStUncolPktsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolPktsOff.setStatus('current')
tmnxFPNetIngQgPStUncolPktsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolPktsOffL.setStatus('current')
tmnxFPNetIngQgPStUncolPktsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolPktsOffH.setStatus('current')
tmnxFPNetIngQgPStUncolOctsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolOctsOff.setStatus('current')
tmnxFPNetIngQgPStUncolOctsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolOctsOffL.setStatus('current')
tmnxFPNetIngQgPStUncolOctsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPNetIngQgPStUncolOctsOffH.setStatus('current')
tmnxFPAccIngQGrpPStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28), )
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPStatTable.setStatus('current')
tmnxFPAccIngQGrpPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPStatPolicerId"))
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPStatEntry.setStatus('current')
tmnxFPAccIngQGrpPStatPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPStatPolicerId.setStatus('current')
tmnxFPAccIngQGrpPStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 2), TmnxIngPolicerStatMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQGrpPStatMode.setStatus('current')
tmnxFPAccIngQgPStOffHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioPkts.setStatus('current')
tmnxFPAccIngQgPStOffHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioPktsL.setStatus('current')
tmnxFPAccIngQgPStOffHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioPktsH.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioPkts.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioPktsL.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioPktsH.setStatus('current')
tmnxFPAccIngQgPStOffLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioPkts.setStatus('current')
tmnxFPAccIngQgPStOffLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioPktsL.setStatus('current')
tmnxFPAccIngQgPStOffLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioPktsH.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioPkts.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioPktsL.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioPktsH.setStatus('current')
tmnxFPAccIngQgPStOffHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioOcts.setStatus('current')
tmnxFPAccIngQgPStOffHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioOctsL.setStatus('current')
tmnxFPAccIngQgPStOffHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffHPrioOctsH.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioOcts.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioOctsL.setStatus('current')
tmnxFPAccIngQgPStDrpHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpHPrioOctsH.setStatus('current')
tmnxFPAccIngQgPStOffLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioOcts.setStatus('current')
tmnxFPAccIngQgPStOffLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioOctsL.setStatus('current')
tmnxFPAccIngQgPStOffLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStOffLPrioOctsH.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioOcts.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioOctsL.setStatus('current')
tmnxFPAccIngQgPStDrpLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStDrpLPrioOctsH.setStatus('current')
tmnxFPAccIngQgPStFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfPkts.setStatus('current')
tmnxFPAccIngQgPStFwdInProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfPktsL.setStatus('current')
tmnxFPAccIngQgPStFwdInProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfPktsH.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfPkts.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfPktsL.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfPktsH.setStatus('current')
tmnxFPAccIngQgPStFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfOcts.setStatus('current')
tmnxFPAccIngQgPStFwdInProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfOctsL.setStatus('current')
tmnxFPAccIngQgPStFwdInProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdInProfOctsH.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfOcts.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfOctsL.setStatus('current')
tmnxFPAccIngQgPStFwdOutProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStFwdOutProfOctsH.setStatus('current')
tmnxFPAccIngQgPStUncolPktsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolPktsOff.setStatus('current')
tmnxFPAccIngQgPStUncolPktsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolPktsOffL.setStatus('current')
tmnxFPAccIngQgPStUncolPktsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolPktsOffH.setStatus('current')
tmnxFPAccIngQgPStUncolOctsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolOctsOff.setStatus('current')
tmnxFPAccIngQgPStUncolOctsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolOctsOffL.setStatus('current')
tmnxFPAccIngQgPStUncolOctsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFPAccIngQgPStUncolOctsOffH.setStatus('current')
tFPAccIngQGrpPlcrOvrTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrTblLstChgd.setStatus('current')
tFPAccIngQGrpPlcrOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30), )
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrTable.setStatus('current')
tFPAccIngQGrpPlcrOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrPolicerId"))
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrEntry.setStatus('current')
tFPAccIngQGrpPlcrOvrPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrPolicerId.setStatus('current')
tFPAccIngQGrpPlcrOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrRowStatus.setStatus('current')
tFPAccIngQGrpPlcrOvrLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrLastChgd.setStatus('current')
tFPAccIngQGrpPlcrOvrAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 4), THPolPIRRateOverride().clone(-2)).setUnits('kilobps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrAdminPIR.setStatus('current')
tFPAccIngQGrpPlcrOvrAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 5), THPolCIRRateOverride().clone(-2)).setUnits('kilobps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrAdminCIR.setStatus('current')
tFPAccIngQGrpPlcrOvrStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 6), TmnxIngPolicerStatModeOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrStatMode.setStatus('current')
tFPAccIngQGrpPlcrOvrMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 7), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrMBS.setStatus('current')
tFPAccIngQGrpPlcrOvrCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 8), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrCBS.setStatus('current')
tFPAccIngQGrpPlcrOvrPktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 9), TPerPacketOffsetOvr().clone(-128)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPlcrOvrPktOffset.setStatus('current')
tFPAccIngQGrpArbitStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31), )
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatTable.setStatus('current')
tFPAccIngQGrpArbitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatName"))
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatEntry.setStatus('current')
tFPAccIngQGrpArbitStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatName.setStatus('current')
tFPAccIngQGrpArbitStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdPkts.setStatus('current')
tFPAccIngQGrpArbitStatFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdPktsL.setStatus('current')
tFPAccIngQGrpArbitStatFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdPktsH.setStatus('current')
tFPAccIngQGrpArbitStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdOcts.setStatus('current')
tFPAccIngQGrpArbitStatFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdOctsL.setStatus('current')
tFPAccIngQGrpArbitStatFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpArbitStatFwdOctsH.setStatus('current')
tFPNetIngQGrpArbitStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32), )
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatTable.setStatus('current')
tFPNetIngQGrpArbitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatName"))
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatEntry.setStatus('current')
tFPNetIngQGrpArbitStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatName.setStatus('current')
tFPNetIngQGrpArbitStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdPkts.setStatus('current')
tFPNetIngQGrpArbitStatFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdPktsL.setStatus('current')
tFPNetIngQGrpArbitStatFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdPktsH.setStatus('current')
tFPNetIngQGrpArbitStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdOcts.setStatus('current')
tFPNetIngQGrpArbitStatFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdOctsL.setStatus('current')
tFPNetIngQGrpArbitStatFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpArbitStatFwdOctsH.setStatus('current')
tmnxVirtualSchedulerAdjTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33), )
if mibBuilder.loadTexts: tmnxVirtualSchedulerAdjTable.setStatus('current')
tmnxVirtualSchedulerAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"))
if mibBuilder.loadTexts: tmnxVirtualSchedulerAdjEntry.setStatus('current')
tmnxCardRateCalcFastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardRateCalcFastQueue.setStatus('current')
tmnxCardRateCalcSlowQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardRateCalcSlowQueue.setStatus('current')
tmnxCardSchedRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardSchedRun.setStatus('current')
tmnxCardTaskScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardTaskScheduling.setStatus('current')
tmnxCardSlowQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000)).setUnits('kilobps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardSlowQueueThresh.setStatus('current')
tmnxCardInternalSchedWghtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 6), TmnxInternalSchedWeightMode().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCardInternalSchedWghtMode.setStatus('current')
tmnxFpDcpDynEnfrcPlcrStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 34), )
if mibBuilder.loadTexts: tmnxFpDcpDynEnfrcPlcrStatTable.setStatus('current')
tmnxFpDcpDynEnfrcPlcrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 34, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"))
if mibBuilder.loadTexts: tmnxFpDcpDynEnfrcPlcrStatEntry.setStatus('current')
tmnxFpDcpDynPlcrHiWtrMrkHitCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 34, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFpDcpDynPlcrHiWtrMrkHitCnt.setStatus('current')
tmnxFpDcpDynPlcrHiWtrMrkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 34, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFpDcpDynPlcrHiWtrMrkTime.setStatus('current')
tmnxFpDcpDynPlcrAllocFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 34, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFpDcpDynPlcrAllocFailCount.setStatus('current')
tmnxFpDcpDynPlcrInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 34, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFpDcpDynPlcrInUse.setStatus('current')
tFPNetIngQGrpPlcrOvrTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 35), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrTblLstChgd.setStatus('current')
tFPNetIngQGrpPlcrOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36), )
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrTable.setStatus('current')
tFPNetIngQGrpPlcrOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrPolicerId"))
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrEntry.setStatus('current')
tFPNetIngQGrpPlcrOvrPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 1), TIngPolicerId())
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrPolicerId.setStatus('current')
tFPNetIngQGrpPlcrOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrRowStatus.setStatus('current')
tFPNetIngQGrpPlcrOvrLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrLastChgd.setStatus('current')
tFPNetIngQGrpPlcrOvrAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 4), THPolPIRRateOverride().clone(-2)).setUnits('kilobps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrAdminPIR.setStatus('current')
tFPNetIngQGrpPlcrOvrAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 5), THPolCIRRateOverride().clone(-2)).setUnits('kilobps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrAdminCIR.setStatus('current')
tFPNetIngQGrpPlcrOvrStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 6), TmnxIngPolicerStatModeOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrStatMode.setStatus('current')
tFPNetIngQGrpPlcrOvrMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 7), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrMBS.setStatus('current')
tFPNetIngQGrpPlcrOvrCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 8), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrCBS.setStatus('current')
tFPNetIngQGrpPlcrOvrPktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 36, 1, 9), TPerPacketOffsetOvr().clone(-128)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPlcrOvrPktOffset.setStatus('current')
tFPAccIngQGrpPCPOvrTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 37), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrTblLastChgd.setStatus('current')
tFPAccIngQGrpPCPOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 38), )
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrTable.setStatus('current')
tFPAccIngQGrpPCPOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 38, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"))
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrEntry.setStatus('current')
tFPAccIngQGrpPCPOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 38, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrRowStatus.setStatus('current')
tFPAccIngQGrpPCPOvrLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 38, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrLastChgd.setStatus('current')
tFPAccIngQGrpPCPOvrMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 38, 1, 3), THPolPIRRateOverride().clone(-2)).setUnits('kilobps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrMaxRate.setStatus('current')
tFPAccIngQGrpPCPOvrMinMBSSep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 38, 1, 4), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrMinMBSSep.setStatus('current')
tFPAccIngQGrpPCPOvrLvlTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 39), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrLvlTblLstChgd.setStatus('current')
tFPAccIngQGrpPCPOvrLvlTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 40), )
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrLvlTable.setStatus('current')
tFPAccIngQGrpPCPOvrLvlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 40, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrLvl"))
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrLvlEntry.setStatus('current')
tFPAccIngQGrpPCPOvrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 40, 1, 1), TLevel())
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrLvl.setStatus('current')
tFPAccIngQGrpPCPOvrLvlLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 40, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrLvlLastChgd.setStatus('current')
tFPAccIngQGrpPCPOvrLvlMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 40, 1, 3), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPAccIngQGrpPCPOvrLvlMBS.setStatus('current')
tFPNetIngQGrpPCPOvrTblLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 41), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrTblLastChgd.setStatus('current')
tFPNetIngQGrpPCPOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 42), )
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrTable.setStatus('current')
tFPNetIngQGrpPCPOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 42, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"))
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrEntry.setStatus('current')
tFPNetIngQGrpPCPOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 42, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrRowStatus.setStatus('current')
tFPNetIngQGrpPCPOvrLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 42, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrLastChgd.setStatus('current')
tFPNetIngQGrpPCPOvrMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 42, 1, 3), THPolPIRRateOverride().clone(-2)).setUnits('kilobps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrMaxRate.setStatus('current')
tFPNetIngQGrpPCPOvrMinMBSSep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 42, 1, 4), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrMinMBSSep.setStatus('current')
tFPNetIngQGrpPCPOvrLvlTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 43), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrLvlTblLstChgd.setStatus('current')
tFPNetIngQGrpPCPOvrLvlTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 44), )
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrLvlTable.setStatus('current')
tFPNetIngQGrpPCPOvrLvlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 44, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrLvl"))
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrLvlEntry.setStatus('current')
tFPNetIngQGrpPCPOvrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 44, 1, 1), TLevel())
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrLvl.setStatus('current')
tFPNetIngQGrpPCPOvrLvlLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 44, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrLvlLastChgd.setStatus('current')
tFPNetIngQGrpPCPOvrLvlMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 44, 1, 3), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tFPNetIngQGrpPCPOvrLvlMBS.setStatus('current')
tCardResTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45), )
if mibBuilder.loadTexts: tCardResTable.setStatus('current')
tCardResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"))
if mibBuilder.loadTexts: tCardResEntry.setStatus('current')
tCardResQosUserSchedsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResQosUserSchedsTotal.setStatus('current')
tCardResQosUserSchedsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResQosUserSchedsAlloc.setStatus('current')
tCardResQosIntSchedsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResQosIntSchedsTotal.setStatus('obsolete')
tCardResQosIntSchedsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResQosIntSchedsAlloc.setStatus('obsolete')
tCardResSubSPIQosOvrTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResSubSPIQosOvrTotal.setStatus('current')
tCardResSubSPIQosOvrAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResSubSPIQosOvrAlloc.setStatus('current')
tCardResHsmdaQOvrTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResHsmdaQOvrTotal.setStatus('current')
tCardResHsmdaQOvrAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResHsmdaQOvrAlloc.setStatus('current')
tCardResPortAccEgrQGrpInstTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResPortAccEgrQGrpInstTotal.setStatus('current')
tCardResPortAccEgrQGrpInstAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResPortAccEgrQGrpInstAlloc.setStatus('current')
tCardResPortNetEgrQGrpInstTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResPortNetEgrQGrpInstTotal.setStatus('current')
tCardResPortNetEgrQGrpInstAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResPortNetEgrQGrpInstAlloc.setStatus('current')
tCardResPortEgrQGrpInstTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResPortEgrQGrpInstTotal.setStatus('current')
tCardResPortEgrQGrpInstAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResPortEgrQGrpInstAlloc.setStatus('current')
tCardResFPIngQGrpInstTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResFPIngQGrpInstTotal.setStatus('current')
tCardResFPIngQGrpInstAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResFPIngQGrpInstAlloc.setStatus('current')
tCardResPortEgrVPortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResPortEgrVPortTotal.setStatus('current')
tCardResPortEgrVPortAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResPortEgrVPortAlloc.setStatus('current')
tCardResQosUserSchedOvrsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResQosUserSchedOvrsTotal.setStatus('current')
tCardResQosUserSchedOvrsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResQosUserSchedOvrsAlloc.setStatus('current')
tCardResCategoryEntriesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResCategoryEntriesTotal.setStatus('current')
tCardResCategoryEntriesAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResCategoryEntriesAlloc.setStatus('current')
tCardResIntArbiterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResIntArbiterTotal.setStatus('current')
tCardResIntArbiterAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResIntArbiterAlloc.setStatus('current')
tCardResIntArbiterOvrsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResIntArbiterOvrsTotal.setStatus('current')
tCardResIntArbiterOvrsAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResIntArbiterOvrsAlloc.setStatus('current')
tCardResSLAProfileInstanceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResSLAProfileInstanceTotal.setStatus('current')
tCardResSLAProfileInstanceAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResSLAProfileInstanceAlloc.setStatus('current')
tCardResEncapGrpMemberTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResEncapGrpMemberTotal.setStatus('current')
tCardResEncapGrpMemberAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 45, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tCardResEncapGrpMemberAlloc.setStatus('current')
tFPResTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46), )
if mibBuilder.loadTexts: tFPResTable.setStatus('current')
tFPResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"))
if mibBuilder.loadTexts: tFPResEntry.setStatus('current')
tFPResSapIngQosPolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSapIngQosPolTotal.setStatus('current')
tFPResSapIngQosPolAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSapIngQosPolAlloc.setStatus('current')
tFPResDynEgrClassTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynEgrClassTotal.setStatus('current')
tFPResDynEgrClassAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynEgrClassAlloc.setStatus('current')
tFPResDynEgrClassIUBSE = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynEgrClassIUBSE.setStatus('current')
tFPResDynEgrClassIUBNE = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynEgrClassIUBNE.setStatus('current')
tFPResIngQueueTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngQueueTotal.setStatus('current')
tFPResIngQueueAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngQueueAlloc.setStatus('current')
tFPResEgrQueueTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrQueueTotal.setStatus('current')
tFPResEgrQueueAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrQueueAlloc.setStatus('current')
tFPResIngPolicerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngPolicerTotal.setStatus('current')
tFPResIngPolicerAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngPolicerAlloc.setStatus('current')
tFPResEgrPolicerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrPolicerTotal.setStatus('current')
tFPResEgrPolicerAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrPolicerAlloc.setStatus('current')
tFPResIngPolicerStatTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngPolicerStatTotal.setStatus('current')
tFPResIngPolicerStatAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngPolicerStatAlloc.setStatus('current')
tFPResEgrPolicerStatTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrPolicerStatTotal.setStatus('current')
tFPResEgrPolicerStatAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrPolicerStatAlloc.setStatus('current')
tFPResIngRootArbiterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngRootArbiterTotal.setStatus('current')
tFPResIngRootArbiterAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngRootArbiterAlloc.setStatus('current')
tFPResEgrRootArbiterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrRootArbiterTotal.setStatus('current')
tFPResEgrRootArbiterAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrRootArbiterAlloc.setStatus('current')
tFPResIntArbiterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIntArbiterTotal.setStatus('obsolete')
tFPResIntArbiterAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIntArbiterAlloc.setStatus('obsolete')
tFPResDynQueueTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQueueTotal.setStatus('current')
tFPResDynQueueAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQueueAlloc.setStatus('current')
tFPResDynQueueIUBI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQueueIUBI.setStatus('current')
tFPResDynQueueIUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQueueIUBE.setStatus('current')
tFPResDynPolicerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynPolicerTotal.setStatus('current')
tFPResDynPolicerAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynPolicerAlloc.setStatus('current')
tFPResDynPolicerIUBI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynPolicerIUBI.setStatus('current')
tFPResDynPolicerIUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynPolicerIUBE.setStatus('current')
tFPResDynPolicerStatTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynPolicerStatTotal.setStatus('current')
tFPResDynPolicerStatAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynPolicerStatAlloc.setStatus('current')
tFPResDynPolicerStatIUBI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynPolicerStatIUBI.setStatus('current')
tFPResDynPolicerStatIUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynPolicerStatIUBE.setStatus('current')
tFPResIngAclEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngAclEntryTotal.setStatus('current')
tFPResIngAclEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngAclEntryAlloc.setStatus('current')
tFPResIngQosEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngQosEntryTotal.setStatus('current')
tFPResIngQosEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 40), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngQosEntryAlloc.setStatus('current')
tFPResIngAclQosEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngAclQosEntryTotal.setStatus('current')
tFPResIngAclQosEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngAclQosEntryAlloc.setStatus('current')
tFPResIngIPv6AclEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngIPv6AclEntryTotal.setStatus('current')
tFPResIngIPv6AclEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngIPv6AclEntryAlloc.setStatus('current')
tFPResIngIPv6QosEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngIPv6QosEntryTotal.setStatus('current')
tFPResIngIPv6QosEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngIPv6QosEntryAlloc.setStatus('current')
tFPResEgrAclEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 47), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrAclEntryTotal.setStatus('current')
tFPResEgrAclEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrAclEntryAlloc.setStatus('current')
tFPResEgrQosEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrQosEntryTotal.setStatus('current')
tFPResEgrQosEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrQosEntryAlloc.setStatus('current')
tFPResEgrAclQosEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 51), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrAclQosEntryTotal.setStatus('current')
tFPResEgrAclQosEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrAclQosEntryAlloc.setStatus('current')
tFPResEgrIPv6AclEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrIPv6AclEntryTotal.setStatus('current')
tFPResEgrIPv6AclEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrIPv6AclEntryAlloc.setStatus('current')
tFPResEgrIPv6QosEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrIPv6QosEntryTotal.setStatus('current')
tFPResEgrIPv6QosEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrIPv6QosEntryAlloc.setStatus('current')
tFPResIngAclFilterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngAclFilterTotal.setStatus('current')
tFPResIngAclFilterAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngAclFilterAlloc.setStatus('current')
tFPResEgrAclFilterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrAclFilterTotal.setStatus('current')
tFPResEgrAclFilterAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrAclFilterAlloc.setStatus('current')
tFPResDynSvcEntryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynSvcEntryTotal.setStatus('current')
tFPResDynSvcEntryAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 62), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynSvcEntryAlloc.setStatus('current')
tFPResSubHostTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSubHostTotal.setStatus('current')
tFPResSubHostAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSubHostAlloc.setStatus('current')
tFPResEncapGrpMemberTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEncapGrpMemberTotal.setStatus('current')
tFPResEncapGrpMemberAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEncapGrpMemberAlloc.setStatus('current')
tFPResEgrNetQGrpMapTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrNetQGrpMapTotal.setStatus('current')
tFPResEgrNetQGrpMapAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 68), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrNetQGrpMapAlloc.setStatus('current')
tFPResMacFdbRecTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 69), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResMacFdbRecTotal.setStatus('current')
tFPResMacFdbRecAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 70), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResMacFdbRecAlloc.setStatus('current')
tFPResResRvplsFdbRecTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 71), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResResRvplsFdbRecTotal.setStatus('obsolete')
tFPResResRvplsFdbRecAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 72), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResResRvplsFdbRecAlloc.setStatus('obsolete')
tFPResDynQ2NamedPoolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQ2NamedPoolTotal.setStatus('current')
tFPResDynQ2NamedPoolAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 74), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQ2NamedPoolAlloc.setStatus('current')
tFPResDynQ2NamedPoolIUBI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 75), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQ2NamedPoolIUBI.setStatus('current')
tFPResDynQ2NamedPoolIUBE = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 76), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQ2NamedPoolIUBE.setStatus('current')
tFPResIngQ1NamedPoolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 77), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngQ1NamedPoolTotal.setStatus('obsolete')
tFPResIngQ1NamedPoolAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 78), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngQ1NamedPoolAlloc.setStatus('obsolete')
tFPResEgrQ1NamedPoolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 79), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrQ1NamedPoolTotal.setStatus('obsolete')
tFPResEgrQ1NamedPoolAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrQ1NamedPoolAlloc.setStatus('obsolete')
tFPResDynQ2WredPoolTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 81), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQ2WredPoolTotal.setStatus('current')
tFPResDynQ2WredPoolAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 82), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResDynQ2WredPoolAlloc.setStatus('current')
tFPResIngIPv6AclFilterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 83), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngIPv6AclFilterTotal.setStatus('current')
tFPResIngIPv6AclFilterAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 84), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngIPv6AclFilterAlloc.setStatus('current')
tFPResEgrIPv6AclFilterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 85), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrIPv6AclFilterTotal.setStatus('current')
tFPResEgrIPv6AclFilterAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 86), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrIPv6AclFilterAlloc.setStatus('current')
tFPResEgrQosBypassTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 87), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrQosBypassTotal.setStatus('current')
tFPResEgrQosBypassAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 88), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrQosBypassAlloc.setStatus('current')
tFPResSapInstanceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 89), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSapInstanceTotal.setStatus('current')
tFPResSapInstanceAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 90), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSapInstanceAlloc.setStatus('current')
tFPResEgrHsQGrpTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 91), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsQGrpTotal.setStatus('current')
tFPResEgrHsQGrpAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 92), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsQGrpAlloc.setStatus('current')
tFPResEgrHsPrimaryShapersTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 93), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsPrimaryShapersTotal.setStatus('current')
tFPResEgrHsPrimaryShapersAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 94), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsPrimaryShapersAlloc.setStatus('current')
tFPResEgrHsPrimaryShapersIUBES = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 95), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsPrimaryShapersIUBES.setStatus('current')
tFPResEgrHsPrimaryShapersIUBMS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 96), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsPrimaryShapersIUBMS.setStatus('current')
tFPResEgrHsSecondaryShapersTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 97), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsSecondaryShapersTotal.setStatus('current')
tFPResEgrHsSecondaryShapersAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 98), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsSecondaryShapersAlloc.setStatus('current')
tFPResEgrHsTurboQGrpTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsTurboQGrpTotal.setStatus('current')
tFPResEgrHsTurboQGrpAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrHsTurboQGrpAlloc.setStatus('current')
tFPResIngQGrpRedirTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngQGrpRedirTotal.setStatus('current')
tFPResIngQGrpRedirAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 102), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResIngQGrpRedirAlloc.setStatus('current')
tFPResSapInstEgrQGrpRedirTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 103), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSapInstEgrQGrpRedirTotal.setStatus('current')
tFPResSapInstEgrQGrpRedirAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 104), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSapInstEgrQGrpRedirAlloc.setStatus('current')
tFPResEgrUserQueueTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 105), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrUserQueueTotal.setStatus('current')
tFPResEgrUserQueueAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 106), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrUserQueueAlloc.setStatus('current')
tFPResEgrUserPolicerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 107), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrUserPolicerTotal.setStatus('current')
tFPResEgrUserPolicerAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 108), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResEgrUserPolicerAlloc.setStatus('current')
tFPResSLAProfileInstanceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 109), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSLAProfileInstanceTotal.setStatus('current')
tFPResSLAProfileInstanceAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 46, 1, 110), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFPResSLAProfileInstanceAlloc.setStatus('current')
tMDAResTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 47), )
if mibBuilder.loadTexts: tMDAResTable.setStatus('current')
tMDAResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 47, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tMDAResEntry.setStatus('current')
tMDAResEgrHsmdaQGrpTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 47, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMDAResEgrHsmdaQGrpTotal.setStatus('current')
tMDAResEgrHsmdaQGrpAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 47, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMDAResEgrHsmdaQGrpAlloc.setStatus('current')
tMDAResEgrHsmdaSecShaperTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 47, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMDAResEgrHsmdaSecShaperTotal.setStatus('current')
tMDAResEgrHsmdaSecShaperAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 47, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMDAResEgrHsmdaSecShaperAlloc.setStatus('current')
tMDAResSapInstanceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 47, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMDAResSapInstanceTotal.setStatus('current')
tMDAResSapInstanceAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 47, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tMDAResSapInstanceAlloc.setStatus('current')
tFPEgressFwdEngDRStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 52), )
if mibBuilder.loadTexts: tFPEgressFwdEngDRStatsTable.setStatus('current')
tFPEgressFwdEngDRStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 52, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"))
if mibBuilder.loadTexts: tFPEgressFwdEngDRStatsEntry.setStatus('current')
tFwdEngDREgrEncapExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 52, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFwdEngDREgrEncapExceeded.setStatus('current')
tFwdEngDREgrMtuExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 52, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFwdEngDREgrMtuExceeded.setStatus('current')
tmnxCardVFpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 53), )
if mibBuilder.loadTexts: tmnxCardVFpStatsTable.setStatus('current')
tmnxCardVFpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 53, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardVFpTaskType"))
if mibBuilder.loadTexts: tmnxCardVFpStatsEntry.setStatus('current')
tmnxCardVFpTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 53, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nic", 1), ("worker", 2), ("scheduler", 3), ("collapsed", 4), ("combined", 5))))
if mibBuilder.loadTexts: tmnxCardVFpTaskType.setStatus('current')
tmnxCardVFpCpuCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 53, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardVFpCpuCount.setStatus('current')
tmnxCardVFpAvgUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 53, 1, 3), Unsigned32()).setUnits('centipercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardVFpAvgUtilization.setStatus('current')
tmnxCardVFpMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 53, 1, 4), Unsigned32()).setUnits('centipercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardVFpMaxUtilization.setStatus('current')
tmnxCardVCpuSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 54), )
if mibBuilder.loadTexts: tmnxCardVCpuSchedStatsTable.setStatus('current')
tmnxCardVCpuSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 54, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"))
if mibBuilder.loadTexts: tmnxCardVCpuSchedStatsEntry.setStatus('current')
tmnxCardVCpuSchedHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 54, 1, 1), Unsigned32()).setUnits('centipercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardVCpuSchedHealth.setStatus('current')
tmnxCardVCpuSchedLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 54, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardVCpuSchedLastClearedTime.setStatus('current')
tmnxCardComplexStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55), )
if mibBuilder.loadTexts: tmnxCardComplexStatsTable.setStatus('current')
tmnxCardComplexStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardComplexNum"))
if mibBuilder.loadTexts: tmnxCardComplexStatsEntry.setStatus('current')
tmnxCardComplexNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxCardComplexNum.setStatus('current')
tmnxCardComplexIngFcsError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexIngFcsError.setStatus('current')
tmnxCardComplexIngFcsErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexIngFcsErrTime.setStatus('current')
tmnxCardComplexEgrFcsError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexEgrFcsError.setStatus('current')
tmnxCardComplexEgrFcsErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexEgrFcsErrTime.setStatus('current')
tmnxCardComplexMemParError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexMemParError.setStatus('current')
tmnxCardComplexMemParErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexMemParErrTime.setStatus('current')
tmnxCardComplexCamError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexCamError.setStatus('current')
tmnxCardComplexCamErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexCamErrTime.setStatus('current')
tmnxCardComplexBufMemError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexBufMemError.setStatus('current')
tmnxCardComplexBufMemErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexBufMemErrTime.setStatus('current')
tmnxCardComplexStatsMemError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexStatsMemError.setStatus('current')
tmnxCardComplexStatsMemErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexStatsMemErrTime.setStatus('current')
tmnxCardComplexIntMemError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexIntMemError.setStatus('current')
tmnxCardComplexIntMemErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexIntMemErrTime.setStatus('current')
tmnxCardComplexIntDatapathError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexIntDatapathError.setStatus('current')
tmnxCardComplexIntDatapthErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexIntDatapthErrTime.setStatus('current')
tmnxCardComplexIntDpCellError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexIntDpCellError.setStatus('current')
tmnxCardComplexIntDpCellErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexIntDpCellErrTime.setStatus('current')
tmnxCardComplexSrcSlotsEgFcsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 55, 1, 20), TmnxCardSlotBitMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardComplexSrcSlotsEgFcsErr.setStatus('current')
tmnxCardLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 56), )
if mibBuilder.loadTexts: tmnxCardLevelTable.setStatus('current')
tmnxCardLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 56, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardTypeIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardLevelIndex"))
if mibBuilder.loadTexts: tmnxCardLevelEntry.setStatus('current')
tmnxCardLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 56, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxCardLevelIndex.setStatus('current')
tmnxCardLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 56, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLevelName.setStatus('current')
tmnxCardLevelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 56, 1, 3), TmnxCardFunctionalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLevelId.setStatus('current')
tmnxCardLevelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 56, 1, 4), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLevelDescription.setStatus('current')
tmnxCardLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 56, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLevelStatus.setStatus('current')
tmnxMdaLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 57), )
if mibBuilder.loadTexts: tmnxMdaLevelTable.setStatus('current')
tmnxMdaLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 57, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxMdaTypeIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMdaLevelIndex"))
if mibBuilder.loadTexts: tmnxMdaLevelEntry.setStatus('current')
tmnxMdaLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 57, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxMdaLevelIndex.setStatus('current')
tmnxMdaLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 57, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaLevelName.setStatus('current')
tmnxMdaLevelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 57, 1, 3), TmnxMDAFunctionalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaLevelId.setStatus('current')
tmnxMdaLevelDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 57, 1, 4), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaLevelDescription.setStatus('current')
tmnxMdaLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 57, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMdaLevelStatus.setStatus('current')
tmnxGnssTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 58), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssTableLastChange.setStatus('current')
tmnxGnssTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 59), )
if mibBuilder.loadTexts: tmnxGnssTable.setStatus('current')
tmnxGnssEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 59, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxGnssEntry.setStatus('current')
tmnxGnssCfgLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 59, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssCfgLastChanged.setStatus('current')
tmnxGnssAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 59, 1, 2), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxGnssAdminState.setStatus('current')
tmnxGnssConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 59, 1, 3), TmnxGnssConstellation().clone('gps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxGnssConstellation.setStatus('current')
tmnxGnssNmeaAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 59, 1, 4), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxGnssNmeaAdminState.setStatus('current')
tmnxGnssNmeaSentenceTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 59, 1, 5), Bits().clone(namedValues=NamedValues(("gpgga", 0), ("gprmc", 1), ("gpvtg", 2), ("gngns", 3))).clone(namedValues=NamedValues(("gpgga", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxGnssNmeaSentenceTypes.setStatus('current')
tmnxGnssNmeaSentenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 59, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxGnssNmeaSentenceInterval.setStatus('current')
tmnxGnssOperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60), )
if mibBuilder.loadTexts: tmnxGnssOperTable.setStatus('current')
tmnxGnssOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxGnssOperEntry.setStatus('current')
tmnxGnssOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1, 1), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssOperState.setStatus('current')
tmnxGnssPositionValid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssPositionValid.setStatus('current')
tmnxGnssDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1, 3), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssDateTime.setStatus('current')
tmnxGnssLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9000000, 9000000))).setUnits('0.00001 degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssLatitude.setStatus('current')
tmnxGnssLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-18000000, 18000000))).setUnits('0.00001 degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssLongitude.setStatus('current')
tmnxGnssAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10000, 100000))).setUnits('decimeters').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssAltitude.setStatus('current')
tmnxGnssHeading = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('decidegrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssHeading.setStatus('current')
tmnxGnssSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 60, 1, 8), Unsigned32()).setUnits('decameters per hour').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssSpeed.setStatus('current')
tmnxGnssSatelliteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 61), )
if mibBuilder.loadTexts: tmnxGnssSatelliteTable.setStatus('current')
tmnxGnssSatelliteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 61, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxGnssSatelliteNumber"))
if mibBuilder.loadTexts: tmnxGnssSatelliteEntry.setStatus('current')
tmnxGnssSatelliteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 61, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tmnxGnssSatelliteNumber.setStatus('current')
tmnxGnssSatelliteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 61, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gps", 1), ("glonass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssSatelliteType.setStatus('current')
tmnxGnssSatelliteElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 61, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssSatelliteElevation.setStatus('current')
tmnxGnssSatelliteAzimuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 61, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssSatelliteAzimuth.setStatus('current')
tmnxGnssSatelliteSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 61, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxGnssSatelliteSnr.setStatus('current')
tmnxVmCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 63), )
if mibBuilder.loadTexts: tmnxVmCardTable.setStatus('current')
tmnxVmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 63, 1), )
tmnxCardEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxVmCardEntry"))
tmnxVmCardEntry.setIndexNames(*tmnxCardEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxVmCardEntry.setStatus('current')
tmnxVmCardHypervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 63, 1, 1), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVmCardHypervisor.setStatus('current')
tmnxVmCardCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 63, 1, 2), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVmCardCpu.setStatus('current')
tmnxVmCardNumCores = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 63, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVmCardNumCores.setStatus('current')
tmnxVmCpmCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 64), )
if mibBuilder.loadTexts: tmnxVmCpmCardTable.setStatus('current')
tmnxVmCpmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 64, 1), )
tmnxCpmCardEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxVmCpmCardEntry"))
tmnxVmCpmCardEntry.setIndexNames(*tmnxCpmCardEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxVmCpmCardEntry.setStatus('current')
tmnxVmCpmCardHypervisor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 64, 1, 1), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVmCpmCardHypervisor.setStatus('current')
tmnxVmCpmCardCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 64, 1, 2), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVmCpmCardCpu.setStatus('current')
tmnxVmCpmCardNumCores = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 64, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxVmCpmCardNumCores.setStatus('current')
tmnxCardLevelUpgradesTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 65), )
if mibBuilder.loadTexts: tmnxCardLevelUpgradesTable.setStatus('current')
tmnxCardLevelUpgradesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 65, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardLevelUpgradeId"))
if mibBuilder.loadTexts: tmnxCardLevelUpgradesEntry.setStatus('current')
tmnxCardLevelUpgradeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 65, 1, 1), TmnxCardFunctionalUpgrade())
if mibBuilder.loadTexts: tmnxCardLevelUpgradeId.setStatus('current')
tmnxCardLevelUpgradeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 65, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardLevelUpgradeName.setStatus('current')
tmnxCardUpgradeLevelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 65, 1, 3), TmnxCardFunctionalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardUpgradeLevelId.setStatus('current')
tmnxCardUpgradeRequiresReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 65, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCardUpgradeRequiresReboot.setStatus('current')
tmnxCardLevelUpgradeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 66), )
if mibBuilder.loadTexts: tmnxCardLevelUpgradeTable.setStatus('current')
tmnxCardLevelUpgradeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 66, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardLevelUpgradeIndex"))
if mibBuilder.loadTexts: tmnxCardLevelUpgradeEntry.setStatus('current')
tmnxCardLevelUpgradeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 66, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: tmnxCardLevelUpgradeIndex.setStatus('current')
tmnxCardLevelUpgradeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 66, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCardLevelUpgradeRowStatus.setStatus('current')
tmnxCardAssignedLevelUpgradeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 66, 1, 3), TmnxCardFunctionalUpgrade()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCardAssignedLevelUpgradeId.setStatus('current')
tmnxMDALevelUpgradesTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 67), )
if mibBuilder.loadTexts: tmnxMDALevelUpgradesTable.setStatus('current')
tmnxMDALevelUpgradesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 67, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDALevelUpgradeId"))
if mibBuilder.loadTexts: tmnxMDALevelUpgradesEntry.setStatus('current')
tmnxMDALevelUpgradeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 67, 1, 1), TmnxMDAFunctionalUpgrade())
if mibBuilder.loadTexts: tmnxMDALevelUpgradeId.setStatus('current')
tmnxMDALevelUpgradeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 67, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDALevelUpgradeName.setStatus('current')
tmnxMDAUpgradeLevelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 67, 1, 3), TmnxMDAFunctionalLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAUpgradeLevelId.setStatus('current')
tmnxMDAUpgradeRequiresReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 67, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAUpgradeRequiresReboot.setStatus('current')
tmnxMDALevelUpgradeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 68), )
if mibBuilder.loadTexts: tmnxMDALevelUpgradeTable.setStatus('current')
tmnxMDALevelUpgradeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 68, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDALevelUpgradeIndex"))
if mibBuilder.loadTexts: tmnxMDALevelUpgradeEntry.setStatus('current')
tmnxMDALevelUpgradeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 68, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: tmnxMDALevelUpgradeIndex.setStatus('current')
tmnxMDALevelUpgradeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 68, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMDALevelUpgradeRowStatus.setStatus('current')
tmnxMDAAssignedLevelUpgradeId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 68, 1, 3), TmnxMDAFunctionalUpgrade()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMDAAssignedLevelUpgradeId.setStatus('current')
tmnxMDAIsaTnlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 69), )
if mibBuilder.loadTexts: tmnxMDAIsaTnlStatsTable.setStatus('current')
tmnxMDAIsaTnlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 69, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
if mibBuilder.loadTexts: tmnxMDAIsaTnlStatsEntry.setStatus('current')
tmnxMDAIsaTnlStatsCryptoAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 69, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMDAIsaTnlStatsCryptoAcc.setStatus('current')
tmnxChassisNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6))
tmnxEqNotificationRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 1), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxEqNotificationRow.setStatus('current')
tmnxEqTypeNotificationRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 2), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxEqTypeNotificationRow.setStatus('current')
tmnxChassisNotifyChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 3), TmnxChassisIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyChassisId.setStatus('current')
tmnxChassisNotifyHwIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 4), TmnxHwIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyHwIndex.setStatus('current')
tmnxRedSecondaryCPMStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("fail", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxRedSecondaryCPMStatus.setStatus('current')
tmnxChassisNotifyOID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 6), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyOID.setStatus('current')
tmnxSyncIfTimingNotifyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 0), ("los", 1), ("oof", 2), ("oopir", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSyncIfTimingNotifyAlarm.setStatus('current')
tmnxChassisNotifyMismatchedVer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyMismatchedVer.setStatus('current')
tmnxChassisNotifySoftwareLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifySoftwareLocation.setStatus('current')
tmnxChassisNotifyCardFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardFailureReason.setStatus('current')
tmnxChassisNotifyCardName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardName.setStatus('current')
tmnxChassisNotifyCardSyncFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardSyncFile.setStatus('current')
tmnxCardComplexNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCardComplexNumber.setStatus('current')
tmnxCardFwdDirection = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCardFwdDirection.setStatus('current')
tmnxCardSoftResetState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initiated", 1), ("aborted", 2), ("complete", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCardSoftResetState.setStatus('current')
tmnxMdaNotifyType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 16), TmnxMdaType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxMdaNotifyType.setStatus('current')
tmnxCardSrcSlotBitmap = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 17), TmnxCardSlotBitMap()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCardSrcSlotBitmap.setStatus('current')
tmnxDcpTimeEventOccured = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 18), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDcpTimeEventOccured.setStatus('current')
tmnxDcpMissingNotificationCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 19), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDcpMissingNotificationCount.setStatus('current')
tmnxChassisNotifyCardSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 20), TmnxSlotNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCardSlotNum.setStatus('current')
tmnxChassisNotifyPowerZone = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 21), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyPowerZone.setStatus('current')
tmnxChassisNotifyPowerCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 22), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyPowerCapacity.setStatus('current')
tmnxPlcyAcctTimeEventOccured = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 23), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPlcyAcctTimeEventOccured.setStatus('current')
tmnxPlcyAcctMissingNotifCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 24), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPlcyAcctMissingNotifCount.setStatus('current')
tmnxChassisNotifyCpmCardSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 25), TmnxSlotNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyCpmCardSlotNum.setStatus('current')
tmnxChassisNotifyFabricSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 26), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyFabricSlotNum.setStatus('current')
tmnxIomResourceType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nextHop", 1), ("tunnelNextHop", 2), ("stickyHash", 3), ("arpEntry", 4), ("ecmp", 5), ("ecmpNextHop", 6), ("ecmpTunnel", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxIomResourceType.setStatus('current')
tmnxIomResourceLimitPct = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 28), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxIomResourceLimitPct.setStatus('current')
tmnxIomResLimitTimeEventOccured = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 29), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxIomResLimitTimeEventOccured.setStatus('current')
tmnxIomResLimMissingNotifCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 30), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxIomResLimMissingNotifCount.setStatus('current')
tmnxChassisNotifyFpNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 31), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyFpNum.setStatus('current')
tmnxChassisNotifyDiskFullReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 32), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyDiskFullReason.setStatus('current')
tmnxChassisNotifyMgmtEthRedPort = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 33), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxChassisNotifyMgmtEthRedPort.setStatus('current')
tmnxMacScaleCardSlotNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 38), TmnxSlotNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxMacScaleCardSlotNum.setStatus('current')
tmnxCpmPowerShelfCommsFail = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 39), TmnxCpmPowerShelfCommsFailStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCpmPowerShelfCommsFail.setStatus('current')
tmnxChassisAdminObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8))
tmnxChassisAdminCtrlObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1))
tmnxChassisAdminOwner = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminOwner.setStatus('current')
tmnxChassisAdminControlApply = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("initialize", 2), ("commit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminControlApply.setStatus('current')
tmnxChassisAdminLastSetTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 3), TimeInterval()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChassisAdminLastSetTimer.setStatus('obsolete')
tmnxChassisAdminLastSetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 4), TimeInterval().clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxChassisAdminLastSetTimeout.setStatus('obsolete')
tmnxChassisAdminValueObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2))
tSyncIfTimingAdmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1), )
if mibBuilder.loadTexts: tSyncIfTimingAdmTable.setStatus('current')
tSyncIfTimingAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardNum"))
if mibBuilder.loadTexts: tSyncIfTimingAdmEntry.setStatus('current')
tSyncIfTimingAdmRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRevert.setStatus('current')
tSyncIfTimingAdmRefOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 2), TmnxSETSRefSource().clone('bits')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder1.setStatus('current')
tSyncIfTimingAdmRefOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 3), TmnxSETSRefSource().clone('reference1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder2.setStatus('current')
tSyncIfTimingAdmRef1SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 4), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1SrcPort.setStatus('current')
tSyncIfTimingAdmRef1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 5), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1AdminStatus.setStatus('current')
tSyncIfTimingAdmRef2SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 6), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2SrcPort.setStatus('current')
tSyncIfTimingAdmRef2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 7), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2AdminStatus.setStatus('current')
tSyncIfTimingAdmChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmChanged.setStatus('current')
tSyncIfTimingAdmRefOrder3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 9), TmnxSETSRefSource().clone('reference2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder3.setStatus('current')
tSyncIfTimingAdmBITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 10), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSIfType.setStatus('current')
tSyncIfTimingAdmBITSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 11), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSAdminStatus.setStatus('current')
tSyncIfTimingAdmRef1SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 12), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1SrcHw.setStatus('current')
tSyncIfTimingAdmRef1BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 13), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1BITSIfType.setStatus('current')
tSyncIfTimingAdmRef2SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 14), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2SrcHw.setStatus('current')
tSyncIfTimingAdmRef2BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 15), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2BITSIfType.setStatus('current')
tSyncIfTimingAdmBITSOutAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 16), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSOutAdmStatus.setStatus('current')
tSyncIfTimingAdmBITSOutLineLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lengthNotApplicable", 0), ("length0To110", 1), ("length110To220", 2), ("length220To330", 3), ("length330To440", 4), ("length440To550", 5), ("length550To660", 6))).clone('lengthNotApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSOutLineLen.setStatus('current')
tSyncIfTimingAdmRef1CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 18), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1CfgQltyLevel.setStatus('current')
tSyncIfTimingAdmRef2CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 19), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2CfgQltyLevel.setStatus('current')
tSyncIfTimingAdmBITSCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 20), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSCfgQltyLevel.setStatus('current')
tSyncIfTimingAdmRef1NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef1NationalUse.setStatus('current')
tSyncIfTimingAdmRef2NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRef2NationalUse.setStatus('current')
tSyncIfTimingAdmBITSNationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSNationalUse.setStatus('current')
tSyncIfTimingAdmQLSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 24), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmQLSelection.setStatus('current')
tSyncIfTimingAdmRefOrder4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 25), TmnxSETSRefSource().clone('ptp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmRefOrder4.setStatus('current')
tSyncIfTimingAdmPTPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 26), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmPTPAdminStatus.setStatus('current')
tSyncIfTimingAdmPTPCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 27), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmPTPCfgQltyLevel.setStatus('current')
tSyncIfTimingAdmBITSOutSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 28), TmnxBITSOutSource().clone('lineRef')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSOutSource.setStatus('current')
tSyncIfTimingAdmBITSOutQlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 29), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSOutQlMin.setStatus('current')
tSyncIfTimingAdmBITSOutSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmBITSOutSquelch.setStatus('current')
tSyncIfTimingAdmQlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 32), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmQlMin.setStatus('current')
tSyncIfTimingAdmWaitToRestorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tSyncIfTimingAdmWaitToRestorTime.setStatus('current')
tSyncIfTimingAdmChangedMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 34), Bits().clone(namedValues=NamedValues(("tSyncIfTimingAdmRevert", 0), ("tSyncIfTimingAdmRefOrder1", 1), ("tSyncIfTimingAdmRefOrder2", 2), ("tSyncIfTimingAdmRef1SrcPort", 3), ("tSyncIfTimingAdmRef1AdminStatus", 4), ("tSyncIfTimingAdmRef2SrcPort", 5), ("tSyncIfTimingAdmRef2AdminStatus", 6), ("tSyncIfTimingAdmChanged", 7), ("tSyncIfTimingAdmRefOrder3", 8), ("tSyncIfTimingAdmBITSIfType", 9), ("tSyncIfTimingAdmBITSAdminStatus", 10), ("tSyncIfTimingAdmRef1SrcHw", 11), ("tSyncIfTimingAdmRef1BITSIfType", 12), ("tSyncIfTimingAdmRef2SrcHw", 13), ("tSyncIfTimingAdmRef2BITSIfType", 14), ("tSyncIfTimingAdmBITSOutAdmStatus", 15), ("tSyncIfTimingAdmBITSOutLineLen", 16), ("tSyncIfTimingAdmRef1CfgQltyLevel", 17), ("tSyncIfTimingAdmRef2CfgQltyLevel", 18), ("tSyncIfTimingAdmBITSCfgQltyLevel", 19), ("tSyncIfTimingAdmRef1NationalUse", 20), ("tSyncIfTimingAdmRef2NationalUse", 21), ("tSyncIfTimingAdmBITSNationalUse", 22), ("tSyncIfTimingAdmQLSelection", 23), ("tSyncIfTimingAdmRefOrder4", 24), ("tSyncIfTimingAdmPTPAdminStatus", 25), ("tSyncIfTimingAdmPTPCfgQltyLevel", 26), ("tSyncIfTimingAdmBITSOutSource", 27), ("tSyncIfTimingAdmBITSOutQlMin", 28), ("tSyncIfTimingAdmBITSOutSquelch", 29), ("tSyncIfTimingAdmHoldOffTime", 30), ("tSyncIfTimingAdmQlMin", 31), ("tSyncIfTimingAdmWaitToRestorTime", 32), ("tSyncIfTimingAdmChangedMask", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tSyncIfTimingAdmChangedMask.setStatus('current')
tmnxHwConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2))
tmnxChassisConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1))
tmnxChassisCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1))
tmnxChassisV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV4v0Compliance = tmnxChassisV4v0Compliance.setStatus('obsolete')
tmnxChassisComp7710 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5))
tmnxChassisComp7710V3v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V3v0 = tmnxChassisComp7710V3v0.setStatus('obsolete')
tmnxChassisComp7710V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V5v0 = tmnxChassisComp7710V5v0.setStatus('obsolete')
tmnxChassisComp7710V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V6v0 = tmnxChassisComp7710V6v0.setStatus('obsolete')
tmnxChassisComp7710V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V6v1 = tmnxChassisComp7710V6v1.setStatus('obsolete')
tmnxChassisComp7710V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V7v0 = tmnxChassisComp7710V7v0.setStatus('obsolete')
tmnxChassisComp7710V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisComp7710V8v0 = tmnxChassisComp7710V8v0.setStatus('obsolete')
tmnxChassisV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0Compliance = tmnxChassisV5v0Compliance.setStatus('obsolete')
tmnxChassis7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7750V6v0Compliance = tmnxChassis7750V6v0Compliance.setStatus('obsolete')
tmnxChassis7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7450V6v0Compliance = tmnxChassis7450V6v0Compliance.setStatus('obsolete')
tmnxChassis7750V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7750V6v1Compliance = tmnxChassis7750V6v1Compliance.setStatus('obsolete')
tmnxChassis7450V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7450V6v1Compliance = tmnxChassis7450V6v1Compliance.setStatus('obsolete')
tmnxChassis7750V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7750V7v0Compliance = tmnxChassis7750V7v0Compliance.setStatus('obsolete')
tmnxChassis7450V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7450V7v0Compliance = tmnxChassis7450V7v0Compliance.setStatus('obsolete')
tmnxChassis7x50V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassis7x50V8v0Compliance = tmnxChassis7x50V8v0Compliance.setStatus('obsolete')
tmnxChassisV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV9v0Compliance = tmnxChassisV9v0Compliance.setStatus('obsolete')
tmnxChassisV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIpsecV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpV10v0R4Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHsmdaPoolV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroupV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGrpV10v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV10v0Compliance = tmnxChassisV10v0Compliance.setStatus('obsolete')
tmnxChassisV11v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisQGrpOvrGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSwitchFabNtfyV11v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDCpuProtV11v0R0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyObjsV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpV10v0R4Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIpsecV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHsmdaPoolV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPoolSizingV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplQChipMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplChipIfErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSmartPeqV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSmartPeqNtfyV11v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroupV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGrpV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRebootHoldV11v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV11v0Compliance = tmnxChassisV11v0Compliance.setStatus('obsolete')
tmnxChassisV12v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFabricV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyObjsV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerNotifV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisQGrpOvrGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSwitchFabNtfyV11v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRebootHoldV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDCpuProtV11v0R0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyObjsV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpV10v0R4Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIpsecV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHsmdaPoolV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPoolSizingV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisResourceV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPBufAllocV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplQChipMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplChipIfErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyV9v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSmartPeqV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSmartPeqNtfyV11v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassPANotifyObjsV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPlcyAcctNtfyV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResrcNotifyObjsV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResrcNotifyV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroupV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGrpV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardResetOnRecoverErGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAResetOnRecoverErGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeNotifGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmPChipFcsObjGroupV12v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV12v0Compliance = tmnxChassisV12v0Compliance.setStatus('obsolete')
tmnxChassisV13v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFabricV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyObjsV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerNotifV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisQGrpOvrGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSwitchFabNtfyV11v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRebootHoldV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDCpuProtV11v0R0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyObjsV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpV10v0R4Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIpsecV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHsmdaPoolV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPoolSizingV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPBufAllocV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplQChipMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplChipIfErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyV9v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSmartPeqV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSmartPeqNtfyV11v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassPANotifyObjsV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPlcyAcctNtfyV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResrcNotifyObjsV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResrcNotifyV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroupV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGrpV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisResourceV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVirtualSchAdjV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRedNtfV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRedV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtGroupV13v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyObjsV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFpResourceV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardResetOnRecoverErGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAResetOnRecoverErGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeNotifGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmPChipFcsObjGroupV12v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV13v0Compliance = tmnxChassisV13v0Compliance.setStatus('obsolete')
tmnxChassisV14v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 19)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisResourceV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNotifGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tFPFwdEngStatsGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIsaMemWMarkNotifGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeNotifGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxIsaGrpIsaScaleModeGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVirtualGroupV14v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV14v0Compliance = tmnxChassisV14v0Compliance.setStatus('obsolete')
tmnxChassisV15v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 20)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFabricV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyObjsV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisQGrpOvrGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSwitchFabNtfyV11v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRebootHoldV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDCpuProtV11v0R0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyObjsV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpV10v0R4Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIpsecV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHsmdaPoolV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPoolSizingV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPBufAllocV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplQChipMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplChipIfErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyV9v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSmartPeqV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassPANotifyObjsV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPlcyAcctNtfyV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResrcNotifyObjsV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResrcNotifyV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroupV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGrpV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVirtualSchAdjV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRedNtfV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRedV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtGroupV13v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyObjsV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFpResourceV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardResetOnRecoverErGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAResetOnRecoverErGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeNotifGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmPChipFcsObjGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisResourceV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNotifGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tFPFwdEngStatsGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIsaMemWMarkNotifGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeNotifGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxIsaGrpIsaScaleModeGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVirtualGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFPEgrHsGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNotifGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxIcmpMtuExceededStatGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardResMacFdbUsgNotifGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxMacScaleNotifyObjsV15v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisResourceV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFPResIngV15v0QGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFPResEgrV15v0QGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxMinFpGenerationGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPCMNotifGroupV15v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV15v0Compliance = tmnxChassisV15v0Compliance.setStatus('obsolete')
tmnxChassisV16v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 21)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFabricV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyObjsV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtNotifyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisQGrpOvrGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSwitchFabNtfyV11v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRebootHoldV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDCpuProtV11v0R0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyObjsV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPDcpNotifyV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpV10v0R4Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIpsecV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHsmdaPoolV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPoolSizingV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPBufAllocV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplQChipMemErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplChipIfErrV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyV9v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSmartPeqV11v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassPANotifyObjsV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPlcyAcctNtfyV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResrcNotifyObjsV12v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResrcNotifyV12v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventGroupV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwEventNotifyGrpV10v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVirtualSchAdjV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRedNtfV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRedV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtGroupV13v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyObjsV13v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFpResourceV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPV13v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardResetOnRecoverErGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAResetOnRecoverErGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeNotifGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmPChipFcsObjGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisResourceV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNotifGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV14v0Group"), ("TIMETRA-CHASSIS-MIB", "tFPFwdEngStatsGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIsaMemWMarkNotifGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeNotifGroupV12v0"), ("TIMETRA-CHASSIS-MIB", "tmnxIsaGrpIsaScaleModeGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVirtualGroupV14v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFPEgrHsGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNotifGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxIcmpMtuExceededStatGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardResMacFdbUsgNotifGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxMacScaleNotifyObjsV15v0Grp"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFPResIngV15v0QGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFPResEgrV15v0QGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV15v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxMinFpGenerationGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPCMNotifGroupV15v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV16v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexGroupV16v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisGroupV16v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisResourceV16v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCardLevelGroupV15v1"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMGroupV16v0"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisGnssGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisGnssNotifGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMdaLevelGroupV15v1"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMNotifGroupV16v0"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV16v0ObsoleteGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV16v0FpgaSoftErrNotifGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTnlStatsV16v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV16v0Compliance = tmnxChassisV16v0Compliance.setStatus('current')
tmnxChassisV15v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 22)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxBluetoothGroupV15v1"), ("TIMETRA-CHASSIS-MIB", "tmnxOverloadNotifGroupV15v1"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisSystemProfGroupV15v1"), ("TIMETRA-CHASSIS-MIB", "tmnxCardResourceV15v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothNotifGroupV15v1"), ("TIMETRA-CHASSIS-MIB", "tmnxFPResourceV15v1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV15v1Compliance = tmnxChassisV15v1Compliance.setStatus('current')
tmnxChassisV16v5Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 23)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardEncapGrpV16v5Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV16v5Compliance = tmnxChassisV16v5Compliance.setStatus('current')
tmnxChassisGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2))
tmnxChassisNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqNotificationRow"), ("TIMETRA-CHASSIS-MIB", "tmnxEqTypeNotificationRow"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyOID"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifySoftwareLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardFailureReason"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmPowerShelfCommsFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsGroup = tmnxChassisNotifyObjsGroup.setStatus('current')
tmnxChassisNotifyObsoleteGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwConfigChange"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCpuFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMemoryFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqBackdoorBusFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareError"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareAbnormalHalt"), ("TIMETRA-CHASSIS-MIB", "tmnxPeOutOfMemory"), ("TIMETRA-CHASSIS-MIB", "tmnxPeConfigurationError"), ("TIMETRA-CHASSIS-MIB", "tmnxPeStorageProblem"), ("TIMETRA-CHASSIS-MIB", "tmnxPeCpuCyclesExceeded"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatusChange"), ("TIMETRA-CHASSIS-MIB", "tmnxRedRestoreSuccess"), ("TIMETRA-CHASSIS-MIB", "tmnxRedRestoreFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObsoleteGroup = tmnxChassisNotifyObsoleteGroup.setStatus('current')
tmnxChassisV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateWaitTime"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV3v0Group = tmnxChassisV3v0Group.setStatus('obsolete')
tmnxMDAV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV3v0Group = tmnxMDAV3v0Group.setStatus('obsolete')
tmnxChassisObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwSwState"), ("TIMETRA-CHASSIS-MIB", "tmnxCardAllowedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardAllowedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAllowedTypes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisObsoleteGroup = tmnxChassisObsoleteGroup.setStatus('current')
tmnxCardV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCardAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCardClockSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNumMdaSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNumMdas"), ("TIMETRA-CHASSIS-MIB", "tmnxCardReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCardMemorySize"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionLastModified"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigBootedVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardIndexBootedVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigLastModified"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRedundant"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardClockSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardNumCpus"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCpuType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardMemorySize"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSwitchToRedundantCard"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRereadBootOptions"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastBooted"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastBootedHeader"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardIndexFileLastBootedHeader"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashFirmwareRevision"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashModelNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashCapacity"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashUsed"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRevert"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder1"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder2"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1SrcPort"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2SrcPort"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingFreqOffset"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder3"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSIfType"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSQualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRevert"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder1"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder2"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1SrcPort"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2SrcPort"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmChanged"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder3"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminOwner"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminControlApply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV3v0Group = tmnxCardV3v0Group.setStatus('current')
tmnxMDAV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV4v0Group = tmnxMDAV4v0Group.setStatus('obsolete')
tmnxChassisNotificationV4v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV4v0Group = tmnxChassisNotificationV4v0Group.setStatus('obsolete')
tmnx7710HwV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisOverTempState"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardMasterSlaveRefState"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710HwV3v0Group = tmnx7710HwV3v0Group.setStatus('current')
tmnxChassisV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0Group = tmnxChassisV5v0Group.setStatus('obsolete')
tmnxChassisV5v0ObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateWaitTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV5v0ObsoleteGroup = tmnxChassisV5v0ObsoleteGroup.setStatus('current')
tmnx77x0CESMDAV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAClockMode"), ("TIMETRA-CHASSIS-MIB", "tmnxMDADiffTimestampFreq"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngNamedPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrNamedPoolPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx77x0CESMDAV6v0Group = tmnx77x0CESMDAV6v0Group.setStatus('current')
tmnxIPsecIsaGrpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 19)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTableLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIsaChassis"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpPrimaryIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpBackupIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIPsecIsaGrpV6v0Group = tmnxIPsecIsaGrpV6v0Group.setStatus('current')
tmnxChassisNotificationV3v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 20)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV3v0Group = tmnxChassisNotificationV3v0Group.setStatus('obsolete')
tmnxChassisNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 21)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV6v0Group = tmnxChassisNotificationV6v0Group.setStatus('obsolete')
tmnx7710SETSRefSrcHwV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 22)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1SrcHw"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2SrcHw"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1SrcHw"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2SrcHw"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2BITSIfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710SETSRefSrcHwV6v0Group = tmnx7710SETSRefSrcHwV6v0Group.setStatus('current')
tmnxChassisHsmdaV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 23)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaSchedPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrTblLastChangd"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrMaxRate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaPoolPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHsmdaV6v0Group = tmnxChassisHsmdaV6v0Group.setStatus('obsolete')
tmnxMDAMcPathMgmtV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 24)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBwPlcyName"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBlkHoleInUseBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAMcPathMgmtV6v0Group = tmnxMDAMcPathMgmtV6v0Group.setStatus('obsolete')
tmnxCardV6v0NamedPoolPlcyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 25)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardNamedPoolAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNamedPoolOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV6v0NamedPoolPlcyGroup = tmnxCardV6v0NamedPoolPlcyGroup.setStatus('current')
tmnxChassisNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 26)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSyncFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV6v0Group = tmnxChassisNotifyObjsV6v0Group.setStatus('current')
tmnxChassisV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 27)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyPemType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSoftReset"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLastBootupReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV6v1Group = tmnxChassisV6v1Group.setStatus('current')
tmnxFPMcPathMgmtV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 28)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtBwPlcyName"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxFPLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastDefaultPathsOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPMcPathMgmtV6v1Group = tmnxFPMcPathMgmtV6v1Group.setStatus('current')
tmnxMDAV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 29)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASynchronousEthernet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV6v1Group = tmnxMDAV6v1Group.setStatus('obsolete')
tmnxMDACcagV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 30)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDACcagV6v1Group = tmnxMDACcagV6v1Group.setStatus('current')
tmnxMdaXplV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 31)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAXplErrorTime"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAXplFailedCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMdaXplV5v0Group = tmnxMdaXplV5v0Group.setStatus('current')
tmnxChassisNotifyObjsV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 32)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFwdDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV5v0Group = tmnxChassisNotifyObjsV5v0Group.setStatus('current')
tmnxChassisNotificationV5v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 33)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV5v0Group = tmnxChassisNotificationV5v0Group.setStatus('obsolete')
tmnxChassisNotificationV6v1Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 34)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardSoftResetAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipCamEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV6v1Group = tmnxChassisNotificationV6v1Group.setStatus('obsolete')
tmnxChassisNotifyObjsV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 35)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardSoftResetState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV6v1Group = tmnxChassisNotifyObjsV6v1Group.setStatus('current')
tmnxChassisNotificationV7v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 36)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardSoftResetAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaSyncENotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsaChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpUnableToSwitch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipCamEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqHwEnhancedCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV7v0Group = tmnxChassisNotificationV7v0Group.setStatus('current')
tmnxChassisUserModV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 37)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigUserLastModified"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisUserModV7v0Group = tmnxChassisUserModV7v0Group.setStatus('current')
tmnxCardPchipV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 38)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1IngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1IngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2IngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2IngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1MemParityOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1MemParityOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2MemParityOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2MemParityOccurTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardPchipV5v0Group = tmnxCardPchipV5v0Group.setStatus('current')
tmnxFPWredV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 39)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPWredBufAllocMin"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredBufAllocMax"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredResvCbsMin"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredResvCbsMax"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredSlopePolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPWredV7v0Group = tmnxFPWredV7v0Group.setStatus('current')
tmnxChassisV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 40)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisFanRevision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV7v0Group = tmnxChassisV7v0Group.setStatus('current')
tmnxIPsecV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 41)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIPsecV7v0Group = tmnxIPsecV7v0Group.setStatus('current')
tmnxIPsecNotifV7v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 42)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlLowWMark"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlHighWMark"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIPsecNotifV7v0Group = tmnxIPsecNotifV7v0Group.setStatus('current')
tmnxSyncV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 43)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncV6v0Group = tmnxSyncV6v0Group.setStatus('current')
tmnxSyncIfTimingV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 44)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutAdmStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutLineLen"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSRxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1NationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2NationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSNationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingQLSelection"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMQual"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMState"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutRefSel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSTxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingSystemQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutAdmStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutLineLen"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1NationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2NationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSNationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmQLSelection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingV8v0Group = tmnxSyncIfTimingV8v0Group.setStatus('current')
tmnxSyncIfTimingNotifV8v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 45)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSQuality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRefSwitch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2AlarmClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSOutRefChg"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingSystemQuality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingNotifV8v0Group = tmnxSyncIfTimingNotifV8v0Group.setStatus('current')
tmnxChassisV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 46)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwEquippedPlatform"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRedForcedSingleSfm"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV8v0Group = tmnxChassisV8v0Group.setStatus('current')
tmnxChassisMixedModeIomV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 47)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomUpgrList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisMixedModeIomV8v0Group = tmnxChassisMixedModeIomV8v0Group.setStatus('current')
tmnxCardCamErrorV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 48)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1CAMErrorOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1CAMErrorOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2CAMErrorOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2CAMErrorOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxCAMErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxCAMErrOccurTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardCamErrorV6v1Group = tmnxCardCamErrorV6v1Group.setStatus('current')
tmnxChassisV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 49)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardLastBootupReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV6v0Group = tmnxChassisV6v0Group.setStatus('obsolete')
tmnxCardV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 50)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardFailOnError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV7v0Group = tmnxCardV7v0Group.setStatus('current')
tmnxAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 51)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAAtmMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxAtmGroup = tmnxAtmGroup.setStatus('current')
tmnxChassisHwV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 52)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwMfgAssemblyNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwV6v1Group = tmnxChassisHwV6v1Group.setStatus('current')
tmnxChassisHwV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 53)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardOscillatorType"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFirmwareCodeVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwV9v0Group = tmnxChassisHwV9v0Group.setStatus('current')
tmnxSyncIfTimingV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 54)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder4"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPQualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPRxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPState"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutSource"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder4"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmPTPAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmPTPCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingV9v0Group = tmnxSyncIfTimingV9v0Group.setStatus('current')
tmnxSyncIfTimingNotifyV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 55)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPQuality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPAlarmClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingNotifyV9v0Group = tmnxSyncIfTimingNotifyV9v0Group.setStatus('current')
tmnxChassisNotifyObjsV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 56)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV9v0Group = tmnxChassisNotifyObjsV9v0Group.setStatus('current')
tmnxMDAV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 57)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaThrshLoBrstMult"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaThrshHiBrstInc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV9v0Group = tmnxMDAV9v0Group.setStatus('obsolete')
tmnxCardPchipV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 58)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsSrcSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsSrcSlots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardPchipV8v0Group = tmnxCardPchipV8v0Group.setStatus('current')
tmnxChassisNotifyObjsV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 59)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardSrcSlotBitmap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV8v0Group = tmnxChassisNotifyObjsV8v0Group.setStatus('current')
tmnxFPQGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 60)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpAcctgPolId"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpDescr"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPolicerPol"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpTableLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpAcctgPolId"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpDescr"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPolicerPol"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpTableLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPStatMode"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPStatMode"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOffH"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPkts"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPktsL"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPktsH"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOcts"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOctsL"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOctsH"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPkts"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPktsL"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPktsH"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOcts"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOctsL"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOctsH"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPQGrpGroup = tmnxFPQGrpGroup.setStatus('current')
tmnxCardV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 61)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardHardResetUnsupMdas"), ("TIMETRA-CHASSIS-MIB", "tmnxCardRateCalcFastQueue"), ("TIMETRA-CHASSIS-MIB", "tmnxCardRateCalcSlowQueue"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSchedRun"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTaskScheduling"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSlowQueueThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV10v0Group = tmnxCardV10v0Group.setStatus('current')
tmnxIpsecV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 62)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnelReassembly"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpOperFlags"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIpMaxTunnels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIpsecV10v0Group = tmnxIpsecV10v0Group.setStatus('current')
tmnxChassisV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 63)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFanTrayCompSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakVoltageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinVoltageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakWattageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinWattageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakAmperageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinAmperageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFirmwareRevisionStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV10v0Group = tmnxChassisV10v0Group.setStatus('current')
tmnxChassisNotificationV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 64)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPeFirmwareVersionWarning"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardQChipBufMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardQChipStatsMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardQChipIntMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardChipIfDownEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardChipIfCellEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotificationV9v0Group = tmnxChassisNotificationV9v0Group.setStatus('current')
tmnxFPQGrpV10v0R4Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 65)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrTblLstChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrAdminPIR"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrAdminCIR"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrStatMode"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrMBS"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrCBS"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrPktOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPQGrpV10v0R4Group = tmnxFPQGrpV10v0R4Group.setStatus('current')
tmnxMdaV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 66)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIPsecRespondOnly"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMultiActive"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveMda"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAFailOnError"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrXplErrThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrXplErrWindow"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngrXplErrThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngrXplErrWindow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMdaV10v0Group = tmnxMdaV10v0Group.setStatus('obsolete')
tmnxMdaObsoletedV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 67)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaSchedPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrTblLastChangd"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrMaxRate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8WtInGrp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMdaObsoletedV10v0Group = tmnxMdaObsoletedV10v0Group.setStatus('current')
tmnxChassisNotifyV10v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 69)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyV10v0Group = tmnxChassisNotifyV10v0Group.setStatus('current')
tmnxMdaHsmdaPoolV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 70)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaPoolPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMdaHsmdaPoolV10v0Group = tmnxMdaHsmdaPoolV10v0Group.setStatus('current')
tmnxChassisV11v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71))
tmnxFPDCpuProtV11v0R0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPDCpuProtDynEnfrcPlcrPool"), ("TIMETRA-CHASSIS-MIB", "tmnxFpDcpDynPlcrHiWtrMrkHitCnt"), ("TIMETRA-CHASSIS-MIB", "tmnxFpDcpDynPlcrHiWtrMrkTime"), ("TIMETRA-CHASSIS-MIB", "tmnxFpDcpDynPlcrAllocFailCount"), ("TIMETRA-CHASSIS-MIB", "tmnxFpDcpDynPlcrInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPDCpuProtV11v0R0Group = tmnxFPDCpuProtV11v0R0Group.setStatus('current')
tmnxFPDcpNotifyObjsV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpMissingNotificationCount"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPDcpNotifyObjsV11v0Group = tmnxFPDcpNotifyObjsV11v0Group.setStatus('current')
tmnxFPDcpNotifyV11v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxDcpCardFpEventOvrflw"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpCardSapEventOvrflw"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpCardVrtrIfEventOvrflw"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpFpDynPoolUsageHiAlmRaise"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpFpDynPoolUsageHiAlmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpCardFpEventOvrflwClr"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpCardSapEventOvrflwClr"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpCardVrtrIfEventOvrflwClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPDcpNotifyV11v0Group = tmnxFPDcpNotifyV11v0Group.setStatus('current')
tmnxChassisObsoleteGroupV11v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisObsoleteGroupV11v0 = tmnxChassisObsoleteGroupV11v0.setStatus('current')
tmnxChassisV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV11v0Group = tmnxChassisV11v0Group.setStatus('current')
tmnxChassisFanV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisFanV11v0Group = tmnxChassisFanV11v0Group.setStatus('current')
tmnxChassisPowerV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPowerV11v0Group = tmnxChassisPowerV11v0Group.setStatus('current')
tmnxChassisHwV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwV11v0Group = tmnxChassisHwV11v0Group.setStatus('current')
tmnxChassisQGrpOvrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrTblLstChgd"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrAdminPIR"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrAdminCIR"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrStatMode"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrMBS"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrCBS"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPlcrOvrPktOffset"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrLvlLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrLvlMBS"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrLvlTblLstChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrMaxRate"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrMinMBSSep"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPCPOvrTblLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrLvlLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrLvlMBS"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrLvlTblLstChgd"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrMaxRate"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrMinMBSSep"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpPCPOvrTblLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisQGrpOvrGroup = tmnxChassisQGrpOvrGroup.setStatus('current')
tmnxFPPoolSizingV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPStablePoolSizing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPPoolSizingV11v0Group = tmnxFPPoolSizingV11v0Group.setStatus('current')
tmnxChassisPowerMgmtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQTableLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQLastChangedTime"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerMgmtTableLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtChangedTime"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQAvailableWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxPEQTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxPEQTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtSafetyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtSafetyAlert"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwPowerPriority"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMaxRequiredWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwPowerZone"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPowerMgmtGroup = tmnxChassisPowerMgmtGroup.setStatus('current')
tmnxChassisPowerMgmtNotifyObjs = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerZone"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPowerMgmtNotifyObjs = tmnxChassisPowerMgmtNotifyObjs.setStatus('current')
tmnxChassisPowerMgmtNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqPowerCapacityExceeded"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerCapacityExceededClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerLostCapacity"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerLostCapacityClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerOverloadState"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerOverloadStateClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSafetyAlertThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSafetyAlertClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSafetyLevelThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSafetyLevelClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqProvPowerCapacityAlm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqProvPowerCapacityAlmClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPowerMgmtNotifyGroup = tmnxChassisPowerMgmtNotifyGroup.setStatus('current')
tmnxChassisSmartPeqV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInFeedDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisSmartPeqV11v0Group = tmnxChassisSmartPeqV11v0Group.setStatus('current')
tmnxChassisSmartPeqNtfyV11v0Grp = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInputFeedAlm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInputFeedAlmClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisSmartPeqNtfyV11v0Grp = tmnxChassisSmartPeqNtfyV11v0Grp.setStatus('obsolete')
tmnxChassisFabricV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisFabricSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisFabricV11v0Group = tmnxChassisFabricV11v0Group.setStatus('current')
tmnxChassisSwitchFabNtfyV11v0Grp = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqLowSwitchFabricCap"), ("TIMETRA-CHASSIS-MIB", "tmnxEqLowSwitchFabricCapClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisSwitchFabNtfyV11v0Grp = tmnxChassisSwitchFabNtfyV11v0Grp.setStatus('current')
tmnxCpmCardRebootHoldV11v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 71, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRebootHold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCpmCardRebootHoldV11v0Group = tmnxCpmCardRebootHoldV11v0Group.setStatus('current')
tmnxChassisV9v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 72))
tmnxCpmCardCmplxMemErrV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 72, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxMemErrOccurTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCpmCardCmplxMemErrV9v0Group = tmnxCpmCardCmplxMemErrV9v0Group.setStatus('current')
tmnxCardCmplQChipMemErrV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 72, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1BufMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1BufMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2BufMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2BufMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1StatMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1StatMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2StatMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2StatMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1IntMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1IntMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2IntMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2IntMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplBufMemErrOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplBufMemErrOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplStatMemErrOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplStatMemErrOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplIntMemErrOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplIntMemErrOccTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardCmplQChipMemErrV9v0Group = tmnxCardCmplQChipMemErrV9v0Group.setStatus('current')
tmnxCardCmplChipIfErrV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 72, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1ChipIfDownOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1ChipIfDownOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2ChipIfDownOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2ChipIfDownOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1ChipIfCellOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1ChipIfCellOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2ChipIfCellOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2ChipIfCellOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplChipIfDownOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplChipIfDownOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplChipIfCellOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplChipIfCellOccTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardCmplChipIfErrV9v0Group = tmnxCardCmplChipIfErrV9v0Group.setStatus('current')
tmnxChassisHwEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 72, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardHwEventNumOccurrences"), ("TIMETRA-CHASSIS-MIB", "tmnxCardHwEventLastOccurTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwEventGroup = tmnxChassisHwEventGroup.setStatus('current')
tmnxChassisHwEventNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 72, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqCardTChipParityEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwEventNotifyGroup = tmnxChassisHwEventNotifyGroup.setStatus('current')
tmnxChassisPowerSupplyV9v0Grp = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 72, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyPemACRect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPowerSupplyV9v0Grp = tmnxChassisPowerSupplyV9v0Grp.setStatus('current')
tmnxChassisV12v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73))
tmnxChassisResourceV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tChassisResSapIngQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapIngQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapEgrQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapEgrQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResIngQGrpTmplTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResIngQGrpTmplAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResEgrQGrpTmplTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResEgrQGrpTmplAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResFPIngQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResFPIngQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrVPortTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrVPortAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedsTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedsAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResQosIntSchedsTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResQosIntSchedsAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResSubSPIQosOvrTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResSubSPIQosOvrAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResHsmdaQOvrTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResHsmdaQOvrAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortAccEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortAccEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortNetEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortNetEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResFPIngQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResFPIngQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrVPortTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrVPortAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSapIngQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSapIngQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassIUBSE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassIUBNE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngRootArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngRootArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrRootArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrRootArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIntArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIntArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6QosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6QosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6QosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6QosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynSvcEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynSvcEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSubHostTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSubHostAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEncapGrpMemberTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEncapGrpMemberAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrNetQGrpMapTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrNetQGrpMapAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResMacFdbRecTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResMacFdbRecAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResResRvplsFdbRecTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResResRvplsFdbRecAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQ1NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQ1NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQ1NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQ1NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2WredPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2WredPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaQGrpTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaQGrpAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaSecShaperTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaSecShaperAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisResourceV12v0Group = tmnxChassisResourceV12v0Group.setStatus('obsolete')
tmnxFPBufAllocV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPIngressBufferAllocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPBufAllocV12v0Group = tmnxFPBufAllocV12v0Group.setStatus('current')
tmnxFPPlcyAcctV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctStatsPool"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctStatsInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPPlcyAcctV12v0Group = tmnxFPPlcyAcctV12v0Group.setStatus('current')
tmnxPhysChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisRole"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisState"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNumPwrSupplies"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNumFanTrays"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisGroup = tmnxPhysChassisGroup.setStatus('current')
tmnxChassisNotifV12v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqDataPathFailureProtImpact"), ("TIMETRA-CHASSIS-MIB", "tmnxExtStandbyCpmReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxExtStandbyCpmRebootFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifV12v0Group = tmnxChassisNotifV12v0Group.setStatus('current')
tmnxCpmCardRebootHoldV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRebootHold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCpmCardRebootHoldV12v0Group = tmnxCpmCardRebootHoldV12v0Group.setStatus('obsolete')
tmnxChassisPlcyAcctNtfyV12v0Grp = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctStatsPoolExcResource"), ("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctStatsPoolLowResource"), ("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctStatsEventOvrflw"), ("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctStatsEventOvrflwClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPlcyAcctNtfyV12v0Grp = tmnxChassisPlcyAcctNtfyV12v0Grp.setStatus('current')
tmnxChassisV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisOperNumSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisOperTopology"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV12v0Group = tmnxChassisV12v0Group.setStatus('current')
tmnxChassisObsoleteV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminLastSetTimer"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminLastSetTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisObsoleteV12v0Group = tmnxChassisObsoleteV12v0Group.setStatus('current')
tmnxChassPANotifyObjsV12v0Grp = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctMissingNotifCount"), ("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctTimeEventOccured"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassPANotifyObjsV12v0Grp = tmnxChassPANotifyObjsV12v0Grp.setStatus('current')
tmnxChassisNotifyObjsV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFabricSlotNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV12v0Group = tmnxChassisNotifyObjsV12v0Group.setStatus('current')
tmnxIomResrcNotifyObjsV12v0Grp = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIomResourceType"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResourceLimitPct"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResLimMissingNotifCount"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResLimitTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIomResrcNotifyObjsV12v0Grp = tmnxIomResrcNotifyObjsV12v0Grp.setStatus('current')
tmnxIomResrcNotifyV12v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIomResHighLimitReached"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResExhausted"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResStateClr"), ("TIMETRA-CHASSIS-MIB", "tmnxIomEventOverflow"), ("TIMETRA-CHASSIS-MIB", "tmnxIomEventOverflowClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIomResrcNotifyV12v0Group = tmnxIomResrcNotifyV12v0Group.setStatus('current')
tmnxChassisFabricV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisFabricSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisFabricV12v0Group = tmnxChassisFabricV12v0Group.setStatus('obsolete')
tmnxChassisPowerV12v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyFanDir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPowerV12v0Group = tmnxChassisPowerV12v0Group.setStatus('current')
tmnxChassisPowerNotifV12v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPowerSupplyWrongFanDir"), ("TIMETRA-CHASSIS-MIB", "tmnxPowerSupplyWrongFanDirClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPowerNotifV12v0Group = tmnxChassisPowerNotifV12v0Group.setStatus('obsolete')
tmnxMDAResetOnRecoverErGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAResetOnRecoverableError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAResetOnRecoverErGrp = tmnxMDAResetOnRecoverErGrp.setStatus('current')
tmnxCardResetOnRecoverErGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardResetOnRecoverableError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardResetOnRecoverErGrp = tmnxCardResetOnRecoverErGrp.setStatus('current')
tmnxCpmMemSizeNotifGroupV12v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 19)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmMemSizeMismatchClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCpmMemSizeNotifGroupV12v0 = tmnxCpmMemSizeNotifGroupV12v0.setStatus('current')
tmnxCpmPChipFcsObjGroupV12v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 73, 20)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxIngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxIngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxEgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxEgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxEgrFcsSrcSlots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCpmPChipFcsObjGroupV12v0 = tmnxCpmPChipFcsObjGroupV12v0.setStatus('current')
tmnxChassisV13v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74))
tmnxChassisResourceV13v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tChassisResDynSvcNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResDynSvcNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResIpSecNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResIpSecNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSubNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSubNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapIngQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapIngQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapEgrQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapEgrQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResIngQGrpTmplTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResIngQGrpTmplAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResEgrQGrpTmplTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResEgrQGrpTmplAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResFPIngQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResFPIngQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrVPortTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrVPortAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedsTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedsAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResSubSPIQosOvrTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResSubSPIQosOvrAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResHsmdaQOvrTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResHsmdaQOvrAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortAccEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortAccEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortNetEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortNetEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResFPIngQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResFPIngQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrVPortTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrVPortAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResCategoryEntriesTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResCategoryEntriesAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSapIngQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSapIngQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassIUBSE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassIUBNE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngRootArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngRootArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrRootArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrRootArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIntArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIntArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6QosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6QosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6QosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6QosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynSvcEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynSvcEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSubHostTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSubHostAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEncapGrpMemberTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEncapGrpMemberAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrNetQGrpMapTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrNetQGrpMapAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResMacFdbRecTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResMacFdbRecAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResResRvplsFdbRecTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResResRvplsFdbRecAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQ1NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQ1NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQ1NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQ1NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2WredPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2WredPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaQGrpTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaQGrpAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaSecShaperTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaSecShaperAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclFilterAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisResourceV13v0Group = tmnxChassisResourceV13v0Group.setStatus('obsolete')
tmnxCardVirtualSchAdjV13v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardInternalSchedWghtMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardVirtualSchAdjV13v0Group = tmnxCardVirtualSchAdjV13v0Group.setStatus('current')
tmnxPhysChassisV13v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisV13v0Group = tmnxPhysChassisV13v0Group.setStatus('current')
tChassisResObsoletedV13v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tCardResQosIntSchedsTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResQosIntSchedsAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tChassisResObsoletedV13v0Group = tChassisResObsoletedV13v0Group.setStatus('current')
tmnxChassisV13v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPortIdScheme"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisV13v0Group = tmnxChassisV13v0Group.setStatus('current')
tmnxChassisMgmtEthRedNtfV13v0Grp = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqMgmtEthRedStandbyRaise"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMgmtEthRedStandbyClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisMgmtEthRedNtfV13v0Grp = tmnxChassisMgmtEthRedNtfV13v0Grp.setStatus('current')
tmnxChassisMgmtEthRedV13v0Grp = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRedRevertTime"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMgmtEthRedStandby"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisMgmtEthRedV13v0Grp = tmnxChassisMgmtEthRedV13v0Grp.setStatus('current')
tmnxChassisPowerMgmtGroupV13v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQInputPowerMode"), ("TIMETRA-CHASSIS-MIB", "tmnxPEQTypeNumInputFeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisPowerMgmtGroupV13v0 = tmnxChassisPowerMgmtGroupV13v0.setStatus('current')
tmnxChassisNotifV13v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimBITS2048khzUnsup"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimBITS2048khzUnsupClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqBpEpromFail"), ("TIMETRA-CHASSIS-MIB", "tmnxEqBpEpromFailClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqBpEpromWarning"), ("TIMETRA-CHASSIS-MIB", "tmnxEqBpEpromWarningClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifV13v0Group = tmnxChassisNotifV13v0Group.setStatus('current')
tmnxChassisNotifyObjsV13v0Grp = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyDiskFullReason"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMgmtEthRedPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisNotifyObjsV13v0Grp = tmnxChassisNotifyObjsV13v0Grp.setStatus('current')
tmnxChassisFpResourceV13v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPResEgrQosBypassTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosBypassAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisFpResourceV13v0Group = tmnxChassisFpResourceV13v0Group.setStatus('current')
tmnxFPV13v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPInitExtractDropPrioMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPV13v0Group = tmnxFPV13v0Group.setStatus('current')
tmnxCpmCardV13v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 74, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardUuid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCpmCardV13v0Group = tmnxCpmCardV13v0Group.setStatus('current')
tmnxChassisV10v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 75))
tmnxChassisHwEventGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 75, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMdaHwEventNumOccurrences"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHwEventLastOccurTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwEventGroupV10v0 = tmnxChassisHwEventGroupV10v0.setStatus('current')
tmnxChassisHwEventNotifyGrpV10v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 75, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqMdaIngrXplError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisHwEventNotifyGrpV10v0 = tmnxChassisHwEventNotifyGrpV10v0.setStatus('current')
tmnxChassisV14v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76))
tmnxSyncIfTimingV14v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutQlMin"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutQlMin"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutSquelch"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutSquelch"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingQlMin"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmQlMin"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingWaitToRestorTime"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmWaitToRestorTime"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmChangedMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSyncIfTimingV14v0Group = tmnxSyncIfTimingV14v0Group.setStatus('current')
tmnxChassisResourceV14v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedOvrsTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedOvrsAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResCategoryEntriesTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResCategoryEntriesAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSapInstanceTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSapInstanceAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResSapInstanceTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResSapInstanceAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisResourceV14v0Group = tmnxChassisResourceV14v0Group.setStatus('current')
tmnxCpmFlashV14v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashPercentageUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCpmFlashV14v0Group = tmnxCpmFlashV14v0Group.setStatus('current')
tmnxPhysChassisGroupV14v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanRevision"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupTempThrshld"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSup1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSup2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupAssignType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupInputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupOutptStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupPemType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupPemACRect"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupInFeedDown"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupFanDir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisGroupV14v0 = tmnxPhysChassisGroupV14v0.setStatus('current')
tFPFwdEngStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tFwdEngDREgrEncapExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tFPFwdEngStatsGroup = tFPFwdEngStatsGroup.setStatus('current')
tmnxPhysChassisNotifGroupV14v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupOvrTmp"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupOvrTmpClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupAcFail"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupAcFailClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupDcFail"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupDcFailClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupInFail"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupInFailClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupOutFail"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassPowerSupOutFailCl"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassisFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPhysChassisFanFailureClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisNotifGroupV14v0 = tmnxPhysChassisNotifGroupV14v0.setStatus('current')
tmnxIsaMemWMarkNotifGroupV14v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tIPsecIsaMemLowWatermark"), ("TIMETRA-CHASSIS-MIB", "tIPsecIsaMemHighWatermark"), ("TIMETRA-CHASSIS-MIB", "tIPsecIsaMemMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIsaMemWMarkNotifGroupV14v0 = tmnxIsaMemWMarkNotifGroupV14v0.setStatus('current')
tmnxIsaGrpIsaScaleModeGroupV14v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIsaScaleMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIsaGrpIsaScaleModeGroupV14v0 = tmnxIsaGrpIsaScaleModeGroupV14v0.setStatus('current')
tmnxCardVirtualGroupV14v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 76, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardVFpCpuCount"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVFpAvgUtilization"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVFpMaxUtilization"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVCpuSchedHealth"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVCpuSchedLastClearedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardVirtualGroupV14v0 = tmnxCardVirtualGroupV14v0.setStatus('current')
tmnxChassisV15v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77))
tmnxCardFPEgrHsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPEgrHsPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsQGrpTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsQGrpAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsPrimaryShapersTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsPrimaryShapersAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsPrimaryShapersIUBES"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsPrimaryShapersIUBMS"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsSecondaryShapersTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsSecondaryShapersAlloc"), ("TIMETRA-CHASSIS-MIB", "tmnxFPEgrHsFixedHighThreshDelta"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsTurboQGrpTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrHsTurboQGrpAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardFPEgrHsGroup = tmnxCardFPEgrHsGroup.setStatus('current')
tmnxChassisObsoletedV15v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBwPlcyName"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBlkHoleInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanRevision"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeedPercent"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyPemType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyPemACRect"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInFeedDown"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyFanDir"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQTableLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQLastChangedTime"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQAvailableWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPEQInputPowerMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisObsoletedV15v0Group = tmnxChassisObsoletedV15v0Group.setStatus('current')
tmnxChassisFanV15v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeedPercent"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanSpeedPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisFanV15v0Group = tmnxChassisFanV15v0Group.setStatus('current')
tmnxPhysChassisGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPEQTableLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPEQLastChangeTime"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPEQAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPEQEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPEQSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPEQAvailableWatt"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPEQInputPowerMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisGroupV15v0 = tmnxPhysChassisGroupV15v0.setStatus('current')
tmnxPhysChassisNotifGroupV15v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPwrSupWrgFanDir"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPwrSupWrgFanDirClr"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPwrSupPemACRect"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPwrSupPemACRectClr"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPwrSupInputFeed"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPwrSupInputFeedClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisNotifGroupV15v0 = tmnxPhysChassisNotifGroupV15v0.setStatus('current')
tmnxIcmpMtuExceededStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tFwdEngDREgrMtuExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIcmpMtuExceededStatGroup = tmnxIcmpMtuExceededStatGroup.setStatus('current')
tmnxChassisGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisVsrCongestionMgmt"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAlarmLEDState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisGroupV15v0 = tmnxChassisGroupV15v0.setStatus('current')
tmnxChassNotifsObsoletedGrpV15v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInputFeedAlm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInputFeedAlmClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyPemACRectAlm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyPemACRectAlmClr"), ("TIMETRA-CHASSIS-MIB", "tmnxPowerSupplyWrongFanDir"), ("TIMETRA-CHASSIS-MIB", "tmnxPowerSupplyWrongFanDirClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassNotifsObsoletedGrpV15v0 = tmnxChassNotifsObsoletedGrpV15v0.setStatus('current')
tmnxCardResMacFdbUsgNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardResMacFdbHighUsgSet"), ("TIMETRA-CHASSIS-MIB", "tmnxCardResMacFdbHighUsgClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardResMacFdbUsgNotifGroup = tmnxCardResMacFdbUsgNotifGroup.setStatus('current')
tmnxMacScaleNotifyObjsV15v0Grp = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMacScaleCardSlotNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMacScaleNotifyObjsV15v0Grp = tmnxMacScaleNotifyObjsV15v0Grp.setStatus('current')
tmnxMDAV15v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASynchronousEthernet"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaThrshLoBrstMult"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaThrshHiBrstInc"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIPsecRespondOnly"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMultiActive"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveMda"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAFailOnError"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrXplErrThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrXplErrWindow"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngrXplErrThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngrXplErrWindow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAV15v0Group = tmnxMDAV15v0Group.setStatus('current')
tmnxFPMcPathMgmtV15v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtPriInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtSecInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtBlkHoleInUseBw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPMcPathMgmtV15v0Group = tmnxFPMcPathMgmtV15v0Group.setStatus('current')
tmnxChassisResourceV15v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tChassisResDynSvcNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResDynSvcNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResIpSecNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResIpSecNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSubNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSubNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapIngQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapIngQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapEgrQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapEgrQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResIngQGrpTmplTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResIngQGrpTmplAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResEgrQGrpTmplTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResEgrQGrpTmplAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResFPIngQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResFPIngQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrVPortTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrVPortAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedsTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedsAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResSubSPIQosOvrTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResSubSPIQosOvrAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResHsmdaQOvrTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResHsmdaQOvrAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortAccEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortAccEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortNetEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortNetEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResFPIngQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResFPIngQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrVPortTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrVPortAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResCategoryEntriesTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResCategoryEntriesAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSapIngQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSapIngQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassIUBSE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassIUBNE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngRootArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngRootArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrRootArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrRootArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIntArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIntArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6QosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6QosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6QosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6QosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynSvcEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynSvcEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSubHostTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSubHostAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEncapGrpMemberTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEncapGrpMemberAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrNetQGrpMapTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrNetQGrpMapAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResMacFdbRecTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResMacFdbRecAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQ1NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQ1NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQ1NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQ1NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2WredPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2WredPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaQGrpTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaQGrpAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaSecShaperTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaSecShaperAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclFilterAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisResourceV15v0Group = tmnxChassisResourceV15v0Group.setStatus('obsolete')
tmnxChassisResrcObsoletedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPResResRvplsFdbRecTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResResRvplsFdbRecAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisResrcObsoletedGroup = tmnxChassisResrcObsoletedGroup.setStatus('current')
tmnxCardFPResIngV15v0QGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPResIngQGrpRedirTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQGrpRedirAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardFPResIngV15v0QGroup = tmnxCardFPResIngV15v0QGroup.setStatus('current')
tmnxCardFPResEgrV15v0QGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPResSapInstEgrQGrpRedirTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSapInstEgrQGrpRedirAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardFPResEgrV15v0QGroup = tmnxCardFPResEgrV15v0QGroup.setStatus('current')
tmnxIPsecIsaGrpV15v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpDpCpuUsageCollEn"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTrafficFwdCollEn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxIPsecIsaGrpV15v0Group = tmnxIPsecIsaGrpV15v0Group.setStatus('current')
tmnxPhysChassisPCMGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMTableLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMEntryLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMInFeedDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisPCMGroupV15v0 = tmnxPhysChassisPCMGroupV15v0.setStatus('current')
tmnxMinFpGenerationGroupV15v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 19)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPGeneration"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFPGenerationFP2"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFPGenerationFP3"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFPGenerationFP4"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFPGenerationVFP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMinFpGenerationGroupV15v0 = tmnxMinFpGenerationGroupV15v0.setStatus('current')
tmnxPhysChassPCMNotifGroupV15v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 77, 20)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMInputFeed"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMInputFeedClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassPCMNotifGroupV15v0 = tmnxPhysChassPCMNotifGroupV15v0.setStatus('current')
tmnxChassisV16v0Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78))
tmnxCardV16v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxVmCardHypervisor"), ("TIMETRA-CHASSIS-MIB", "tmnxVmCardCpu"), ("TIMETRA-CHASSIS-MIB", "tmnxVmCardNumCores"), ("TIMETRA-CHASSIS-MIB", "tmnxVmCpmCardHypervisor"), ("TIMETRA-CHASSIS-MIB", "tmnxVmCpmCardCpu"), ("TIMETRA-CHASSIS-MIB", "tmnxVmCpmCardNumCores"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFilterScaleProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV16v0Group = tmnxCardV16v0Group.setStatus('current')
tmnxCardComplexGroupV16v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardComplexIngFcsError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexIngFcsErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexEgrFcsError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexEgrFcsErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexMemParError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexMemParErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexCamError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexCamErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexBufMemError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexBufMemErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexStatsMemError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexStatsMemErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexIntMemError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexIntMemErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexIntDatapathError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexIntDatapthErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexIntDpCellError"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexIntDpCellErrTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexSrcSlotsEgFcsErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardComplexGroupV16v0 = tmnxCardComplexGroupV16v0.setStatus('current')
tmnxChassisGroupV16v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPhysicalPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisGroupV16v0 = tmnxChassisGroupV16v0.setStatus('current')
tmnxChassisResourceV16v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tChassisResDynSvcNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResDynSvcNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResIpSecNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResIpSecNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSubNHEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSubNHEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapIngQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapIngQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapEgrQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResSapEgrQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResIngQGrpTmplTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResIngQGrpTmplAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResEgrQGrpTmplTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResEgrQGrpTmplAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResFPIngQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResFPIngQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrVPortTotal"), ("TIMETRA-CHASSIS-MIB", "tChassisResPortEgrVPortAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedsTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResQosUserSchedsAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResSubSPIQosOvrTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResSubSPIQosOvrAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResHsmdaQOvrTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResHsmdaQOvrAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortAccEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortAccEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortNetEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortNetEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResFPIngQGrpInstTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResFPIngQGrpInstAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrVPortTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResPortEgrVPortAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResCategoryEntriesTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResCategoryEntriesAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResIntArbiterOvrsTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResIntArbiterOvrsAlloc"), ("TIMETRA-CHASSIS-MIB", "tCardResSLAProfileInstanceTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResSLAProfileInstanceAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSapIngQosPolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSapIngQosPolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassIUBSE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynEgrClassIUBNE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngRootArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngRootArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrRootArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrRootArbiterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQueueIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynPolicerStatIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6QosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6QosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclQosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclQosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6QosEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6QosEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngAclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrAclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynSvcEntryTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynSvcEntryAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSubHostTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSubHostAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEncapGrpMemberTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEncapGrpMemberAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrNetQGrpMapTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrNetQGrpMapAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResMacFdbRecTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResMacFdbRecAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolIUBI"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2NamedPoolIUBE"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2WredPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResDynQ2WredPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaQGrpTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaQGrpAlloc"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaSecShaperTotal"), ("TIMETRA-CHASSIS-MIB", "tMDAResEgrHsmdaSecShaperAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngIPv6AclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclFilterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrIPv6AclFilterAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResSLAProfileInstanceTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResSLAProfileInstanceAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisResourceV16v0Group = tmnxChassisResourceV16v0Group.setStatus('current')
tmnxChassisResV16v0ObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPResIngQ1NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIngQ1NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQ1NamedPoolTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrQ1NamedPoolAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResIntArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResIntArbiterAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisResV16v0ObsoleteGroup = tmnxChassisResV16v0ObsoleteGroup.setStatus('current')
tmnxChassisFanObsoleteGroupV16v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxFanTrayCompSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisFanObsoleteGroupV16v0 = tmnxChassisFanObsoleteGroupV16v0.setStatus('current')
tmnxPhysChassisPMGroupV16v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMTypeNumInFeed"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMTableLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMEntryLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMAvailableWatt"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMOutputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMInputFeedDown"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisMonitorFilterDoor"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFilterDoorState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisPMGroupV16v0 = tmnxPhysChassisPMGroupV16v0.setStatus('current')
tmnxChassisGnssGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxGnssTableLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssCfgLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssConstellation"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssNmeaAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssNmeaSentenceTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssNmeaSentenceInterval"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssPositionValid"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssDateTime"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssLatitude"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssLongitude"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssAltitude"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssHeading"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssSatelliteType"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssSatelliteElevation"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssSatelliteAzimuth"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssSatelliteSnr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisGnssGroup = tmnxChassisGnssGroup.setStatus('current')
tmnxChassisGnssNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxGnssAcquiringFix"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssAcquiredFix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisGnssNotifGroup = tmnxChassisGnssNotifGroup.setStatus('current')
tmnxPhysChassisPMNotifGroupV16v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMInputFeed"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMInputFeedClr"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMOutFail"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMOutFailClr"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFilterDoorOpen"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFilterDoorClosed"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMOverTemp"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMOverTempClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPhysChassisPMNotifGroupV16v0 = tmnxPhysChassisPMNotifGroupV16v0.setStatus('current')
tmnxCardV16v0ObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1IngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1IngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2IngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2IngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1MemParityOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1MemParityOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2MemParityOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2MemParityOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1CAMErrorOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1CAMErrorOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2CAMErrorOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2CAMErrorOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsSrcSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsSrcSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1BufMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1BufMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2BufMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2BufMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1StatMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1StatMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2StatMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2StatMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1IntMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1IntMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2IntMemErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2IntMemErrOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1ChipIfDownOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1ChipIfDownOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2ChipIfDownOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2ChipIfDownOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1ChipIfCellOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl1ChipIfCellOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2ChipIfCellOcc"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmpl2ChipIfCellOccTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVmHypervisor"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVmCpu"), ("TIMETRA-CHASSIS-MIB", "tmnxCardVmNumCores"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardVmHypervisor"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardVmCpu"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardVmNumCores"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV16v0ObsoleteGroup = tmnxCardV16v0ObsoleteGroup.setStatus('current')
tmnxCardV16v0FpgaSoftErrNotifGrp = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxEqFpgaSoftError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardV16v0FpgaSoftErrNotifGrp = tmnxCardV16v0FpgaSoftErrNotifGrp.setStatus('current')
tmnxCardEncapGrpV16v5Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tCardResEncapGrpMemberTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResEncapGrpMemberAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardEncapGrpV16v5Group = tmnxCardEncapGrpV16v5Group.setStatus('current')
tmnxMDAIsaTnlStatsV16v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 78, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTnlStatsCryptoAcc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMDAIsaTnlStatsV16v0Group = tmnxMDAIsaTnlStatsV16v0Group.setStatus('current')
tmnxChassisV15v1Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79))
tmnxBluetoothGroupV15v1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxBluetoothTableLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothPasskey"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothAdvertisingTimeout"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothPowerState"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothPairingButton"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothDeviceTableLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothDeviceRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothDeviceEntryLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothDeviceDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleTableLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleEntryLastChg"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleCfgIdentifier"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleIdentifier"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleConnected"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleConnectedMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBluetoothGroupV15v1 = tmnxBluetoothGroupV15v1.setStatus('current')
tmnxOverloadNotifGroupV15v1 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPMacQosIngOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPMacQosIngOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPQosEgrOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPQosEgrOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6QosIngOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6QosIngOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6QosEgrOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6QosEgrOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPMacFilterIngOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPMacFilterIngOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPMacFilterEgrOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPMacFilterEgrOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6FilterIngOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6FilterIngOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6FilterEgrOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6FilterEgrOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPMacCpmFilterOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPMacCpmFilterOverloadClear"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6CpmFilterOverload"), ("TIMETRA-CHASSIS-MIB", "tmnxIPv6CpmFilterOverloadClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOverloadNotifGroupV15v1 = tmnxOverloadNotifGroupV15v1.setStatus('current')
tmnxChassisSystemProfGroupV15v1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisSystemProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisSystemProfGroupV15v1 = tmnxChassisSystemProfGroupV15v1.setStatus('current')
tmnxCardResourceV15v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tCardResIntArbiterTotal"), ("TIMETRA-CHASSIS-MIB", "tCardResIntArbiterAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCardResourceV15v1Group = tmnxCardResourceV15v1Group.setStatus('current')
tmnxBluetoothNotifGroupV15v1 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleConnectionChg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxBluetoothNotifGroupV15v1 = tmnxBluetoothNotifGroupV15v1.setStatus('current')
tmnxChassisCardLevelGroupV15v1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxCardAssignedLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxCardEquippedLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLicensedLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLicensedBandwidth"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLevelName"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLevelId"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLevelDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLevelStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLevelUpgradeName"), ("TIMETRA-CHASSIS-MIB", "tmnxCardUpgradeLevelId"), ("TIMETRA-CHASSIS-MIB", "tmnxCardUpgradeRequiresReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLevelUpgradeRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCardAssignedLevelUpgradeId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisCardLevelGroupV15v1 = tmnxChassisCardLevelGroupV15v1.setStatus('current')
tmnxChassisMdaLevelGroupV15v1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxMDALicensedLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxMDALicensedBandwidth"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaLevelName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaLevelId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaLevelDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaLevelStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDALevelUpgradeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAUpgradeLevelId"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAUpgradeRequiresReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxMDALevelUpgradeRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedLevelUpgradeId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxChassisMdaLevelGroupV15v1 = tmnxChassisMdaLevelGroupV15v1.setStatus('current')
tmnxFPResourceV15v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 79, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tFPResEgrUserQueueTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrUserQueueAlloc"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrUserPolicerTotal"), ("TIMETRA-CHASSIS-MIB", "tFPResEgrUserPolicerAlloc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFPResourceV15v1Group = tmnxFPResourceV15v1Group.setStatus('current')
tmnxChassisDCCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 3))
tmnxChassisDCGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 4))
tmnxHwNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2))
tmnxChassisNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1))
tmnxChassisNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0))
tmnxHwConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxHwConfigChange.setStatus('obsolete')
tmnxEnvTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"))
if mibBuilder.loadTexts: tmnxEnvTempTooHigh.setStatus('current')
tmnxEqPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyFailure.setStatus('obsolete')
tmnxEqPowerSupplyInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 4)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyInserted.setStatus('current')
tmnxEqPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 5)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyRemoved.setStatus('current')
tmnxEqFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 6)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeedPercent"))
if mibBuilder.loadTexts: tmnxEqFanFailure.setStatus('obsolete')
tmnxEqCardFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 7)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardFailureReason"))
if mibBuilder.loadTexts: tmnxEqCardFailure.setStatus('current')
tmnxEqCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 8)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"))
if mibBuilder.loadTexts: tmnxEqCardInserted.setStatus('current')
tmnxEqCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 9)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"))
if mibBuilder.loadTexts: tmnxEqCardRemoved.setStatus('current')
tmnxEqWrongCard = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 10)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqWrongCard.setStatus('current')
tmnxEqCpuFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 11)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqCpuFailure.setStatus('obsolete')
tmnxEqMemoryFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 12)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqMemoryFailure.setStatus('obsolete')
tmnxEqBackdoorBusFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 13)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"))
if mibBuilder.loadTexts: tmnxEqBackdoorBusFailure.setStatus('obsolete')
tmnxPeSoftwareError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 14)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeSoftwareError.setStatus('obsolete')
tmnxPeSoftwareAbnormalHalt = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 15)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeSoftwareAbnormalHalt.setStatus('obsolete')
tmnxPeSoftwareVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 16)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeSoftwareVersionMismatch.setStatus('current')
tmnxPeOutOfMemory = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 17)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeOutOfMemory.setStatus('obsolete')
tmnxPeConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 18)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeConfigurationError.setStatus('obsolete')
tmnxPeStorageProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 19)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeStorageProblem.setStatus('obsolete')
tmnxPeCpuCyclesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 20)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPeCpuCyclesExceeded.setStatus('obsolete')
tmnxRedPrimaryCPMFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 21)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedPrimaryCPMFail.setStatus('current')
tmnxRedSecondaryCPMStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 22)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatus"))
if mibBuilder.loadTexts: tmnxRedSecondaryCPMStatusChange.setStatus('obsolete')
tmnxRedRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 23)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedRestoreSuccess.setStatus('obsolete')
tmnxRedRestoreFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 24)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxRedRestoreFail.setStatus('obsolete')
tmnxChassisNotificationClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 25)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyOID"))
if mibBuilder.loadTexts: tmnxChassisNotificationClear.setStatus('current')
tmnxEqSyncIfTimingHoldover = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 26)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingHoldover.setStatus('current')
tmnxEqSyncIfTimingHoldoverClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 27)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingHoldoverClear.setStatus('current')
tmnxEqSyncIfTimingRef1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 28)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef1Alarm.setStatus('current')
tmnxEqSyncIfTimingRef1AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 29)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef1AlarmClear.setStatus('current')
tmnxEqSyncIfTimingRef2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 30)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef2Alarm.setStatus('current')
tmnxEqSyncIfTimingRef2AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 31)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef2AlarmClear.setStatus('current')
tmnxEqFlashDataLoss = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 32)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"))
if mibBuilder.loadTexts: tmnxEqFlashDataLoss.setStatus('current')
tmnxEqFlashDiskFull = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 33)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyDiskFullReason"))
if mibBuilder.loadTexts: tmnxEqFlashDiskFull.setStatus('current')
tmnxPeSoftwareLoadFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 34)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifySoftwareLocation"))
if mibBuilder.loadTexts: tmnxPeSoftwareLoadFailed.setStatus('current')
tmnxPeBootloaderVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 35)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeBootloaderVersionMismatch.setStatus('current')
tmnxPeBootromVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 36)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeBootromVersionMismatch.setStatus('current')
tmnxPeFPGAVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 37)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeFPGAVersionMismatch.setStatus('current')
tmnxEqSyncIfTimingBITSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 38)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSAlarm.setStatus('current')
tmnxEqSyncIfTimingBITSAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 39)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSAlarmClear.setStatus('current')
tmnxEqCardFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 40)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqCardFirmwareUpgraded.setStatus('current')
tmnxChassisUpgradeInProgress = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 41)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisUpgradeInProgress.setStatus('current')
tmnxChassisUpgradeComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 42)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisUpgradeComplete.setStatus('current')
tmnxChassisHiBwMcastAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 43)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxChassisHiBwMcastAlarm.setStatus('current')
tmnxEqMdaCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 44)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqMdaCfgNotCompatible.setStatus('current')
tmnxCpmCardSyncFileNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 45)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSyncFile"))
if mibBuilder.loadTexts: tmnxCpmCardSyncFileNotPresent.setStatus('current')
tmnxEqMdaXplError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 46)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAXplFailedCount"))
if mibBuilder.loadTexts: tmnxEqMdaXplError.setStatus('current')
tmnxEqCardPChipError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 47)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFwdDirection"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSrcSlotBitmap"))
if mibBuilder.loadTexts: tmnxEqCardPChipError.setStatus('current')
tmnxEqCardSoftResetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 48)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSoftResetState"))
if mibBuilder.loadTexts: tmnxEqCardSoftResetAlarm.setStatus('current')
tmnxEqMdaSyncENotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 49)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqMdaSyncENotCompatible.setStatus('current')
tmnxIPsecIsaGrpActiveIsaChgd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 50)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpPrimaryIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpBackupIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpActiveIsaChgd.setStatus('current')
tmnxEqCardPChipMemoryEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 51)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardPChipMemoryEvent.setStatus('current')
tmnxIPsecIsaGrpUnableToSwitch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 52)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpUnableToSwitch.setStatus('current')
tmnxIPsecIsaGrpTnlLowWMark = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 53)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTnlLowWMark.setStatus('current')
tmnxIPsecIsaGrpTnlHighWMark = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 54)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTnlHighWMark.setStatus('current')
tmnxIPsecIsaGrpTnlMax = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 55)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"))
if mibBuilder.loadTexts: tmnxIPsecIsaGrpTnlMax.setStatus('current')
tmnxEqSyncIfTimingRef1Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 56)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1RxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef1Quality.setStatus('current')
tmnxEqSyncIfTimingRef2Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 57)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2RxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRef2Quality.setStatus('current')
tmnxEqSyncIfTimingBITSQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 58)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSRxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSQuality.setStatus('current')
tmnxEqSyncIfTimingBITS2Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 59)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2RxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITS2Quality.setStatus('current')
tmnxEqSyncIfTimingRefSwitch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 60)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPInUse"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingRefSwitch.setStatus('current')
tmnxEqSyncIfTimingBITS2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 61)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITS2Alarm.setStatus('current')
tmnxEqSyncIfTimingBITS2AlarmClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 62)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITS2AlarmClr.setStatus('current')
tmnxEqSyncIfTimingBITSOutRefChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 63)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutRefSel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingBITSOutRefChg.setStatus('current')
tmnxEqCardPChipCamEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 64)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardPChipCamEvent.setStatus('current')
tmnxEqSyncIfTimingSystemQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 65)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingSystemQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingSystemQuality.setStatus('current')
tmnxEqHwEnhancedCapability = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 66)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqHwEnhancedCapability.setStatus('current')
tmnxEqSyncIfTimingPTPQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 67)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPRxQltyLevel"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingPTPQuality.setStatus('current')
tmnxEqSyncIfTimingPTPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 68)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingPTPAlarm.setStatus('current')
tmnxEqSyncIfTimingPTPAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 69)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"))
if mibBuilder.loadTexts: tmnxEqSyncIfTimingPTPAlarmClear.setStatus('current')
tmnxPeFirmwareVersionWarning = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 70)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFirmwareCodeVersion"))
if mibBuilder.loadTexts: tmnxPeFirmwareVersionWarning.setStatus('current')
tmnxMDAIsaTunnelGroupChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 71)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroup"))
if mibBuilder.loadTexts: tmnxMDAIsaTunnelGroupChange.setStatus('current')
tmnxDcpCardFpEventOvrflw = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 72)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"))
if mibBuilder.loadTexts: tmnxDcpCardFpEventOvrflw.setStatus('current')
tmnxDcpCardSapEventOvrflw = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 73)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"))
if mibBuilder.loadTexts: tmnxDcpCardSapEventOvrflw.setStatus('current')
tmnxDcpCardVrtrIfEventOvrflw = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 74)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"))
if mibBuilder.loadTexts: tmnxDcpCardVrtrIfEventOvrflw.setStatus('current')
tmnxDcpFpDynPoolUsageHiAlmRaise = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 75)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPDCpuProtDynEnfrcPlcrPool"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"))
if mibBuilder.loadTexts: tmnxDcpFpDynPoolUsageHiAlmRaise.setStatus('current')
tmnxDcpFpDynPoolUsageHiAlmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 76)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPDCpuProtDynEnfrcPlcrPool"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"))
if mibBuilder.loadTexts: tmnxDcpFpDynPoolUsageHiAlmClear.setStatus('current')
tmnxDcpCardFpEventOvrflwClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 77)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpMissingNotificationCount"))
if mibBuilder.loadTexts: tmnxDcpCardFpEventOvrflwClr.setStatus('current')
tmnxDcpCardSapEventOvrflwClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 78)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpMissingNotificationCount"))
if mibBuilder.loadTexts: tmnxDcpCardSapEventOvrflwClr.setStatus('current')
tmnxDcpCardVrtrIfEventOvrflwClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 79)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxDcpMissingNotificationCount"))
if mibBuilder.loadTexts: tmnxDcpCardVrtrIfEventOvrflwClr.setStatus('current')
tmnxEqPowerCapacityExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 80)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerZone"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerCapacity"))
if mibBuilder.loadTexts: tmnxEqPowerCapacityExceeded.setStatus('current')
tmnxEqPowerCapacityExceededClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 81)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerZone"))
if mibBuilder.loadTexts: tmnxEqPowerCapacityExceededClear.setStatus('current')
tmnxEqPowerLostCapacity = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 82)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerZone"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerCapacity"))
if mibBuilder.loadTexts: tmnxEqPowerLostCapacity.setStatus('current')
tmnxEqPowerLostCapacityClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 83)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerZone"))
if mibBuilder.loadTexts: tmnxEqPowerLostCapacityClear.setStatus('current')
tmnxEqPowerOverloadState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 84)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerZone"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerCapacity"))
if mibBuilder.loadTexts: tmnxEqPowerOverloadState.setStatus('current')
tmnxEqPowerOverloadStateClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 85)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerZone"))
if mibBuilder.loadTexts: tmnxEqPowerOverloadStateClear.setStatus('current')
tmnxEqCardQChipBufMemoryEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 86)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardQChipBufMemoryEvent.setStatus('current')
tmnxEqCardQChipStatsMemoryEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 87)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardQChipStatsMemoryEvent.setStatus('current')
tmnxEqCardQChipIntMemoryEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 88)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardQChipIntMemoryEvent.setStatus('current')
tmnxEqCardChipIfDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 89)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardChipIfDownEvent.setStatus('current')
tmnxEqCardChipIfCellEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 90)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardChipIfCellEvent.setStatus('current')
tmnxEqLowSwitchFabricCap = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 91)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqLowSwitchFabricCap.setStatus('current')
tmnxEqLowSwitchFabricCapClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 92)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqLowSwitchFabricCapClear.setStatus('current')
tmnxEqPowerSafetyAlertThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 93)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtSafetyAlert"))
if mibBuilder.loadTexts: tmnxEqPowerSafetyAlertThreshold.setStatus('current')
tmnxEqPowerSafetyAlertClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 94)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtSafetyAlert"))
if mibBuilder.loadTexts: tmnxEqPowerSafetyAlertClear.setStatus('current')
tmnxEqPowerSafetyLevelThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 95)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtSafetyLevel"))
if mibBuilder.loadTexts: tmnxEqPowerSafetyLevelThreshold.setStatus('current')
tmnxEqPowerSafetyLevelClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 96)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisPwrMgmtSafetyLevel"))
if mibBuilder.loadTexts: tmnxEqPowerSafetyLevelClear.setStatus('current')
tmnxEqCardTChipParityEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 97)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"))
if mibBuilder.loadTexts: tmnxEqCardTChipParityEvent.setStatus('current')
tmnxEqPowerSupplyPemACRectAlm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 98)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyPemACRect"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyPemACRectAlm.setStatus('obsolete')
tmnxEqPowerSupplyPemACRectAlmClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 99)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyPemACRectAlmClr.setStatus('obsolete')
tmnxEqPowerSupplyInputFeedAlm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 100)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInFeedDown"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyInputFeedAlm.setStatus('obsolete')
tmnxEqPowerSupplyInputFeedAlmClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 101)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqPowerSupplyInputFeedAlmClr.setStatus('obsolete')
tmnxEqProvPowerCapacityAlm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 102)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwPowerZone"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyPowerCapacity"))
if mibBuilder.loadTexts: tmnxEqProvPowerCapacityAlm.setStatus('current')
tmnxEqProvPowerCapacityAlmClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 103)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwPowerZone"))
if mibBuilder.loadTexts: tmnxEqProvPowerCapacityAlmClr.setStatus('current')
tmnxPlcyAcctStatsPoolExcResource = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 104)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctStatsPool"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctStatsInUse"))
if mibBuilder.loadTexts: tmnxPlcyAcctStatsPoolExcResource.setStatus('current')
tmnxPlcyAcctStatsPoolLowResource = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 105)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctStatsPool"), ("TIMETRA-CHASSIS-MIB", "tmnxFPPlcyAcctStatsInUse"))
if mibBuilder.loadTexts: tmnxPlcyAcctStatsPoolLowResource.setStatus('current')
tmnxPlcyAcctStatsEventOvrflwClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 106)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctMissingNotifCount"))
if mibBuilder.loadTexts: tmnxPlcyAcctStatsEventOvrflwClr.setStatus('current')
tmnxPlcyAcctStatsEventOvrflw = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 107)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxPlcyAcctTimeEventOccured"))
if mibBuilder.loadTexts: tmnxPlcyAcctStatsEventOvrflw.setStatus('current')
tmnxIomResHighLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 108)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResourceType"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResourceLimitPct"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResLimitTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIomResHighLimitReached.setStatus('current')
tmnxIomResExhausted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 109)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResourceType"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResLimitTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIomResExhausted.setStatus('current')
tmnxIomResStateClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 110)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResourceType"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResourceLimitPct"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResLimitTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIomResStateClr.setStatus('current')
tmnxIomEventOverflow = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 111)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResLimitTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResourceType"))
if mibBuilder.loadTexts: tmnxIomEventOverflow.setStatus('current')
tmnxIomEventOverflowClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 112)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResLimitTimeEventOccured"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResLimMissingNotifCount"), ("TIMETRA-CHASSIS-MIB", "tmnxIomResourceType"))
if mibBuilder.loadTexts: tmnxIomEventOverflowClr.setStatus('current')
tmnxEqDataPathFailureProtImpact = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 113)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqDataPathFailureProtImpact.setStatus('current')
tmnxExtStandbyCpmReboot = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 114)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"))
if mibBuilder.loadTexts: tmnxExtStandbyCpmReboot.setStatus('current')
tmnxExtStandbyCpmRebootFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 115)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"))
if mibBuilder.loadTexts: tmnxExtStandbyCpmRebootFail.setStatus('current')
tmnxEqMdaIngrXplError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 116)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMdaHwEventNumOccurrences"))
if mibBuilder.loadTexts: tmnxEqMdaIngrXplError.setStatus('current')
tmnxPowerSupplyWrongFanDir = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 119)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyFanDir"))
if mibBuilder.loadTexts: tmnxPowerSupplyWrongFanDir.setStatus('obsolete')
tmnxPowerSupplyWrongFanDirClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 120)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPowerSupplyWrongFanDirClear.setStatus('obsolete')
tmnxEqMgmtEthRedStandbyRaise = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 121)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMgmtEthRedPort"))
if mibBuilder.loadTexts: tmnxEqMgmtEthRedStandbyRaise.setStatus('current')
tmnxEqMgmtEthRedStandbyClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 122)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMgmtEthRedPort"))
if mibBuilder.loadTexts: tmnxEqMgmtEthRedStandbyClear.setStatus('current')
tmnxSyncIfTimBITS2048khzUnsup = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 123)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxSyncIfTimBITS2048khzUnsup.setStatus('current')
tmnxSyncIfTimBITS2048khzUnsupClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 124)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxSyncIfTimBITS2048khzUnsupClr.setStatus('current')
tmnxEqPhysChassPowerSupOvrTmp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 125)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupTempThrshld"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupOvrTmp.setStatus('current')
tmnxEqPhysChassPowerSupOvrTmpClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 126)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupTempThrshld"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupOvrTmpClr.setStatus('current')
tmnxEqPhysChassPowerSupAcFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 127)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSup1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSup2Status"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupAcFail.setStatus('current')
tmnxEqPhysChassPowerSupAcFailClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 128)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSup1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSup2Status"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupAcFailClr.setStatus('current')
tmnxEqPhysChassPowerSupDcFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 129)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSup1Status"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupDcFail.setStatus('current')
tmnxEqPhysChassPowerSupDcFailClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 130)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSup1Status"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupDcFailClr.setStatus('current')
tmnxEqPhysChassPowerSupInFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 131)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupInputStatus"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupInFail.setStatus('current')
tmnxEqPhysChassPowerSupInFailClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 132)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupInputStatus"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupInFailClr.setStatus('current')
tmnxEqPhysChassPowerSupOutFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 133)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupOutptStatus"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupOutFail.setStatus('current')
tmnxEqPhysChassPowerSupOutFailCl = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 134)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupOutptStatus"))
if mibBuilder.loadTexts: tmnxEqPhysChassPowerSupOutFailCl.setStatus('current')
tmnxEqPhysChassisFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 135)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanSpeedPercent"))
if mibBuilder.loadTexts: tmnxEqPhysChassisFanFailure.setStatus('current')
tmnxEqPhysChassisFanFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 136)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisFanSpeedPercent"))
if mibBuilder.loadTexts: tmnxEqPhysChassisFanFailureClear.setStatus('current')
tIPsecIsaMemLowWatermark = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 137)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"))
if mibBuilder.loadTexts: tIPsecIsaMemLowWatermark.setStatus('current')
tIPsecIsaMemHighWatermark = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 138)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"))
if mibBuilder.loadTexts: tIPsecIsaMemHighWatermark.setStatus('current')
tIPsecIsaMemMax = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 139)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"))
if mibBuilder.loadTexts: tIPsecIsaMemMax.setStatus('current')
tmnxCpmMemSizeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 140)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"))
if mibBuilder.loadTexts: tmnxCpmMemSizeMismatch.setStatus('current')
tmnxCpmMemSizeMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 141)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"))
if mibBuilder.loadTexts: tmnxCpmMemSizeMismatchClear.setStatus('current')
tmnxPhysChassPwrSupWrgFanDir = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 142)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupFanDir"))
if mibBuilder.loadTexts: tmnxPhysChassPwrSupWrgFanDir.setStatus('current')
tmnxPhysChassPwrSupWrgFanDirClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 143)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupFanDir"))
if mibBuilder.loadTexts: tmnxPhysChassPwrSupWrgFanDirClr.setStatus('current')
tmnxPhysChassPwrSupPemACRect = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 144)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupPemACRect"))
if mibBuilder.loadTexts: tmnxPhysChassPwrSupPemACRect.setStatus('current')
tmnxPhysChassPwrSupPemACRectClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 145)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupPemACRect"))
if mibBuilder.loadTexts: tmnxPhysChassPwrSupPemACRectClr.setStatus('current')
tmnxPhysChassPwrSupInputFeed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 146)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupInFeedDown"))
if mibBuilder.loadTexts: tmnxPhysChassPwrSupInputFeed.setStatus('current')
tmnxPhysChassPwrSupInputFeedClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 147)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassPowerSupInFeedDown"))
if mibBuilder.loadTexts: tmnxPhysChassPwrSupInputFeedClr.setStatus('current')
tmnxCardResMacFdbHighUsgSet = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 148)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMacScaleCardSlotNum"))
if mibBuilder.loadTexts: tmnxCardResMacFdbHighUsgSet.setStatus('current')
tmnxCardResMacFdbHighUsgClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 149)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxMacScaleCardSlotNum"))
if mibBuilder.loadTexts: tmnxCardResMacFdbHighUsgClr.setStatus('current')
tmnxEqBpEpromFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 150)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqBpEpromFail.setStatus('current')
tmnxEqBpEpromFailClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 151)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqBpEpromFailClear.setStatus('current')
tmnxEqBpEpromWarning = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 152)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqBpEpromWarning.setStatus('current')
tmnxEqBpEpromWarningClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 153)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqBpEpromWarningClear.setStatus('current')
tmnxPhysChassisPCMInputFeed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 154)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMInFeedDown"))
if mibBuilder.loadTexts: tmnxPhysChassisPCMInputFeed.setStatus('current')
tmnxPhysChassisPCMInputFeedClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 155)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPCMInFeedDown"))
if mibBuilder.loadTexts: tmnxPhysChassisPCMInputFeedClr.setStatus('current')
tmnxIPMacQosIngOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 156)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPMacQosIngOverload.setStatus('current')
tmnxIPMacQosIngOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 157)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPMacQosIngOverloadClear.setStatus('current')
tmnxIPQosEgrOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 158)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPQosEgrOverload.setStatus('current')
tmnxIPQosEgrOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 159)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPQosEgrOverloadClear.setStatus('current')
tmnxIPv6QosIngOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 160)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6QosIngOverload.setStatus('current')
tmnxIPv6QosIngOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 161)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6QosIngOverloadClear.setStatus('current')
tmnxIPv6QosEgrOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 162)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6QosEgrOverload.setStatus('current')
tmnxIPv6QosEgrOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 163)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6QosEgrOverloadClear.setStatus('current')
tmnxIPMacFilterIngOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 164)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPMacFilterIngOverload.setStatus('current')
tmnxIPMacFilterIngOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 165)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPMacFilterIngOverloadClear.setStatus('current')
tmnxIPMacFilterEgrOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 166)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPMacFilterEgrOverload.setStatus('current')
tmnxIPMacFilterEgrOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 167)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPMacFilterEgrOverloadClear.setStatus('current')
tmnxIPv6FilterIngOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 168)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6FilterIngOverload.setStatus('current')
tmnxIPv6FilterIngOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 169)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6FilterIngOverloadClear.setStatus('current')
tmnxIPv6FilterEgrOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 170)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6FilterEgrOverload.setStatus('current')
tmnxIPv6FilterEgrOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 171)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6FilterEgrOverloadClear.setStatus('current')
tmnxIPMacCpmFilterOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 172)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPMacCpmFilterOverload.setStatus('current')
tmnxIPMacCpmFilterOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 173)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPMacCpmFilterOverloadClear.setStatus('current')
tmnxIPv6CpmFilterOverload = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 174)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6CpmFilterOverload.setStatus('current')
tmnxIPv6CpmFilterOverloadClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 175)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyFpNum"))
if mibBuilder.loadTexts: tmnxIPv6CpmFilterOverloadClear.setStatus('current')
tmnxBluetoothModuleConnectionChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 178)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCpmCardSlotNum"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleConnected"), ("TIMETRA-CHASSIS-MIB", "tmnxBluetoothModuleConnectedMac"))
if mibBuilder.loadTexts: tmnxBluetoothModuleConnectionChg.setStatus('current')
tmnxGnssAcquiringFix = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 179)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssPositionValid"))
if mibBuilder.loadTexts: tmnxGnssAcquiringFix.setStatus('current')
tmnxGnssAcquiredFix = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 180)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxGnssPositionValid"))
if mibBuilder.loadTexts: tmnxGnssAcquiredFix.setStatus('current')
tmnxPhysChassisPMOutFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 189)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMOutputStatus"))
if mibBuilder.loadTexts: tmnxPhysChassisPMOutFail.setStatus('current')
tmnxPhysChassisPMOutFailClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 190)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMOutputStatus"))
if mibBuilder.loadTexts: tmnxPhysChassisPMOutFailClr.setStatus('current')
tmnxPhysChassisPMInputFeed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 191)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMInputFeedDown"))
if mibBuilder.loadTexts: tmnxPhysChassisPMInputFeed.setStatus('current')
tmnxPhysChassisPMInputFeedClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 192)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxPhysChassisPMInputFeedDown"))
if mibBuilder.loadTexts: tmnxPhysChassisPMInputFeedClr.setStatus('current')
tmnxPhysChassisFilterDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 193)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPhysChassisFilterDoorOpen.setStatus('current')
tmnxPhysChassisFilterDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 194)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxPhysChassisFilterDoorClosed.setStatus('current')
tmnxPhysChassisPMOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 195)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"))
if mibBuilder.loadTexts: tmnxPhysChassisPMOverTemp.setStatus('current')
tmnxPhysChassisPMOverTempClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 196)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"))
if mibBuilder.loadTexts: tmnxPhysChassisPMOverTempClr.setStatus('current')
tmnxEqFpgaSoftError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 211)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"))
if mibBuilder.loadTexts: tmnxEqFpgaSoftError.setStatus('current')
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxCpmCardCmplxEgrFcsOccurTime=tmnxCpmCardCmplxEgrFcsOccurTime, tmnxCpmCardCmplBufMemErrOcc=tmnxCpmCardCmplBufMemErrOcc, tmnxCcagPathCcUserAssignedMac=tmnxCcagPathCcUserAssignedMac, tmnxCardTable=tmnxCardTable, tmnxSyncIfTimingRef1SrcPort=tmnxSyncIfTimingRef1SrcPort, tmnxChassisPowerMgmtEntry=tmnxChassisPowerMgmtEntry, tFPResEgrQosEntryTotal=tFPResEgrQosEntryTotal, tmnxChassisPortIdScheme=tmnxChassisPortIdScheme, tmnxCpmCardOscillatorType=tmnxCpmCardOscillatorType, tmnxPhysChassisPMTable=tmnxPhysChassisPMTable, tmnxEqProvPowerCapacityAlm=tmnxEqProvPowerCapacityAlm, tmnxFPAccIngQGrpDescr=tmnxFPAccIngQGrpDescr, tmnxChassis7450V6v1Compliance=tmnxChassis7450V6v1Compliance, tFPResResRvplsFdbRecTotal=tFPResResRvplsFdbRecTotal, tmnxChassisV16v0Compliance=tmnxChassisV16v0Compliance, tmnxHwSwState=tmnxHwSwState, tmnxChassisLastChange=tmnxChassisLastChange, tmnxFPAccIngQgPStDrpLPrioPkts=tmnxFPAccIngQgPStDrpLPrioPkts, tmnxChassisNotifyPowerZone=tmnxChassisNotifyPowerZone, tmnxChassisPowerSupplyFanDir=tmnxChassisPowerSupplyFanDir, tmnxMDAUpgradeLevelId=tmnxMDAUpgradeLevelId, tmnxEqSyncIfTimingBITSAlarmClear=tmnxEqSyncIfTimingBITSAlarmClear, tmnxSyncIfTimingBITSAlarm=tmnxSyncIfTimingBITSAlarm, tmnxDcpMissingNotificationCount=tmnxDcpMissingNotificationCount, tmnxSyncIfTimingRef1SrcHw=tmnxSyncIfTimingRef1SrcHw, tFPAccIngQGrpPlcrOvrAdminPIR=tFPAccIngQGrpPlcrOvrAdminPIR, tmnxIPsecIsaGrpV15v0Group=tmnxIPsecIsaGrpV15v0Group, tmnxMDAEgrXplErrThreshold=tmnxMDAEgrXplErrThreshold, tSyncIfTimingAdmBITSOutSource=tSyncIfTimingAdmBITSOutSource, tmnxChassisFanV15v0Group=tmnxChassisFanV15v0Group, tmnxChassisNotifyObjsV12v0Group=tmnxChassisNotifyObjsV12v0Group, tmnxGnssConstellation=tmnxGnssConstellation, tChassisResPortEgrVPortTotal=tChassisResPortEgrVPortTotal, tmnxFPAccIngQgPStOffLPrioPktsL=tmnxFPAccIngQgPStOffLPrioPktsL, tmnxChassisPEQInputPowerMode=tmnxChassisPEQInputPowerMode, tmnxChassisCardLevelGroupV15v1=tmnxChassisCardLevelGroupV15v1, tmnxCardLevelUpgradeRowStatus=tmnxCardLevelUpgradeRowStatus, tmnxChassisV14v0Compliance=tmnxChassisV14v0Compliance, tmnxMDAEgrHsmdaThrshLoBrstMult=tmnxMDAEgrHsmdaThrshLoBrstMult, tmnxBluetoothTableLastChange=tmnxBluetoothTableLastChange, TmnxMDASuppType=TmnxMDASuppType, tmnxRedPrimaryCPMFail=tmnxRedPrimaryCPMFail, tFPNetIngQGrpPlcrOvrCBS=tFPNetIngQGrpPlcrOvrCBS, tmnxCardSlowQueueThresh=tmnxCardSlowQueueThresh, tmnxCardNamedPoolAdminMode=tmnxCardNamedPoolAdminMode, tmnxMDAHiBwMcastTapCount=tmnxMDAHiBwMcastTapCount, tmnxFPNetIngQGrpCollectStats=tmnxFPNetIngQGrpCollectStats, tmnxFPNetIngQgPStUncolPktsOffL=tmnxFPNetIngQgPStUncolPktsOffL, tmnxCardComplexMemParError=tmnxCardComplexMemParError, tmnxMDAMinChannelization=tmnxMDAMinChannelization, tmnxIPsecIsaGrpMultiActive=tmnxIPsecIsaGrpMultiActive, tmnxIPsecIsaGrpTunnelReassembly=tmnxIPsecIsaGrpTunnelReassembly, tmnxMDAMcPathMgmtAncPathLimit=tmnxMDAMcPathMgmtAncPathLimit, tmnxChassisPEQTableLastChg=tmnxChassisPEQTableLastChg, tmnxFabricTypeIndex=tmnxFabricTypeIndex, tmnxSyncIfTimingBITS2State=tmnxSyncIfTimingBITS2State, tFPNetIngQGrpPlcrOvrStatMode=tFPNetIngQGrpPlcrOvrStatMode, tmnxCardComplexNum=tmnxCardComplexNum, tmnxEqCardRemoved=tmnxEqCardRemoved, tmnxSlotObjs=tmnxSlotObjs, tmnxChassisPowerSupplyV9v0Grp=tmnxChassisPowerSupplyV9v0Grp, tmnxMcmEquippedType=tmnxMcmEquippedType, tmnxChassisSwitchFabNtfyV11v0Grp=tmnxChassisSwitchFabNtfyV11v0Grp, tmnxCardEncapGrpV16v5Group=tmnxCardEncapGrpV16v5Group, tmnxIPsecIsaGrpIpMaxTunnels=tmnxIPsecIsaGrpIpMaxTunnels, tmnxFPNetIngQgPStDrpHPrioOctsH=tmnxFPNetIngQgPStDrpHPrioOctsH, tmnxMdaTypeDescription=tmnxMdaTypeDescription, tmnxCpmCardReboot=tmnxCpmCardReboot, tmnxIPsecIsaGrpLastChanged=tmnxIPsecIsaGrpLastChanged, tmnxCardCmpl1BufMemErrOccur=tmnxCardCmpl1BufMemErrOccur, tmnxIPsecIsaGrpTable=tmnxIPsecIsaGrpTable, tmnxEqPowerOverloadStateClear=tmnxEqPowerOverloadStateClear, tmnxCpmCardSlotNum=tmnxCpmCardSlotNum, tmnxEqMdaXplError=tmnxEqMdaXplError, tmnxPlcyAcctMissingNotifCount=tmnxPlcyAcctMissingNotifCount, tmnxChassisTypeIndex=tmnxChassisTypeIndex, tFPResEgrIPv6AclEntryTotal=tFPResEgrIPv6AclEntryTotal, tmnxBluetoothModuleConnectedMac=tmnxBluetoothModuleConnectedMac, tSyncIfTimingAdmRef2BITSIfType=tSyncIfTimingAdmRef2BITSIfType, tmnxFPMcPathMgmtPriInUseBw=tmnxFPMcPathMgmtPriInUseBw, tmnxIPsecIsaGrpTnlHighWMark=tmnxIPsecIsaGrpTnlHighWMark, tmnxHwName=tmnxHwName, tmnxSyncIfTimingRef1RxQltyLevel=tmnxSyncIfTimingRef1RxQltyLevel, TmnxHwIndex=TmnxHwIndex, tmnxEqCardQChipBufMemoryEvent=tmnxEqCardQChipBufMemoryEvent, tmnxFabricTypeDescription=tmnxFabricTypeDescription, tmnxCcagEntry=tmnxCcagEntry, tmnxPhysChassPowerSupDCStatus=tmnxPhysChassPowerSupDCStatus, tmnxFPAccIngQgPStOffHPrioPktsL=tmnxFPAccIngQgPStOffHPrioPktsL, tFPResIngQGrpRedirAlloc=tFPResIngQGrpRedirAlloc, tmnxPEQTypeIndex=tmnxPEQTypeIndex, tmnxPEQTypeDescription=tmnxPEQTypeDescription, tmnxSyncIfTimingPTPCfgQltyLevel=tmnxSyncIfTimingPTPCfgQltyLevel, tmnxCpmCardBootOptionLastSaved=tmnxCpmCardBootOptionLastSaved, tmnxCpmCardNumCpus=tmnxCpmCardNumCpus, tmnxGnssPositionValid=tmnxGnssPositionValid, tmnxFPNetIngQgPStFwdOutProfOctsH=tmnxFPNetIngQgPStFwdOutProfOctsH, tmnxCardSoftResetState=tmnxCardSoftResetState, tmnxCcagPathCcQueuePlcy=tmnxCcagPathCcQueuePlcy, tmnxPhysChassPwrSupInputFeedClr=tmnxPhysChassPwrSupInputFeedClr, tmnxCardSrcSlotBitmap=tmnxCardSrcSlotBitmap, tmnxIpsecV10v0Group=tmnxIpsecV10v0Group, tFPAccIngQGrpPlcrOvrTable=tFPAccIngQGrpPlcrOvrTable, tmnxPhysChassisNotifGroupV15v0=tmnxPhysChassisNotifGroupV15v0, tmnxSyncIfTimingRef2BITSIfType=tmnxSyncIfTimingRef2BITSIfType, tmnxHwOperState=tmnxHwOperState, tmnxChassis7750V6v0Compliance=tmnxChassis7750V6v0Compliance, tmnxChassisMdaLevelGroupV15v1=tmnxChassisMdaLevelGroupV15v1, tmnxChassis7x50V8v0Compliance=tmnxChassis7x50V8v0Compliance, tFPNetIngQGrpPlcrOvrTable=tFPNetIngQGrpPlcrOvrTable, tmnxIomResourceType=tmnxIomResourceType, tFPResEgrHsSecondaryShapersTotal=tFPResEgrHsSecondaryShapersTotal, tmnxPhysChassPowerSupTempStatus=tmnxPhysChassPowerSupTempStatus, tmnxMDAMcPathMgmtPriInUseBw=tmnxMDAMcPathMgmtPriInUseBw, tmnxEqProvPowerCapacityAlmClr=tmnxEqProvPowerCapacityAlmClr, tmnxPhysChassisFanTable=tmnxPhysChassisFanTable, tmnxChassisHwEventGroupV10v0=tmnxChassisHwEventGroupV10v0, tmnxFPNetIngQgPStOffLPrioPktsL=tmnxFPNetIngQgPStOffLPrioPktsL, tmnxChassisFanRevision=tmnxChassisFanRevision, tmnxFPNetIngQGrpEntry=tmnxFPNetIngQGrpEntry, tmnxFPNetIngQGrpInstanceId=tmnxFPNetIngQGrpInstanceId, tmnxMcmHwIndex=tmnxMcmHwIndex, tFPResDynQueueAlloc=tFPResDynQueueAlloc, tmnxCcmOperStatus=tmnxCcmOperStatus, tmnxChassisResourceV13v0Group=tmnxChassisResourceV13v0Group, TmnxPowerSupAssignType=TmnxPowerSupAssignType, tFPResSLAProfileInstanceAlloc=tFPResSLAProfileInstanceAlloc, tmnxPhysChassisClass=tmnxPhysChassisClass, tmnxCcagLastChanged=tmnxCcagLastChanged, tmnxCardLevelUpgradeTable=tmnxCardLevelUpgradeTable, tmnxChassisNotifyObjsV6v1Group=tmnxChassisNotifyObjsV6v1Group, tFPNetIngQGrpArbitStatFwdOcts=tFPNetIngQGrpArbitStatFwdOcts, tmnxSyncIfTimingBITS2AdminStatus=tmnxSyncIfTimingBITS2AdminStatus, tmnxChassisMixedModeIomAdminMode=tmnxChassisMixedModeIomAdminMode, tmnxFpDcpDynPlcrAllocFailCount=tmnxFpDcpDynPlcrAllocFailCount, tmnxChassisV12v0Group=tmnxChassisV12v0Group, tmnxCcagPathCcLastChanged=tmnxCcagPathCcLastChanged, tmnxEqCardPChipError=tmnxEqCardPChipError, tmnxFanTrayComponentEntry=tmnxFanTrayComponentEntry, tmnxSyncIfTimingPTPRxQltyLevel=tmnxSyncIfTimingPTPRxQltyLevel, tmnxGnssSpeed=tmnxGnssSpeed, tmnxPhysChassisPMTypeName=tmnxPhysChassisPMTypeName, tmnxFPAccIngQGrpRowStatus=tmnxFPAccIngQGrpRowStatus, tmnxPhysChassisPMInputFeedDown=tmnxPhysChassisPMInputFeedDown, tmnxMcmTypeTable=tmnxMcmTypeTable, tmnxMdaLevelStatus=tmnxMdaLevelStatus, tmnxChassisNotifyChassisId=tmnxChassisNotifyChassisId, tmnxMcmTypeStatus=tmnxMcmTypeStatus, tmnxVirtualSchedulerAdjEntry=tmnxVirtualSchedulerAdjEntry, tmnxCpmCardConfigLastModified=tmnxCpmCardConfigLastModified, tmnxPhysChassisPCMInputFeed=tmnxPhysChassisPCMInputFeed, tmnxCpmCardV13v0Group=tmnxCpmCardV13v0Group, tMDAResSapInstanceTotal=tMDAResSapInstanceTotal, tmnxCardTypeEntry=tmnxCardTypeEntry, tmnxIPsecIsaGrpTnlMax=tmnxIPsecIsaGrpTnlMax, tmnxFabricTypeStatus=tmnxFabricTypeStatus, tmnxCpmFlashV14v0Group=tmnxCpmFlashV14v0Group, TmnxPMType=TmnxPMType, tFPResIngAclEntryTotal=tFPResIngAclEntryTotal, tmnxFPAccIngQgPStUncolOctsOff=tmnxFPAccIngQgPStUncolOctsOff, tmnxChassisGroupV16v0=tmnxChassisGroupV16v0, tmnxCardTypeDescription=tmnxCardTypeDescription, tmnxCardLevelIndex=tmnxCardLevelIndex, tmnxCardV6v0NamedPoolPlcyGroup=tmnxCardV6v0NamedPoolPlcyGroup, tmnxEqPowerSafetyLevelThreshold=tmnxEqPowerSafetyLevelThreshold, tmnxCcagId=tmnxCcagId, tmnxIPsecIsaGrpActiveMda=tmnxIPsecIsaGrpActiveMda, tIPsecIsaMemHighWatermark=tIPsecIsaMemHighWatermark, tmnxChassisPowerMgmtTable=tmnxChassisPowerMgmtTable, tFPResEgrPolicerStatTotal=tFPResEgrPolicerStatTotal, tmnxCpmFlashUsed=tmnxCpmFlashUsed, TmnxPMSuppType=TmnxPMSuppType, TmnxChassisType=TmnxChassisType, tmnxFPAccIngQgPStDrpHPrioPkts=tmnxFPAccIngQgPStDrpHPrioPkts, tmnxIPsecIsaGrpTableLastChanged=tmnxIPsecIsaGrpTableLastChanged, tmnxEqPhysChassisFanFailureClear=tmnxEqPhysChassisFanFailureClear, tmnxPeBootromVersionMismatch=tmnxPeBootromVersionMismatch, tmnxEqSyncIfTimingRef1Alarm=tmnxEqSyncIfTimingRef1Alarm, tFPNetIngQGrpArbitStatFwdPktsL=tFPNetIngQGrpArbitStatFwdPktsL, tmnxHwResourcePeakAmperage=tmnxHwResourcePeakAmperage, tmnxCardFailOnError=tmnxCardFailOnError, tmnxMcmTypeName=tmnxMcmTypeName, tmnxCcmTypeDescription=tmnxCcmTypeDescription, tmnxEqPhysChassPowerSupDcFailClr=tmnxEqPhysChassPowerSupDcFailClr, tmnxMdaTypeEntry=tmnxMdaTypeEntry, tmnxCcagRowStatus=tmnxCcagRowStatus, tCardResPortEgrVPortAlloc=tCardResPortEgrVPortAlloc, tmnxCpmCardAssignedType=tmnxCpmCardAssignedType, tmnxMDAFailOnError=tmnxMDAFailOnError, tmnxPhysChassisPMTypeIndex=tmnxPhysChassisPMTypeIndex, tmnxBluetoothDeviceTable=tmnxBluetoothDeviceTable, tChassisResEgrQGrpTmplAlloc=tChassisResEgrQGrpTmplAlloc, tmnxChassisNotificationV6v1Group=tmnxChassisNotificationV6v1Group, tmnxIPv6FilterEgrOverload=tmnxIPv6FilterEgrOverload, tmnxSyncIfTimingRef1CfgQltyLevel=tmnxSyncIfTimingRef1CfgQltyLevel, tmnxPhysChassisPMEquippedType=tmnxPhysChassisPMEquippedType, tmnxPeCpuCyclesExceeded=tmnxPeCpuCyclesExceeded, tSyncIfTimingAdmRefOrder3=tSyncIfTimingAdmRefOrder3, tmnxChassisV14v0Groups=tmnxChassisV14v0Groups, tFPEgressFwdEngDRStatsTable=tFPEgressFwdEngDRStatsTable, tmnxPeSoftwareError=tmnxPeSoftwareError, tmnxPhysChassisPEQEquippedType=tmnxPhysChassisPEQEquippedType, tmnxChassisAdminValueObjs=tmnxChassisAdminValueObjs, tmnxCcmEquippedType=tmnxCcmEquippedType, tmnxCardCmpl1ChipIfDownOcc=tmnxCardCmpl1ChipIfDownOcc, tmnxCardCmplx2IngrFcsOccur=tmnxCardCmplx2IngrFcsOccur, tmnxHsmdaMdaSchOvrRowStatus=tmnxHsmdaMdaSchOvrRowStatus, tmnxChassisPowerSupplyInputStatus=tmnxChassisPowerSupplyInputStatus, tmnxFPEgrHsPoolPolicy=tmnxFPEgrHsPoolPolicy, tmnxChassisDCGroups=tmnxChassisDCGroups, tmnxFPNetIngQgPStFwdInProfPktsH=tmnxFPNetIngQgPStFwdInProfPktsH, tmnxChassisNumPhysicalPorts=tmnxChassisNumPhysicalPorts, tmnxChassisPowerSupplyDCStatus=tmnxChassisPowerSupplyDCStatus, tmnxHwBootCodeVersion=tmnxHwBootCodeVersion, tmnxCpmCardRebootHoldV12v0Group=tmnxCpmCardRebootHoldV12v0Group, tmnxMcmSlotNum=tmnxMcmSlotNum, tmnxCardLicensedLevel=tmnxCardLicensedLevel, tmnxChassisHwEventNotifyGroup=tmnxChassisHwEventNotifyGroup, tFPAccIngQGrpPCPOvrMinMBSSep=tFPAccIngQGrpPCPOvrMinMBSSep, tmnxEqSyncIfTimingHoldoverClear=tmnxEqSyncIfTimingHoldoverClear, tmnxPhysChassisPMAvailableWatt=tmnxPhysChassisPMAvailableWatt, tmnxVmCpmCardEntry=tmnxVmCpmCardEntry, tCardResFPIngQGrpInstTotal=tCardResFPIngQGrpInstTotal, tmnxFPNetIngQGrpTable=tmnxFPNetIngQGrpTable, tmnxFPEntry=tmnxFPEntry, tSyncIfTimingAdmPTPCfgQltyLevel=tSyncIfTimingAdmPTPCfgQltyLevel, tmnxDcpFpDynPoolUsageHiAlmRaise=tmnxDcpFpDynPoolUsageHiAlmRaise, tmnxChassisHwEventGroup=tmnxChassisHwEventGroup, tmnxEqBackdoorBusFailure=tmnxEqBackdoorBusFailure, tmnxChassisAdminLastSetTimeout=tmnxChassisAdminLastSetTimeout, tmnxHwTempSensor=tmnxHwTempSensor, tmnxPhysChassisFanOperStatus=tmnxPhysChassisFanOperStatus, tmnxCardHwEventSlotNum=tmnxCardHwEventSlotNum, tmnxCardLevelTable=tmnxCardLevelTable, tmnxCardLevelDescription=tmnxCardLevelDescription, tFPResDynQ2NamedPoolAlloc=tFPResDynQ2NamedPoolAlloc, tmnxPhysChassisPEQTableLastChg=tmnxPhysChassisPEQTableLastChg, tmnxCardComplexGroupV16v0=tmnxCardComplexGroupV16v0, tmnxCardResMacFdbUsgNotifGroup=tmnxCardResMacFdbUsgNotifGroup, tmnxFabricTable=tmnxFabricTable, tmnxChassisNotifyCardSlotNum=tmnxChassisNotifyCardSlotNum, tmnxPhysChassisMonitorFilterDoor=tmnxPhysChassisMonitorFilterDoor, tmnxCpmCardCmplStatMemErrOccTime=tmnxCpmCardCmplStatMemErrOccTime, tChassisResEntry=tChassisResEntry, TmnxPortAdminStatus=TmnxPortAdminStatus, tFPNetIngQGrpPCPOvrLvlTable=tFPNetIngQGrpPCPOvrLvlTable, tmnxCardCmpl2ChipIfCellOcc=tmnxCardCmpl2ChipIfCellOcc, tmnxFPNetIngQGrpAcctgPolId=tmnxFPNetIngQGrpAcctgPolId, tCardResIntArbiterTotal=tCardResIntArbiterTotal, tmnxCardCmplx2IngrFcsOccurTime=tmnxCardCmplx2IngrFcsOccurTime, tmnxGnssNmeaSentenceTypes=tmnxGnssNmeaSentenceTypes, tmnxHwResourceTable=tmnxHwResourceTable, tFPResSubHostAlloc=tFPResSubHostAlloc, tmnxMDATable=tmnxMDATable)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxCardHwEventType=tmnxCardHwEventType, tmnxFPAccIngQgPStFwdInProfOcts=tmnxFPAccIngQgPStFwdInProfOcts, tmnxFPNetIngQgPStOffLPrioOctsL=tmnxFPNetIngQgPStOffLPrioOctsL, tmnxFPNetIngQGrpPolicerPol=tmnxFPNetIngQGrpPolicerPol, tmnxSyncIfTimingOtherCPMState=tmnxSyncIfTimingOtherCPMState, tmnxGnssSatelliteType=tmnxGnssSatelliteType, tmnxCardV10v0Group=tmnxCardV10v0Group, tmnxCpmFlashCapacity=tmnxCpmFlashCapacity, tmnxPhysChassisPMGroupV16v0=tmnxPhysChassisPMGroupV16v0, tmnxDcpCardSapEventOvrflw=tmnxDcpCardSapEventOvrflw, tmnxPeBootloaderVersionMismatch=tmnxPeBootloaderVersionMismatch, tCardResEncapGrpMemberTotal=tCardResEncapGrpMemberTotal, tmnxFPAccIngQgPStOffLPrioOctsH=tmnxFPAccIngQgPStOffLPrioOctsH, tmnxPhysChassPwrSupWrgFanDir=tmnxPhysChassPwrSupWrgFanDir, tmnxMDAIsaTnlStatsV16v0Group=tmnxMDAIsaTnlStatsV16v0Group, tmnxCpmCardCmplxIngrFcsOccur=tmnxCpmCardCmplxIngrFcsOccur, tmnxCpmPChipFcsObjGroupV12v0=tmnxCpmPChipFcsObjGroupV12v0, tmnxChassisCompliances=tmnxChassisCompliances, tmnxHwContainedIn=tmnxHwContainedIn, tmnxMDAAssignedType=tmnxMDAAssignedType, tmnxSyncIfTimingNotifV8v0Group=tmnxSyncIfTimingNotifV8v0Group, tFPResDynPolicerStatIUBI=tFPResDynPolicerStatIUBI, tmnxMDASlotNum=tmnxMDASlotNum, tmnxEqSyncIfTimingBITSAlarm=tmnxEqSyncIfTimingBITSAlarm, tFPNetIngQGrpArbitStatEntry=tFPNetIngQGrpArbitStatEntry, tmnxChassisResourceV12v0Group=tmnxChassisResourceV12v0Group, tmnxPowerModuleHwIndex=tmnxPowerModuleHwIndex, tmnxMDAEgrHsmdaThrshHiBrstInc=tmnxMDAEgrHsmdaThrshHiBrstInc, tmnxFPResourceV15v1Group=tmnxFPResourceV15v1Group, tmnxChassisMgmtEthRedRevertTime=tmnxChassisMgmtEthRedRevertTime, tmnxChassisV16v0Groups=tmnxChassisV16v0Groups, tmnxFPHiBwMcastTapCount=tmnxFPHiBwMcastTapCount, tmnxBluetoothModuleTableLastChg=tmnxBluetoothModuleTableLastChg, tSyncIfTimingAdmRef1BITSIfType=tSyncIfTimingAdmRef1BITSIfType, tmnxChassis7750V6v1Compliance=tmnxChassis7750V6v1Compliance, tmnxFPTable=tmnxFPTable, tmnxCardResMacFdbHighUsgSet=tmnxCardResMacFdbHighUsgSet, tmnxCpmCardRebootHold=tmnxCpmCardRebootHold, tmnxCardCmplx1CAMErrorOccur=tmnxCardCmplx1CAMErrorOccur, tmnxEqPhysChassPowerSupOutFailCl=tmnxEqPhysChassPowerSupOutFailCl, tmnxEqFanFailure=tmnxEqFanFailure, tmnxFPMcPathMgmtV6v1Group=tmnxFPMcPathMgmtV6v1Group, tmnxHsmdaMdaSchOvrClass1Rate=tmnxHsmdaMdaSchOvrClass1Rate, tmnxChassisPowerMgmtNotifyGroup=tmnxChassisPowerMgmtNotifyGroup, tmnxPhysChassPowerSupInFeedDown=tmnxPhysChassPowerSupInFeedDown, tmnxCcagPathCcCollectStats=tmnxCcagPathCcCollectStats, tmnxHsmdaMdaSchOvrLastChanged=tmnxHsmdaMdaSchOvrLastChanged, tmnxCpmCardRedundant=tmnxCpmCardRedundant, tmnxCardCmpl1ChipIfCellOccTime=tmnxCardCmpl1ChipIfCellOccTime, tmnxFPAccIngQgPStDrpHPrioPktsH=tmnxFPAccIngQgPStDrpHPrioPktsH, tmnxPhysChassisPCMId=tmnxPhysChassisPCMId, tmnxEqPowerOverloadState=tmnxEqPowerOverloadState, tmnxCcmTypeIndex=tmnxCcmTypeIndex, tmnxSyncIfTimingBITSOutSource=tmnxSyncIfTimingBITSOutSource, tmnxHwAlarmState=tmnxHwAlarmState, tmnxChassisV13v0Compliance=tmnxChassisV13v0Compliance, tFPResIngRootArbiterAlloc=tFPResIngRootArbiterAlloc, tmnxFPNetIngQgPStDrpHPrioOctsL=tmnxFPNetIngQgPStDrpHPrioOctsL, tmnxGnssAcquiringFix=tmnxGnssAcquiringFix, tmnxChassisNotifyPrefix=tmnxChassisNotifyPrefix, tmnxFPMcPathMgmtAdminState=tmnxFPMcPathMgmtAdminState, tmnxCpmCardBootOptionVersion=tmnxCpmCardBootOptionVersion, tmnxFPNetIngQgPStUncolOctsOffL=tmnxFPNetIngQgPStUncolOctsOffL, tmnxChassisRowStatus=tmnxChassisRowStatus, tmnxDcpCardFpEventOvrflwClr=tmnxDcpCardFpEventOvrflwClr, tSyncIfTimingAdmWaitToRestorTime=tSyncIfTimingAdmWaitToRestorTime, tmnxCardVFpCpuCount=tmnxCardVFpCpuCount, tmnxEqPowerSupplyPemACRectAlm=tmnxEqPowerSupplyPemACRectAlm, tFPAccIngQGrpArbitStatFwdPktsL=tFPAccIngQGrpArbitStatFwdPktsL, tmnxChassisPowerSupply1Status=tmnxChassisPowerSupply1Status, tmnxHwResourceMinVoltage=tmnxHwResourceMinVoltage, tmnxFPNetIngQgPStOffLPrioOctsH=tmnxFPNetIngQgPStOffLPrioOctsH, tmnxGnssHeading=tmnxGnssHeading, tmnxPEQTypeNumInputFeed=tmnxPEQTypeNumInputFeed, tmnxHwNotification=tmnxHwNotification, tmnxHsmdaMdaSchOvrClass7Rate=tmnxHsmdaMdaSchOvrClass7Rate, tmnxEqCardChipIfCellEvent=tmnxEqCardChipIfCellEvent, tmnxIPsecIsaGrpOperFlags=tmnxIPsecIsaGrpOperFlags, tmnxChassisNotifyV10v0Group=tmnxChassisNotifyV10v0Group, tmnxHwTable=tmnxHwTable, tmnxHwResourcePeakVoltageTime=tmnxHwResourcePeakVoltageTime, PYSNMP_MODULE_ID=tmnxChassisMIBModule, tmnxSyncIfTimingRef2RxQltyLevel=tmnxSyncIfTimingRef2RxQltyLevel, tmnxChassisPowerSupplyAssignedType=tmnxChassisPowerSupplyAssignedType, tmnxChassisAdminLastSetTimer=tmnxChassisAdminLastSetTimer, TmnxCardFunctionalLevel=TmnxCardFunctionalLevel, tmnxEqCardFailure=tmnxEqCardFailure, tFPResIngAclFilterTotal=tFPResIngAclFilterTotal, tmnxCpmCardCmplChipIfDownOccTime=tmnxCpmCardCmplChipIfDownOccTime, tmnxAtmGroup=tmnxAtmGroup, tmnxChassis7450V6v0Compliance=tmnxChassis7450V6v0Compliance, tFPResEgrHsPrimaryShapersTotal=tFPResEgrHsPrimaryShapersTotal, tmnxMDALevelUpgradeIndex=tmnxMDALevelUpgradeIndex, tmnxPEQTypeTable=tmnxPEQTypeTable, tmnxMDAMaxPorts=tmnxMDAMaxPorts, tmnxEqSyncIfTimingPTPAlarmClear=tmnxEqSyncIfTimingPTPAlarmClear, tmnxCpmCardCmplBufMemErrOccTime=tmnxCpmCardCmplBufMemErrOccTime, tmnxChassisPwrMgmtSafetyLevel=tmnxChassisPwrMgmtSafetyLevel, TmnxSlotNum=TmnxSlotNum, tmnxFPNetIngQgPStOffHPrioPktsL=tmnxFPNetIngQgPStOffHPrioPktsL, tmnxFPNetIngQgPStOffHPrioPkts=tmnxFPNetIngQgPStOffHPrioPkts, tmnxFPIngressBufferAllocation=tmnxFPIngressBufferAllocation, tmnxEqSyncIfTimingSystemQuality=tmnxEqSyncIfTimingSystemQuality, tmnxChassisConformance=tmnxChassisConformance, tmnxCardResetOnRecoverableError=tmnxCardResetOnRecoverableError, tmnxFPAccIngQgPStFwdOutProfOctsL=tmnxFPAccIngQgPStFwdOutProfOctsL, tmnxCardHwEventComplex=tmnxCardHwEventComplex, tmnxMDALevelUpgradeTable=tmnxMDALevelUpgradeTable, tmnxEqSyncIfTimingPTPQuality=tmnxEqSyncIfTimingPTPQuality, tmnxHwBaseMacAddress=tmnxHwBaseMacAddress, tFPResEgrHsPrimaryShapersAlloc=tFPResEgrHsPrimaryShapersAlloc, tmnxMDADiffTimestampFreq=tmnxMDADiffTimestampFreq, tmnxFPNetIngQgPStFwdOutProfOcts=tmnxFPNetIngQgPStFwdOutProfOcts, tmnxSyncV6v0Group=tmnxSyncV6v0Group, tmnxPhysChassisPMEntryLastChange=tmnxPhysChassisPMEntryLastChange, tmnxFPAccIngQgPStOffLPrioPktsH=tmnxFPAccIngQgPStOffLPrioPktsH, tFPNetIngQGrpArbitStatFwdPkts=tFPNetIngQGrpArbitStatFwdPkts, tSyncIfTimingAdmEntry=tSyncIfTimingAdmEntry, tmnxFPAccIngQgPStOffLPrioPkts=tmnxFPAccIngQgPStOffLPrioPkts, tmnxBluetoothDeviceDescription=tmnxBluetoothDeviceDescription, tmnxIPQosEgrOverload=tmnxIPQosEgrOverload, tmnxChassisNotifyFpNum=tmnxChassisNotifyFpNum, tmnxMDAHwIndex=tmnxMDAHwIndex, tmnxHwResourceCurrentVoltage=tmnxHwResourceCurrentVoltage, tmnxMcmEntry=tmnxMcmEntry, tmnxCcmTable=tmnxCcmTable, tmnxChassisV13v0Group=tmnxChassisV13v0Group, TmnxMcmType=TmnxMcmType, tmnxCardCmplx2CAMErrorOccurTime=tmnxCardCmplx2CAMErrorOccurTime, tChassisResSapAlloc=tChassisResSapAlloc, tmnxChassisPEQAssignedType=tmnxChassisPEQAssignedType, tCardResQosUserSchedOvrsAlloc=tCardResQosUserSchedOvrsAlloc, tmnxChassisMixedModeIomUpgrList=tmnxChassisMixedModeIomUpgrList, tmnxPhysChassisPCMTable=tmnxPhysChassisPCMTable, tmnxChassisPowerMgmtTableLastChg=tmnxChassisPowerMgmtTableLastChg, tmnxFPAccIngQgPStDrpHPrioOctsH=tmnxFPAccIngQgPStDrpHPrioOctsH, tFPResSapIngQosPolAlloc=tFPResSapIngQosPolAlloc, tChassisResObsoletedV13v0Group=tChassisResObsoletedV13v0Group, tmnxChassisComp7710V3v0=tmnxChassisComp7710V3v0, tmnxCardRateCalcSlowQueue=tmnxCardRateCalcSlowQueue, tmnxCardCmpl2ChipIfCellOccTime=tmnxCardCmpl2ChipIfCellOccTime, tmnxCpmCardCmplChipIfCellOcc=tmnxCpmCardCmplChipIfCellOcc, tmnxSyncIfTimingRef2SrcPort=tmnxSyncIfTimingRef2SrcPort, tmnxSyncIfTimingRefOrder4=tmnxSyncIfTimingRefOrder4, tmnxCpmCardCmplxEgrFcsOccur=tmnxCpmCardCmplxEgrFcsOccur, tmnxChassisFanSpeed=tmnxChassisFanSpeed, tCardResPortAccEgrQGrpInstAlloc=tCardResPortAccEgrQGrpInstAlloc, tFPResDynQ2NamedPoolIUBE=tFPResDynQ2NamedPoolIUBE, tmnxChassisNotifyHwIndex=tmnxChassisNotifyHwIndex, tChassisResDynSvcNHEntryTotal=tChassisResDynSvcNHEntryTotal, tmnxChassisPowerV11v0Group=tmnxChassisPowerV11v0Group, tFPNetIngQGrpPlcrOvrAdminPIR=tFPNetIngQGrpPlcrOvrAdminPIR, tmnxCardComplexIntMemError=tmnxCardComplexIntMemError, tFPAccIngQGrpPlcrOvrRowStatus=tFPAccIngQGrpPlcrOvrRowStatus, TmnxSSMQualityLevel=TmnxSSMQualityLevel, tmnxMDAMcPathMgmtAdminState=tmnxMDAMcPathMgmtAdminState, tmnxFpDcpDynPlcrHiWtrMrkTime=tmnxFpDcpDynPlcrHiWtrMrkTime, tmnxEqFpgaSoftError=tmnxEqFpgaSoftError, tFPResIngQosEntryTotal=tFPResIngQosEntryTotal, tmnxCardCmplChipIfErrV9v0Group=tmnxCardCmplChipIfErrV9v0Group, tmnxChassisComp7710V7v0=tmnxChassisComp7710V7v0, tmnxSyncIfTimingRefOrder2=tmnxSyncIfTimingRefOrder2, tmnxFPAccIngQGrpInstanceId=tmnxFPAccIngQGrpInstanceId, tmnxMDALevelUpgradeName=tmnxMDALevelUpgradeName, tFPAccIngQGrpPCPOvrLvlMBS=tFPAccIngQGrpPCPOvrLvlMBS, tFPNetIngQGrpPlcrOvrPolicerId=tFPNetIngQGrpPlcrOvrPolicerId, tmnxBluetoothModuleConnected=tmnxBluetoothModuleConnected, tFPAccIngQGrpPCPOvrLvlTblLstChgd=tFPAccIngQGrpPCPOvrLvlTblLstChgd, tFPResEgrHsQGrpTotal=tFPResEgrHsQGrpTotal, tmnxMDAIngrXplErrWindow=tmnxMDAIngrXplErrWindow, tmnxSyncIfTimingBITSOutLineLen=tmnxSyncIfTimingBITSOutLineLen, tFPAccIngQGrpPCPOvrLvlTable=tFPAccIngQGrpPCPOvrLvlTable, tmnxCardComplexIngFcsErrTime=tmnxCardComplexIngFcsErrTime, tmnxCardComplexSrcSlotsEgFcsErr=tmnxCardComplexSrcSlotsEgFcsErr, tmnxFPWredAdminState=tmnxFPWredAdminState, tFPNetIngQGrpPCPOvrEntry=tFPNetIngQGrpPCPOvrEntry, TmnxMdaType=TmnxMdaType, tmnxCpmMemSizeMismatch=tmnxCpmMemSizeMismatch, tChassisResIngQGrpTmplTotal=tChassisResIngQGrpTmplTotal, tmnxFPDCpuProtV11v0R0Group=tmnxFPDCpuProtV11v0R0Group, tmnxHwContainedIndex=tmnxHwContainedIndex, tmnxChassisPowerSupplyTempStatus=tmnxChassisPowerSupplyTempStatus, tmnxChassisPowerSupplyTable=tmnxChassisPowerSupplyTable, tmnxFPAccIngQgPStFwdInProfPktsH=tmnxFPAccIngQgPStFwdInProfPktsH, tmnxMinFpGenerationGroupV15v0=tmnxMinFpGenerationGroupV15v0, tmnxOverloadNotifGroupV15v1=tmnxOverloadNotifGroupV15v1, tmnxPhysChassisPMTypeDescription=tmnxPhysChassisPMTypeDescription, tmnxFPDcpNotifyV11v0Group=tmnxFPDcpNotifyV11v0Group, tmnxMDAClockMode=tmnxMDAClockMode, tmnxSyncIfTimingBITSRxQltyLevel=tmnxSyncIfTimingBITSRxQltyLevel, tmnxCcagPathRate=tmnxCcagPathRate, tFPResDynQ2NamedPoolIUBI=tFPResDynQ2NamedPoolIUBI, tmnxCpmCardCmplxMemErrV9v0Group=tmnxCpmCardCmplxMemErrV9v0Group, tFPResSapInstEgrQGrpRedirTotal=tFPResSapInstEgrQGrpRedirTotal, tmnxFPWredResvCbsMax=tmnxFPWredResvCbsMax, tmnxBluetoothModuleConnectionChg=tmnxBluetoothModuleConnectionChg, tFPResSLAProfileInstanceTotal=tFPResSLAProfileInstanceTotal, tmnxEqPowerSafetyAlertThreshold=tmnxEqPowerSafetyAlertThreshold, tmnxFPAccIngQgPStOffHPrioOcts=tmnxFPAccIngQgPStOffHPrioOcts, tmnxChassisSystemProfGroupV15v1=tmnxChassisSystemProfGroupV15v1, tmnxVmCardEntry=tmnxVmCardEntry, tmnxFPAccIngQGrpPStatTable=tmnxFPAccIngQGrpPStatTable, tmnxChassisUpdateWaitTime=tmnxChassisUpdateWaitTime, tmnxCardTypeStatus=tmnxCardTypeStatus, tmnxFPNetIngQgPStDrpHPrioPkts=tmnxFPNetIngQgPStDrpHPrioPkts, tmnxVmCpmCardHypervisor=tmnxVmCpmCardHypervisor, tmnxEqFlashDiskFull=tmnxEqFlashDiskFull, tmnxFPQGrpGroup=tmnxFPQGrpGroup, tmnxCardVFpMaxUtilization=tmnxCardVFpMaxUtilization, tFPAccIngQGrpPCPOvrRowStatus=tFPAccIngQGrpPCPOvrRowStatus, tFPResEgrPolicerTotal=tFPResEgrPolicerTotal, tmnxFPNetIngQGrpDescr=tmnxFPNetIngQGrpDescr, tFPResDynQ2WredPoolAlloc=tFPResDynQ2WredPoolAlloc, tmnxCcagPathId=tmnxCcagPathId, tmnxFPNetIngQgPStDrpLPrioPktsL=tmnxFPNetIngQgPStDrpLPrioPktsL, tmnxVmCardCpu=tmnxVmCardCpu, tmnxCcmTypeTable=tmnxCcmTypeTable, tmnxPhysChassPowerSupACStatus=tmnxPhysChassPowerSupACStatus, tFPAccIngQGrpArbitStatFwdPktsH=tFPAccIngQGrpArbitStatFwdPktsH, TmnxMDAFunctionalUpgrade=TmnxMDAFunctionalUpgrade, tmnxFPAccIngQGrpTable=tmnxFPAccIngQGrpTable, tmnxChassisUpgrade=tmnxChassisUpgrade, tmnxPhysChassisPowerSupplyEntry=tmnxPhysChassisPowerSupplyEntry, tmnxGnssSatelliteSnr=tmnxGnssSatelliteSnr, tmnxFPAccIngQgPStOffLPrioOctsL=tmnxFPAccIngQgPStOffLPrioOctsL, tFPNetIngQGrpArbitStatFwdOctsL=tFPNetIngQGrpArbitStatFwdOctsL, tmnxCcagCcaRate=tmnxCcagCcaRate, tmnxIomResExhausted=tmnxIomResExhausted, tmnxIPsecIsaGrpPrimaryIsa=tmnxIPsecIsaGrpPrimaryIsa, tSyncIfTimingAdmBITSOutSquelch=tSyncIfTimingAdmBITSOutSquelch, tmnxPhysChassPCMNotifGroupV15v0=tmnxPhysChassPCMNotifGroupV15v0, TmnxCardSlotBitMap=TmnxCardSlotBitMap, tmnxSyncIfTimingBITSTxQltyLevel=tmnxSyncIfTimingBITSTxQltyLevel, tmnxFPNetIngQgPStFwdInProfPkts=tmnxFPNetIngQgPStFwdInProfPkts, tmnxFPNum=tmnxFPNum, tmnxSyncIfTimingBITSOutQlMin=tmnxSyncIfTimingBITSOutQlMin, tmnxSyncIfTimingBITS2InUse=tmnxSyncIfTimingBITS2InUse, tmnxCpmCardConfigSource=tmnxCpmCardConfigSource, tmnxFPMcPathMgmtBwPlcyName=tmnxFPMcPathMgmtBwPlcyName, tmnxMDACapabilities=tmnxMDACapabilities, tmnxChassisFabricV11v0Group=tmnxChassisFabricV11v0Group, tmnxFPNetIngQgPStDrpHPrioOcts=tmnxFPNetIngQgPStDrpHPrioOcts, tmnxFPNetIngQgPStUncolPktsOff=tmnxFPNetIngQgPStUncolPktsOff, tmnxEqPhysChassPowerSupOvrTmpClr=tmnxEqPhysChassPowerSupOvrTmpClr, tmnxCpmCardBootOptionSource=tmnxCpmCardBootOptionSource, tmnxFPAccIngQGrpTableLastChgd=tmnxFPAccIngQGrpTableLastChgd, tmnxChassisEntry=tmnxChassisEntry, tmnxPhysChassisPMTypeTable=tmnxPhysChassisPMTypeTable, tSyncIfTimingAdmBITSNationalUse=tSyncIfTimingAdmBITSNationalUse, tmnxGnssAdminState=tmnxGnssAdminState, tmnxHsmdaMdaSchOvrClass6Rate=tmnxHsmdaMdaSchOvrClass6Rate, tmnxIPv6QosEgrOverloadClear=tmnxIPv6QosEgrOverloadClear, tmnxIPsecIsaGrpTrafficFwdCollEn=tmnxIPsecIsaGrpTrafficFwdCollEn, tFPResIngPolicerAlloc=tFPResIngPolicerAlloc)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxFPAccIngQgPStUncolPktsOff=tmnxFPAccIngQgPStUncolPktsOff, tmnxVmCpmCardTable=tmnxVmCpmCardTable, tmnxChassisMgmtEthRedNtfV13v0Grp=tmnxChassisMgmtEthRedNtfV13v0Grp, tmnxIPsecIsaGrpAdminState=tmnxIPsecIsaGrpAdminState, tmnxIPsecIsaGrpV6v0Group=tmnxIPsecIsaGrpV6v0Group, tmnxHsmdaMdaSchOvrClass8WtInGrp=tmnxHsmdaMdaSchOvrClass8WtInGrp, tmnxChassisNotificationV3v0Group=tmnxChassisNotificationV3v0Group, tmnxPhysChassisPMNotifGroupV16v0=tmnxPhysChassisPMNotifGroupV16v0, tmnxSyncIfTimingRefOrder1=tmnxSyncIfTimingRefOrder1, tmnxCardPchipV8v0Group=tmnxCardPchipV8v0Group, tmnxIomResourceLimitPct=tmnxIomResourceLimitPct, tmnxGnssSatelliteAzimuth=tmnxGnssSatelliteAzimuth, tCardResCategoryEntriesAlloc=tCardResCategoryEntriesAlloc, tmnxChassisAdminObjects=tmnxChassisAdminObjects, TmnxPCMType=TmnxPCMType, tmnxCardMemorySize=tmnxCardMemorySize, tFPNetIngQGrpPCPOvrMinMBSSep=tFPNetIngQGrpPCPOvrMinMBSSep, tmnxEqWrongCard=tmnxEqWrongCard, tCardResQosIntSchedsTotal=tCardResQosIntSchedsTotal, tmnxMDANetworkIngQueues=tmnxMDANetworkIngQueues, tmnxMcmTable=tmnxMcmTable, tmnxPhysChassisPMTypeEntry=tmnxPhysChassisPMTypeEntry, tmnxCardV3v0Group=tmnxCardV3v0Group, tmnxCardClockSource=tmnxCardClockSource, tFPResDynPolicerStatTotal=tFPResDynPolicerStatTotal, tmnxMDAReboot=tmnxMDAReboot, tmnxGnssTable=tmnxGnssTable, tmnxChassisCriticalLEDState=tmnxChassisCriticalLEDState, tmnxMDAMcPathMgmtPriPathLimit=tmnxMDAMcPathMgmtPriPathLimit, tmnxMDAAtmMode=tmnxMDAAtmMode, tmnxHwFirmwareRevisionStatus=tmnxHwFirmwareRevisionStatus, tmnxFPNetIngQgPStDrpHPrioPktsL=tmnxFPNetIngQgPStDrpHPrioPktsL, tmnxHwManufactureDate=tmnxHwManufactureDate, tmnxCpmCardLastChange=tmnxCpmCardLastChange, tmnxChassisName=tmnxChassisName, tmnxCpmCardClockSource=tmnxCpmCardClockSource, tmnxMDALevelUpgradesEntry=tmnxMDALevelUpgradesEntry, tmnxFPNetIngQGrpPStatMode=tmnxFPNetIngQGrpPStatMode, tFPResDynPolicerIUBE=tFPResDynPolicerIUBE, tChassisResPortEgrVPortAlloc=tChassisResPortEgrVPortAlloc, tmnxSyncIfTimingBITSIfType=tmnxSyncIfTimingBITSIfType, tmnxCardCmpl1ChipIfDownOccTime=tmnxCardCmpl1ChipIfDownOccTime, tmnxChassisIndex=tmnxChassisIndex, tmnxGnssAltitude=tmnxGnssAltitude, tmnxFPDCpuProtDynEnfrcPlcrPool=tmnxFPDCpuProtDynEnfrcPlcrPool, tmnxEqPowerSupplyInputFeedAlm=tmnxEqPowerSupplyInputFeedAlm, tmnxChassisCLLICode=tmnxChassisCLLICode, TmnxSETSStatus=TmnxSETSStatus, tmnxChassisTypeEntry=tmnxChassisTypeEntry, tmnx7710HwV3v0Group=tmnx7710HwV3v0Group, tSyncIfTimingAdmRefOrder2=tSyncIfTimingAdmRefOrder2, tmnxCardCmpl1IntMemErrOccur=tmnxCardCmpl1IntMemErrOccur, tmnxPhysChassisPCMEquippedType=tmnxPhysChassisPCMEquippedType, tmnxCpmCardAllowedTypes=tmnxCpmCardAllowedTypes, tFPResEgrIPv6AclEntryAlloc=tFPResEgrIPv6AclEntryAlloc, TmnxSETSRefAlarm=TmnxSETSRefAlarm, tChassisResEgrQGrpTmplTotal=tChassisResEgrQGrpTmplTotal, tmnxCardVCpuSchedStatsEntry=tmnxCardVCpuSchedStatsEntry, tmnxChassisNotifyCardSyncFile=tmnxChassisNotifyCardSyncFile, tmnxCardCmplx1IngrFcsOccur=tmnxCardCmplx1IngrFcsOccur, tmnxChassisFPGenerationFP3=tmnxChassisFPGenerationFP3, tFPAccIngQGrpArbitStatEntry=tFPAccIngQGrpArbitStatEntry, tmnxCardRateCalcFastQueue=tmnxCardRateCalcFastQueue, tFPAccIngQGrpPCPOvrMaxRate=tFPAccIngQGrpPCPOvrMaxRate, tFPResSapInstEgrQGrpRedirAlloc=tFPResSapInstEgrQGrpRedirAlloc, tmnxChassisPEQAvailableWattage=tmnxChassisPEQAvailableWattage, tmnxSyncIfTimingRef2CfgQltyLevel=tmnxSyncIfTimingRef2CfgQltyLevel, tmnxIPsecIsaGrpDescription=tmnxIPsecIsaGrpDescription, tChassisResPortEgrQGrpInstAlloc=tChassisResPortEgrQGrpInstAlloc, tFPNetIngQGrpArbitStatName=tFPNetIngQGrpArbitStatName, tmnxHwSerialNumber=tmnxHwSerialNumber, tmnxCpmCardSupportedTypes=tmnxCpmCardSupportedTypes, tmnxCpmCardTable=tmnxCpmCardTable, tmnxChassisTypeStatus=tmnxChassisTypeStatus, tmnxHwResourceMinWattage=tmnxHwResourceMinWattage, tmnxFPAccIngQgPStDrpLPrioOctsH=tmnxFPAccIngQgPStDrpLPrioOctsH, tmnxGnssOperEntry=tmnxGnssOperEntry, TmnxCcmType=TmnxCcmType, tmnxChassNotifsObsoletedGrpV15v0=tmnxChassNotifsObsoletedGrpV15v0, tmnxHwMfgBoardNumber=tmnxHwMfgBoardNumber, tmnxCardFPEgrHsGroup=tmnxCardFPEgrHsGroup, tMDAResEgrHsmdaQGrpAlloc=tMDAResEgrHsmdaQGrpAlloc, tmnxFabricSlotNum=tmnxFabricSlotNum, tmnxCpmCardConfigLastSaved=tmnxCpmCardConfigLastSaved, tmnxChassisNotifyCpmCardSlotNum=tmnxChassisNotifyCpmCardSlotNum, tmnxCardComplexStatsMemErrTime=tmnxCardComplexStatsMemErrTime, tmnxPhysChassPwrSupInputFeed=tmnxPhysChassPwrSupInputFeed, tmnxHwMfgDeviations=tmnxHwMfgDeviations, tmnxSyncIfTimingStatus=tmnxSyncIfTimingStatus, TmnxFpGeneration=TmnxFpGeneration, tmnxPhysChassPowerSupInputStatus=tmnxPhysChassPowerSupInputStatus, tFPNetIngQGrpPCPOvrMaxRate=tFPNetIngQGrpPCPOvrMaxRate, tmnxChassisV12v0Compliance=tmnxChassisV12v0Compliance, tmnxChassisObsoleteGroup=tmnxChassisObsoleteGroup, tFPResEgrPolicerAlloc=tFPResEgrPolicerAlloc, tmnxFPBufAllocV12v0Group=tmnxFPBufAllocV12v0Group, tmnxHsmdaMdaSchOvrClass2Rate=tmnxHsmdaMdaSchOvrClass2Rate, tFPResEgrAclEntryTotal=tFPResEgrAclEntryTotal, tChassisResSubNHEntryTotal=tChassisResSubNHEntryTotal, tCardResPortNetEgrQGrpInstAlloc=tCardResPortNetEgrQGrpInstAlloc, tmnxChassisFabricSpeed=tmnxChassisFabricSpeed, tFPResIntArbiterAlloc=tFPResIntArbiterAlloc, tFPResIngPolicerStatTotal=tFPResIngPolicerStatTotal, tCardResQosUserSchedOvrsTotal=tCardResQosUserSchedOvrsTotal, tmnxHsmdaMdaSchOvrTable=tmnxHsmdaMdaSchOvrTable, tmnxCardCmplx2MemParityOccurTime=tmnxCardCmplx2MemParityOccurTime, tmnxFPNetIngQgPStFwdInProfOctsH=tmnxFPNetIngQgPStFwdInProfOctsH, tmnxMDAIngHsmdaPoolPolicy=tmnxMDAIngHsmdaPoolPolicy, tmnxMDATxTimingSelected=tmnxMDATxTimingSelected, tmnxCardCmpl1BufMemErrOccurTime=tmnxCardCmpl1BufMemErrOccurTime, tmnxFPAccIngQGrpLastChgd=tmnxFPAccIngQGrpLastChgd, tFPResDynQueueIUBE=tFPResDynQueueIUBE, tmnxMdaLevelEntry=tmnxMdaLevelEntry, tmnxFPStablePoolSizing=tmnxFPStablePoolSizing, tmnxHsmdaMdaSchOvrClass2WtInGrp=tmnxHsmdaMdaSchOvrClass2WtInGrp, tCardResHsmdaQOvrAlloc=tCardResHsmdaQOvrAlloc, tFPResEgrIPv6AclFilterAlloc=tFPResEgrIPv6AclFilterAlloc, tmnxCpmCardSwitchToRedundantCard=tmnxCpmCardSwitchToRedundantCard, tmnxHwResourcePeakAmperageTime=tmnxHwResourcePeakAmperageTime, tFPAccIngQGrpPCPOvrLvl=tFPAccIngQGrpPCPOvrLvl, tCardResQosIntSchedsAlloc=tCardResQosIntSchedsAlloc, tmnxPhysChassisPMEntry=tmnxPhysChassisPMEntry, TmnxPEQType=TmnxPEQType, tmnxBluetoothModuleEntry=tmnxBluetoothModuleEntry, tmnxFPHiBwMcastDefaultPathsOnly=tmnxFPHiBwMcastDefaultPathsOnly, tmnxChassisV16v5Compliance=tmnxChassisV16v5Compliance, tmnxEqMdaIngrXplError=tmnxEqMdaIngrXplError, tFPResIngIPv6AclEntryTotal=tFPResIngIPv6AclEntryTotal, tmnxCardCmplx1EgrFcsSrcSlots=tmnxCardCmplx1EgrFcsSrcSlots, tmnxPhysChassPwrSupWrgFanDirClr=tmnxPhysChassPwrSupWrgFanDirClr, tmnxFPInitExtractDropPrioMode=tmnxFPInitExtractDropPrioMode, tFPResDynPolicerIUBI=tFPResDynPolicerIUBI, tFPResEgrAclEntryAlloc=tFPResEgrAclEntryAlloc, tmnxGnssNmeaSentenceInterval=tmnxGnssNmeaSentenceInterval, tmnxFPAccIngQgPStDrpHPrioOctsL=tmnxFPAccIngQgPStDrpHPrioOctsL, tFPNetIngQGrpArbitStatFwdOctsH=tFPNetIngQGrpArbitStatFwdOctsH, tmnxPhysChassisPMAssignedType=tmnxPhysChassisPMAssignedType, tmnxFPNetIngQgPStFwdInProfPktsL=tmnxFPNetIngQgPStFwdInProfPktsL, tmnxHwResourceCurrentWattage=tmnxHwResourceCurrentWattage, tmnxGnssOperState=tmnxGnssOperState, tmnxFabricReboot=tmnxFabricReboot, tmnxMDAMcPathMgmtAncInUseBw=tmnxMDAMcPathMgmtAncInUseBw, tFPResEgrHsSecondaryShapersAlloc=tFPResEgrHsSecondaryShapersAlloc, tmnxPhysChassPowerSupPemType=tmnxPhysChassPowerSupPemType, tmnxFPNetIngQGrpPStatTable=tmnxFPNetIngQGrpPStatTable, tmnxCardV7v0Group=tmnxCardV7v0Group, tmnxCpmFlashTable=tmnxCpmFlashTable, tFPResIngAclEntryAlloc=tFPResIngAclEntryAlloc, tmnxMDAResetOnRecoverErGrp=tmnxMDAResetOnRecoverErGrp, tmnxSyncIfTimingEntry=tmnxSyncIfTimingEntry, tmnxIomResLimMissingNotifCount=tmnxIomResLimMissingNotifCount, tFPAccIngQGrpArbitStatFwdOcts=tFPAccIngQGrpArbitStatFwdOcts, tmnxMDALevelUpgradeEntry=tmnxMDALevelUpgradeEntry, tCardResPortEgrVPortTotal=tCardResPortEgrVPortTotal, tmnxChassisResourceV15v0Group=tmnxChassisResourceV15v0Group, tmnxMDASupportedTypes=tmnxMDASupportedTypes, tmnxCardVFpAvgUtilization=tmnxCardVFpAvgUtilization, tmnxChassisV11v0Groups=tmnxChassisV11v0Groups, tmnxSyncIfTimingBITS2Qualified=tmnxSyncIfTimingBITS2Qualified, tmnxFPNetIngQgPStUncolOctsOffH=tmnxFPNetIngQgPStUncolOctsOffH, tmnxIPsecIsaGrpTnlLowWMark=tmnxIPsecIsaGrpTnlLowWMark, tmnxVmCpmCardCpu=tmnxVmCpmCardCpu, tmnxHsmdaMdaSchOvrClass8Rate=tmnxHsmdaMdaSchOvrClass8Rate, tmnxEqCardPChipMemoryEvent=tmnxEqCardPChipMemoryEvent, tmnxIPsecIsaGrpIsaScaleMode=tmnxIPsecIsaGrpIsaScaleMode, tmnxMDAV15v0Group=tmnxMDAV15v0Group, tmnxCardCmpl2BufMemErrOccurTime=tmnxCardCmpl2BufMemErrOccurTime, TmnxTunnelGroupId=TmnxTunnelGroupId, tmnxChassisObsoleteGroupV11v0=tmnxChassisObsoleteGroupV11v0, TmnxCcagRate=TmnxCcagRate, tmnxFPNetIngQgPStDrpLPrioOctsL=tmnxFPNetIngQgPStDrpLPrioOctsL, tmnxCardVmCpu=tmnxCardVmCpu, tmnxFPAccIngQgPStUncolPktsOffH=tmnxFPAccIngQgPStUncolPktsOffH, TmnxAlarmState=TmnxAlarmState, tmnxCardCmplx1IngrFcsOccurTime=tmnxCardCmplx1IngrFcsOccurTime, tmnxSyncIfTimingBITS2Alarm=tmnxSyncIfTimingBITS2Alarm, TmnxLEDState=TmnxLEDState, tmnxEqSyncIfTimingBITSQuality=tmnxEqSyncIfTimingBITSQuality, tmnxMdaHwEventType=tmnxMdaHwEventType, tmnxPhysChassisFanIndex=tmnxPhysChassisFanIndex, tmnxChassisV9v0Groups=tmnxChassisV9v0Groups, TmnxCardType=TmnxCardType, tmnxFPMcPathMgmtSecInUseBw=tmnxFPMcPathMgmtSecInUseBw, tmnxFPNetIngQgPStUncolOctsOff=tmnxFPNetIngQgPStUncolOctsOff, tSyncIfTimingAdmRef1SrcHw=tSyncIfTimingAdmRef1SrcHw, tChassisResTable=tChassisResTable, tmnxChassisFPGenerationFP2=tmnxChassisFPGenerationFP2, tFPResEgrQueueTotal=tFPResEgrQueueTotal, tmnxMDAMaxChannelization=tmnxMDAMaxChannelization, tmnxEqBpEpromWarning=tmnxEqBpEpromWarning, tmnxCardUpgradeLevelId=tmnxCardUpgradeLevelId, tmnxMdaTypeIndex=tmnxMdaTypeIndex, tmnxFPAccIngQgPStFwdInProfPktsL=tmnxFPAccIngQgPStFwdInProfPktsL, tFPResEgrAclFilterTotal=tFPResEgrAclFilterTotal, tFPResEgrUserQueueTotal=tFPResEgrUserQueueTotal, tmnxMdaLevelName=tmnxMdaLevelName, tmnxIsaMemWMarkNotifGroupV14v0=tmnxIsaMemWMarkNotifGroupV14v0, tmnxSyncIfTimingNotifyV9v0Group=tmnxSyncIfTimingNotifyV9v0Group, tmnxEqPowerSupplyFailure=tmnxEqPowerSupplyFailure, tmnxHwParentRelPos=tmnxHwParentRelPos, tmnxBluetoothDeviceEntryLastChg=tmnxBluetoothDeviceEntryLastChg, tmnxCardComplexEgrFcsErrTime=tmnxCardComplexEgrFcsErrTime, tmnxChassisPowerMgmtGroup=tmnxChassisPowerMgmtGroup, tmnxCardFPResIngV15v0QGroup=tmnxCardFPResIngV15v0QGroup, tCardResFPIngQGrpInstAlloc=tCardResFPIngQGrpInstAlloc, tmnxIPsecIsaGrpUnableToSwitch=tmnxIPsecIsaGrpUnableToSwitch, tmnxIPv6FilterIngOverload=tmnxIPv6FilterIngOverload, tCardResSLAProfileInstanceTotal=tCardResSLAProfileInstanceTotal, tmnxCardComplexMemParErrTime=tmnxCardComplexMemParErrTime, tmnxFPAccIngQGrpPStatPolicerId=tmnxFPAccIngQGrpPStatPolicerId, tmnxHwSoftwareCodeVersion=tmnxHwSoftwareCodeVersion, tmnxDcpCardFpEventOvrflw=tmnxDcpCardFpEventOvrflw, TmnxRefInState=TmnxRefInState, tFPResIngQ1NamedPoolTotal=tFPResIngQ1NamedPoolTotal, tmnxHwSwImageSource=tmnxHwSwImageSource, TmnxDeviceState=TmnxDeviceState, tmnxCardCmplx2EgrFcsSrcSlots=tmnxCardCmplx2EgrFcsSrcSlots, tmnxMDAUpgradeRequiresReboot=tmnxMDAUpgradeRequiresReboot, tmnxGnssTableLastChange=tmnxGnssTableLastChange, tmnxFPAccIngQGrpAcctgPolId=tmnxFPAccIngQGrpAcctgPolId, tmnxFPPlcyAcctStatsInUse=tmnxFPPlcyAcctStatsInUse, tmnxChassisMgmtEthRed=tmnxChassisMgmtEthRed, tmnxPhysChassisPEQAssignedType=tmnxPhysChassisPEQAssignedType, tmnxMdaHwEventNumOccurrences=tmnxMdaHwEventNumOccurrences, tmnxChassisNotifyObjsV13v0Grp=tmnxChassisNotifyObjsV13v0Grp, tmnxHsmdaMdaSchOvrClass1WtInGrp=tmnxHsmdaMdaSchOvrClass1WtInGrp, tmnxEqCardChipIfDownEvent=tmnxEqCardChipIfDownEvent, TmnxSETSRefSource=TmnxSETSRefSource, tmnxSyncIfTimBITS2048khzUnsupClr=tmnxSyncIfTimBITS2048khzUnsupClr, tmnxChassisFanTable=tmnxChassisFanTable, tmnxChassisNotification=tmnxChassisNotification, tmnxCardCmplx2EgrFcsOccurTime=tmnxCardCmplx2EgrFcsOccurTime, tmnxCpmCardCmplxCAMErrOccur=tmnxCpmCardCmplxCAMErrOccur, tmnxCcagPathCcMtu=tmnxCcagPathCcMtu, tmnxGnssOperTable=tmnxGnssOperTable, tmnxMacScaleCardSlotNum=tmnxMacScaleCardSlotNum, tmnxCpmCardCmplxMemErrOccurTime=tmnxCpmCardCmplxMemErrOccurTime, tmnxIPsecIsaGrpActiveIsa=tmnxIPsecIsaGrpActiveIsa, tmnxChassisUpdateTimeLeft=tmnxChassisUpdateTimeLeft, tmnxCardComplexStatsEntry=tmnxCardComplexStatsEntry, tmnxChassisModeForce=tmnxChassisModeForce, tMDAResSapInstanceAlloc=tMDAResSapInstanceAlloc, tmnxHwContainsEntry=tmnxHwContainsEntry, tFPAccIngQGrpPlcrOvrTblLstChgd=tFPAccIngQGrpPlcrOvrTblLstChgd, tmnxChassisPowerSupplyOutputStatus=tmnxChassisPowerSupplyOutputStatus, tFPResIngRootArbiterTotal=tFPResIngRootArbiterTotal, tmnxCardLevelUpgradesTable=tmnxCardLevelUpgradesTable, tmnxHwClearAlarms=tmnxHwClearAlarms, tmnxCcmIndex=tmnxCcmIndex, tmnxFPNetIngQGrpPStatPolicerId=tmnxFPNetIngQGrpPStatPolicerId, tSyncIfTimingAdmRef2AdminStatus=tSyncIfTimingAdmRef2AdminStatus, tmnxEqMdaCfgNotCompatible=tmnxEqMdaCfgNotCompatible, tmnxChassisPEQLastChangedTime=tmnxChassisPEQLastChangedTime, tmnxCardLicensedBandwidth=tmnxCardLicensedBandwidth)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxIPsecIsaGrpRowStatus=tmnxIPsecIsaGrpRowStatus, tmnxChassisNotificationClear=tmnxChassisNotificationClear, tmnxChassisPEQEntry=tmnxChassisPEQEntry, tFPNetIngQGrpPCPOvrRowStatus=tFPNetIngQGrpPCPOvrRowStatus, tmnxPeFirmwareVersionWarning=tmnxPeFirmwareVersionWarning, tmnxDcpCardVrtrIfEventOvrflwClr=tmnxDcpCardVrtrIfEventOvrflwClr, tmnxCardEntry=tmnxCardEntry, tFPAccIngQGrpPCPOvrEntry=tFPAccIngQGrpPCPOvrEntry, tmnxHsmdaMdaSchOvrClass3Rate=tmnxHsmdaMdaSchOvrClass3Rate, tmnxCardFilterScaleProfile=tmnxCardFilterScaleProfile, tmnxChassisFanV11v0Group=tmnxChassisFanV11v0Group, tIPsecIsaMemMax=tIPsecIsaMemMax, tmnxCcagOperStatus=tmnxCcagOperStatus, tmnxCardComplexCamErrTime=tmnxCardComplexCamErrTime, tmnxFPEgrHsFixedHighThreshDelta=tmnxFPEgrHsFixedHighThreshDelta, tmnxChassisGroupV15v0=tmnxChassisGroupV15v0, tMDAResEntry=tMDAResEntry, tmnxMDAHiBwMcastGroup=tmnxMDAHiBwMcastGroup, tmnxFPAccIngQgPStFwdOutProfOctsH=tmnxFPAccIngQgPStFwdOutProfOctsH, tmnxChassisPowerSupplyInFeedDown=tmnxChassisPowerSupplyInFeedDown, tmnxFPNetIngQgPStFwdInProfOcts=tmnxFPNetIngQgPStFwdInProfOcts, TmnxSETSRefQualified=TmnxSETSRefQualified, tmnxFabricHwIndex=tmnxFabricHwIndex, tmnxFPAccIngQgPStFwdOutProfPktsH=tmnxFPAccIngQgPStFwdOutProfPktsH, tmnxCardComplexStatsTable=tmnxCardComplexStatsTable, tmnxIPsecIsaGrpTunnels=tmnxIPsecIsaGrpTunnels, tmnxEqLowSwitchFabricCap=tmnxEqLowSwitchFabricCap, tmnxChassisOperNumSlots=tmnxChassisOperNumSlots, tmnxChassisFanIndex=tmnxChassisFanIndex, tmnxSyncIfTimingOtherCPMAlarm=tmnxSyncIfTimingOtherCPMAlarm, tmnxChassisComp7710=tmnxChassisComp7710, tmnxHwResourceMinWattageTime=tmnxHwResourceMinWattageTime, tmnxGnssSatelliteElevation=tmnxGnssSatelliteElevation, TmnxPhysChassisIndexOrZero=TmnxPhysChassisIndexOrZero, tmnxChassis7750V7v0Compliance=tmnxChassis7750V7v0Compliance, tmnxChassisFpResourceV13v0Group=tmnxChassisFpResourceV13v0Group, tmnxCpmCardCmplxCAMErrOccurTime=tmnxCpmCardCmplxCAMErrOccurTime, tFPResDynPolicerTotal=tFPResDynPolicerTotal, tmnxVmCpmCardNumCores=tmnxVmCpmCardNumCores, tmnxPhysChassPowerSupTempThrshld=tmnxPhysChassPowerSupTempThrshld, tmnxPeFPGAVersionMismatch=tmnxPeFPGAVersionMismatch, tFPAccIngQGrpPCPOvrTblLastChgd=tFPAccIngQGrpPCPOvrTblLastChgd, tmnxChassisFanObsoleteGroupV16v0=tmnxChassisFanObsoleteGroupV16v0, tmnxCcagPathTable=tmnxCcagPathTable, tmnxCardVFpStatsTable=tmnxCardVFpStatsTable, tmnxFanTrayCompSpeed=tmnxFanTrayCompSpeed, tmnxMcmAssignedType=tmnxMcmAssignedType, tmnxFPMcPathMgmtV15v0Group=tmnxFPMcPathMgmtV15v0Group, tmnxChassisSmartPeqV11v0Group=tmnxChassisSmartPeqV11v0Group, tmnxChassisFanEntry=tmnxChassisFanEntry, tFPNetIngQGrpPCPOvrLastChgd=tFPNetIngQGrpPCPOvrLastChgd, tFPResEgrAclQosEntryAlloc=tFPResEgrAclQosEntryAlloc, tmnxCardAssignedType=tmnxCardAssignedType, tmnxCpmCardEquippedType=tmnxCpmCardEquippedType, tmnxEqLowSwitchFabricCapClear=tmnxEqLowSwitchFabricCapClear, tmnxChassisPEQTable=tmnxChassisPEQTable, tmnxMDAIngHsmdaSchedPolicy=tmnxMDAIngHsmdaSchedPolicy, tmnxFPPlcyAcctStatsPool=tmnxFPPlcyAcctStatsPool, tmnxFPLastChanged=tmnxFPLastChanged, tCardResCategoryEntriesTotal=tCardResCategoryEntriesTotal, tmnxFPNetIngQGrpName=tmnxFPNetIngQGrpName, tFPResIngIPv6AclEntryAlloc=tFPResIngIPv6AclEntryAlloc, tChassisResPortEgrQGrpInstTotal=tChassisResPortEgrQGrpInstTotal, tFPResDynQueueIUBI=tFPResDynQueueIUBI, tChassisResFPIngQGrpInstTotal=tChassisResFPIngQGrpInstTotal, TmnxCardFilterProfile=TmnxCardFilterProfile, tmnxPhysChassisHwIndex=tmnxPhysChassisHwIndex, tmnxChassisV9v0Compliance=tmnxChassisV9v0Compliance, tmnxCardVmHypervisor=tmnxCardVmHypervisor, tmnxChassisV4v0Compliance=tmnxChassisV4v0Compliance, tmnxMDAEgrNamedPoolPolicy=tmnxMDAEgrNamedPoolPolicy, TmnxCardRebootType=TmnxCardRebootType, tmnxMdaLevelId=tmnxMdaLevelId, tmnxChassisPowerSupplyACStatus=tmnxChassisPowerSupplyACStatus, tCardResPortEgrQGrpInstAlloc=tCardResPortEgrQGrpInstAlloc, tmnxCardVirtualGroupV14v0=tmnxCardVirtualGroupV14v0, tmnxMdaV10v0Group=tmnxMdaV10v0Group, tFPResDynEgrClassIUBNE=tFPResDynEgrClassIUBNE, tmnxRedRestoreFail=tmnxRedRestoreFail, tmnxCardCmplx1CAMErrorOccurTime=tmnxCardCmplx1CAMErrorOccurTime, tmnxChassisPowerSupplyTempThreshold=tmnxChassisPowerSupplyTempThreshold, tmnxChassisHwEventNotifyGrpV10v0=tmnxChassisHwEventNotifyGrpV10v0, tmnxCcagPathRateOption=tmnxCcagPathRateOption, tSyncIfTimingAdmBITSAdminStatus=tSyncIfTimingAdmBITSAdminStatus, tmnxSyncIfTimingPTPAdminStatus=tmnxSyncIfTimingPTPAdminStatus, tmnxHsmdaMdaSchOvrClass5Rate=tmnxHsmdaMdaSchOvrClass5Rate, tmnxSyncIfTimingRef1Qualified=tmnxSyncIfTimingRef1Qualified, tFPNetIngQGrpPCPOvrLvlLastChgd=tFPNetIngQGrpPCPOvrLvlLastChgd, tFPAccIngQGrpArbitStatName=tFPAccIngQGrpArbitStatName, tmnxSyncIfTimingBITS2RxQltyLevel=tmnxSyncIfTimingBITS2RxQltyLevel, tmnxChassisAlarmLEDState=tmnxChassisAlarmLEDState, tmnxChassisNumFanTrays=tmnxChassisNumFanTrays, tmnxCcmTypeEntry=tmnxCcmTypeEntry, tmnxChassisNotifyMismatchedVer=tmnxChassisNotifyMismatchedVer, tmnxMdaHsmdaPoolV10v0Group=tmnxMdaHsmdaPoolV10v0Group, tmnxMcmTypeIndex=tmnxMcmTypeIndex, tmnxBluetoothDeviceRowStatus=tmnxBluetoothDeviceRowStatus, tIPsecIsaMemLowWatermark=tIPsecIsaMemLowWatermark, tmnxChassisV6v1Group=tmnxChassisV6v1Group, tmnxEqCardInserted=tmnxEqCardInserted, tmnxCpmCardIndexFileLastBootedHeader=tmnxCpmCardIndexFileLastBootedHeader, tmnxMDAResetOnRecoverableError=tmnxMDAResetOnRecoverableError, tmnxChassisPowerSupplyEntry=tmnxChassisPowerSupplyEntry, tmnxBluetoothPowerState=tmnxBluetoothPowerState, tmnxPhysChassisPCMInFeedDown=tmnxPhysChassisPCMInFeedDown, tmnxChassisUpgradeInProgress=tmnxChassisUpgradeInProgress, tmnxFPPlcyAcctV12v0Group=tmnxFPPlcyAcctV12v0Group, tmnxFPNetIngQgPStDrpLPrioPktsH=tmnxFPNetIngQgPStDrpLPrioPktsH, tmnxEqDataPathFailureProtImpact=tmnxEqDataPathFailureProtImpact, tFPResEncapGrpMemberAlloc=tFPResEncapGrpMemberAlloc, tmnxPeStorageProblem=tmnxPeStorageProblem, tFPResMacFdbRecTotal=tFPResMacFdbRecTotal, tmnxPhysChassPowerSup1Status=tmnxPhysChassPowerSup1Status, tmnxMDAV3v0Group=tmnxMDAV3v0Group, tmnxEqSyncIfTimingRefSwitch=tmnxEqSyncIfTimingRefSwitch, tmnxFPNetIngQgPStDrpLPrioOctsH=tmnxFPNetIngQgPStDrpLPrioOctsH, tmnxMDAXplFailedCount=tmnxMDAXplFailedCount, tmnxEqPhysChassPowerSupOvrTmp=tmnxEqPhysChassPowerSupOvrTmp, tFPAccIngQGrpPlcrOvrStatMode=tFPAccIngQGrpPlcrOvrStatMode, tFPAccIngQGrpArbitStatFwdOctsH=tFPAccIngQGrpArbitStatFwdOctsH, tmnxCardLevelUpgradeId=tmnxCardLevelUpgradeId, tmnxSyncIfTimingBITSState=tmnxSyncIfTimingBITSState, tmnxMdaXplV5v0Group=tmnxMdaXplV5v0Group, tmnxCardComplexBufMemErrTime=tmnxCardComplexBufMemErrTime, tmnxPhysChassisGroupV15v0=tmnxPhysChassisGroupV15v0, tmnxPEQTypeName=tmnxPEQTypeName, tmnxChassisPowerSupply2Status=tmnxChassisPowerSupply2Status, tmnxHsmdaMdaSchOvrClass4WtInGrp=tmnxHsmdaMdaSchOvrClass4WtInGrp, tmnxGnssNmeaAdminState=tmnxGnssNmeaAdminState, tmnxEqPhysChassPowerSupOutFail=tmnxEqPhysChassPowerSupOutFail, tmnxCpmFlashEntry=tmnxCpmFlashEntry, tMDAResEgrHsmdaSecShaperAlloc=tMDAResEgrHsmdaSecShaperAlloc, tmnxFPAccIngQgPStFwdInProfOctsH=tmnxFPAccIngQgPStFwdInProfOctsH, tmnxPhysChassisPMOverTemp=tmnxPhysChassisPMOverTemp, tmnxFPHiBwMcastAlarm=tmnxFPHiBwMcastAlarm, tmnxFPNetIngQGrpTableLastChgd=tmnxFPNetIngQGrpTableLastChgd, tmnxBluetoothTable=tmnxBluetoothTable, tChassisResIpSecNHEntryTotal=tChassisResIpSecNHEntryTotal, tmnxSyncIfTimingPTPQualified=tmnxSyncIfTimingPTPQualified, tmnxFabricTypeTable=tmnxFabricTypeTable, tmnxCardHwIndex=tmnxCardHwIndex, tmnxCcmHwIndex=tmnxCcmHwIndex, tmnxCpmCardCpuType=tmnxCpmCardCpuType, tFPNetIngQGrpPCPOvrTable=tFPNetIngQGrpPCPOvrTable, tFPResDynSvcEntryAlloc=tFPResDynSvcEntryAlloc, tmnxIPv6QosIngOverloadClear=tmnxIPv6QosIngOverloadClear, tmnxIomEventOverflow=tmnxIomEventOverflow, TmnxPEQSuppType=TmnxPEQSuppType, tmnxHsmdaMdaSchOvrClass4Rate=tmnxHsmdaMdaSchOvrClass4Rate, tmnxSyncIfTimingBITSQualified=tmnxSyncIfTimingBITSQualified, tmnxCcagPathCcEgrPoolSlpPlcy=tmnxCcagPathCcEgrPoolSlpPlcy, tmnxFPNetIngQgPStOffHPrioOctsH=tmnxFPNetIngQgPStOffHPrioOctsH, tFPResSapInstanceAlloc=tFPResSapInstanceAlloc, tmnxMDAAssignedLevelUpgradeId=tmnxMDAAssignedLevelUpgradeId, tmnxIPQosEgrOverloadClear=tmnxIPQosEgrOverloadClear, tmnxIPMacFilterEgrOverloadClear=tmnxIPMacFilterEgrOverloadClear, tmnxPhysChassisPMOverTempClr=tmnxPhysChassisPMOverTempClr, tmnxHwAssetID=tmnxHwAssetID, tmnxCpmCardUuid=tmnxCpmCardUuid, tmnxCpmPowerShelfCommsFail=tmnxCpmPowerShelfCommsFail, tmnxChassisNotifyObjsGroup=tmnxChassisNotifyObjsGroup, tmnxCpmCardSyncFileNotPresent=tmnxCpmCardSyncFileNotPresent, tmnxCpmCardNum=tmnxCpmCardNum, tmnxPhysChassPowerSupOutptStatus=tmnxPhysChassPowerSupOutptStatus, tmnxFPNetIngQGrpRowStatus=tmnxFPNetIngQGrpRowStatus, tmnxCardLevelUpgradesEntry=tmnxCardLevelUpgradesEntry, tmnxCcagPathCcTable=tmnxCcagPathCcTable, tmnxChassisObsoleteV12v0Group=tmnxChassisObsoleteV12v0Group, tmnxSyncIfTimingBITSOutRefSel=tmnxSyncIfTimingBITSOutRefSel, tmnxEqMgmtEthRedStandbyClear=tmnxEqMgmtEthRedStandbyClear, tmnxFpDcpDynPlcrInUse=tmnxFpDcpDynPlcrInUse, tmnxCardCmplx2EgrFcsOccur=tmnxCardCmplx2EgrFcsOccur, tmnxCcmTypeName=tmnxCcmTypeName, tmnxChassisNotifV12v0Group=tmnxChassisNotifV12v0Group, tCardResPortEgrQGrpInstTotal=tCardResPortEgrQGrpInstTotal, tFPNetIngQGrpPlcrOvrRowStatus=tFPNetIngQGrpPlcrOvrRowStatus, tmnxChassisFPGenerationFP4=tmnxChassisFPGenerationFP4, tFPAccIngQGrpPlcrOvrAdminCIR=tFPAccIngQGrpPlcrOvrAdminCIR, tmnxCpmCardIndexBootedVersion=tmnxCpmCardIndexBootedVersion, tmnxEnvTempTooHigh=tmnxEnvTempTooHigh, tmnxCpmCardHwIndex=tmnxCpmCardHwIndex, tmnxChassisFanOperStatus=tmnxChassisFanOperStatus, TmnxChassisIndexOrZero=TmnxChassisIndexOrZero, tmnxMDAIsaTunnelGroupChange=tmnxMDAIsaTunnelGroupChange, tmnxDcpCardVrtrIfEventOvrflw=tmnxDcpCardVrtrIfEventOvrflw, tmnxCardResourceV15v1Group=tmnxCardResourceV15v1Group, tmnxChassisMIBModule=tmnxChassisMIBModule, tmnxCardCmplx1EgrFcsOccurTime=tmnxCardCmplx1EgrFcsOccurTime, tmnxFpDcpDynEnfrcPlcrStatTable=tmnxFpDcpDynEnfrcPlcrStatTable, tFPResEgrQueueAlloc=tFPResEgrQueueAlloc, tmnxCardCmpl2ChipIfDownOccTime=tmnxCardCmpl2ChipIfDownOccTime, TmnxHwClass=TmnxHwClass, tmnxIPMacFilterEgrOverload=tmnxIPMacFilterEgrOverload, tmnxCardComplexIntDatapathError=tmnxCardComplexIntDatapathError, tmnxEqCardQChipIntMemoryEvent=tmnxEqCardQChipIntMemoryEvent, tmnxChassisNotifySoftwareLocation=tmnxChassisNotifySoftwareLocation, tmnxCardCamErrorV6v1Group=tmnxCardCamErrorV6v1Group, tFPResIngQueueTotal=tFPResIngQueueTotal, tFPResEntry=tFPResEntry, tmnxCpmCardCmplIntMemErrOccTime=tmnxCpmCardCmplIntMemErrOccTime, tmnxMcmTypeDescription=tmnxMcmTypeDescription, tmnxEqSyncIfTimingRef1AlarmClear=tmnxEqSyncIfTimingRef1AlarmClear, tmnxCcmEntry=tmnxCcmEntry, tFPResDynQ2NamedPoolTotal=tFPResDynQ2NamedPoolTotal, tmnxChassisPowerMgmtNotifyObjs=tmnxChassisPowerMgmtNotifyObjs, tmnxIomResHighLimitReached=tmnxIomResHighLimitReached, tmnxIPMacQosIngOverload=tmnxIPMacQosIngOverload, tmnxCpmCardRebootHoldV11v0Group=tmnxCpmCardRebootHoldV11v0Group, tmnxBluetoothDeviceEntry=tmnxBluetoothDeviceEntry, tmnxGnssDateTime=tmnxGnssDateTime, tmnxCardComplexIngFcsError=tmnxCardComplexIngFcsError, tmnxEqSyncIfTimingBITS2Alarm=tmnxEqSyncIfTimingBITS2Alarm, tmnxChassisResourceV14v0Group=tmnxChassisResourceV14v0Group, tmnxSyncIfTimingBITSOutSquelch=tmnxSyncIfTimingBITSOutSquelch, TmnxBITSOutSource=TmnxBITSOutSource, tmnxFabricEquippedType=tmnxFabricEquippedType, tmnxPhysChassPowerSup2Status=tmnxPhysChassPowerSup2Status, tCardResIntArbiterOvrsTotal=tCardResIntArbiterOvrsTotal, tmnxCardCmpl2ChipIfDownOcc=tmnxCardCmpl2ChipIfDownOcc, tFPResIngIPv6QosEntryAlloc=tFPResIngIPv6QosEntryAlloc, tmnxFpDcpDynEnfrcPlcrStatEntry=tmnxFpDcpDynEnfrcPlcrStatEntry, tmnxFPAccIngQGrpPStatMode=tmnxFPAccIngQGrpPStatMode, tFPAccIngQGrpPCPOvrTable=tFPAccIngQGrpPCPOvrTable, tFPResSubHostTotal=tFPResSubHostTotal, tmnxChassisNotifyFabricSlotNum=tmnxChassisNotifyFabricSlotNum, tmnxChassisMgmtEthRedV13v0Grp=tmnxChassisMgmtEthRedV13v0Grp, tFPAccIngQGrpPlcrOvrPktOffset=tFPAccIngQGrpPlcrOvrPktOffset, tmnxCardLevelName=tmnxCardLevelName, tmnxEqPhysChassPowerSupDcFail=tmnxEqPhysChassPowerSupDcFail, tFPResEgrQosBypassAlloc=tFPResEgrQosBypassAlloc, tmnxPeSoftwareVersionMismatch=tmnxPeSoftwareVersionMismatch, tmnxIPsecIsaGrpBackupIsa=tmnxIPsecIsaGrpBackupIsa, tmnxCardV16v0FpgaSoftErrNotifGrp=tmnxCardV16v0FpgaSoftErrNotifGrp, tmnxHwClass=tmnxHwClass, tmnxEqSyncIfTimingBITS2Quality=tmnxEqSyncIfTimingBITS2Quality, tmnxChassisNotificationV4v0Group=tmnxChassisNotificationV4v0Group, tmnxHwTempThreshold=tmnxHwTempThreshold, tmnxPhysChassisFanSpeedPercent=tmnxPhysChassisFanSpeedPercent, TmnxGnssConstellation=TmnxGnssConstellation, tmnxIPsecIsaGrpEntry=tmnxIPsecIsaGrpEntry, tFwdEngDREgrMtuExceeded=tFwdEngDREgrMtuExceeded, tmnxSyncIfTimingRef1AdminStatus=tmnxSyncIfTimingRef1AdminStatus, tmnxChassisHwV11v0Group=tmnxChassisHwV11v0Group, tmnxCardEquippedType=tmnxCardEquippedType, tmnxCpmCardRereadBootOptions=tmnxCpmCardRereadBootOptions, tFPNetIngQGrpArbitStatFwdPktsH=tFPNetIngQGrpArbitStatFwdPktsH, tmnxBluetoothModuleEntryLastChg=tmnxBluetoothModuleEntryLastChg, tmnxChassisMixedModeIomV8v0Group=tmnxChassisMixedModeIomV8v0Group, tmnxChassisAdminControlApply=tmnxChassisAdminControlApply, tmnxChassisV12v0Groups=tmnxChassisV12v0Groups, tmnxHsmdaMdaSchOvrClass5WtInGrp=tmnxHsmdaMdaSchOvrClass5WtInGrp, tmnxChassisNumFans=tmnxChassisNumFans, tmnxPhysChassPowerSupPemACRect=tmnxPhysChassPowerSupPemACRect, tmnxMcmTypeEntry=tmnxMcmTypeEntry)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxCardCmplx1MemParityOccurTime=tmnxCardCmplx1MemParityOccurTime, tmnxCpmCardMasterSlaveRefState=tmnxCpmCardMasterSlaveRefState, tmnxEqCardTChipParityEvent=tmnxEqCardTChipParityEvent, tmnxIPv6FilterIngOverloadClear=tmnxIPv6FilterIngOverloadClear, tmnxCardComplexCamError=tmnxCardComplexCamError, tmnxCardCmpl1IntMemErrOccurTime=tmnxCardCmpl1IntMemErrOccurTime, tmnxFPAccIngQgPStOffHPrioPkts=tmnxFPAccIngQgPStOffHPrioPkts, tmnxFPAccIngQGrpPolicerPol=tmnxFPAccIngQGrpPolicerPol, tmnxEqHwEnhancedCapability=tmnxEqHwEnhancedCapability, tmnxChassisGnssNotifGroup=tmnxChassisGnssNotifGroup, tmnxFPAccIngQgPStDrpLPrioOctsL=tmnxFPAccIngQgPStDrpLPrioOctsL, tmnxPhysChassisPMOutputStatus=tmnxPhysChassisPMOutputStatus, tmnxChassPANotifyObjsV12v0Grp=tmnxChassPANotifyObjsV12v0Grp, tmnxSyncIfTimingRef2InUse=tmnxSyncIfTimingRef2InUse, tmnxCardCmpl2IntMemErrOccur=tmnxCardCmpl2IntMemErrOccur, tSyncIfTimingAdmChangedMask=tSyncIfTimingAdmChangedMask, tmnxSyncIfTimingV8v0Group=tmnxSyncIfTimingV8v0Group, tmnxChassisComp7710V6v1=tmnxChassisComp7710V6v1, tmnxIomResLimitTimeEventOccured=tmnxIomResLimitTimeEventOccured, tmnxFPNetIngQGrpPStatEntry=tmnxFPNetIngQGrpPStatEntry, tmnxChassisTable=tmnxChassisTable, tmnxChassisPEQSupportedTypes=tmnxChassisPEQSupportedTypes, tmnxCardHwEventEntry=tmnxCardHwEventEntry, tFPAccIngQGrpPlcrOvrLastChgd=tFPAccIngQGrpPlcrOvrLastChgd, tmnxChassisSmartPeqNtfyV11v0Grp=tmnxChassisSmartPeqNtfyV11v0Grp, tmnxCardVirtualSchAdjV13v0Group=tmnxCardVirtualSchAdjV13v0Group, tmnxMDAIsaTnlStatsCryptoAcc=tmnxMDAIsaTnlStatsCryptoAcc, tmnxCardCmplx2MemParityOccur=tmnxCardCmplx2MemParityOccur, tmnxFpDcpDynPlcrHiWtrMrkHitCnt=tmnxFpDcpDynPlcrHiWtrMrkHitCnt, tmnxVmCardNumCores=tmnxVmCardNumCores, tmnxFPNetIngQgPStDrpLPrioPkts=tmnxFPNetIngQgPStDrpLPrioPkts, tmnxHwResourceMinAmperage=tmnxHwResourceMinAmperage, tmnxMDAHwPowerPriority=tmnxMDAHwPowerPriority, tmnxFPPoolSizingV11v0Group=tmnxFPPoolSizingV11v0Group, tmnxExtStandbyCpmReboot=tmnxExtStandbyCpmReboot, tmnxHsmdaMdaSchOvrMaxRate=tmnxHsmdaMdaSchOvrMaxRate, tmnxMDASynchronousEthernet=tmnxMDASynchronousEthernet, tmnxMDAV9v0Group=tmnxMDAV9v0Group, tmnxCcagPathCcHwMac=tmnxCcagPathCcHwMac, tmnxEqMgmtEthRedStandbyRaise=tmnxEqMgmtEthRedStandbyRaise, tmnxChassisPowerV12v0Group=tmnxChassisPowerV12v0Group, tmnxHwResourceEntry=tmnxHwResourceEntry, tmnxGnssSatelliteEntry=tmnxGnssSatelliteEntry, tFPResEgrNetQGrpMapTotal=tFPResEgrNetQGrpMapTotal, tFPResEncapGrpMemberTotal=tFPResEncapGrpMemberTotal, tSyncIfTimingAdmRef2NationalUse=tSyncIfTimingAdmRef2NationalUse, tmnxIPsecIsaGrpMaxTunnels=tmnxIPsecIsaGrpMaxTunnels, tmnxChassisV5v0Group=tmnxChassisV5v0Group, tmnxCardFPResEgrV15v0QGroup=tmnxCardFPResEgrV15v0QGroup, TmnxCcagRateOption=TmnxCcagRateOption, tmnxPhysChassisFilterDoorState=tmnxPhysChassisFilterDoorState, tmnxEqSyncIfTimingHoldover=tmnxEqSyncIfTimingHoldover, tmnxMdaNotifyType=tmnxMdaNotifyType, tmnxCardComplexIntMemErrTime=tmnxCardComplexIntMemErrTime, tFPResDynSvcEntryTotal=tFPResDynSvcEntryTotal, tmnxHwAlias=tmnxHwAlias, tmnxHwFailureReason=tmnxHwFailureReason, tmnxCardVFpStatsEntry=tmnxCardVFpStatsEntry, tmnxFPAccIngQgPStOffHPrioOctsL=tmnxFPAccIngQgPStOffHPrioOctsL, tmnxMDAEgrXplErrWindow=tmnxMDAEgrXplErrWindow, tmnxHwResourcePeakWattageTime=tmnxHwResourcePeakWattageTime, tmnxPhysChassisPCMTableLastChg=tmnxPhysChassisPCMTableLastChg, tmnxMDAMcPathMgmtBwPlcyName=tmnxMDAMcPathMgmtBwPlcyName, tmnxChassis7450V7v0Compliance=tmnxChassis7450V7v0Compliance, tmnxCpmCardVmCpu=tmnxCpmCardVmCpu, tmnxCcagDescription=tmnxCcagDescription, tmnxEqMemoryFailure=tmnxEqMemoryFailure, tmnxChassisNotificationV7v0Group=tmnxChassisNotificationV7v0Group, tmnxEqPowerSafetyAlertClear=tmnxEqPowerSafetyAlertClear, tmnxFPNetIngQgPStDrpHPrioPktsH=tmnxFPNetIngQgPStDrpHPrioPktsH, TmnxChassisMode=TmnxChassisMode, tmnxHwResourcePeakWattage=tmnxHwResourcePeakWattage, tFPResIngQ1NamedPoolAlloc=tFPResIngQ1NamedPoolAlloc, tmnxCardCmpl2BufMemErrOccur=tmnxCardCmpl2BufMemErrOccur, tmnxFPAccIngQgPStUncolOctsOffH=tmnxFPAccIngQgPStUncolOctsOffH, tmnxCcagPathCcType=tmnxCcagPathCcType, tmnxFPWredSlopePolicy=tmnxFPWredSlopePolicy, tmnxSyncIfTimingRef2NationalUse=tmnxSyncIfTimingRef2NationalUse, tmnxCardCapability=tmnxCardCapability, tmnxChassisHwV6v1Group=tmnxChassisHwV6v1Group, tmnxEqPowerSupplyInputFeedAlmClr=tmnxEqPowerSupplyInputFeedAlmClr, tmnxChassisNotificationV5v0Group=tmnxChassisNotificationV5v0Group, tmnxSyncIfTimingBITSNationalUse=tmnxSyncIfTimingBITSNationalUse, tmnxEqPowerLostCapacity=tmnxEqPowerLostCapacity, tmnxFPAccIngQgPStDrpLPrioPktsL=tmnxFPAccIngQgPStDrpLPrioPktsL, tmnxCpmCardCmplChipIfDownOcc=tmnxCpmCardCmplChipIfDownOcc, tmnxFPAccIngQGrpPStatEntry=tmnxFPAccIngQGrpPStatEntry, tmnxChassisPowerNotifV12v0Group=tmnxChassisPowerNotifV12v0Group, tmnxMDASyncIfTimingStatus=tmnxMDASyncIfTimingStatus, tmnxCardNumMdas=tmnxCardNumMdas, tFPResEgrIPv6AclFilterTotal=tFPResEgrIPv6AclFilterTotal, tmnxPhysChassisPowerSupplyTable=tmnxPhysChassisPowerSupplyTable, tmnxMDALicensedBandwidth=tmnxMDALicensedBandwidth, tmnxFPWredBufAllocMin=tmnxFPWredBufAllocMin, tmnxChassisV11v0Compliance=tmnxChassisV11v0Compliance, tmnxPeSoftwareAbnormalHalt=tmnxPeSoftwareAbnormalHalt, tmnxPhysChassisFilterDoorOpen=tmnxPhysChassisFilterDoorOpen, tmnxChassisType=tmnxChassisType, tmnxPEQTypeEntry=tmnxPEQTypeEntry, tmnxCardHwEventNumOccurrences=tmnxCardHwEventNumOccurrences, tmnxCpmMemSizeNotifGroupV12v0=tmnxCpmMemSizeNotifGroupV12v0, tmnxChassisPwrMgmtSafetyAlert=tmnxChassisPwrMgmtSafetyAlert, tmnxGnssSatelliteNumber=tmnxGnssSatelliteNumber, tmnxChassisPowerSupplyPemType=tmnxChassisPowerSupplyPemType, tFPAccIngQGrpPCPOvrLvlEntry=tFPAccIngQGrpPCPOvrLvlEntry, tmnxGnssLongitude=tmnxGnssLongitude, tmnxPhysChassPwrSupPemACRect=tmnxPhysChassPwrSupPemACRect, tmnxChassisNotifyObjsV5v0Group=tmnxChassisNotifyObjsV5v0Group, tmnxChassisV7v0Group=tmnxChassisV7v0Group, tmnxBluetoothNotifGroupV15v1=tmnxBluetoothNotifGroupV15v1, tmnxChassisObjs=tmnxChassisObjs, tmnxFPMcPathMgmtBlkHoleInUseBw=tmnxFPMcPathMgmtBlkHoleInUseBw, tmnxCardLastChange=tmnxCardLastChange, tmnxMDAMcPathMgmtSecInUseBw=tmnxMDAMcPathMgmtSecInUseBw, tmnxFPNetIngQGrpLastChgd=tmnxFPNetIngQGrpLastChgd, tmnxCpmFlashHwIndex=tmnxCpmFlashHwIndex, tmnxFPAccIngQgPStOffHPrioPktsH=tmnxFPAccIngQgPStOffHPrioPktsH, tmnxHwResourcePeakVoltage=tmnxHwResourcePeakVoltage, tCardResEntry=tCardResEntry, tmnxMDAChannelsInUse=tmnxMDAChannelsInUse, tmnxCardCmplx1EgrFcsOccur=tmnxCardCmplx1EgrFcsOccur, tmnxHwLastChange=tmnxHwLastChange, tmnxChassisLocation=tmnxChassisLocation, tmnxCcagPathCcIngPoolResvCbs=tmnxCcagPathCcIngPoolResvCbs, tmnxChassisGroups=tmnxChassisGroups, TmnxPhysChassisIndex=TmnxPhysChassisIndex, tmnxEqSyncIfTimingRef2Quality=tmnxEqSyncIfTimingRef2Quality, tmnxPhysChassisTable=tmnxPhysChassisTable, tmnxEqCardPChipCamEvent=tmnxEqCardPChipCamEvent, tSyncIfTimingAdmRevert=tSyncIfTimingAdmRevert, tmnxChassisHiBwMcastAlarm=tmnxChassisHiBwMcastAlarm, tmnxDcpFpDynPoolUsageHiAlmClear=tmnxDcpFpDynPoolUsageHiAlmClear, tmnxMacScaleNotifyObjsV15v0Grp=tmnxMacScaleNotifyObjsV15v0Grp, TmnxCcagId=TmnxCcagId, tmnxFabricSupportedTypes=tmnxFabricSupportedTypes, tmnxHwEquippedPlatform=tmnxHwEquippedPlatform, tmnxCardCmpl2StatMemErrOccurTime=tmnxCardCmpl2StatMemErrOccurTime, tFPResEgrQosBypassTotal=tFPResEgrQosBypassTotal, tmnxCardFwdDirection=tmnxCardFwdDirection, tFPResDynEgrClassIUBSE=tFPResDynEgrClassIUBSE, tFPEgressFwdEngDRStatsEntry=tFPEgressFwdEngDRStatsEntry, tmnxEqPowerSupplyRemoved=tmnxEqPowerSupplyRemoved, tmnxChassisV10v0Groups=tmnxChassisV10v0Groups, tmnxHwResourceCurrentAmperage=tmnxHwResourceCurrentAmperage, tmnxSyncIfTimingRef2State=tmnxSyncIfTimingRef2State, tmnxPeOutOfMemory=tmnxPeOutOfMemory, tmnxMDAMaxChannels=tmnxMDAMaxChannels, tmnxChassisNotifyObsoleteGroup=tmnxChassisNotifyObsoleteGroup, tmnxSyncIfTimingOtherCPMInUse=tmnxSyncIfTimingOtherCPMInUse, tCardResPortNetEgrQGrpInstTotal=tCardResPortNetEgrQGrpInstTotal, tmnxMDAMcPathMgmtV6v0Group=tmnxMDAMcPathMgmtV6v0Group, tmnxChassisNotifyObjsV9v0Group=tmnxChassisNotifyObjsV9v0Group, tmnxChassisPowerSupplyPemACRect=tmnxChassisPowerSupplyPemACRect, tmnxMdaObsoletedV10v0Group=tmnxMdaObsoletedV10v0Group, tmnxIPsecV7v0Group=tmnxIPsecV7v0Group, tmnxIPsecIsaGrpIsaChassis=tmnxIPsecIsaGrpIsaChassis, tmnxSyncIfTimingFreqOffset=tmnxSyncIfTimingFreqOffset, TmnxChassisIndex=TmnxChassisIndex, tmnxMdaTypeName=tmnxMdaTypeName, tFPResEgrHsTurboQGrpAlloc=tFPResEgrHsTurboQGrpAlloc, tmnxEqPhysChassisFanFailure=tmnxEqPhysChassisFanFailure, tmnxSyncIfTimingQlMin=tmnxSyncIfTimingQlMin, tmnxCpmCardCmplxIngrFcsOccurTime=tmnxCpmCardCmplxIngrFcsOccurTime, TmnxPhysChassisRole=TmnxPhysChassisRole, tSyncIfTimingAdmBITSOutAdmStatus=tSyncIfTimingAdmBITSOutAdmStatus, tmnxChassisNotifyMgmtEthRedPort=tmnxChassisNotifyMgmtEthRedPort, tmnxCardObjs=tmnxCardObjs, tFPResResRvplsFdbRecAlloc=tFPResResRvplsFdbRecAlloc, tmnxCardComplexNumber=tmnxCardComplexNumber, tmnxCpmCardEntry=tmnxCpmCardEntry, tmnxCpmCardMemorySize=tmnxCpmCardMemorySize, tFPNetIngQGrpPlcrOvrTblLstChgd=tFPNetIngQGrpPlcrOvrTblLstChgd, tmnxRedRestoreSuccess=tmnxRedRestoreSuccess, tmnxEqPowerLostCapacityClear=tmnxEqPowerLostCapacityClear, tFPNetIngQGrpPCPOvrTblLastChgd=tFPNetIngQGrpPCPOvrTblLastChgd, tmnxFPNetIngQgPStUncolPktsOffH=tmnxFPNetIngQgPStUncolPktsOffH, tFPResIngQGrpRedirTotal=tFPResIngQGrpRedirTotal, tmnxChassisV15v0Groups=tmnxChassisV15v0Groups, tmnxBluetoothModuleCfgIdentifier=tmnxBluetoothModuleCfgIdentifier, tmnxCpmCardCmplStatMemErrOcc=tmnxCpmCardCmplStatMemErrOcc, tmnxSyncIfTimingBITSOutAdmStatus=tmnxSyncIfTimingBITSOutAdmStatus, tmnxChassisFabricV12v0Group=tmnxChassisFabricV12v0Group, tFPResIngAclQosEntryTotal=tFPResIngAclQosEntryTotal, tmnxMDAIsaTunnelGroupInUse=tmnxMDAIsaTunnelGroupInUse, tmnxVmCardHypervisor=tmnxVmCardHypervisor, tmnxFPAccIngQgPStUncolPktsOffL=tmnxFPAccIngQgPStUncolPktsOffL, tmnxPhysChassisPEQTable=tmnxPhysChassisPEQTable, tmnxFPNetIngQgPStFwdOutProfOctsL=tmnxFPNetIngQgPStFwdOutProfOctsL, tmnxHsmdaMdaSchOvrClass6WtInGrp=tmnxHsmdaMdaSchOvrClass6WtInGrp, tFPResDynPolicerStatAlloc=tFPResDynPolicerStatAlloc, TmnxMDAChanType=TmnxMDAChanType, tmnxCpmFlashModelNumber=tmnxCpmFlashModelNumber, tmnxChassisFPGenerationVFP=tmnxChassisFPGenerationVFP, tmnxSyncIfTimingRef1BITSIfType=tmnxSyncIfTimingRef1BITSIfType, tmnxFPNetIngQgPStOffHPrioOctsL=tmnxFPNetIngQgPStOffHPrioOctsL, tmnxSyncIfTimingOtherCPMQual=tmnxSyncIfTimingOtherCPMQual, tmnxSyncIfTimingPTPInUse=tmnxSyncIfTimingPTPInUse, tmnxChassisOperTopology=tmnxChassisOperTopology, tmnxChassisComp7710V8v0=tmnxChassisComp7710V8v0, tmnxFPDcpNotifyObjsV11v0Group=tmnxFPDcpNotifyObjsV11v0Group, tmnxChassisTotalNumber=tmnxChassisTotalNumber, tmnxCardComplexIntDatapthErrTime=tmnxCardComplexIntDatapthErrTime, tmnxIPsecIsaGrpOperState=tmnxIPsecIsaGrpOperState, tFPResIngAclFilterAlloc=tFPResIngAclFilterAlloc, tmnxCcmTypeStatus=tmnxCcmTypeStatus, tmnxIPv6CpmFilterOverloadClear=tmnxIPv6CpmFilterOverloadClear, tmnxHwContainsTable=tmnxHwContainsTable, tmnxIomEventOverflowClr=tmnxIomEventOverflowClr, tmnxEqCpuFailure=tmnxEqCpuFailure, tmnxPhysChassisGroup=tmnxPhysChassisGroup, tChassisResSubNHEntryAlloc=tChassisResSubNHEntryAlloc, tmnxCardEquippedLevel=tmnxCardEquippedLevel, tmnxMdaTypeTable=tmnxMdaTypeTable, tmnxChassisMinorLEDState=tmnxChassisMinorLEDState, tmnxCpmCardBootOptionLastModified=tmnxCpmCardBootOptionLastModified, tmnxPhysChassisObjs=tmnxPhysChassisObjs, tFPResEgrPolicerStatAlloc=tFPResEgrPolicerStatAlloc, TmnxCardFunctionalUpgrade=TmnxCardFunctionalUpgrade, tFPAccIngQGrpPlcrOvrPolicerId=tFPAccIngQGrpPlcrOvrPolicerId, tmnxEqPhysChassPowerSupInFail=tmnxEqPhysChassPowerSupInFail, tCardResSubSPIQosOvrAlloc=tCardResSubSPIQosOvrAlloc, tmnxHwLastAlarmEvent=tmnxHwLastAlarmEvent, tmnxMdaLevelIndex=tmnxMdaLevelIndex, tmnxChassisHwEventObjs=tmnxChassisHwEventObjs, tmnxCardCmpl2StatMemErrOccur=tmnxCardCmpl2StatMemErrOccur, tmnxChassisNotifyOID=tmnxChassisNotifyOID, tmnxChassisReboot=tmnxChassisReboot, tmnxPhysChassisPCMEntryLastChg=tmnxPhysChassisPCMEntryLastChg, tmnxEqPowerSafetyLevelClear=tmnxEqPowerSafetyLevelClear, tmnxChassisV11v0Group=tmnxChassisV11v0Group, tmnxChassisPwrMgmtZone=tmnxChassisPwrMgmtZone, tmnxSyncIfTimingRevert=tmnxSyncIfTimingRevert, tmnxIPsecIsaGrpIpTunnels=tmnxIPsecIsaGrpIpTunnels, tFPAccIngQGrpPCPOvrLastChgd=tFPAccIngQGrpPCPOvrLastChgd, tFPResEgrRootArbiterTotal=tFPResEgrRootArbiterTotal, tmnxHwIsFRU=tmnxHwIsFRU, tmnxCcagPathCcAcctPolicyId=tmnxCcagPathCcAcctPolicyId, tmnxChassisResV16v0ObsoleteGroup=tmnxChassisResV16v0ObsoleteGroup, tmnxFPNetIngQgPStOffHPrioOcts=tmnxFPNetIngQgPStOffHPrioOcts, tmnxPhysChassisPMTypeNumInFeed=tmnxPhysChassisPMTypeNumInFeed, tMDAResEgrHsmdaQGrpTotal=tMDAResEgrHsmdaQGrpTotal, tmnxChassisMgmtEthRedObjs=tmnxChassisMgmtEthRedObjs, tmnxPhysChassisPMOutFail=tmnxPhysChassisPMOutFail, tSyncIfTimingAdmRef2CfgQltyLevel=tSyncIfTimingAdmRef2CfgQltyLevel, TmnxMDAFunctionalLevel=TmnxMDAFunctionalLevel, tmnxCardCmplx2CAMErrorOccur=tmnxCardCmplx2CAMErrorOccur, tmnxCardCmpl1StatMemErrOccur=tmnxCardCmpl1StatMemErrOccur, tmnxIPMacFilterIngOverloadClear=tmnxIPMacFilterIngOverloadClear, tmnxCardComplexEgrFcsError=tmnxCardComplexEgrFcsError, tSyncIfTimingAdmBITSOutLineLen=tSyncIfTimingAdmBITSOutLineLen, tFPResEgrIPv6QosEntryTotal=tFPResEgrIPv6QosEntryTotal, tmnxMDAV4v0Group=tmnxMDAV4v0Group, tFPAccIngQGrpPlcrOvrMBS=tFPAccIngQGrpPlcrOvrMBS, tmnxHwFirmwareCodeVersion=tmnxHwFirmwareCodeVersion)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxCardSchedRun=tmnxCardSchedRun, tmnxChassisTypeDescription=tmnxChassisTypeDescription, tFPResMacFdbRecAlloc=tFPResMacFdbRecAlloc, tmnxIomResrcNotifyV12v0Group=tmnxIomResrcNotifyV12v0Group, tmnxMDAMcPathMgmtBlkHoleInUseBw=tmnxMDAMcPathMgmtBlkHoleInUseBw, tmnxChassisFanSpeedPercent=tmnxChassisFanSpeedPercent, tmnxEqBpEpromWarningClear=tmnxEqBpEpromWarningClear, tmnxVirtualSchedulerAdjTable=tmnxVirtualSchedulerAdjTable, tmnxHwMfgAssemblyNumber=tmnxHwMfgAssemblyNumber, tmnxHsmdaMdaSchOvrClass3WtInGrp=tmnxHsmdaMdaSchOvrClass3WtInGrp, tmnxCardAllowedTypes=tmnxCardAllowedTypes, tmnxCpmCardConfigFileLastSaved=tmnxCpmCardConfigFileLastSaved, tmnxMDALevelUpgradesTable=tmnxMDALevelUpgradesTable, tmnxEqCardQChipStatsMemoryEvent=tmnxEqCardQChipStatsMemoryEvent, tmnx77x0CESMDAV6v0Group=tmnx77x0CESMDAV6v0Group, tmnxFanTrayComponentTable=tmnxFanTrayComponentTable, tmnxMDAIngrXplErrThreshold=tmnxMDAIngrXplErrThreshold, tCardResQosUserSchedsTotal=tCardResQosUserSchedsTotal, tFPAccIngQGrpArbitStatTable=tFPAccIngQGrpArbitStatTable, tmnxPhysChassPowerSupFanDir=tmnxPhysChassPowerSupFanDir, tChassisResSapIngQosPolAlloc=tChassisResSapIngQosPolAlloc, tmnxEqSyncIfTimingPTPAlarm=tmnxEqSyncIfTimingPTPAlarm, tmnxSyncIfTimingTable=tmnxSyncIfTimingTable, tChassisResFPIngQGrpInstAlloc=tChassisResFPIngQGrpInstAlloc, tmnxChassisAdminCtrlObjs=tmnxChassisAdminCtrlObjs, tFPResIngQosEntryAlloc=tFPResIngQosEntryAlloc, tmnxMDAV6v1Group=tmnxMDAV6v1Group, tmnxPhysChassisState=tmnxPhysChassisState, tChassisResIngQGrpTmplAlloc=tChassisResIngQGrpTmplAlloc, tmnxCardLevelUpgradeEntry=tmnxCardLevelUpgradeEntry, tmnxHwResourceMaxRequiredWattage=tmnxHwResourceMaxRequiredWattage, tmnxCpmCardVmHypervisor=tmnxCpmCardVmHypervisor, tmnxSyncIfTimingV14v0Group=tmnxSyncIfTimingV14v0Group, tmnxCpmCardCmplxEgrFcsSrcSlots=tmnxCpmCardCmplxEgrFcsSrcSlots, tCardResEncapGrpMemberAlloc=tCardResEncapGrpMemberAlloc, tmnxSyncIfTimingRef1NationalUse=tmnxSyncIfTimingRef1NationalUse, tmnxCpmMemSizeMismatchClear=tmnxCpmMemSizeMismatchClear, tmnxCardTypeName=tmnxCardTypeName, tmnxPhysChassisPEQLastChangeTime=tmnxPhysChassisPEQLastChangeTime, tmnxSyncIfTimingRef2Alarm=tmnxSyncIfTimingRef2Alarm, tFPResIngPolicerTotal=tFPResIngPolicerTotal, tFPResEgrHsPrimaryShapersIUBMS=tFPResEgrHsPrimaryShapersIUBMS, tmnxDcpCardSapEventOvrflwClr=tmnxDcpCardSapEventOvrflwClr, tmnxHwObjs=tmnxHwObjs, tmnxFabricLastChange=tmnxFabricLastChange, tmnxPhysChassisPMOutFailClr=tmnxPhysChassisPMOutFailClr, tFPResEgrHsTurboQGrpTotal=tFPResEgrHsTurboQGrpTotal, tmnxFPAccIngQgPStDrpHPrioPktsL=tmnxFPAccIngQgPStDrpHPrioPktsL, tmnxSyncIfTimingPTPState=tmnxSyncIfTimingPTPState, tmnxCardComplexStatsMemError=tmnxCardComplexStatsMemError, tmnxCpmCardConfigUserLastModified=tmnxCpmCardConfigUserLastModified, tChassisResSapIngQosPolTotal=tChassisResSapIngQosPolTotal, tmnxEqNotificationRow=tmnxEqNotificationRow, tmnxFPAccIngQgPStDrpLPrioOcts=tmnxFPAccIngQgPStDrpLPrioOcts, tmnxSyncIfTimingRef1InUse=tmnxSyncIfTimingRef1InUse, tmnxChassisHsmdaV6v0Group=tmnxChassisHsmdaV6v0Group, tmnxEqPhysChassPowerSupAcFail=tmnxEqPhysChassPowerSupAcFail, tmnxChassisV5v0ObsoleteGroup=tmnxChassisV5v0ObsoleteGroup, tmnxIsaGrpIsaScaleModeGroupV14v0=tmnxIsaGrpIsaScaleModeGroupV14v0, tmnxBluetoothGroupV15v1=tmnxBluetoothGroupV15v1, tmnxPhysChassPwrSupPemACRectClr=tmnxPhysChassPwrSupPemACRectClr, tmnxChassisV15v1Compliance=tmnxChassisV15v1Compliance, tSyncIfTimingAdmRef1AdminStatus=tSyncIfTimingAdmRef1AdminStatus, tmnxChassisPEQEquippedType=tmnxChassisPEQEquippedType, tmnxChassisV15v0Compliance=tmnxChassisV15v0Compliance, tSyncIfTimingAdmRef2SrcPort=tSyncIfTimingAdmRef2SrcPort, tmnxGnssAcquiredFix=tmnxGnssAcquiredFix, tmnxFPWredBufAllocMax=tmnxFPWredBufAllocMax, tmnxPhysChassisName=tmnxPhysChassisName, tmnxCpmCardConfigFileLastBooted=tmnxCpmCardConfigFileLastBooted, tFPResIngQueueAlloc=tFPResIngQueueAlloc, tmnxChassisBaseMacAddress=tmnxChassisBaseMacAddress, tmnxCardComplexIntDpCellError=tmnxCardComplexIntDpCellError, tmnxRedSecondaryCPMStatus=tmnxRedSecondaryCPMStatus, tmnxFPNetIngQgPStFwdInProfOctsL=tmnxFPNetIngQgPStFwdInProfOctsL, tmnxHsmdaMdaSchOvrClass7WtInGrp=tmnxHsmdaMdaSchOvrClass7WtInGrp, tmnxGnssSatelliteTable=tmnxGnssSatelliteTable, tmnxEqBpEpromFailClear=tmnxEqBpEpromFailClear, tmnxPeConfigurationError=tmnxPeConfigurationError, tmnxMDALevelUpgradeRowStatus=tmnxMDALevelUpgradeRowStatus, tmnxPhysChassisFanType=tmnxPhysChassisFanType, tmnxCardNamedPoolOperMode=tmnxCardNamedPoolOperMode, tmnxPlcyAcctStatsPoolLowResource=tmnxPlcyAcctStatsPoolLowResource, tmnxSyncIfTimingBITSAdminStatus=tmnxSyncIfTimingBITSAdminStatus, tmnxIcmpMtuExceededStatGroup=tmnxIcmpMtuExceededStatGroup, tmnxEqPowerSupplyPemACRectAlmClr=tmnxEqPowerSupplyPemACRectAlmClr, tmnxCcagAccessAdaptQos=tmnxCcagAccessAdaptQos, tmnxCardSupportedTypes=tmnxCardSupportedTypes, tmnxEqPowerCapacityExceeded=tmnxEqPowerCapacityExceeded, tmnxHwEntry=tmnxHwEntry, TmnxCardSuppType=TmnxCardSuppType, tmnxIPsecIsaGrpIPsecRespondOnly=tmnxIPsecIsaGrpIPsecRespondOnly, tCardResIntArbiterAlloc=tCardResIntArbiterAlloc, tmnxPhysChassisNumPwrSupplies=tmnxPhysChassisNumPwrSupplies, tmnxMdaHwEventTable=tmnxMdaHwEventTable, tFPAccIngQGrpArbitStatFwdOctsL=tFPAccIngQGrpArbitStatFwdOctsL, tmnxChassisV5v0Compliance=tmnxChassisV5v0Compliance, tmnxChassisNotifyDiskFullReason=tmnxChassisNotifyDiskFullReason, tmnxMDAMcPathMgmtSecPathLimit=tmnxMDAMcPathMgmtSecPathLimit, tFPAccIngQGrpPlcrOvrEntry=tFPAccIngQGrpPlcrOvrEntry, tmnxChassisGnssGroup=tmnxChassisGnssGroup, tmnxMDAEquippedLevel=tmnxMDAEquippedLevel, tmnxFPNetIngQgPStOffLPrioOcts=tmnxFPNetIngQgPStOffLPrioOcts, tFPNetIngQGrpPlcrOvrAdminCIR=tFPNetIngQGrpPlcrOvrAdminCIR, tFPResEgrRootArbiterAlloc=tFPResEgrRootArbiterAlloc, tmnxChassisNotifyCardName=tmnxChassisNotifyCardName, tmnxBluetoothDeviceTableLastChg=tmnxBluetoothDeviceTableLastChg, tmnx7710SETSRefSrcHwV6v0Group=tmnx7710SETSRefSrcHwV6v0Group, tmnxRedSecondaryCPMStatusChange=tmnxRedSecondaryCPMStatusChange, tmnxCardSlotNum=tmnxCardSlotNum, tmnxCardResetOnRecoverErGrp=tmnxCardResetOnRecoverErGrp, tmnxFPAccIngQgPStUncolOctsOffL=tmnxFPAccIngQgPStUncolOctsOffL, tmnxFPAccIngQgPStFwdOutProfPkts=tmnxFPAccIngQgPStFwdOutProfPkts, tFPResSapIngQosPolTotal=tFPResSapIngQosPolTotal, tFPResDynQueueTotal=tFPResDynQueueTotal, tmnxChassisNotifyObjsV8v0Group=tmnxChassisNotifyObjsV8v0Group, TmnxFabricType=TmnxFabricType, tmnxMDAXplErrorTime=tmnxMDAXplErrorTime, tmnxMDAEgrHsmdaPoolPolicy=tmnxMDAEgrHsmdaPoolPolicy, tmnxCardAssignedLevel=tmnxCardAssignedLevel, tmnxEqCardSoftResetAlarm=tmnxEqCardSoftResetAlarm, tFPResIngIPv6QosEntryTotal=tFPResIngIPv6QosEntryTotal, tFPResEgrNetQGrpMapAlloc=tFPResEgrNetQGrpMapAlloc, tSyncIfTimingAdmQLSelection=tSyncIfTimingAdmQLSelection, tmnxSyncIfTimBITS2048khzUnsup=tmnxSyncIfTimBITS2048khzUnsup, tmnxFPNetIngQgPStOffLPrioPktsH=tmnxFPNetIngQgPStOffLPrioPktsH, tmnxFPAccIngQgPStOffHPrioOctsH=tmnxFPAccIngQgPStOffHPrioOctsH, tFPResEgrHsQGrpAlloc=tFPResEgrHsQGrpAlloc, tmnxChassisV10v0Compliance=tmnxChassisV10v0Compliance, tmnxCcagPathWeight=tmnxCcagPathWeight, tmnxMDALevelUpgradeId=tmnxMDALevelUpgradeId, tFPResEgrQ1NamedPoolAlloc=tFPResEgrQ1NamedPoolAlloc, tmnxMDALicensedLevel=tmnxMDALicensedLevel, tmnxMDAEquippedPorts=tmnxMDAEquippedPorts, tmnxCardUpgradeRequiresReboot=tmnxCardUpgradeRequiresReboot, tmnxIomResrcNotifyObjsV12v0Grp=tmnxIomResrcNotifyObjsV12v0Grp, tmnxChassisResourceV16v0Group=tmnxChassisResourceV16v0Group, tmnxIPMacFilterIngOverload=tmnxIPMacFilterIngOverload, tmnxMdaHwEventLastOccurTime=tmnxMdaHwEventLastOccurTime, tmnxEqFlashDataLoss=tmnxEqFlashDataLoss, tCardResHsmdaQOvrTotal=tCardResHsmdaQOvrTotal, tmnxGnssLatitude=tmnxGnssLatitude, tFPAccIngQGrpPCPOvrLvlLastChgd=tFPAccIngQGrpPCPOvrLvlLastChgd, tCardResSLAProfileInstanceAlloc=tCardResSLAProfileInstanceAlloc, tmnxFabricAssignedType=tmnxFabricAssignedType, tmnxCardTaskScheduling=tmnxCardTaskScheduling, tmnxCpmFlashPercentageUsed=tmnxCpmFlashPercentageUsed, tmnxMDACcagId=tmnxMDACcagId, tmnxMDAAllowedTypes=tmnxMDAAllowedTypes, tmnxMDAIsaTunnelGroup=tmnxMDAIsaTunnelGroup, tFPResEgrAclQosEntryTotal=tFPResEgrAclQosEntryTotal, tmnxBluetoothPairingButton=tmnxBluetoothPairingButton, tmnxCardVCpuSchedStatsTable=tmnxCardVCpuSchedStatsTable, tmnxChassisNotificationObjects=tmnxChassisNotificationObjects, tFPNetIngQGrpPCPOvrLvlTblLstChgd=tFPNetIngQGrpPCPOvrLvlTblLstChgd, tmnxHsmdaMdaSchOvrGrp2Rate=tmnxHsmdaMdaSchOvrGrp2Rate, tmnxIPMacCpmFilterOverloadClear=tmnxIPMacCpmFilterOverloadClear, tmnxSyncIfTimingBITSInUse=tmnxSyncIfTimingBITSInUse, tmnxFabricTypeName=tmnxFabricTypeName, tmnxFPNetIngQgPStFwdOutProfPktsH=tmnxFPNetIngQgPStFwdOutProfPktsH, tmnxPhysChassisDescription=tmnxPhysChassisDescription, tFPResDynEgrClassTotal=tFPResDynEgrClassTotal, tmnxIPsecIsaGrpDpCpuUsageCollEn=tmnxIPsecIsaGrpDpCpuUsageCollEn, tmnxPhysChassisNum=tmnxPhysChassisNum, tSyncIfTimingAdmBITSIfType=tSyncIfTimingAdmBITSIfType, tmnxCardV16v0Group=tmnxCardV16v0Group, tFPResEgrIPv6QosEntryAlloc=tFPResEgrIPv6QosEntryAlloc, tSyncIfTimingAdmTable=tSyncIfTimingAdmTable, tmnxCardCmpl1ChipIfCellOcc=tmnxCardCmpl1ChipIfCellOcc, tmnxCpmFlashFirmwareRevision=tmnxCpmFlashFirmwareRevision, tmnxIPMacQosIngOverloadClear=tmnxIPMacQosIngOverloadClear, tmnxFPHiBwMcastGroup=tmnxFPHiBwMcastGroup, tmnxIPv6QosEgrOverload=tmnxIPv6QosEgrOverload, tmnxFPAccIngQgPStFwdOutProfPktsL=tmnxFPAccIngQgPStFwdOutProfPktsL, tmnxFPHiBwMcastSource=tmnxFPHiBwMcastSource, TmnxTunnelGroupIdOrZero=TmnxTunnelGroupIdOrZero, tmnxPlcyAcctTimeEventOccured=tmnxPlcyAcctTimeEventOccured, tmnxPhysChassisPCMEntry=tmnxPhysChassisPCMEntry, tmnxPhysChassisRole=tmnxPhysChassisRole, tmnxCardCmplQChipMemErrV9v0Group=tmnxCardCmplQChipMemErrV9v0Group, tmnxMDAIngNamedPoolPolicy=tmnxMDAIngNamedPoolPolicy, tmnxCardComplexIntDpCellErrTime=tmnxCardComplexIntDpCellErrTime, tmnxChassisRedForcedSingleSfm=tmnxChassisRedForcedSingleSfm, tmnxPhysChassisPMInputFeed=tmnxPhysChassisPMInputFeed, tFPResDynQ2WredPoolTotal=tFPResDynQ2WredPoolTotal, TmnxPhysChassisClass=TmnxPhysChassisClass, tmnxSyncIfTimingRef1State=tmnxSyncIfTimingRef1State, tFPResEgrQ1NamedPoolTotal=tFPResEgrQ1NamedPoolTotal, tmnxCardSoftReset=tmnxCardSoftReset, tmnxCardCmpl2IntMemErrOccurTime=tmnxCardCmpl2IntMemErrOccurTime, tmnxChassisTypeTable=tmnxChassisTypeTable, tmnxFanTrayCompIndex=tmnxFanTrayCompIndex, tmnxPhysChassisPCMInputFeedClr=tmnxPhysChassisPCMInputFeedClr, tCardResSubSPIQosOvrTotal=tCardResSubSPIQosOvrTotal, tmnxEqPhysChassPowerSupAcFailClr=tmnxEqPhysChassPowerSupAcFailClr, tmnxHwCLEI=tmnxHwCLEI, tmnxChassisV15v1Groups=tmnxChassisV15v1Groups, tmnxMDAAssignedLevel=tmnxMDAAssignedLevel, tChassisResSapEgrQosPolTotal=tChassisResSapEgrQosPolTotal, tmnxHwPowerZone=tmnxHwPowerZone, tFPResIngIPv6AclFilterTotal=tFPResIngIPv6AclFilterTotal, tFPAccIngQGrpPlcrOvrCBS=tFPAccIngQGrpPlcrOvrCBS, tmnxFPAccIngQgPStFwdInProfOctsL=tmnxFPAccIngQgPStFwdInProfOctsL, tChassisResIpSecNHEntryAlloc=tChassisResIpSecNHEntryAlloc, tmnxChassisResrcObsoletedGroup=tmnxChassisResrcObsoletedGroup, tFPResEgrHsPrimaryShapersIUBES=tFPResEgrHsPrimaryShapersIUBES, tmnxPlcyAcctStatsEventOvrflw=tmnxPlcyAcctStatsEventOvrflw, tmnxCardCmpl1StatMemErrOccurTime=tmnxCardCmpl1StatMemErrOccurTime, tmnxChassisV6v0Group=tmnxChassisV6v0Group, tmnxChassisNotificationV6v0Group=tmnxChassisNotificationV6v0Group, tSyncIfTimingAdmRef2SrcHw=tSyncIfTimingAdmRef2SrcHw, tmnxChassisOverTempState=tmnxChassisOverTempState, tmnxChassisV8v0Group=tmnxChassisV8v0Group, tmnxSyncIfTimingQLSelection=tmnxSyncIfTimingQLSelection, tmnxChassisV13v0Groups=tmnxChassisV13v0Groups, TmnxCpmPowerShelfCommsFailStatus=TmnxCpmPowerShelfCommsFailStatus, tChassisResSapEgrQosPolAlloc=tChassisResSapEgrQosPolAlloc, tSyncIfTimingAdmRefOrder4=tSyncIfTimingAdmRefOrder4, tmnxChassisPowerMgmtGroupV13v0=tmnxChassisPowerMgmtGroupV13v0, tmnxEqSyncIfTimingRef2AlarmClear=tmnxEqSyncIfTimingRef2AlarmClear, tmnxEqSyncIfTimingRef1Quality=tmnxEqSyncIfTimingRef1Quality, tmnxChassisOperMode=tmnxChassisOperMode, tmnxPhysChassisPEQInputPowerMode=tmnxPhysChassisPEQInputPowerMode, tmnxBluetoothModuleIdentifier=tmnxBluetoothModuleIdentifier, tmnxChassisAdminMode=tmnxChassisAdminMode, tmnxDcpTimeEventOccured=tmnxDcpTimeEventOccured, tmnxMdaTypeStatus=tmnxMdaTypeStatus, tSyncIfTimingAdmBITSCfgQltyLevel=tSyncIfTimingAdmBITSCfgQltyLevel, tmnxPhysChassisPMInputFeedClr=tmnxPhysChassisPMInputFeedClr, tmnxFPNetIngQgPStFwdOutProfPkts=tmnxFPNetIngQgPStFwdOutProfPkts, tmnxSyncIfTimingWaitToRestorTime=tmnxSyncIfTimingWaitToRestorTime, tmnxCcagPathCcMac=tmnxCcagPathCcMac, tmnxCardLevelEntry=tmnxCardLevelEntry, tmnxChassisPlcyAcctNtfyV12v0Grp=tmnxChassisPlcyAcctNtfyV12v0Grp, tSyncIfTimingAdmRef1CfgQltyLevel=tSyncIfTimingAdmRef1CfgQltyLevel, tmnxHwResourceMinAmperageTime=tmnxHwResourceMinAmperageTime, tMDAResTable=tMDAResTable, tmnxIPv6FilterEgrOverloadClear=tmnxIPv6FilterEgrOverloadClear, tFPAccIngQGrpArbitStatFwdPkts=tFPAccIngQGrpArbitStatFwdPkts, tmnxChassisSystemProfile=tmnxChassisSystemProfile, tmnxFPQGrpV10v0R4Group=tmnxFPQGrpV10v0R4Group, TmnxBITSIfType=TmnxBITSIfType, tFPResEgrUserQueueAlloc=tFPResEgrUserQueueAlloc, tmnxCardLastBootupReason=tmnxCardLastBootupReason, tFPResIngIPv6AclFilterAlloc=tFPResIngIPv6AclFilterAlloc, tmnxBluetoothDeviceMacAddress=tmnxBluetoothDeviceMacAddress, tmnxChassisTypeName=tmnxChassisTypeName, tmnxCpmCardConfigBootedVersion=tmnxCpmCardConfigBootedVersion, tmnxCpmFlashId=tmnxCpmFlashId, tmnxEqBpEpromFail=tmnxEqBpEpromFail, tmnxIPv6CpmFilterOverload=tmnxIPv6CpmFilterOverload, tmnxFPWredV7v0Group=tmnxFPWredV7v0Group, tmnxPhysChassisFanEntry=tmnxPhysChassisFanEntry, tmnxCcagPathCcEgrPoolResvCbs=tmnxCcagPathCcEgrPoolResvCbs)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxChassisNotifyPowerCapacity=tmnxChassisNotifyPowerCapacity, tmnxSyncIfTimingRef2Qualified=tmnxSyncIfTimingRef2Qualified, tmnxEqMdaSyncENotCompatible=tmnxEqMdaSyncENotCompatible, tmnxHwSwLastBoot=tmnxHwSwLastBoot, tmnxPhysChassisEntry=tmnxPhysChassisEntry, tFPResIntArbiterTotal=tFPResIntArbiterTotal, tmnxFPAccIngQgPStDrpLPrioPktsH=tmnxFPAccIngQgPStDrpLPrioPktsH, tmnxChassisNotifyCardFailureReason=tmnxChassisNotifyCardFailureReason, tmnxHwMfgString=tmnxHwMfgString, tmnxPhysChassPowerSupAssignType=tmnxPhysChassPowerSupAssignType, tmnxIPsecNotifV7v0Group=tmnxIPsecNotifV7v0Group, tmnxFabricTypeEntry=tmnxFabricTypeEntry, tmnxChassisMgmtEthRedStandby=tmnxChassisMgmtEthRedStandby, tSyncIfTimingAdmRef1SrcPort=tSyncIfTimingAdmRef1SrcPort, TmnxFabricSuppType=TmnxFabricSuppType, tmnxFPNetIngQgPStDrpLPrioOcts=tmnxFPNetIngQgPStDrpLPrioOcts, tFPResTable=tFPResTable, tmnxCardVFpTaskType=tmnxCardVFpTaskType, tFPNetIngQGrpPlcrOvrEntry=tFPNetIngQGrpPlcrOvrEntry, tChassisResDynSvcNHEntryAlloc=tChassisResDynSvcNHEntryAlloc, tmnxFPV13v0Group=tmnxFPV13v0Group, tmnxCardResMacFdbHighUsgClr=tmnxCardResMacFdbHighUsgClr, tmnxChassisV3v0Group=tmnxChassisV3v0Group, tmnxCardVCpuSchedHealth=tmnxCardVCpuSchedHealth, tmnxEqPhysChassPowerSupInFailClr=tmnxEqPhysChassPowerSupInFailClr, tmnxCpmCardCmplxMemErrOccur=tmnxCpmCardCmplxMemErrOccur, tmnxSyncIfTimingPTPAlarm=tmnxSyncIfTimingPTPAlarm, tmnxMdaLevelTable=tmnxMdaLevelTable, tmnxHsmdaMdaSchOvrTblLastChangd=tmnxHsmdaMdaSchOvrTblLastChangd, tmnxPhysChassisNumFanTrays=tmnxPhysChassisNumFanTrays, tmnxEqSyncIfTimingBITSOutRefChg=tmnxEqSyncIfTimingBITSOutRefChg, tmnxFPAccIngQgPStFwdOutProfOcts=tmnxFPAccIngQgPStFwdOutProfOcts, tFPFwdEngStatsGroup=tFPFwdEngStatsGroup, tmnxCcagPathCcIngPoolSlpPlcy=tmnxCcagPathCcIngPoolSlpPlcy, tmnxEqSyncIfTimingBITS2AlarmClr=tmnxEqSyncIfTimingBITS2AlarmClr, tmnxHsmdaMdaSchOvrEntry=tmnxHsmdaMdaSchOvrEntry, tFPNetIngQGrpPCPOvrLvlMBS=tFPNetIngQGrpPCPOvrLvlMBS, tmnxChassisPwrMgmtChangedTime=tmnxChassisPwrMgmtChangedTime, tFPResIngPolicerStatAlloc=tFPResIngPolicerStatAlloc, tmnxFPGeneration=tmnxFPGeneration, tmnxChassisNotificationV9v0Group=tmnxChassisNotificationV9v0Group, tCardResPortAccEgrQGrpInstTotal=tCardResPortAccEgrQGrpInstTotal, tmnxMDAHiBwMcastAlarm=tmnxMDAHiBwMcastAlarm, tmnxIPMacCpmFilterOverload=tmnxIPMacCpmFilterOverload, tmnxPhysChassisFanRevision=tmnxPhysChassisFanRevision, tmnxPhysChassisPEQEntry=tmnxPhysChassisPEQEntry, tmnxBluetoothAdvertisingTimeout=tmnxBluetoothAdvertisingTimeout, tFPNetIngQGrpPCPOvrLvlEntry=tFPNetIngQGrpPCPOvrLvlEntry, tmnxChassisPowerSupplyId=tmnxChassisPowerSupplyId, tmnxPhysChassisPEQAvailableWatt=tmnxPhysChassisPEQAvailableWatt, tmnxMdaLevelDescription=tmnxMdaLevelDescription, tmnxHwID=tmnxHwID, TmnxMdaAtmMode=TmnxMdaAtmMode, tFPNetIngQGrpPlcrOvrMBS=tFPNetIngQGrpPlcrOvrMBS, tmnxCardReboot=tmnxCardReboot, TmnxHwIndexOrZero=TmnxHwIndexOrZero, tmnxSyncIfTimingNotifyAlarm=tmnxSyncIfTimingNotifyAlarm, tmnxIPv6QosIngOverload=tmnxIPv6QosIngOverload, tmnxEqSyncIfTimingRef2Alarm=tmnxEqSyncIfTimingRef2Alarm, tmnxChassisMajorLEDState=tmnxChassisMajorLEDState, tmnxSyncIfTimingBITSCfgQltyLevel=tmnxSyncIfTimingBITSCfgQltyLevel, tSyncIfTimingAdmBITSOutQlMin=tSyncIfTimingAdmBITSOutQlMin, tmnxFPNetIngQgPStOffLPrioPkts=tmnxFPNetIngQgPStOffLPrioPkts, tmnxChassisCoordinates=tmnxChassisCoordinates, tmnxSyncIfTimingSystemQltyLevel=tmnxSyncIfTimingSystemQltyLevel, tmnxFPNetIngQgPStOffHPrioPktsH=tmnxFPNetIngQgPStOffHPrioPktsH, tFPResSapInstanceTotal=tFPResSapInstanceTotal, tmnxChassisVsrCongestionMgmt=tmnxChassisVsrCongestionMgmt, tmnxChassisNumPwrSupplies=tmnxChassisNumPwrSupplies, tFPResDynPolicerStatIUBE=tFPResDynPolicerStatIUBE, tmnxPhysChassisGroupV14v0=tmnxPhysChassisGroupV14v0, TmnxChassisPemType=TmnxChassisPemType, tmnxHwConfigChange=tmnxHwConfigChange, tmnxCardLevelStatus=tmnxCardLevelStatus, tChassisResSapTotal=tChassisResSapTotal, tmnxSyncIfTimingV9v0Group=tmnxSyncIfTimingV9v0Group, tmnxChassisUpgradeComplete=tmnxChassisUpgradeComplete, tmnxCpmCardCmplChipIfCellOccTime=tmnxCpmCardCmplChipIfCellOccTime, tmnxGnssCfgLastChanged=tmnxGnssCfgLastChanged, tmnxCpmCardCmplIntMemErrOcc=tmnxCpmCardCmplIntMemErrOcc, tmnxPeSoftwareLoadFailed=tmnxPeSoftwareLoadFailed, tmnxCardLevelId=tmnxCardLevelId, tmnxMDACcagV6v1Group=tmnxMDACcagV6v1Group, tmnxFabricEntry=tmnxFabricEntry, tFPResIngAclQosEntryAlloc=tFPResIngAclQosEntryAlloc, tmnxCardNumMdaSlots=tmnxCardNumMdaSlots, tCardResQosUserSchedsAlloc=tCardResQosUserSchedsAlloc, TmnxSlotNumOrZero=TmnxSlotNumOrZero, tmnxChassisNumPorts=tmnxChassisNumPorts, tmnxChassisNumSlots=tmnxChassisNumSlots, tmnxHwConformance=tmnxHwConformance, tmnxSyncIfTimingRef2AdminStatus=tmnxSyncIfTimingRef2AdminStatus, tmnxMcmSupportedTypes=tmnxMcmSupportedTypes, tmnxChassisNotifV13v0Group=tmnxChassisNotifV13v0Group, tmnxCcagPathEntry=tmnxCcagPathEntry, tmnxVmCardTable=tmnxVmCardTable, tFwdEngDREgrEncapExceeded=tFwdEngDREgrEncapExceeded, tmnxSyncIfTimingRef2SrcHw=tmnxSyncIfTimingRef2SrcHw, tmnxHwTemperature=tmnxHwTemperature, tmnxCpmCardVmNumCores=tmnxCpmCardVmNumCores, tmnxChassisNotifyObjsV6v0Group=tmnxChassisNotifyObjsV6v0Group, tmnxExtStandbyCpmRebootFail=tmnxExtStandbyCpmRebootFail, tmnxCardInternalSchedWghtMode=tmnxCardInternalSchedWghtMode, tmnxChassisAdminOwner=tmnxChassisAdminOwner, tFPNetIngQGrpPlcrOvrLastChgd=tFPNetIngQGrpPlcrOvrLastChgd, tmnxFPWredResvCbsMin=tmnxFPWredResvCbsMin, tmnxCpmFlashOperStatus=tmnxCpmFlashOperStatus, tmnxPhysChassisPMTableLastChange=tmnxPhysChassisPMTableLastChange, tmnxChassisV10v0Group=tmnxChassisV10v0Group, tmnxCardVCpuSchedLastClearedTime=tmnxCardVCpuSchedLastClearedTime, tMDAResEgrHsmdaSecShaperTotal=tMDAResEgrHsmdaSecShaperTotal, tmnxCpmFlashSerialNumber=tmnxCpmFlashSerialNumber, tmnxPhysChassisV13v0Group=tmnxPhysChassisV13v0Group, tmnxFPAccIngQGrpCollectStats=tmnxFPAccIngQGrpCollectStats, tmnxPhysChassisPMSupportedTypes=tmnxPhysChassisPMSupportedTypes, tSyncIfTimingAdmPTPAdminStatus=tSyncIfTimingAdmPTPAdminStatus, tmnxSyncIfTimingRef1Alarm=tmnxSyncIfTimingRef1Alarm, tmnxPhysChassisNumFans=tmnxPhysChassisNumFans, tmnxChassisPwrMgmtMode=tmnxChassisPwrMgmtMode, tmnxPlcyAcctStatsEventOvrflwClr=tmnxPlcyAcctStatsEventOvrflwClr, tmnxChassisQGrpOvrGroup=tmnxChassisQGrpOvrGroup, tmnxHwResourceMinVoltageTime=tmnxHwResourceMinVoltageTime, tmnxFPAccIngQgPStOffLPrioOcts=tmnxFPAccIngQgPStOffLPrioOcts, tmnxCardHwEventTable=tmnxCardHwEventTable, tmnxHwAdminState=tmnxHwAdminState, tFPResEgrAclFilterAlloc=tFPResEgrAclFilterAlloc, tCardResIntArbiterOvrsAlloc=tCardResIntArbiterOvrsAlloc, tmnxChassisDCCompliances=tmnxChassisDCCompliances, tmnxChassisHwV9v0Group=tmnxChassisHwV9v0Group, tmnxFPNetIngQgPStFwdOutProfPktsL=tmnxFPNetIngQgPStFwdOutProfPktsL, tmnxPlcyAcctStatsPoolExcResource=tmnxPlcyAcctStatsPoolExcResource, tFPResDynEgrClassAlloc=tFPResDynEgrClassAlloc, tmnxPhysChassisPCMAssignedType=tmnxPhysChassisPCMAssignedType, tmnxCcagTable=tmnxCcagTable, tmnxEqCardFirmwareUpgraded=tmnxEqCardFirmwareUpgraded, tSyncIfTimingAdmRef1NationalUse=tSyncIfTimingAdmRef1NationalUse, tmnxCardPchipV5v0Group=tmnxCardPchipV5v0Group, tFPNetIngQGrpArbitStatTable=tFPNetIngQGrpArbitStatTable, tmnxEqTypeNotificationRow=tmnxEqTypeNotificationRow, tmnxCcagPathCcEntry=tmnxCcagPathCcEntry, tmnxMDAEntry=tmnxMDAEntry, tmnxEqPowerSupplyInserted=tmnxEqPowerSupplyInserted, tmnxCardVmNumCores=tmnxCardVmNumCores, tmnxMDAIsaTnlStatsEntry=tmnxMDAIsaTnlStatsEntry, tmnxPowerSupplyWrongFanDir=tmnxPowerSupplyWrongFanDir, tmnxBluetoothModuleTable=tmnxBluetoothModuleTable, tmnxBluetoothPasskey=tmnxBluetoothPasskey, tmnxCardV16v0ObsoleteGroup=tmnxCardV16v0ObsoleteGroup, tmnxChassisObsoletedV15v0Group=tmnxChassisObsoletedV15v0Group, tFPResEgrUserPolicerAlloc=tFPResEgrUserPolicerAlloc, tSyncIfTimingAdmQlMin=tSyncIfTimingAdmQlMin, tFPResDynPolicerAlloc=tFPResDynPolicerAlloc, tmnxSyncIfTimingRefOrder3=tmnxSyncIfTimingRefOrder3, tmnxHsmdaMdaSchOvrGrp1Rate=tmnxHsmdaMdaSchOvrGrp1Rate, tFPResEgrUserPolicerTotal=tFPResEgrUserPolicerTotal, tmnxChassisComp7710V5v0=tmnxChassisComp7710V5v0, tmnxMdaHwEventEntry=tmnxMdaHwEventEntry, tFPNetIngQGrpPCPOvrLvl=tFPNetIngQGrpPCPOvrLvl, tmnxCardHwEventLastOccurTime=tmnxCardHwEventLastOccurTime, tmnxPhysChassisNotifGroupV14v0=tmnxPhysChassisNotifGroupV14v0, tmnxCardLevelUpgradeName=tmnxCardLevelUpgradeName, tCardResTable=tCardResTable, tmnxCardTypeIndex=tmnxCardTypeIndex, tmnxPowerSupplyWrongFanDirClear=tmnxPowerSupplyWrongFanDirClear, tmnxMDAIsaTnlStatsTable=tmnxMDAIsaTnlStatsTable, tmnxEqPowerCapacityExceededClear=tmnxEqPowerCapacityExceededClear, tmnxCardComplexBufMemError=tmnxCardComplexBufMemError, tmnxCpmCardConfigFileLastBootedHeader=tmnxCpmCardConfigFileLastBootedHeader, tmnxFPAccIngQgPStFwdInProfPkts=tmnxFPAccIngQgPStFwdInProfPkts, tmnxChassisComp7710V6v0=tmnxChassisComp7710V6v0, tmnxGnssEntry=tmnxGnssEntry, tmnxMDAHiBwMcastSource=tmnxMDAHiBwMcastSource, tmnxFPAccIngQGrpEntry=tmnxFPAccIngQGrpEntry, tmnxIPsecIsaGrpActiveIsaChgd=tmnxIPsecIsaGrpActiveIsaChgd, tmnxPhysChassisPCMGroupV15v0=tmnxPhysChassisPCMGroupV15v0, tmnxIomResStateClr=tmnxIomResStateClr, tmnxPhysChassisPEQSupportedTypes=tmnxPhysChassisPEQSupportedTypes, tmnxPhysChassisFilterDoorClosed=tmnxPhysChassisFilterDoorClosed, tFPResEgrQosEntryAlloc=tFPResEgrQosEntryAlloc, tmnxCcagAdminStatus=tmnxCcagAdminStatus, tmnxChassisUserModV7v0Group=tmnxChassisUserModV7v0Group, tmnxFPAccIngQgPStDrpHPrioOcts=tmnxFPAccIngQgPStDrpHPrioOcts, tmnxPhysChassisFanSpeed=tmnxPhysChassisFanSpeed, tSyncIfTimingAdmChanged=tSyncIfTimingAdmChanged, tFPNetIngQGrpPlcrOvrPktOffset=tFPNetIngQGrpPlcrOvrPktOffset, tmnxCardCmplx1MemParityOccur=tmnxCardCmplx1MemParityOccur, tmnxMDAEquippedType=tmnxMDAEquippedType, tmnxCardTypeTable=tmnxCardTypeTable, tmnxPhysChassPowerSupId=tmnxPhysChassPowerSupId, tmnxFPAccIngQGrpName=tmnxFPAccIngQGrpName, tmnxCardAssignedLevelUpgradeId=tmnxCardAssignedLevelUpgradeId, tmnxCcagPathLastChanged=tmnxCcagPathLastChanged, tmnxHwIndex=tmnxHwIndex, tmnxCardHardResetUnsupMdas=tmnxCardHardResetUnsupMdas, tmnxCardLevelUpgradeIndex=tmnxCardLevelUpgradeIndex, tSyncIfTimingAdmRefOrder1=tSyncIfTimingAdmRefOrder1, tmnxIPsecIsaGrpId=tmnxIPsecIsaGrpId)