# -*- coding: utf-8 -*-
from distutils.core import setup

package_dir = \
{'': 'src'}

packages = \
['shellhistory']

package_data = \
{'': ['*'],
 'shellhistory': ['static/css/*',
                  'static/js/*',
                  'templates/*',
                  'templates/admin/*']}

install_requires = \
['Flask-Admin>=1.5,<2.0',
 'flask>=1.0,<2.0',
 'sqlalchemy>=1.3,<2.0',
 'tqdm>=4.28,<5.0']

entry_points = \
{'console_scripts': ['shellhistory-cli = shellhistory.cli:main',
                     'shellhistory-location = shellhistory.cli:location',
                     'shellhistory-web = shellhistory.cli:web']}

setup_kwargs = {
    'name': 'shellhistory',
    'version': '0.2.4',
    'description': ' Visualize your shell usage with Highcharts!',
    'long_description': '# Shell History\n[![pipeline status](https://gitlab.com/pawamoy/shell-history/badges/master/pipeline.svg)](https://gitlab.com/pawamoy/shell-history/commits/master)\n\nInspired by [bamos/zsh-history-analysis](https://github.com/bamos/zsh-history-analysis).\n\nVisualize your usage of Bash/Zsh through a web app\nthanks to [Flask](http://flask.pocoo.org/) and [Highcharts](https://www.highcharts.com/)!\n\n<table>\n  <tr align="center">\n    <td>Duration<img alt="duration chart" src="pictures/duration.png" /></td>\n    <td>Length<img alt="length chart" src="pictures/length.png" /></td>\n    <td>Type<img alt="type chart" src="pictures/type.png" /></td>\n  </tr>\n  <tr align="center">\n    <td>Exit code<img alt="exit code chart" src="pictures/exit_code.png" /></td>\n    <td>Hourly<img alt="hourly chart" src="pictures/avg_hourly.png" /></td>\n    <td>Daily<img alt="daily chart" src="pictures/avg_daily.png" /></td>\n  </tr>\n  <tr align="center">\n    <td>Over time<img alt="over time chart" src="pictures/over_time.png" /></td>\n    <td>Markov chain<img alt="markov chart" src="pictures/markov.png" /></td>\n    <td>Top commands<img alt="top chart" src="pictures/top.png" /></td>\n  </tr>\n</table>\n\n<p align="center"><i>Post your charts ideas in <a href="https://github.com/pawamoy/shell-history/issues/9">this issue</a>!</i></p>\n\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Setup](#setup)\n- [Usage](#usage)\n- [Some technical info](#some-technical-info)\n  - [How it works](#how-it-works)\n  - [History file format](#history-file-format)\n  - [How we get the values](#how-we-get-the-values)\n- [License](#license)\n\n## Requirements\n`shellhistory` requires Python 3.6 or above.\n\n<details>\n<summary>To install Python 3.6, I recommend using <a href="https://github.com/pyenv/pyenv"><code>pyenv</code></a>.</summary>\n\n```bash\n# install pyenv\ngit clone https://github.com/pyenv/pyenv ~/.pyenv\n\n# setup pyenv (you should also put these two lines in .bashrc or similar)\nexport PATH="${HOME}/.pyenv/bin:${PATH}"\neval "$(pyenv init -)"\n\n# install Python 3.6\npyenv install 3.6.7\n\n# make it available globally\npyenv global system 3.6.7\n```\n</details>\n\n## Installation\nWith `pip`:\n```bash\npython3.6 -m pip install shellhistory\n```\n\nWith [`pipx`](https://github.com/pipxproject/pipx):\n```bash\npython3 -m pip install --user pipx\n\npipx install --python python3.6 shellhistory\n```\n\n## Setup\n`shellhistory` needs a lot of info to be able to display various charts.\nThe basic shell history is not enough. In order to generate the necessary\ninformation, you have to enable the shell extension.\n\nAt shell startup, in `.bashrc` or `.zshrc`, put the following:\n\n```bash\n# only load it for interactive shells\nif [[ $- == *i* ]] && command -v shellhistory-location &>/dev/null; then\n    . $(shellhistory-location)\n    shellhistory enable\nfi\n```\n\n... and now use your shell normally!\n\nIf you want to stop `shellhistory`, simply run `shellhistory disable`.\n\n**Note:** *for performance reasons, you can also use the static,\nabsolute path to the source file.\nIndeed, calling `shellhistory-location` spawns a Python process\nwhich can slow down your shell startup.\nGet the path once with `shellhistory-location`, and use `. <ABS_PATH>`.\nIn my case it\'s `. ~/.local/pipx/venvs/shellhistory/lib/python3.6/site-packages/shellhistory/shellhistory.sh`.*\n\n## Usage\nLaunch the web app with `shellhistory-web`.\nNow go to [http://localhost:5000/](http://localhost:5000/) and enjoy!\n\nYou will need Internet connection since assets are not bundled.\n\n## Some technical info\n### How it works\nWhen you enter a command, `shellhistory` will compute values\n*before* and *after* the command execution.\nIn Bash, it uses a trap on DEBUG and the PROMPT_COMMAND variable\n(`man bash` for more information).\nFor Zsh, it uses the preexec_functions and precmd_functions arrays\n(anyone knows where to find the official documentation for these?\nSome information in `man zshmisc`).\n\nBefore the command is executed, we start a timer, compute the command type,\nand store the current working directory and the command itself.\n\nAfter the command has finished, we store the return code, and stop the timer.\n\n### History file format\nFields saved along commands are start and stop timestamps, hostname, username,\nuuid (generated), tty, process\' parents, shell, shell level, command type,\nreturn code, and working directory (path), in the following format:\n`:start:stop:uuid:parents:host:user:tty:path:shell:level:type:code:command`.\n\n- multi-line commands are prepended with a semi-colon `;` instead of a colon `:`,\n  starting at second line\n- start and stop timestamps are in microseconds since epoch\n- process\' parents and working directory are encoded in base64 to avoid\n  delimiter corruption.\n\nExample (multi-line command):\n\n```\n:1510588139930150:1510588139936608:40701d9b-1807-4a3e-994b-dde68692aa14:L2Jpbi9iYXNoCi91c3IvYmluL3B5dGhvbiAvdXNyL2Jpbi94LXRlcm1pbmFsLWVtdWxhdG9yCi91c3IvYmluL29wZW5ib3ggLS1zdGFydHVwIC91c3IvbGliL3g4Nl82NC1saW51eC1nbnUvb3BlbmJveC1hdXRvc3RhcnQgT1BFTkJPWApsaWdodGRtIC0tc2Vzc2lvbi1jaGlsZCAxMiAyMQovdXNyL3NiaW4vbGlnaHRkbQovc2Jpbi9pbml0Cg==:myhost:pawamoy:/dev/pts/1:L21lZGlhL3Bhd2Ftb3kvRGF0YS9naXQvc2hlbGxoaXN0Cg==:/bin/bash:1:builtin:0:echo "a\n;b\n;c" | wc -c\n```\n\n**Note:** later we could use CSV formatting, quoting\nstrings and doubling double-quotes in those if any.\nIt would make the file more readable for humans,\nand easily importable in other programs.\nSee [issue 26](https://github.com/pawamoy/shell-history/issues/26).\n\nThe previous example would look like this:\n```\n1510588139930150,1510588139936608,40701d9b-1807-4a3e-994b-dde68692aa14,"/bin/bash\n/usr/bin/python /usr/bin/x-terminal-emulator\n/usr/bin/openbox --startup /usr/lib/x86_64-linux-gnu/openbox-autostart OPENBOX\nlightdm --session-child 12 21\n/usr/sbin/lightdm\n/sbin/init",myhost,pawamoy,/dev/pts/1,"/media/pawamoy/Data/git/shellhist",/bin/bash,1,builtin,0,"echo ""a\nb\nc"" | wc -c"\n```\n\n### How we get the values\nStart and stop time are obtained with `date \'+%s%N\'`, return code is passed\ndirectly with `$?`, working directory is obtained with `$PWD` and command\ntype with `type` for Bash and `whence` for Zsh.\n\nValues for UUID, parents, hostname, and TTY are computed only once, when\n`shellhistory.sh` is sourced. Indeed they do not change during usage of the current\nshell process. Hostname and TTY are obtained through commands `hostname` and\n`tty`. UUID is generated with command `uuidgen`. Also note that UUID\nis exported in subshells so we know which shell is a subprocess of another, and\nso we are able to group shell processes by "sessions", a session being an opened\nterminal (be it a tab, window, pane or else). Parents are obtained with a\nfunction that iteratively greps `ps` result with PIDs (see `shellhistory.sh`).\n\nValues for user, shell, and level are simply obtained through environment\nvariables: `$USER`, `$SHELL` (though its use here is incorrect:\nsee [issue 24](https://github.com/pawamoy/shell-history/issues/24)),\nand `$SHLVL` (also see [issue 25](https://github.com/pawamoy/shell-history/issues/25)).\n\nThe last command is obtained with the command `fc`.\nUsing `fc` allows `shellhistory` to have the same behavior as your history:\n- if commands starting with spaces are ignored, they will be ignored\n  in `shellhistory` as well.\n- same for duplicates (entering `ls` two or more times\n  saves only the first instance). Note however that if you type the same command\n  as the previous one in an other terminal, it will still be appended,\n  unless you manage to synchronize your history between terminals,\n  which is another story.\n\nAdditionally, if you enter an empty line,\nor hit Control-C before enter, nothing will be appended either.\nThe trick behind this is to check the command number in the current history\n(see `shellhistory.sh` for technical details).\n\n## License\nSoftware licensed under the\n[ISC](https://www.isc.org/downloads/software-support-policy/isc-license/)\nlicense. See the [LICENSE](/LICENSE) file.\n',
    'author': 'TimothÃ©e Mazzucotelli',
    'author_email': 'pawamoy@pm.me',
    'url': 'https://github.com/pawamoy/shell-history',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
