# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusIdxPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusIdxPy')
    _VisusIdxPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusIdxPy', [dirname(__file__)])
        except ImportError:
            import _VisusIdxPy
            return _VisusIdxPy
        try:
            _mod = imp.load_module('_VisusIdxPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusIdxPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusIdxPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusIdxPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusIdxPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusIdxPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusIdxPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusIdxPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusIdxPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusIdxPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusIdxPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusIdxPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusIdxPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusIdxPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusIdxPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusIdxPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusIdxPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusIdxPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusIdxPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusIdxPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusIdxPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusIdxPy.SHARED_PTR_DISOWN
class PairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusIdxPy.new_PairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusIdxPy.PairDoubleDouble_first_set
    __swig_getmethods__["first"] = _VisusIdxPy.PairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_VisusIdxPy.PairDoubleDouble_first_get, _VisusIdxPy.PairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _VisusIdxPy.PairDoubleDouble_second_set
    __swig_getmethods__["second"] = _VisusIdxPy.PairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_VisusIdxPy.PairDoubleDouble_second_get, _VisusIdxPy.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusIdxPy.delete_PairDoubleDouble
    __del__ = lambda self: None
PairDoubleDouble_swigregister = _VisusIdxPy.PairDoubleDouble_swigregister
PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusIdxPy.new_PairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusIdxPy.PairIntDouble_first_set
    __swig_getmethods__["first"] = _VisusIdxPy.PairIntDouble_first_get
    if _newclass:
        first = _swig_property(_VisusIdxPy.PairIntDouble_first_get, _VisusIdxPy.PairIntDouble_first_set)
    __swig_setmethods__["second"] = _VisusIdxPy.PairIntDouble_second_set
    __swig_getmethods__["second"] = _VisusIdxPy.PairIntDouble_second_get
    if _newclass:
        second = _swig_property(_VisusIdxPy.PairIntDouble_second_get, _VisusIdxPy.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusIdxPy.delete_PairIntDouble
    __del__ = lambda self: None
PairIntDouble_swigregister = _VisusIdxPy.PairIntDouble_swigregister
PairIntDouble_swigregister(PairIntDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.VectorString___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.VectorString___bool__(self)

    def __len__(self):
        return _VisusIdxPy.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _VisusIdxPy.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusIdxPy.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusIdxPy.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusIdxPy.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusIdxPy.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusIdxPy.VectorString___setitem__(self, *args)

    def pop(self):
        return _VisusIdxPy.VectorString_pop(self)

    def append(self, x):
        return _VisusIdxPy.VectorString_append(self, x)

    def empty(self):
        return _VisusIdxPy.VectorString_empty(self)

    def size(self):
        return _VisusIdxPy.VectorString_size(self)

    def swap(self, v):
        return _VisusIdxPy.VectorString_swap(self, v)

    def begin(self):
        return _VisusIdxPy.VectorString_begin(self)

    def end(self):
        return _VisusIdxPy.VectorString_end(self)

    def rbegin(self):
        return _VisusIdxPy.VectorString_rbegin(self)

    def rend(self):
        return _VisusIdxPy.VectorString_rend(self)

    def clear(self):
        return _VisusIdxPy.VectorString_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.VectorString_get_allocator(self)

    def pop_back(self):
        return _VisusIdxPy.VectorString_pop_back(self)

    def erase(self, *args):
        return _VisusIdxPy.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _VisusIdxPy.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusIdxPy.VectorString_push_back(self, x)

    def front(self):
        return _VisusIdxPy.VectorString_front(self)

    def back(self):
        return _VisusIdxPy.VectorString_back(self)

    def assign(self, n, x):
        return _VisusIdxPy.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _VisusIdxPy.VectorString_resize(self, *args)

    def insert(self, *args):
        return _VisusIdxPy.VectorString_insert(self, *args)

    def reserve(self, n):
        return _VisusIdxPy.VectorString_reserve(self, n)

    def capacity(self):
        return _VisusIdxPy.VectorString_capacity(self)
    __swig_destroy__ = _VisusIdxPy.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _VisusIdxPy.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.VectorInt___bool__(self)

    def __len__(self):
        return _VisusIdxPy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusIdxPy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusIdxPy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusIdxPy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusIdxPy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusIdxPy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusIdxPy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusIdxPy.VectorInt_pop(self)

    def append(self, x):
        return _VisusIdxPy.VectorInt_append(self, x)

    def empty(self):
        return _VisusIdxPy.VectorInt_empty(self)

    def size(self):
        return _VisusIdxPy.VectorInt_size(self)

    def swap(self, v):
        return _VisusIdxPy.VectorInt_swap(self, v)

    def begin(self):
        return _VisusIdxPy.VectorInt_begin(self)

    def end(self):
        return _VisusIdxPy.VectorInt_end(self)

    def rbegin(self):
        return _VisusIdxPy.VectorInt_rbegin(self)

    def rend(self):
        return _VisusIdxPy.VectorInt_rend(self)

    def clear(self):
        return _VisusIdxPy.VectorInt_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusIdxPy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusIdxPy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _VisusIdxPy.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusIdxPy.VectorInt_push_back(self, x)

    def front(self):
        return _VisusIdxPy.VectorInt_front(self)

    def back(self):
        return _VisusIdxPy.VectorInt_back(self)

    def assign(self, n, x):
        return _VisusIdxPy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusIdxPy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusIdxPy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusIdxPy.VectorInt_reserve(self, n)

    def capacity(self):
        return _VisusIdxPy.VectorInt_capacity(self)
    __swig_destroy__ = _VisusIdxPy.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _VisusIdxPy.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.VectorDouble___bool__(self)

    def __len__(self):
        return _VisusIdxPy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusIdxPy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusIdxPy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusIdxPy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusIdxPy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusIdxPy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusIdxPy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusIdxPy.VectorDouble_pop(self)

    def append(self, x):
        return _VisusIdxPy.VectorDouble_append(self, x)

    def empty(self):
        return _VisusIdxPy.VectorDouble_empty(self)

    def size(self):
        return _VisusIdxPy.VectorDouble_size(self)

    def swap(self, v):
        return _VisusIdxPy.VectorDouble_swap(self, v)

    def begin(self):
        return _VisusIdxPy.VectorDouble_begin(self)

    def end(self):
        return _VisusIdxPy.VectorDouble_end(self)

    def rbegin(self):
        return _VisusIdxPy.VectorDouble_rbegin(self)

    def rend(self):
        return _VisusIdxPy.VectorDouble_rend(self)

    def clear(self):
        return _VisusIdxPy.VectorDouble_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusIdxPy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusIdxPy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _VisusIdxPy.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusIdxPy.VectorDouble_push_back(self, x)

    def front(self):
        return _VisusIdxPy.VectorDouble_front(self)

    def back(self):
        return _VisusIdxPy.VectorDouble_back(self)

    def assign(self, n, x):
        return _VisusIdxPy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusIdxPy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusIdxPy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusIdxPy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusIdxPy.VectorDouble_capacity(self)
    __swig_destroy__ = _VisusIdxPy.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _VisusIdxPy.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.VectorFloat___bool__(self)

    def __len__(self):
        return _VisusIdxPy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusIdxPy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusIdxPy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusIdxPy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusIdxPy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusIdxPy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusIdxPy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusIdxPy.VectorFloat_pop(self)

    def append(self, x):
        return _VisusIdxPy.VectorFloat_append(self, x)

    def empty(self):
        return _VisusIdxPy.VectorFloat_empty(self)

    def size(self):
        return _VisusIdxPy.VectorFloat_size(self)

    def swap(self, v):
        return _VisusIdxPy.VectorFloat_swap(self, v)

    def begin(self):
        return _VisusIdxPy.VectorFloat_begin(self)

    def end(self):
        return _VisusIdxPy.VectorFloat_end(self)

    def rbegin(self):
        return _VisusIdxPy.VectorFloat_rbegin(self)

    def rend(self):
        return _VisusIdxPy.VectorFloat_rend(self)

    def clear(self):
        return _VisusIdxPy.VectorFloat_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusIdxPy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusIdxPy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _VisusIdxPy.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusIdxPy.VectorFloat_push_back(self, x)

    def front(self):
        return _VisusIdxPy.VectorFloat_front(self)

    def back(self):
        return _VisusIdxPy.VectorFloat_back(self)

    def assign(self, n, x):
        return _VisusIdxPy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusIdxPy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusIdxPy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusIdxPy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusIdxPy.VectorFloat_capacity(self)
    __swig_destroy__ = _VisusIdxPy.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _VisusIdxPy.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.MapStringString___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.MapStringString___bool__(self)

    def __len__(self):
        return _VisusIdxPy.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusIdxPy.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusIdxPy.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _VisusIdxPy.MapStringString_has_key(self, key)

    def keys(self):
        return _VisusIdxPy.MapStringString_keys(self)

    def values(self):
        return _VisusIdxPy.MapStringString_values(self)

    def items(self):
        return _VisusIdxPy.MapStringString_items(self)

    def __contains__(self, key):
        return _VisusIdxPy.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _VisusIdxPy.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _VisusIdxPy.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusIdxPy.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _VisusIdxPy.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _VisusIdxPy.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _VisusIdxPy.MapStringString_empty(self)

    def size(self):
        return _VisusIdxPy.MapStringString_size(self)

    def swap(self, v):
        return _VisusIdxPy.MapStringString_swap(self, v)

    def begin(self):
        return _VisusIdxPy.MapStringString_begin(self)

    def end(self):
        return _VisusIdxPy.MapStringString_end(self)

    def rbegin(self):
        return _VisusIdxPy.MapStringString_rbegin(self)

    def rend(self):
        return _VisusIdxPy.MapStringString_rend(self)

    def clear(self):
        return _VisusIdxPy.MapStringString_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.MapStringString_get_allocator(self)

    def count(self, x):
        return _VisusIdxPy.MapStringString_count(self, x)

    def erase(self, *args):
        return _VisusIdxPy.MapStringString_erase(self, *args)

    def find(self, x):
        return _VisusIdxPy.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _VisusIdxPy.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusIdxPy.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _VisusIdxPy.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _VisusIdxPy.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

import VisusKernelPy
import VisusDbPy
class IdxModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusIdxPy.IdxModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusIdxPy.IdxModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusIdxPy.IdxModule_bAttached_get, _VisusIdxPy.IdxModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusIdxPy.IdxModule_attach)
    else:
        attach = _VisusIdxPy.IdxModule_attach
    if _newclass:
        detach = staticmethod(_VisusIdxPy.IdxModule_detach)
    else:
        detach = _VisusIdxPy.IdxModule_detach

    def __init__(self):
        this = _VisusIdxPy.new_IdxModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusIdxPy.delete_IdxModule
    __del__ = lambda self: None
IdxModule_swigregister = _VisusIdxPy.IdxModule_swigregister
IdxModule_swigregister(IdxModule)
cvar = _VisusIdxPy.cvar

def IdxModule_attach():
    return _VisusIdxPy.IdxModule_attach()
IdxModule_attach = _VisusIdxPy.IdxModule_attach

def IdxModule_detach():
    return _VisusIdxPy.IdxModule_detach()
IdxModule_detach = _VisusIdxPy.IdxModule_detach

class IdxFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdxFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _VisusIdxPy.IdxFile_version_set
    __swig_getmethods__["version"] = _VisusIdxPy.IdxFile_version_get
    if _newclass:
        version = _swig_property(_VisusIdxPy.IdxFile_version_get, _VisusIdxPy.IdxFile_version_set)
    __swig_setmethods__["bitmask"] = _VisusIdxPy.IdxFile_bitmask_set
    __swig_getmethods__["bitmask"] = _VisusIdxPy.IdxFile_bitmask_get
    if _newclass:
        bitmask = _swig_property(_VisusIdxPy.IdxFile_bitmask_get, _VisusIdxPy.IdxFile_bitmask_set)
    __swig_setmethods__["box"] = _VisusIdxPy.IdxFile_box_set
    __swig_getmethods__["box"] = _VisusIdxPy.IdxFile_box_get
    if _newclass:
        box = _swig_property(_VisusIdxPy.IdxFile_box_get, _VisusIdxPy.IdxFile_box_set)
    __swig_setmethods__["fields"] = _VisusIdxPy.IdxFile_fields_set
    __swig_getmethods__["fields"] = _VisusIdxPy.IdxFile_fields_get
    if _newclass:
        fields = _swig_property(_VisusIdxPy.IdxFile_fields_get, _VisusIdxPy.IdxFile_fields_set)
    __swig_setmethods__["timesteps"] = _VisusIdxPy.IdxFile_timesteps_set
    __swig_getmethods__["timesteps"] = _VisusIdxPy.IdxFile_timesteps_get
    if _newclass:
        timesteps = _swig_property(_VisusIdxPy.IdxFile_timesteps_get, _VisusIdxPy.IdxFile_timesteps_set)
    __swig_setmethods__["bitsperblock"] = _VisusIdxPy.IdxFile_bitsperblock_set
    __swig_getmethods__["bitsperblock"] = _VisusIdxPy.IdxFile_bitsperblock_get
    if _newclass:
        bitsperblock = _swig_property(_VisusIdxPy.IdxFile_bitsperblock_get, _VisusIdxPy.IdxFile_bitsperblock_set)
    __swig_setmethods__["blocksperfile"] = _VisusIdxPy.IdxFile_blocksperfile_set
    __swig_getmethods__["blocksperfile"] = _VisusIdxPy.IdxFile_blocksperfile_get
    if _newclass:
        blocksperfile = _swig_property(_VisusIdxPy.IdxFile_blocksperfile_get, _VisusIdxPy.IdxFile_blocksperfile_set)
    __swig_setmethods__["block_interleaving"] = _VisusIdxPy.IdxFile_block_interleaving_set
    __swig_getmethods__["block_interleaving"] = _VisusIdxPy.IdxFile_block_interleaving_get
    if _newclass:
        block_interleaving = _swig_property(_VisusIdxPy.IdxFile_block_interleaving_get, _VisusIdxPy.IdxFile_block_interleaving_set)
    __swig_setmethods__["filename_template"] = _VisusIdxPy.IdxFile_filename_template_set
    __swig_getmethods__["filename_template"] = _VisusIdxPy.IdxFile_filename_template_get
    if _newclass:
        filename_template = _swig_property(_VisusIdxPy.IdxFile_filename_template_get, _VisusIdxPy.IdxFile_filename_template_set)
    __swig_setmethods__["time_template"] = _VisusIdxPy.IdxFile_time_template_set
    __swig_getmethods__["time_template"] = _VisusIdxPy.IdxFile_time_template_get
    if _newclass:
        time_template = _swig_property(_VisusIdxPy.IdxFile_time_template_get, _VisusIdxPy.IdxFile_time_template_set)
    __swig_setmethods__["scene"] = _VisusIdxPy.IdxFile_scene_set
    __swig_getmethods__["scene"] = _VisusIdxPy.IdxFile_scene_get
    if _newclass:
        scene = _swig_property(_VisusIdxPy.IdxFile_scene_get, _VisusIdxPy.IdxFile_scene_set)

    def __init__(self, version_=0):
        this = _VisusIdxPy.new_IdxFile(version_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_VisusIdxPy.IdxFile_invalid)
    else:
        invalid = _VisusIdxPy.IdxFile_invalid
    if _newclass:
        load = staticmethod(_VisusIdxPy.IdxFile_load)
    else:
        load = _VisusIdxPy.IdxFile_load

    def valid(self):
        return _VisusIdxPy.IdxFile_valid(self)

    def save(self, filename):
        return _VisusIdxPy.IdxFile_save(self, filename)
    if _newclass:
        parseFields = staticmethod(_VisusIdxPy.IdxFile_parseFields)
    else:
        parseFields = _VisusIdxPy.IdxFile_parseFields

    def getBlockPositionInFile(self, blockid):
        return _VisusIdxPy.IdxFile_getBlockPositionInFile(self, blockid)

    def getFirstBlockInFile(self, blockid):
        return _VisusIdxPy.IdxFile_getFirstBlockInFile(self, blockid)

    def validate(self, url):
        return _VisusIdxPy.IdxFile_validate(self, url)

    def toString(self):
        return _VisusIdxPy.IdxFile_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusIdxPy.IdxFile_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusIdxPy.IdxFile_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusIdxPy.delete_IdxFile
    __del__ = lambda self: None
IdxFile_swigregister = _VisusIdxPy.IdxFile_swigregister
IdxFile_swigregister(IdxFile)

def IdxFile_invalid():
    return _VisusIdxPy.IdxFile_invalid()
IdxFile_invalid = _VisusIdxPy.IdxFile_invalid

def IdxFile_load(url):
    return _VisusIdxPy.IdxFile_load(url)
IdxFile_load = _VisusIdxPy.IdxFile_load

def IdxFile_parseFields(content):
    return _VisusIdxPy.IdxFile_parseFields(content)
IdxFile_parseFields = _VisusIdxPy.IdxFile_parseFields

class IdxDataset(VisusDbPy.Dataset):
    __swig_setmethods__ = {}
    for _s in [VisusDbPy.Dataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDbPy.Dataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxDataset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["idxfile"] = _VisusIdxPy.IdxDataset_idxfile_set
    __swig_getmethods__["idxfile"] = _VisusIdxPy.IdxDataset_idxfile_get
    if _newclass:
        idxfile = _swig_property(_VisusIdxPy.IdxDataset_idxfile_get, _VisusIdxPy.IdxDataset_idxfile_set)
    __swig_setmethods__["hzaddress_conversion_boxquery"] = _VisusIdxPy.IdxDataset_hzaddress_conversion_boxquery_set
    __swig_getmethods__["hzaddress_conversion_boxquery"] = _VisusIdxPy.IdxDataset_hzaddress_conversion_boxquery_get
    if _newclass:
        hzaddress_conversion_boxquery = _swig_property(_VisusIdxPy.IdxDataset_hzaddress_conversion_boxquery_get, _VisusIdxPy.IdxDataset_hzaddress_conversion_boxquery_set)
    __swig_setmethods__["hzaddress_conversion_pointquery"] = _VisusIdxPy.IdxDataset_hzaddress_conversion_pointquery_set
    __swig_getmethods__["hzaddress_conversion_pointquery"] = _VisusIdxPy.IdxDataset_hzaddress_conversion_pointquery_get
    if _newclass:
        hzaddress_conversion_pointquery = _swig_property(_VisusIdxPy.IdxDataset_hzaddress_conversion_pointquery_get, _VisusIdxPy.IdxDataset_hzaddress_conversion_pointquery_set)

    def __init__(self):
        this = _VisusIdxPy.new_IdxDataset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusIdxPy.delete_IdxDataset
    __del__ = lambda self: None

    def getTypeName(self):
        return _VisusIdxPy.IdxDataset_getTypeName(self)

    def clone(self):
        return _VisusIdxPy.IdxDataset_clone(self)
    if _newclass:
        tryRemoveLockAndCorruptedBinaryFiles = staticmethod(_VisusIdxPy.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles)
    else:
        tryRemoveLockAndCorruptedBinaryFiles = _VisusIdxPy.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles

    def removeFiles(self, maxh=-1):
        return _VisusIdxPy.IdxDataset_removeFiles(self, maxh)

    def compressDataset(self, compression):
        return _VisusIdxPy.IdxDataset_compressDataset(self, compression)

    def getLevelBox(self, *args):
        return _VisusIdxPy.IdxDataset_getLevelBox(self, *args)

    def adjustFilterBox(self, query, filter, box, H):
        return _VisusIdxPy.IdxDataset_adjustFilterBox(self, query, filter, box, H)

    def createEquivalentQuery(self, mode, block_query):
        return _VisusIdxPy.IdxDataset_createEquivalentQuery(self, mode, block_query)

    def setIdxFile(self, value):
        return _VisusIdxPy.IdxDataset_setIdxFile(self, value)
    if _newclass:
        createDatasetFromBuffer = staticmethod(_VisusIdxPy.IdxDataset_createDatasetFromBuffer)
    else:
        createDatasetFromBuffer = _VisusIdxPy.IdxDataset_createDatasetFromBuffer

    def openFromUrl(self, url):
        return _VisusIdxPy.IdxDataset_openFromUrl(self, url)

    def createAccess(self, *args):
        return _VisusIdxPy.IdxDataset_createAccess(self, *args)

    def getAddressRangeBox(self, *args):
        return _VisusIdxPy.IdxDataset_getAddressRangeBox(self, *args)

    def convertBlockQueryToRowMajor(self, block_query):
        return _VisusIdxPy.IdxDataset_convertBlockQueryToRowMajor(self, block_query)

    def createQueryFilter(self, field):
        return _VisusIdxPy.IdxDataset_createQueryFilter(self, field)

    def beginQuery(self, query):
        return _VisusIdxPy.IdxDataset_beginQuery(self, query)

    def executeQuery(self, access, query):
        return _VisusIdxPy.IdxDataset_executeQuery(self, access, query)

    def nextQuery(self, query):
        return _VisusIdxPy.IdxDataset_nextQuery(self, query)

    def mergeQueryWithBlock(self, query, block_query):
        return _VisusIdxPy.IdxDataset_mergeQueryWithBlock(self, query, block_query)

    def createPureRemoteQueryNetRequest(self, query):
        return _VisusIdxPy.IdxDataset_createPureRemoteQueryNetRequest(self, query)
IdxDataset_swigregister = _VisusIdxPy.IdxDataset_swigregister
IdxDataset_swigregister(IdxDataset)

def IdxDataset_tryRemoveLockAndCorruptedBinaryFiles(directory):
    return _VisusIdxPy.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles(directory)
IdxDataset_tryRemoveLockAndCorruptedBinaryFiles = _VisusIdxPy.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles

def IdxDataset_createDatasetFromBuffer(*args):
    return _VisusIdxPy.IdxDataset_createDatasetFromBuffer(*args)
IdxDataset_createDatasetFromBuffer = _VisusIdxPy.IdxDataset_createDatasetFromBuffer

class IdxMultipleDataset(IdxDataset):
    __swig_setmethods__ = {}
    for _s in [IdxDataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxMultipleDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [IdxDataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxMultipleDataset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bMosaic"] = _VisusIdxPy.IdxMultipleDataset_bMosaic_set
    __swig_getmethods__["bMosaic"] = _VisusIdxPy.IdxMultipleDataset_bMosaic_get
    if _newclass:
        bMosaic = _swig_property(_VisusIdxPy.IdxMultipleDataset_bMosaic_get, _VisusIdxPy.IdxMultipleDataset_bMosaic_set)
    __swig_setmethods__["childs"] = _VisusIdxPy.IdxMultipleDataset_childs_set
    __swig_getmethods__["childs"] = _VisusIdxPy.IdxMultipleDataset_childs_get
    if _newclass:
        childs = _swig_property(_VisusIdxPy.IdxMultipleDataset_childs_get, _VisusIdxPy.IdxMultipleDataset_childs_set)

    def __init__(self):
        this = _VisusIdxPy.new_IdxMultipleDataset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusIdxPy.delete_IdxMultipleDataset
    __del__ = lambda self: None

    def getTypeName(self):
        return _VisusIdxPy.IdxMultipleDataset_getTypeName(self)

    def clone(self):
        return _VisusIdxPy.IdxMultipleDataset_clone(self)

    def getChild(self, name):
        return _VisusIdxPy.IdxMultipleDataset_getChild(self, name)

    def getFirstDataset(self):
        return _VisusIdxPy.IdxMultipleDataset_getFirstDataset(self)

    def addChild(self, value):
        return _VisusIdxPy.IdxMultipleDataset_addChild(self, value)

    def computeDefaultFields(self):
        return _VisusIdxPy.IdxMultipleDataset_computeDefaultFields(self)

    def openFromUrl(self, URL):
        return _VisusIdxPy.IdxMultipleDataset_openFromUrl(self, URL)

    def getInnerDatasets(self):
        return _VisusIdxPy.IdxMultipleDataset_getInnerDatasets(self)

    def getFieldByNameThrowEx(self, name):
        return _VisusIdxPy.IdxMultipleDataset_getFieldByNameThrowEx(self, name)

    def createAccess(self, *args):
        return _VisusIdxPy.IdxMultipleDataset_createAccess(self, *args)

    def createQueryFilter(self, FIELD):
        return _VisusIdxPy.IdxMultipleDataset_createQueryFilter(self, FIELD)

    def beginQuery(self, QUERY):
        return _VisusIdxPy.IdxMultipleDataset_beginQuery(self, QUERY)

    def executeQuery(self, ACCESS, QUERY):
        return _VisusIdxPy.IdxMultipleDataset_executeQuery(self, ACCESS, QUERY)

    def nextQuery(self, QUERY):
        return _VisusIdxPy.IdxMultipleDataset_nextQuery(self, QUERY)

    def sameLogicSpace(self, child):
        return _VisusIdxPy.IdxMultipleDataset_sameLogicSpace(self, child)

    def createIdxFile(self, idx_filename, idx_field):
        return _VisusIdxPy.IdxMultipleDataset_createIdxFile(self, idx_filename, idx_field)
IdxMultipleDataset_swigregister = _VisusIdxPy.IdxMultipleDataset_swigregister
IdxMultipleDataset_swigregister(IdxMultipleDataset)

# This file is compatible with both classic and new-style classes.


