# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusKernelPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusKernelPy')
    _VisusKernelPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusKernelPy', [dirname(__file__)])
        except ImportError:
            import _VisusKernelPy
            return _VisusKernelPy
        try:
            _mod = imp.load_module('_VisusKernelPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusKernelPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusKernelPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusKernelPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusKernelPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusKernelPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusKernelPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusKernelPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusKernelPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusKernelPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusKernelPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusKernelPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusKernelPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusKernelPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusKernelPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusKernelPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusKernelPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusKernelPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusKernelPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusKernelPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusKernelPy.SHARED_PTR_DISOWN
class PairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_PairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusKernelPy.PairDoubleDouble_first_set
    __swig_getmethods__["first"] = _VisusKernelPy.PairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_VisusKernelPy.PairDoubleDouble_first_get, _VisusKernelPy.PairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _VisusKernelPy.PairDoubleDouble_second_set
    __swig_getmethods__["second"] = _VisusKernelPy.PairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_VisusKernelPy.PairDoubleDouble_second_get, _VisusKernelPy.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusKernelPy.delete_PairDoubleDouble
    __del__ = lambda self: None
PairDoubleDouble_swigregister = _VisusKernelPy.PairDoubleDouble_swigregister
PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_PairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusKernelPy.PairIntDouble_first_set
    __swig_getmethods__["first"] = _VisusKernelPy.PairIntDouble_first_get
    if _newclass:
        first = _swig_property(_VisusKernelPy.PairIntDouble_first_get, _VisusKernelPy.PairIntDouble_first_set)
    __swig_setmethods__["second"] = _VisusKernelPy.PairIntDouble_second_set
    __swig_getmethods__["second"] = _VisusKernelPy.PairIntDouble_second_get
    if _newclass:
        second = _swig_property(_VisusKernelPy.PairIntDouble_second_get, _VisusKernelPy.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusKernelPy.delete_PairIntDouble
    __del__ = lambda self: None
PairIntDouble_swigregister = _VisusKernelPy.PairIntDouble_swigregister
PairIntDouble_swigregister(PairIntDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorString___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorString___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorString___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorString_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorString_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorString_empty(self)

    def size(self):
        return _VisusKernelPy.VectorString_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorString_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorString_begin(self)

    def end(self):
        return _VisusKernelPy.VectorString_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorString_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorString_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorString_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorString_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorString_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorString_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorString_front(self)

    def back(self):
        return _VisusKernelPy.VectorString_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorString_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorString_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorString_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorString_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _VisusKernelPy.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorInt___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorInt_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorInt_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorInt_empty(self)

    def size(self):
        return _VisusKernelPy.VectorInt_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorInt_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorInt_begin(self)

    def end(self):
        return _VisusKernelPy.VectorInt_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorInt_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorInt_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorInt_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorInt_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorInt_front(self)

    def back(self):
        return _VisusKernelPy.VectorInt_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorInt_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorInt_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _VisusKernelPy.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorDouble___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorDouble_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorDouble_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorDouble_empty(self)

    def size(self):
        return _VisusKernelPy.VectorDouble_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorDouble_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorDouble_begin(self)

    def end(self):
        return _VisusKernelPy.VectorDouble_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorDouble_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorDouble_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorDouble_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorDouble_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorDouble_front(self)

    def back(self):
        return _VisusKernelPy.VectorDouble_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorDouble_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _VisusKernelPy.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorFloat___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorFloat_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorFloat_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorFloat_empty(self)

    def size(self):
        return _VisusKernelPy.VectorFloat_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorFloat_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorFloat_begin(self)

    def end(self):
        return _VisusKernelPy.VectorFloat_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorFloat_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorFloat_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorFloat_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorFloat_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorFloat_front(self)

    def back(self):
        return _VisusKernelPy.VectorFloat_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorFloat_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _VisusKernelPy.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.MapStringString___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.MapStringString___bool__(self)

    def __len__(self):
        return _VisusKernelPy.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusKernelPy.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusKernelPy.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _VisusKernelPy.MapStringString_has_key(self, key)

    def keys(self):
        return _VisusKernelPy.MapStringString_keys(self)

    def values(self):
        return _VisusKernelPy.MapStringString_values(self)

    def items(self):
        return _VisusKernelPy.MapStringString_items(self)

    def __contains__(self, key):
        return _VisusKernelPy.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _VisusKernelPy.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _VisusKernelPy.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusKernelPy.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _VisusKernelPy.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _VisusKernelPy.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _VisusKernelPy.MapStringString_empty(self)

    def size(self):
        return _VisusKernelPy.MapStringString_size(self)

    def swap(self, v):
        return _VisusKernelPy.MapStringString_swap(self, v)

    def begin(self):
        return _VisusKernelPy.MapStringString_begin(self)

    def end(self):
        return _VisusKernelPy.MapStringString_end(self)

    def rbegin(self):
        return _VisusKernelPy.MapStringString_rbegin(self)

    def rend(self):
        return _VisusKernelPy.MapStringString_rend(self)

    def clear(self):
        return _VisusKernelPy.MapStringString_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.MapStringString_get_allocator(self)

    def count(self, x):
        return _VisusKernelPy.MapStringString_count(self, x)

    def erase(self, *args):
        return _VisusKernelPy.MapStringString_erase(self, *args)

    def find(self, x):
        return _VisusKernelPy.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _VisusKernelPy.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusKernelPy.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _VisusKernelPy.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _VisusKernelPy.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

class VectorOfField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfField, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfField_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfField___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfField___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfField___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfField___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfField___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfField___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfField___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfField___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfField___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfField_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfField_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfField_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfField_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfField_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfField_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfField_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfField_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfField_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfField_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfField_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfField_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfField_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorOfField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorOfField_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfField_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfField_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfField_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfField_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfField_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfField_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfField_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfField
    __del__ = lambda self: None
VectorOfField_swigregister = _VisusKernelPy.VectorOfField_swigregister
VectorOfField_swigregister(VectorOfField)

class VectorOfArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfArray___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfArray___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfArray___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfArray_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfArray_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfArray_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfArray_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfArray_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfArray_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfArray_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfArray_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfArray_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfArray_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfArray_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfArray_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfArray_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorOfArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorOfArray_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfArray_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfArray_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfArray_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfArray_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfArray_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfArray_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfArray_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfArray
    __del__ = lambda self: None
VectorOfArray_swigregister = _VisusKernelPy.VectorOfArray_swigregister
VectorOfArray_swigregister(VectorOfArray)

VISUS_OPENGL_ES = _VisusKernelPy.VISUS_OPENGL_ES

def cbool(s):
    return _VisusKernelPy.cbool(s)
cbool = _VisusKernelPy.cbool

def cint(s):
    return _VisusKernelPy.cint(s)
cint = _VisusKernelPy.cint

def cfloat(s):
    return _VisusKernelPy.cfloat(s)
cfloat = _VisusKernelPy.cfloat

def cint64(s):
    return _VisusKernelPy.cint64(s)
cint64 = _VisusKernelPy.cint64

def cuint64(s):
    return _VisusKernelPy.cuint64(s)
cuint64 = _VisusKernelPy.cuint64

def cstring(*args):
    return _VisusKernelPy.cstring(*args)
cstring = _VisusKernelPy.cstring

def cdouble(*args):
    return _VisusKernelPy.cdouble(*args)
cdouble = _VisusKernelPy.cdouble

def SetCommandLine(*args):
    return _VisusKernelPy.SetCommandLine(*args)
SetCommandLine = _VisusKernelPy.SetCommandLine

def VisusAssertFailed(file, line, expr):
    return _VisusKernelPy.VisusAssertFailed(file, line, expr)
VisusAssertFailed = _VisusKernelPy.VisusAssertFailed

def PrintMessageToTerminal(value):
    return _VisusKernelPy.PrintMessageToTerminal(value)
PrintMessageToTerminal = _VisusKernelPy.PrintMessageToTerminal

def VisusHasMessageLock():
    return _VisusKernelPy.VisusHasMessageLock()
VisusHasMessageLock = _VisusKernelPy.VisusHasMessageLock

def ThrowExceptionEx(file, line, expr):
    return _VisusKernelPy.ThrowExceptionEx(file, line, expr)
ThrowExceptionEx = _VisusKernelPy.ThrowExceptionEx
VisusHereInTheCode = _VisusKernelPy.VisusHereInTheCode
class Void(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Void, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Void, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_Void()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Void
    __del__ = lambda self: None
Void_swigregister = _VisusKernelPy.Void_swigregister
Void_swigregister(Void)
cvar = _VisusKernelPy.cvar
Pi = cvar.Pi

class VisusModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusModule, name)
    __repr__ = _swig_repr
    if _newclass:
        getModuleConfig = staticmethod(_VisusKernelPy.VisusModule_getModuleConfig)
    else:
        getModuleConfig = _VisusKernelPy.VisusModule_getModuleConfig

    def __init__(self):
        this = _VisusKernelPy.new_VisusModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_VisusModule
    __del__ = lambda self: None
VisusModule_swigregister = _VisusKernelPy.VisusModule_swigregister
VisusModule_swigregister(VisusModule)

def VisusModule_getModuleConfig():
    return _VisusKernelPy.VisusModule_getModuleConfig()
VisusModule_getModuleConfig = _VisusKernelPy.VisusModule_getModuleConfig

class KernelModule(VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KernelModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusKernelPy.KernelModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusKernelPy.KernelModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusKernelPy.KernelModule_bAttached_get, _VisusKernelPy.KernelModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusKernelPy.KernelModule_attach)
    else:
        attach = _VisusKernelPy.KernelModule_attach
    if _newclass:
        detach = staticmethod(_VisusKernelPy.KernelModule_detach)
    else:
        detach = _VisusKernelPy.KernelModule_detach

    def __init__(self):
        this = _VisusKernelPy.new_KernelModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_KernelModule
    __del__ = lambda self: None
KernelModule_swigregister = _VisusKernelPy.KernelModule_swigregister
KernelModule_swigregister(KernelModule)

def KernelModule_attach():
    return _VisusKernelPy.KernelModule_attach()
KernelModule_attach = _VisusKernelPy.KernelModule_attach

def KernelModule_detach():
    return _VisusKernelPy.KernelModule_detach()
KernelModule_detach = _VisusKernelPy.KernelModule_detach

class StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_StringMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_StringMap
    __del__ = lambda self: None

    def clear(self):
        return _VisusKernelPy.StringMap_clear(self)

    def size(self):
        return _VisusKernelPy.StringMap_size(self)

    def empty(self):
        return _VisusKernelPy.StringMap_empty(self)

    def begin(self, *args):
        return _VisusKernelPy.StringMap_begin(self, *args)

    def end(self, *args):
        return _VisusKernelPy.StringMap_end(self, *args)

    def find(self, *args):
        return _VisusKernelPy.StringMap_find(self, *args)

    def hasValue(self, key):
        return _VisusKernelPy.StringMap_hasValue(self, key)

    def getValue(self, *args):
        return _VisusKernelPy.StringMap_getValue(self, *args)

    def setValue(self, key, value):
        return _VisusKernelPy.StringMap_setValue(self, key, value)

    def eraseValue(self, key):
        return _VisusKernelPy.StringMap_eraseValue(self, key)

    def __eq__(self, other):
        return _VisusKernelPy.StringMap___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.StringMap___ne__(self, other)
StringMap_swigregister = _VisusKernelPy.StringMap_swigregister
StringMap_swigregister(StringMap)

class LogFormattedMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogFormattedMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogFormattedMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _VisusKernelPy.LogFormattedMessage_file_set
    __swig_getmethods__["file"] = _VisusKernelPy.LogFormattedMessage_file_get
    if _newclass:
        file = _swig_property(_VisusKernelPy.LogFormattedMessage_file_get, _VisusKernelPy.LogFormattedMessage_file_set)
    __swig_setmethods__["line"] = _VisusKernelPy.LogFormattedMessage_line_set
    __swig_getmethods__["line"] = _VisusKernelPy.LogFormattedMessage_line_get
    if _newclass:
        line = _swig_property(_VisusKernelPy.LogFormattedMessage_line_get, _VisusKernelPy.LogFormattedMessage_line_set)
    __swig_setmethods__["level"] = _VisusKernelPy.LogFormattedMessage_level_set
    __swig_getmethods__["level"] = _VisusKernelPy.LogFormattedMessage_level_get
    if _newclass:
        level = _swig_property(_VisusKernelPy.LogFormattedMessage_level_get, _VisusKernelPy.LogFormattedMessage_level_set)
    __swig_setmethods__["time"] = _VisusKernelPy.LogFormattedMessage_time_set
    __swig_getmethods__["time"] = _VisusKernelPy.LogFormattedMessage_time_get
    if _newclass:
        time = _swig_property(_VisusKernelPy.LogFormattedMessage_time_get, _VisusKernelPy.LogFormattedMessage_time_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_LogFormattedMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_LogFormattedMessage
    __del__ = lambda self: None

    def get_stream(self):
        return _VisusKernelPy.LogFormattedMessage_get_stream(self)
LogFormattedMessage_swigregister = _VisusKernelPy.LogFormattedMessage_swigregister
LogFormattedMessage_swigregister(LogFormattedMessage)

class HeapMemory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeapMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeapMemory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_HeapMemory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_HeapMemory
    __del__ = lambda self: None
    if _newclass:
        createUnmanaged = staticmethod(_VisusKernelPy.HeapMemory_createUnmanaged)
    else:
        createUnmanaged = _VisusKernelPy.HeapMemory_createUnmanaged
    if _newclass:
        createManaged = staticmethod(_VisusKernelPy.HeapMemory_createManaged)
    else:
        createManaged = _VisusKernelPy.HeapMemory_createManaged

    def clone(self):
        return _VisusKernelPy.HeapMemory_clone(self)

    def reserve(self, new_m, file, line):
        return _VisusKernelPy.HeapMemory_reserve(self, new_m, file, line)

    def resize(self, size, file, line):
        return _VisusKernelPy.HeapMemory_resize(self, size, file, line)

    def shrink(self):
        return _VisusKernelPy.HeapMemory_shrink(self)

    def isAllZero(self):
        return _VisusKernelPy.HeapMemory_isAllZero(self)

    def c_capacity(self):
        return _VisusKernelPy.HeapMemory_c_capacity(self)

    def c_size(self):
        return _VisusKernelPy.HeapMemory_c_size(self)

    def c_ptr(self):
        return _VisusKernelPy.HeapMemory_c_ptr(self)

    def fill(self, value):
        return _VisusKernelPy.HeapMemory_fill(self, value)

    def base64Encode(self):
        return _VisusKernelPy.HeapMemory_base64Encode(self)
    if _newclass:
        base64Decode = staticmethod(_VisusKernelPy.HeapMemory_base64Decode)
    else:
        base64Decode = _VisusKernelPy.HeapMemory_base64Decode
    if _newclass:
        copy = staticmethod(_VisusKernelPy.HeapMemory_copy)
    else:
        copy = _VisusKernelPy.HeapMemory_copy
HeapMemory_swigregister = _VisusKernelPy.HeapMemory_swigregister
HeapMemory_swigregister(HeapMemory)

def HeapMemory_createUnmanaged(p, n):
    return _VisusKernelPy.HeapMemory_createUnmanaged(p, n)
HeapMemory_createUnmanaged = _VisusKernelPy.HeapMemory_createUnmanaged

def HeapMemory_createManaged(p, n):
    return _VisusKernelPy.HeapMemory_createManaged(p, n)
HeapMemory_createManaged = _VisusKernelPy.HeapMemory_createManaged

def HeapMemory_base64Decode(input):
    return _VisusKernelPy.HeapMemory_base64Decode(input)
HeapMemory_base64Decode = _VisusKernelPy.HeapMemory_base64Decode

def HeapMemory_copy(dst, src):
    return _VisusKernelPy.HeapMemory_copy(dst, src)
HeapMemory_copy = _VisusKernelPy.HeapMemory_copy

class ObjectStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectStream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["run_time_options"] = _VisusKernelPy.ObjectStream_run_time_options_set
    __swig_getmethods__["run_time_options"] = _VisusKernelPy.ObjectStream_run_time_options_get
    if _newclass:
        run_time_options = _swig_property(_VisusKernelPy.ObjectStream_run_time_options_get, _VisusKernelPy.ObjectStream_run_time_options_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_ObjectStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_ObjectStream
    __del__ = lambda self: None

    def open(self, root, mode):
        return _VisusKernelPy.ObjectStream_open(self, root, mode)

    def close(self):
        return _VisusKernelPy.ObjectStream_close(self)

    def getCurrentDepth(self):
        return _VisusKernelPy.ObjectStream_getCurrentDepth(self)

    def getCurrentContext(self):
        return _VisusKernelPy.ObjectStream_getCurrentContext(self)

    def pushContext(self, context_name):
        return _VisusKernelPy.ObjectStream_pushContext(self, context_name)

    def popContext(self, context_name):
        return _VisusKernelPy.ObjectStream_popContext(self, context_name)

    def writeInline(self, name, value):
        return _VisusKernelPy.ObjectStream_writeInline(self, name, value)

    def readInline(self, *args):
        return _VisusKernelPy.ObjectStream_readInline(self, *args)

    def write(self, name, value):
        return _VisusKernelPy.ObjectStream_write(self, name, value)

    def read(self, *args):
        return _VisusKernelPy.ObjectStream_read(self, *args)

    def writeText(self, value, bCData=False):
        return _VisusKernelPy.ObjectStream_writeText(self, value, bCData)

    def readText(self):
        return _VisusKernelPy.ObjectStream_readText(self)

    def setSceneMode(self, value):
        return _VisusKernelPy.ObjectStream_setSceneMode(self, value)

    def isSceneMode(self):
        return _VisusKernelPy.ObjectStream_isSceneMode(self)
ObjectStream_swigregister = _VisusKernelPy.ObjectStream_swigregister
ObjectStream_swigregister(ObjectStream)

class Aborted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aborted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Aborted, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_Aborted()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self):
        return _VisusKernelPy.Aborted___call__(self)

    def setTrue(self):
        return _VisusKernelPy.Aborted_setTrue(self)

    def setFalse(self):
        return _VisusKernelPy.Aborted_setFalse(self)

    def __eq__(self, other):
        return _VisusKernelPy.Aborted___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Aborted___ne__(self, other)
    __swig_destroy__ = _VisusKernelPy.delete_Aborted
    __del__ = lambda self: None
Aborted_swigregister = _VisusKernelPy.Aborted_swigregister
Aborted_swigregister(Aborted)

class StringTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringTree, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _VisusKernelPy.StringTree_name_set
    __swig_getmethods__["name"] = _VisusKernelPy.StringTree_name_get
    if _newclass:
        name = _swig_property(_VisusKernelPy.StringTree_name_get, _VisusKernelPy.StringTree_name_set)
    __swig_setmethods__["attributes"] = _VisusKernelPy.StringTree_attributes_set
    __swig_getmethods__["attributes"] = _VisusKernelPy.StringTree_attributes_get
    if _newclass:
        attributes = _swig_property(_VisusKernelPy.StringTree_attributes_get, _VisusKernelPy.StringTree_attributes_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_StringTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_StringTree
    __del__ = lambda self: None

    def fromXmlString(self, content, bEnablePostProcessing=True):
        return _VisusKernelPy.StringTree_fromXmlString(self, content, bEnablePostProcessing)

    def assign(self, other):
        return _VisusKernelPy.StringTree_assign(self, other)

    def clear(self):
        return _VisusKernelPy.StringTree_clear(self)

    def empty(self):
        return _VisusKernelPy.StringTree_empty(self)

    def hasValue(self, key):
        return _VisusKernelPy.StringTree_hasValue(self, key)

    def readString(self, *args):
        return _VisusKernelPy.StringTree_readString(self, *args)

    def writeString(self, key, value):
        return _VisusKernelPy.StringTree_writeString(self, key, value)

    def readInt(self, key, default_value=0):
        return _VisusKernelPy.StringTree_readInt(self, key, default_value)

    def writeInt(self, key, value):
        return _VisusKernelPy.StringTree_writeInt(self, key, value)

    def readBool(self, key, default_value=False):
        return _VisusKernelPy.StringTree_readBool(self, key, default_value)

    def writeBool(self, key, value):
        return _VisusKernelPy.StringTree_writeBool(self, key, value)

    def readBigInt(self, key, default_value=0):
        return _VisusKernelPy.StringTree_readBigInt(self, key, default_value)

    def writeBigInt(self, key, value):
        return _VisusKernelPy.StringTree_writeBigInt(self, key, value)

    def getNumberOfChilds(self):
        return _VisusKernelPy.StringTree_getNumberOfChilds(self)

    def getChilds(self):
        return _VisusKernelPy.StringTree_getChilds(self)

    def getChild(self, *args):
        return _VisusKernelPy.StringTree_getChild(self, *args)

    def getFirstChild(self, *args):
        return _VisusKernelPy.StringTree_getFirstChild(self, *args)

    def getLastChild(self, *args):
        return _VisusKernelPy.StringTree_getLastChild(self, *args)

    def addChild(self, child):
        return _VisusKernelPy.StringTree_addChild(self, child)

    def findChildWithName(self, name, prev=None):
        return _VisusKernelPy.StringTree_findChildWithName(self, name, prev)

    def findAllChildsWithName(self, name, bRecursive=True):
        return _VisusKernelPy.StringTree_findAllChildsWithName(self, name, bRecursive)

    def getMaxDepth(self):
        return _VisusKernelPy.StringTree_getMaxDepth(self)

    def inheritAttributeFrom(self, other):
        return _VisusKernelPy.StringTree_inheritAttributeFrom(self, other)
    if _newclass:
        postProcess = staticmethod(_VisusKernelPy.StringTree_postProcess)
    else:
        postProcess = _VisusKernelPy.StringTree_postProcess

    def isHashNode(self):
        return _VisusKernelPy.StringTree_isHashNode(self)

    def isTextNode(self):
        return _VisusKernelPy.StringTree_isTextNode(self)

    def addTextNode(self, text):
        return _VisusKernelPy.StringTree_addTextNode(self, text)

    def isCDataSectionNode(self):
        return _VisusKernelPy.StringTree_isCDataSectionNode(self)

    def addCDataSectionNode(self, text):
        return _VisusKernelPy.StringTree_addCDataSectionNode(self, text)

    def isCommentNode(self):
        return _VisusKernelPy.StringTree_isCommentNode(self)

    def addCommentNode(self, text):
        return _VisusKernelPy.StringTree_addCommentNode(self, text)

    def collapseTextAndCData(self):
        return _VisusKernelPy.StringTree_collapseTextAndCData(self)

    def toXmlString(self):
        return _VisusKernelPy.StringTree_toXmlString(self)

    def toJSONString(self):
        return _VisusKernelPy.StringTree_toJSONString(self)

    def toString(self):
        return _VisusKernelPy.StringTree_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.StringTree_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.StringTree_readFromObjectStream(self, istream)
StringTree_swigregister = _VisusKernelPy.StringTree_swigregister
StringTree_swigregister(StringTree)

def StringTree_postProcess(src):
    return _VisusKernelPy.StringTree_postProcess(src)
StringTree_postProcess = _VisusKernelPy.StringTree_postProcess

class ConfigFile(StringTree):
    __swig_setmethods__ = {}
    for _s in [StringTree]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigFile, name, value)
    __swig_getmethods__ = {}
    for _s in [StringTree]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_ConfigFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_ConfigFile
    __del__ = lambda self: None

    def getFilename(self):
        return _VisusKernelPy.ConfigFile_getFilename(self)

    def load(self, filename, bEnablePostProcessing=True):
        return _VisusKernelPy.ConfigFile_load(self, filename, bEnablePostProcessing)

    def reload(self, bEnablePostProcessing=True):
        return _VisusKernelPy.ConfigFile_reload(self, bEnablePostProcessing)

    def save(self):
        return _VisusKernelPy.ConfigFile_save(self)
ConfigFile_swigregister = _VisusKernelPy.ConfigFile_swigregister
ConfigFile_swigregister(ConfigFile)

class VisusConfig(ConfigFile):
    __swig_setmethods__ = {}
    for _s in [ConfigFile]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [ConfigFile]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisusConfig, name)
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_VisusKernelPy.VisusConfig_getSingleton)
    else:
        getSingleton = _VisusKernelPy.VisusConfig_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_VisusKernelPy.VisusConfig_allocSingleton)
    else:
        allocSingleton = _VisusKernelPy.VisusConfig_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_VisusKernelPy.VisusConfig_releaseSingleton)
    else:
        releaseSingleton = _VisusKernelPy.VisusConfig_releaseSingleton

    def __init__(self):
        this = _VisusKernelPy.new_VisusConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_VisusConfig
    __del__ = lambda self: None
VisusConfig_swigregister = _VisusKernelPy.VisusConfig_swigregister
VisusConfig_swigregister(VisusConfig)

def VisusConfig_getSingleton():
    return _VisusKernelPy.VisusConfig_getSingleton()
VisusConfig_getSingleton = _VisusKernelPy.VisusConfig_getSingleton

def VisusConfig_allocSingleton():
    return _VisusKernelPy.VisusConfig_allocSingleton()
VisusConfig_allocSingleton = _VisusKernelPy.VisusConfig_allocSingleton

def VisusConfig_releaseSingleton():
    return _VisusKernelPy.VisusConfig_releaseSingleton()
VisusConfig_releaseSingleton = _VisusKernelPy.VisusConfig_releaseSingleton

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    RGBType = _VisusKernelPy.Color_RGBType
    HSBType = _VisusKernelPy.Color_HSBType
    HLSType = _VisusKernelPy.Color_HLSType
    CieLabType = _VisusKernelPy.Color_CieLabType

    def __init__(self, *args):
        this = _VisusKernelPy.new_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Color
    __del__ = lambda self: None

    def clampToRange(self, a, b):
        return _VisusKernelPy.Color_clampToRange(self, a, b)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.Color_parseFromString)
    else:
        parseFromString = _VisusKernelPy.Color_parseFromString
    if _newclass:
        createFromUint32 = staticmethod(_VisusKernelPy.Color_createFromUint32)
    else:
        createFromUint32 = _VisusKernelPy.Color_createFromUint32
    if _newclass:
        random = staticmethod(_VisusKernelPy.Color_random)
    else:
        random = _VisusKernelPy.Color_random

    def getColorModel(self):
        return _VisusKernelPy.Color_getColorModel(self)

    def setColorModel(self, value):
        return _VisusKernelPy.Color_setColorModel(self, value)

    def get(self, index):
        return _VisusKernelPy.Color_get(self, index)

    def set(self, index, value):
        return _VisusKernelPy.Color_set(self, index, value)

    def __getitem__(self, index):
        return _VisusKernelPy.Color___getitem__(self, index)

    def __getitem_ref__(self, index):
        return _VisusKernelPy.Color___getitem_ref__(self, index)

    def assign(self, other):
        return _VisusKernelPy.Color_assign(self, other)
    if _newclass:
        distance = staticmethod(_VisusKernelPy.Color_distance)
    else:
        distance = _VisusKernelPy.Color_distance

    def __eq__(self, other):
        return _VisusKernelPy.Color___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Color___ne__(self, other)

    def __mul__(self, s):
        return _VisusKernelPy.Color___mul__(self, s)

    def withAlpha(self, alpha):
        return _VisusKernelPy.Color_withAlpha(self, alpha)

    def convertToOtherModel(self, color_model):
        return _VisusKernelPy.Color_convertToOtherModel(self, color_model)

    def toRGB(self):
        return _VisusKernelPy.Color_toRGB(self)

    def toHSB(self):
        return _VisusKernelPy.Color_toHSB(self)

    def toHLS(self):
        return _VisusKernelPy.Color_toHLS(self)

    def toCieLab(self):
        return _VisusKernelPy.Color_toCieLab(self)

    def getRed(self):
        return _VisusKernelPy.Color_getRed(self)

    def getGreen(self):
        return _VisusKernelPy.Color_getGreen(self)

    def getBlue(self):
        return _VisusKernelPy.Color_getBlue(self)

    def getHue(self):
        return _VisusKernelPy.Color_getHue(self)

    def getSaturation(self):
        return _VisusKernelPy.Color_getSaturation(self)

    def getLightness(self):
        return _VisusKernelPy.Color_getLightness(self)

    def getBrightness(self):
        return _VisusKernelPy.Color_getBrightness(self)

    def getAlpha(self):
        return _VisusKernelPy.Color_getAlpha(self)

    def setRed(self, value):
        return _VisusKernelPy.Color_setRed(self, value)

    def setGreen(self, value):
        return _VisusKernelPy.Color_setGreen(self, value)

    def setBlue(self, value):
        return _VisusKernelPy.Color_setBlue(self, value)

    def setHue(self, value):
        return _VisusKernelPy.Color_setHue(self, value)

    def setSaturation(self, value):
        return _VisusKernelPy.Color_setSaturation(self, value)

    def setLightness(self, value):
        return _VisusKernelPy.Color_setLightness(self, value)

    def setBrightness(self, value):
        return _VisusKernelPy.Color_setBrightness(self, value)

    def setAlpha(self, value):
        return _VisusKernelPy.Color_setAlpha(self, value)
    if _newclass:
        interpolate = staticmethod(_VisusKernelPy.Color_interpolate)
    else:
        interpolate = _VisusKernelPy.Color_interpolate

    def toString(self):
        return _VisusKernelPy.Color_toString(self)

    def toHexString(self):
        return _VisusKernelPy.Color_toHexString(self)

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.Color_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.Color_readFromObjectStream(self, istream)
Color_swigregister = _VisusKernelPy.Color_swigregister
Color_swigregister(Color)

def Color_parseFromString(value):
    return _VisusKernelPy.Color_parseFromString(value)
Color_parseFromString = _VisusKernelPy.Color_parseFromString

def Color_createFromUint32(value):
    return _VisusKernelPy.Color_createFromUint32(value)
Color_createFromUint32 = _VisusKernelPy.Color_createFromUint32

def Color_random(Alpha=1.0):
    return _VisusKernelPy.Color_random(Alpha)
Color_random = _VisusKernelPy.Color_random

def Color_distance(c1, c2):
    return _VisusKernelPy.Color_distance(c1, c2)
Color_distance = _VisusKernelPy.Color_distance

def Color_interpolate(alpha, c1, beta, c2):
    return _VisusKernelPy.Color_interpolate(alpha, c1, beta, c2)
Color_interpolate = _VisusKernelPy.Color_interpolate

VISUS_NDPOINT_DIM = _VisusKernelPy.VISUS_NDPOINT_DIM
class Point2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point2i_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point2i_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point2i_x_get, _VisusKernelPy.Point2i_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point2i_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point2i_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point2i_y_get, _VisusKernelPy.Point2i_y_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point2i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point2i_toStdArray(self)

    def module2(self):
        return _VisusKernelPy.Point2i_module2(self)

    def module(self):
        return _VisusKernelPy.Point2i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2i_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2i___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2i___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2i_dot(self, b)

    def __mul__(self, b):
        return _VisusKernelPy.Point2i___mul__(self, b)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2i___getitem__(self, i)

    def valid(self):
        return _VisusKernelPy.Point2i_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2i_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2i_smallest(self)

    def toString(self):
        return _VisusKernelPy.Point2i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2i
    __del__ = lambda self: None
Point2i_swigregister = _VisusKernelPy.Point2i_swigregister
Point2i_swigregister(Point2i)

class Point2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point2f_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point2f_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point2f_x_get, _VisusKernelPy.Point2f_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point2f_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point2f_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point2f_y_get, _VisusKernelPy.Point2f_y_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point2f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point2f_toStdArray(self)

    def module2(self):
        return _VisusKernelPy.Point2f_module2(self)

    def module(self):
        return _VisusKernelPy.Point2f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2f_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2f___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2f___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2f_dot(self, b)

    def __mul__(self, b):
        return _VisusKernelPy.Point2f___mul__(self, b)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2f___getitem__(self, i)

    def valid(self):
        return _VisusKernelPy.Point2f_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2f_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2f_smallest(self)

    def toString(self):
        return _VisusKernelPy.Point2f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2f
    __del__ = lambda self: None
Point2f_swigregister = _VisusKernelPy.Point2f_swigregister
Point2f_swigregister(Point2f)

class Point2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point2d_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point2d_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point2d_x_get, _VisusKernelPy.Point2d_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point2d_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point2d_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point2d_y_get, _VisusKernelPy.Point2d_y_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point2d_toStdArray(self)

    def module2(self):
        return _VisusKernelPy.Point2d_module2(self)

    def module(self):
        return _VisusKernelPy.Point2d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2d_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2d___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2d___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2d_dot(self, b)

    def __mul__(self, b):
        return _VisusKernelPy.Point2d___mul__(self, b)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2d___getitem__(self, i)

    def valid(self):
        return _VisusKernelPy.Point2d_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2d_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2d_smallest(self)

    def toString(self):
        return _VisusKernelPy.Point2d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2d
    __del__ = lambda self: None
Point2d_swigregister = _VisusKernelPy.Point2d_swigregister
Point2d_swigregister(Point2d)

class Point3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point3i_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point3i_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point3i_x_get, _VisusKernelPy.Point3i_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point3i_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point3i_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point3i_y_get, _VisusKernelPy.Point3i_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point3i_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point3i_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point3i_z_get, _VisusKernelPy.Point3i_z_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point3i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point3i_toStdArray(self)

    def dropZ(self):
        return _VisusKernelPy.Point3i_dropZ(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3i_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3i_module2(self)

    def module(self):
        return _VisusKernelPy.Point3i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3i_inv(self)

    def __pos__(self):
        return _VisusKernelPy.Point3i___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3i___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3i_dot(self, b)

    def __mul__(self, *args):
        return _VisusKernelPy.Point3i___mul__(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3i___getitem__(self, i)

    def set(self, index, value):
        return _VisusKernelPy.Point3i_set(self, index, value)

    def cross(self, v):
        return _VisusKernelPy.Point3i_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3i_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3i_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3i_smallest(self)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point3i_min)
    else:
        min = _VisusKernelPy.Point3i_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point3i_max)
    else:
        max = _VisusKernelPy.Point3i_max

    def __lt__(self, b):
        return _VisusKernelPy.Point3i___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3i___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3i___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3i___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3i
    __del__ = lambda self: None
Point3i_swigregister = _VisusKernelPy.Point3i_swigregister
Point3i_swigregister(Point3i)

def Point3i_min(a, b):
    return _VisusKernelPy.Point3i_min(a, b)
Point3i_min = _VisusKernelPy.Point3i_min

def Point3i_max(a, b):
    return _VisusKernelPy.Point3i_max(a, b)
Point3i_max = _VisusKernelPy.Point3i_max

class Point3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point3f_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point3f_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point3f_x_get, _VisusKernelPy.Point3f_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point3f_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point3f_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point3f_y_get, _VisusKernelPy.Point3f_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point3f_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point3f_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point3f_z_get, _VisusKernelPy.Point3f_z_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point3f_toStdArray(self)

    def dropZ(self):
        return _VisusKernelPy.Point3f_dropZ(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3f_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3f_module2(self)

    def module(self):
        return _VisusKernelPy.Point3f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3f_inv(self)

    def __pos__(self):
        return _VisusKernelPy.Point3f___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3f___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3f_dot(self, b)

    def __mul__(self, *args):
        return _VisusKernelPy.Point3f___mul__(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3f___getitem__(self, i)

    def set(self, index, value):
        return _VisusKernelPy.Point3f_set(self, index, value)

    def cross(self, v):
        return _VisusKernelPy.Point3f_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3f_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3f_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3f_smallest(self)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point3f_min)
    else:
        min = _VisusKernelPy.Point3f_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point3f_max)
    else:
        max = _VisusKernelPy.Point3f_max

    def __lt__(self, b):
        return _VisusKernelPy.Point3f___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3f___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3f___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3f___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3f
    __del__ = lambda self: None
Point3f_swigregister = _VisusKernelPy.Point3f_swigregister
Point3f_swigregister(Point3f)

def Point3f_min(a, b):
    return _VisusKernelPy.Point3f_min(a, b)
Point3f_min = _VisusKernelPy.Point3f_min

def Point3f_max(a, b):
    return _VisusKernelPy.Point3f_max(a, b)
Point3f_max = _VisusKernelPy.Point3f_max

class Point3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point3d_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point3d_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point3d_x_get, _VisusKernelPy.Point3d_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point3d_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point3d_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point3d_y_get, _VisusKernelPy.Point3d_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point3d_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point3d_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point3d_z_get, _VisusKernelPy.Point3d_z_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point3d_toStdArray(self)

    def dropZ(self):
        return _VisusKernelPy.Point3d_dropZ(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3d_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3d_module2(self)

    def module(self):
        return _VisusKernelPy.Point3d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3d_inv(self)

    def __pos__(self):
        return _VisusKernelPy.Point3d___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3d___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3d_dot(self, b)

    def __mul__(self, *args):
        return _VisusKernelPy.Point3d___mul__(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3d___getitem__(self, i)

    def set(self, index, value):
        return _VisusKernelPy.Point3d_set(self, index, value)

    def cross(self, v):
        return _VisusKernelPy.Point3d_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3d_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3d_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3d_smallest(self)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point3d_min)
    else:
        min = _VisusKernelPy.Point3d_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point3d_max)
    else:
        max = _VisusKernelPy.Point3d_max

    def __lt__(self, b):
        return _VisusKernelPy.Point3d___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3d___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3d___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3d___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3d
    __del__ = lambda self: None
Point3d_swigregister = _VisusKernelPy.Point3d_swigregister
Point3d_swigregister(Point3d)

def Point3d_min(a, b):
    return _VisusKernelPy.Point3d_min(a, b)
Point3d_min = _VisusKernelPy.Point3d_min

def Point3d_max(a, b):
    return _VisusKernelPy.Point3d_max(a, b)
Point3d_max = _VisusKernelPy.Point3d_max

class Point4i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point4i_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point4i_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point4i_x_get, _VisusKernelPy.Point4i_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point4i_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point4i_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point4i_y_get, _VisusKernelPy.Point4i_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point4i_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point4i_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point4i_z_get, _VisusKernelPy.Point4i_z_set)
    __swig_setmethods__["w"] = _VisusKernelPy.Point4i_w_set
    __swig_getmethods__["w"] = _VisusKernelPy.Point4i_w_get
    if _newclass:
        w = _swig_property(_VisusKernelPy.Point4i_w_get, _VisusKernelPy.Point4i_w_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point4i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point4i_toStdArray(self)

    def dropW(self):
        return _VisusKernelPy.Point4i_dropW(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4i_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4i_module2(self)

    def module(self):
        return _VisusKernelPy.Point4i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4i_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4i___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4i_dot(self, b)

    def __mul__(self, b):
        return _VisusKernelPy.Point4i___mul__(self, b)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4i___getitem__(self, i)

    def valid(self):
        return _VisusKernelPy.Point4i_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4i
    __del__ = lambda self: None
Point4i_swigregister = _VisusKernelPy.Point4i_swigregister
Point4i_swigregister(Point4i)

class Point4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point4f_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point4f_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point4f_x_get, _VisusKernelPy.Point4f_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point4f_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point4f_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point4f_y_get, _VisusKernelPy.Point4f_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point4f_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point4f_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point4f_z_get, _VisusKernelPy.Point4f_z_set)
    __swig_setmethods__["w"] = _VisusKernelPy.Point4f_w_set
    __swig_getmethods__["w"] = _VisusKernelPy.Point4f_w_get
    if _newclass:
        w = _swig_property(_VisusKernelPy.Point4f_w_get, _VisusKernelPy.Point4f_w_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point4f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point4f_toStdArray(self)

    def dropW(self):
        return _VisusKernelPy.Point4f_dropW(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4f_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4f_module2(self)

    def module(self):
        return _VisusKernelPy.Point4f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4f_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4f___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4f_dot(self, b)

    def __mul__(self, b):
        return _VisusKernelPy.Point4f___mul__(self, b)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4f___getitem__(self, i)

    def valid(self):
        return _VisusKernelPy.Point4f_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4f
    __del__ = lambda self: None
Point4f_swigregister = _VisusKernelPy.Point4f_swigregister
Point4f_swigregister(Point4f)

class Point4d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point4d_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point4d_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point4d_x_get, _VisusKernelPy.Point4d_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point4d_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point4d_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point4d_y_get, _VisusKernelPy.Point4d_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point4d_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point4d_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point4d_z_get, _VisusKernelPy.Point4d_z_set)
    __swig_setmethods__["w"] = _VisusKernelPy.Point4d_w_set
    __swig_getmethods__["w"] = _VisusKernelPy.Point4d_w_get
    if _newclass:
        w = _swig_property(_VisusKernelPy.Point4d_w_get, _VisusKernelPy.Point4d_w_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point4d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toStdArray(self):
        return _VisusKernelPy.Point4d_toStdArray(self)

    def dropW(self):
        return _VisusKernelPy.Point4d_dropW(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4d_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4d_module2(self)

    def module(self):
        return _VisusKernelPy.Point4d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4d_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4d___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4d_dot(self, b)

    def __mul__(self, b):
        return _VisusKernelPy.Point4d___mul__(self, b)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4d___getitem__(self, i)

    def valid(self):
        return _VisusKernelPy.Point4d_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4d
    __del__ = lambda self: None
Point4d_swigregister = _VisusKernelPy.Point4d_swigregister
Point4d_swigregister(Point4d)

class PointNi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointNi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointNi, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_PointNi(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.PointNi_getPointDim(self)

    def setPointDim(self, value):
        return _VisusKernelPy.PointNi_setPointDim(self, value)

    def withPointDim(self, new_pdim, embed_value):
        return _VisusKernelPy.PointNi_withPointDim(self, new_pdim, embed_value)
    if _newclass:
        one = staticmethod(_VisusKernelPy.PointNi_one)
    else:
        one = _VisusKernelPy.PointNi_one

    def toVector(self):
        return _VisusKernelPy.PointNi_toVector(self)

    def valid(self):
        return _VisusKernelPy.PointNi_valid(self)

    def withValueOnAxis(self, axis, value):
        return _VisusKernelPy.PointNi_withValueOnAxis(self, axis, value)

    def withX(self, value):
        return _VisusKernelPy.PointNi_withX(self, value)

    def withY(self, value):
        return _VisusKernelPy.PointNi_withY(self, value)

    def withZ(self, value):
        return _VisusKernelPy.PointNi_withZ(self, value)

    def get(self, *args):
        return _VisusKernelPy.PointNi_get(self, *args)

    def set(self, i, value):
        return _VisusKernelPy.PointNi_set(self, i, value)

    def __getitem__(self, i):
        return _VisusKernelPy.PointNi___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.PointNi___getitem_ref__(self, i)

    def __neg__(self):
        return _VisusKernelPy.PointNi___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.PointNi___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.PointNi___sub__(self, other)

    def __iadd__(self, other):
        return _VisusKernelPy.PointNi___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.PointNi___isub__(self, other)

    def __imul__(self, s):
        return _VisusKernelPy.PointNi___imul__(self, s)

    def __eq__(self, other):
        return _VisusKernelPy.PointNi___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.PointNi___ne__(self, other)
    if _newclass:
        min = staticmethod(_VisusKernelPy.PointNi_min)
    else:
        min = _VisusKernelPy.PointNi_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.PointNi_max)
    else:
        max = _VisusKernelPy.PointNi_max

    def minsize(self):
        return _VisusKernelPy.PointNi_minsize(self)

    def maxsize(self):
        return _VisusKernelPy.PointNi_maxsize(self)

    def __lt__(self, b):
        return _VisusKernelPy.PointNi___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.PointNi___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.PointNi___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.PointNi___ge__(self, b)
    if _newclass:
        less = staticmethod(_VisusKernelPy.PointNi_less)
    else:
        less = _VisusKernelPy.PointNi_less
    if _newclass:
        lessEqual = staticmethod(_VisusKernelPy.PointNi_lessEqual)
    else:
        lessEqual = _VisusKernelPy.PointNi_lessEqual
    if _newclass:
        greater = staticmethod(_VisusKernelPy.PointNi_greater)
    else:
        greater = _VisusKernelPy.PointNi_greater
    if _newclass:
        greaterEqual = staticmethod(_VisusKernelPy.PointNi_greaterEqual)
    else:
        greaterEqual = _VisusKernelPy.PointNi_greaterEqual

    def dot(self, other):
        return _VisusKernelPy.PointNi_dot(self, other)

    def dotProduct(self, other):
        return _VisusKernelPy.PointNi_dotProduct(self, other)

    def getLog2(self):
        return _VisusKernelPy.PointNi_getLog2(self)

    def stride(self):
        return _VisusKernelPy.PointNi_stride(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.PointNi_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.PointNi_innerDiv(self, other)

    def innerProduct(self):
        return _VisusKernelPy.PointNi_innerProduct(self)

    def overflow(self):
        return _VisusKernelPy.PointNi_overflow(self)

    def toPoint3(self):
        return _VisusKernelPy.PointNi_toPoint3(self)

    def toPoint3i(self):
        return _VisusKernelPy.PointNi_toPoint3i(self)

    def toPoint3d(self):
        return _VisusKernelPy.PointNi_toPoint3d(self)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.PointNi_parseFromString)
    else:
        parseFromString = _VisusKernelPy.PointNi_parseFromString
    if _newclass:
        parseDims = staticmethod(_VisusKernelPy.PointNi_parseDims)
    else:
        parseDims = _VisusKernelPy.PointNi_parseDims

    def toString(self, *args):
        return _VisusKernelPy.PointNi_toString(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_PointNi
    __del__ = lambda self: None
PointNi_swigregister = _VisusKernelPy.PointNi_swigregister
PointNi_swigregister(PointNi)

def PointNi_one(*args):
    return _VisusKernelPy.PointNi_one(*args)
PointNi_one = _VisusKernelPy.PointNi_one

def PointNi_min(a, b):
    return _VisusKernelPy.PointNi_min(a, b)
PointNi_min = _VisusKernelPy.PointNi_min

def PointNi_max(a, b):
    return _VisusKernelPy.PointNi_max(a, b)
PointNi_max = _VisusKernelPy.PointNi_max

def PointNi_less(a, b):
    return _VisusKernelPy.PointNi_less(a, b)
PointNi_less = _VisusKernelPy.PointNi_less

def PointNi_lessEqual(a, b):
    return _VisusKernelPy.PointNi_lessEqual(a, b)
PointNi_lessEqual = _VisusKernelPy.PointNi_lessEqual

def PointNi_greater(a, b):
    return _VisusKernelPy.PointNi_greater(a, b)
PointNi_greater = _VisusKernelPy.PointNi_greater

def PointNi_greaterEqual(a, b):
    return _VisusKernelPy.PointNi_greaterEqual(a, b)
PointNi_greaterEqual = _VisusKernelPy.PointNi_greaterEqual

def PointNi_parseFromString(src):
    return _VisusKernelPy.PointNi_parseFromString(src)
PointNi_parseFromString = _VisusKernelPy.PointNi_parseFromString

def PointNi_parseDims(src):
    return _VisusKernelPy.PointNi_parseDims(src)
PointNi_parseDims = _VisusKernelPy.PointNi_parseDims

class PointNf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointNf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointNf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_PointNf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.PointNf_getPointDim(self)

    def setPointDim(self, value):
        return _VisusKernelPy.PointNf_setPointDim(self, value)

    def withPointDim(self, new_pdim, embed_value):
        return _VisusKernelPy.PointNf_withPointDim(self, new_pdim, embed_value)
    if _newclass:
        one = staticmethod(_VisusKernelPy.PointNf_one)
    else:
        one = _VisusKernelPy.PointNf_one

    def toVector(self):
        return _VisusKernelPy.PointNf_toVector(self)

    def valid(self):
        return _VisusKernelPy.PointNf_valid(self)

    def withValueOnAxis(self, axis, value):
        return _VisusKernelPy.PointNf_withValueOnAxis(self, axis, value)

    def withX(self, value):
        return _VisusKernelPy.PointNf_withX(self, value)

    def withY(self, value):
        return _VisusKernelPy.PointNf_withY(self, value)

    def withZ(self, value):
        return _VisusKernelPy.PointNf_withZ(self, value)

    def get(self, *args):
        return _VisusKernelPy.PointNf_get(self, *args)

    def set(self, i, value):
        return _VisusKernelPy.PointNf_set(self, i, value)

    def __getitem__(self, i):
        return _VisusKernelPy.PointNf___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.PointNf___getitem_ref__(self, i)

    def __neg__(self):
        return _VisusKernelPy.PointNf___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.PointNf___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.PointNf___sub__(self, other)

    def __iadd__(self, other):
        return _VisusKernelPy.PointNf___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.PointNf___isub__(self, other)

    def __imul__(self, s):
        return _VisusKernelPy.PointNf___imul__(self, s)

    def __eq__(self, other):
        return _VisusKernelPy.PointNf___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.PointNf___ne__(self, other)
    if _newclass:
        min = staticmethod(_VisusKernelPy.PointNf_min)
    else:
        min = _VisusKernelPy.PointNf_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.PointNf_max)
    else:
        max = _VisusKernelPy.PointNf_max

    def minsize(self):
        return _VisusKernelPy.PointNf_minsize(self)

    def maxsize(self):
        return _VisusKernelPy.PointNf_maxsize(self)

    def __lt__(self, b):
        return _VisusKernelPy.PointNf___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.PointNf___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.PointNf___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.PointNf___ge__(self, b)
    if _newclass:
        less = staticmethod(_VisusKernelPy.PointNf_less)
    else:
        less = _VisusKernelPy.PointNf_less
    if _newclass:
        lessEqual = staticmethod(_VisusKernelPy.PointNf_lessEqual)
    else:
        lessEqual = _VisusKernelPy.PointNf_lessEqual
    if _newclass:
        greater = staticmethod(_VisusKernelPy.PointNf_greater)
    else:
        greater = _VisusKernelPy.PointNf_greater
    if _newclass:
        greaterEqual = staticmethod(_VisusKernelPy.PointNf_greaterEqual)
    else:
        greaterEqual = _VisusKernelPy.PointNf_greaterEqual

    def dot(self, other):
        return _VisusKernelPy.PointNf_dot(self, other)

    def dotProduct(self, other):
        return _VisusKernelPy.PointNf_dotProduct(self, other)

    def getLog2(self):
        return _VisusKernelPy.PointNf_getLog2(self)

    def stride(self):
        return _VisusKernelPy.PointNf_stride(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.PointNf_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.PointNf_innerDiv(self, other)

    def innerProduct(self):
        return _VisusKernelPy.PointNf_innerProduct(self)

    def overflow(self):
        return _VisusKernelPy.PointNf_overflow(self)

    def toPoint3(self):
        return _VisusKernelPy.PointNf_toPoint3(self)

    def toPoint3i(self):
        return _VisusKernelPy.PointNf_toPoint3i(self)

    def toPoint3d(self):
        return _VisusKernelPy.PointNf_toPoint3d(self)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.PointNf_parseFromString)
    else:
        parseFromString = _VisusKernelPy.PointNf_parseFromString
    if _newclass:
        parseDims = staticmethod(_VisusKernelPy.PointNf_parseDims)
    else:
        parseDims = _VisusKernelPy.PointNf_parseDims

    def toString(self, *args):
        return _VisusKernelPy.PointNf_toString(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_PointNf
    __del__ = lambda self: None
PointNf_swigregister = _VisusKernelPy.PointNf_swigregister
PointNf_swigregister(PointNf)

def PointNf_one(*args):
    return _VisusKernelPy.PointNf_one(*args)
PointNf_one = _VisusKernelPy.PointNf_one

def PointNf_min(a, b):
    return _VisusKernelPy.PointNf_min(a, b)
PointNf_min = _VisusKernelPy.PointNf_min

def PointNf_max(a, b):
    return _VisusKernelPy.PointNf_max(a, b)
PointNf_max = _VisusKernelPy.PointNf_max

def PointNf_less(a, b):
    return _VisusKernelPy.PointNf_less(a, b)
PointNf_less = _VisusKernelPy.PointNf_less

def PointNf_lessEqual(a, b):
    return _VisusKernelPy.PointNf_lessEqual(a, b)
PointNf_lessEqual = _VisusKernelPy.PointNf_lessEqual

def PointNf_greater(a, b):
    return _VisusKernelPy.PointNf_greater(a, b)
PointNf_greater = _VisusKernelPy.PointNf_greater

def PointNf_greaterEqual(a, b):
    return _VisusKernelPy.PointNf_greaterEqual(a, b)
PointNf_greaterEqual = _VisusKernelPy.PointNf_greaterEqual

def PointNf_parseFromString(src):
    return _VisusKernelPy.PointNf_parseFromString(src)
PointNf_parseFromString = _VisusKernelPy.PointNf_parseFromString

def PointNf_parseDims(src):
    return _VisusKernelPy.PointNf_parseDims(src)
PointNf_parseDims = _VisusKernelPy.PointNf_parseDims

class PointNd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointNd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointNd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_PointNd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.PointNd_getPointDim(self)

    def setPointDim(self, value):
        return _VisusKernelPy.PointNd_setPointDim(self, value)

    def withPointDim(self, new_pdim, embed_value):
        return _VisusKernelPy.PointNd_withPointDim(self, new_pdim, embed_value)
    if _newclass:
        one = staticmethod(_VisusKernelPy.PointNd_one)
    else:
        one = _VisusKernelPy.PointNd_one

    def toVector(self):
        return _VisusKernelPy.PointNd_toVector(self)

    def valid(self):
        return _VisusKernelPy.PointNd_valid(self)

    def withValueOnAxis(self, axis, value):
        return _VisusKernelPy.PointNd_withValueOnAxis(self, axis, value)

    def withX(self, value):
        return _VisusKernelPy.PointNd_withX(self, value)

    def withY(self, value):
        return _VisusKernelPy.PointNd_withY(self, value)

    def withZ(self, value):
        return _VisusKernelPy.PointNd_withZ(self, value)

    def get(self, *args):
        return _VisusKernelPy.PointNd_get(self, *args)

    def set(self, i, value):
        return _VisusKernelPy.PointNd_set(self, i, value)

    def __getitem__(self, i):
        return _VisusKernelPy.PointNd___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.PointNd___getitem_ref__(self, i)

    def __neg__(self):
        return _VisusKernelPy.PointNd___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.PointNd___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.PointNd___sub__(self, other)

    def __iadd__(self, other):
        return _VisusKernelPy.PointNd___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.PointNd___isub__(self, other)

    def __imul__(self, s):
        return _VisusKernelPy.PointNd___imul__(self, s)

    def __eq__(self, other):
        return _VisusKernelPy.PointNd___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.PointNd___ne__(self, other)
    if _newclass:
        min = staticmethod(_VisusKernelPy.PointNd_min)
    else:
        min = _VisusKernelPy.PointNd_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.PointNd_max)
    else:
        max = _VisusKernelPy.PointNd_max

    def minsize(self):
        return _VisusKernelPy.PointNd_minsize(self)

    def maxsize(self):
        return _VisusKernelPy.PointNd_maxsize(self)

    def __lt__(self, b):
        return _VisusKernelPy.PointNd___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.PointNd___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.PointNd___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.PointNd___ge__(self, b)
    if _newclass:
        less = staticmethod(_VisusKernelPy.PointNd_less)
    else:
        less = _VisusKernelPy.PointNd_less
    if _newclass:
        lessEqual = staticmethod(_VisusKernelPy.PointNd_lessEqual)
    else:
        lessEqual = _VisusKernelPy.PointNd_lessEqual
    if _newclass:
        greater = staticmethod(_VisusKernelPy.PointNd_greater)
    else:
        greater = _VisusKernelPy.PointNd_greater
    if _newclass:
        greaterEqual = staticmethod(_VisusKernelPy.PointNd_greaterEqual)
    else:
        greaterEqual = _VisusKernelPy.PointNd_greaterEqual

    def dot(self, other):
        return _VisusKernelPy.PointNd_dot(self, other)

    def dotProduct(self, other):
        return _VisusKernelPy.PointNd_dotProduct(self, other)

    def getLog2(self):
        return _VisusKernelPy.PointNd_getLog2(self)

    def stride(self):
        return _VisusKernelPy.PointNd_stride(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.PointNd_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.PointNd_innerDiv(self, other)

    def innerProduct(self):
        return _VisusKernelPy.PointNd_innerProduct(self)

    def overflow(self):
        return _VisusKernelPy.PointNd_overflow(self)

    def toPoint3(self):
        return _VisusKernelPy.PointNd_toPoint3(self)

    def toPoint3i(self):
        return _VisusKernelPy.PointNd_toPoint3i(self)

    def toPoint3d(self):
        return _VisusKernelPy.PointNd_toPoint3d(self)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.PointNd_parseFromString)
    else:
        parseFromString = _VisusKernelPy.PointNd_parseFromString
    if _newclass:
        parseDims = staticmethod(_VisusKernelPy.PointNd_parseDims)
    else:
        parseDims = _VisusKernelPy.PointNd_parseDims

    def toString(self, *args):
        return _VisusKernelPy.PointNd_toString(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_PointNd
    __del__ = lambda self: None
PointNd_swigregister = _VisusKernelPy.PointNd_swigregister
PointNd_swigregister(PointNd)

def PointNd_one(*args):
    return _VisusKernelPy.PointNd_one(*args)
PointNd_one = _VisusKernelPy.PointNd_one

def PointNd_min(a, b):
    return _VisusKernelPy.PointNd_min(a, b)
PointNd_min = _VisusKernelPy.PointNd_min

def PointNd_max(a, b):
    return _VisusKernelPy.PointNd_max(a, b)
PointNd_max = _VisusKernelPy.PointNd_max

def PointNd_less(a, b):
    return _VisusKernelPy.PointNd_less(a, b)
PointNd_less = _VisusKernelPy.PointNd_less

def PointNd_lessEqual(a, b):
    return _VisusKernelPy.PointNd_lessEqual(a, b)
PointNd_lessEqual = _VisusKernelPy.PointNd_lessEqual

def PointNd_greater(a, b):
    return _VisusKernelPy.PointNd_greater(a, b)
PointNd_greater = _VisusKernelPy.PointNd_greater

def PointNd_greaterEqual(a, b):
    return _VisusKernelPy.PointNd_greaterEqual(a, b)
PointNd_greaterEqual = _VisusKernelPy.PointNd_greaterEqual

def PointNd_parseFromString(src):
    return _VisusKernelPy.PointNd_parseFromString(src)
PointNd_parseFromString = _VisusKernelPy.PointNd_parseFromString

def PointNd_parseDims(src):
    return _VisusKernelPy.PointNd_parseDims(src)
PointNd_parseDims = _VisusKernelPy.PointNd_parseDims

class NdPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NdPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NdPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_NdPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.NdPoint_getPointDim(self)

    def setPointDim(self, value):
        return _VisusKernelPy.NdPoint_setPointDim(self, value)

    def withPointDim(self, new_pdim, embed_value):
        return _VisusKernelPy.NdPoint_withPointDim(self, new_pdim, embed_value)
    if _newclass:
        one = staticmethod(_VisusKernelPy.NdPoint_one)
    else:
        one = _VisusKernelPy.NdPoint_one

    def toVector(self):
        return _VisusKernelPy.NdPoint_toVector(self)

    def valid(self):
        return _VisusKernelPy.NdPoint_valid(self)

    def withValueOnAxis(self, axis, value):
        return _VisusKernelPy.NdPoint_withValueOnAxis(self, axis, value)

    def withX(self, value):
        return _VisusKernelPy.NdPoint_withX(self, value)

    def withY(self, value):
        return _VisusKernelPy.NdPoint_withY(self, value)

    def withZ(self, value):
        return _VisusKernelPy.NdPoint_withZ(self, value)

    def get(self, *args):
        return _VisusKernelPy.NdPoint_get(self, *args)

    def set(self, i, value):
        return _VisusKernelPy.NdPoint_set(self, i, value)

    def __getitem__(self, i):
        return _VisusKernelPy.NdPoint___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.NdPoint___getitem_ref__(self, i)

    def __neg__(self):
        return _VisusKernelPy.NdPoint___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.NdPoint___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.NdPoint___sub__(self, other)

    def __iadd__(self, other):
        return _VisusKernelPy.NdPoint___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.NdPoint___isub__(self, other)

    def __imul__(self, s):
        return _VisusKernelPy.NdPoint___imul__(self, s)

    def __eq__(self, other):
        return _VisusKernelPy.NdPoint___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.NdPoint___ne__(self, other)
    if _newclass:
        min = staticmethod(_VisusKernelPy.NdPoint_min)
    else:
        min = _VisusKernelPy.NdPoint_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.NdPoint_max)
    else:
        max = _VisusKernelPy.NdPoint_max

    def minsize(self):
        return _VisusKernelPy.NdPoint_minsize(self)

    def maxsize(self):
        return _VisusKernelPy.NdPoint_maxsize(self)

    def __lt__(self, b):
        return _VisusKernelPy.NdPoint___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.NdPoint___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.NdPoint___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.NdPoint___ge__(self, b)
    if _newclass:
        less = staticmethod(_VisusKernelPy.NdPoint_less)
    else:
        less = _VisusKernelPy.NdPoint_less
    if _newclass:
        lessEqual = staticmethod(_VisusKernelPy.NdPoint_lessEqual)
    else:
        lessEqual = _VisusKernelPy.NdPoint_lessEqual
    if _newclass:
        greater = staticmethod(_VisusKernelPy.NdPoint_greater)
    else:
        greater = _VisusKernelPy.NdPoint_greater
    if _newclass:
        greaterEqual = staticmethod(_VisusKernelPy.NdPoint_greaterEqual)
    else:
        greaterEqual = _VisusKernelPy.NdPoint_greaterEqual

    def dot(self, other):
        return _VisusKernelPy.NdPoint_dot(self, other)

    def dotProduct(self, other):
        return _VisusKernelPy.NdPoint_dotProduct(self, other)

    def getLog2(self):
        return _VisusKernelPy.NdPoint_getLog2(self)

    def stride(self):
        return _VisusKernelPy.NdPoint_stride(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.NdPoint_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.NdPoint_innerDiv(self, other)

    def innerProduct(self):
        return _VisusKernelPy.NdPoint_innerProduct(self)

    def overflow(self):
        return _VisusKernelPy.NdPoint_overflow(self)

    def toPoint3(self):
        return _VisusKernelPy.NdPoint_toPoint3(self)

    def toPoint3i(self):
        return _VisusKernelPy.NdPoint_toPoint3i(self)

    def toPoint3d(self):
        return _VisusKernelPy.NdPoint_toPoint3d(self)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.NdPoint_parseFromString)
    else:
        parseFromString = _VisusKernelPy.NdPoint_parseFromString
    if _newclass:
        parseDims = staticmethod(_VisusKernelPy.NdPoint_parseDims)
    else:
        parseDims = _VisusKernelPy.NdPoint_parseDims

    def toString(self, *args):
        return _VisusKernelPy.NdPoint_toString(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_NdPoint
    __del__ = lambda self: None
NdPoint_swigregister = _VisusKernelPy.NdPoint_swigregister
NdPoint_swigregister(NdPoint)

def NdPoint_one(*args):
    return _VisusKernelPy.NdPoint_one(*args)
NdPoint_one = _VisusKernelPy.NdPoint_one

def NdPoint_min(a, b):
    return _VisusKernelPy.NdPoint_min(a, b)
NdPoint_min = _VisusKernelPy.NdPoint_min

def NdPoint_max(a, b):
    return _VisusKernelPy.NdPoint_max(a, b)
NdPoint_max = _VisusKernelPy.NdPoint_max

def NdPoint_less(a, b):
    return _VisusKernelPy.NdPoint_less(a, b)
NdPoint_less = _VisusKernelPy.NdPoint_less

def NdPoint_lessEqual(a, b):
    return _VisusKernelPy.NdPoint_lessEqual(a, b)
NdPoint_lessEqual = _VisusKernelPy.NdPoint_lessEqual

def NdPoint_greater(a, b):
    return _VisusKernelPy.NdPoint_greater(a, b)
NdPoint_greater = _VisusKernelPy.NdPoint_greater

def NdPoint_greaterEqual(a, b):
    return _VisusKernelPy.NdPoint_greaterEqual(a, b)
NdPoint_greaterEqual = _VisusKernelPy.NdPoint_greaterEqual

def NdPoint_parseFromString(src):
    return _VisusKernelPy.NdPoint_parseFromString(src)
NdPoint_parseFromString = _VisusKernelPy.NdPoint_parseFromString

def NdPoint_parseDims(src):
    return _VisusKernelPy.NdPoint_parseDims(src)
NdPoint_parseDims = _VisusKernelPy.NdPoint_parseDims

class Box3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _VisusKernelPy.Box3d_p1_set
    __swig_getmethods__["p1"] = _VisusKernelPy.Box3d_p1_get
    if _newclass:
        p1 = _swig_property(_VisusKernelPy.Box3d_p1_get, _VisusKernelPy.Box3d_p1_set)
    __swig_setmethods__["p2"] = _VisusKernelPy.Box3d_p2_set
    __swig_getmethods__["p2"] = _VisusKernelPy.Box3d_p2_get
    if _newclass:
        p2 = _swig_property(_VisusKernelPy.Box3d_p2_get, _VisusKernelPy.Box3d_p2_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Box3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.Box3d_invalid)
    else:
        invalid = _VisusKernelPy.Box3d_invalid

    def valid(self):
        return _VisusKernelPy.Box3d_valid(self)

    def center(self):
        return _VisusKernelPy.Box3d_center(self)

    def size(self):
        return _VisusKernelPy.Box3d_size(self)

    def maxsize(self):
        return _VisusKernelPy.Box3d_maxsize(self)

    def minsize(self):
        return _VisusKernelPy.Box3d_minsize(self)

    def middle(self):
        return _VisusKernelPy.Box3d_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.Box3d_addPoint(self, p)

    def getPoints(self):
        return _VisusKernelPy.Box3d_getPoints(self)

    def getPoint(self, *args):
        return _VisusKernelPy.Box3d_getPoint(self, *args)

    def containsPoint(self, p):
        return _VisusKernelPy.Box3d_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.Box3d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Box3d___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.Box3d_intersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.Box3d_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.Box3d_getUnion(self, b)

    def getPlanes(self):
        return _VisusKernelPy.Box3d_getPlanes(self)

    def scaleAroundCenter(self, scale):
        return _VisusKernelPy.Box3d_scaleAroundCenter(self, scale)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.Box3d_parseFromString)
    else:
        parseFromString = _VisusKernelPy.Box3d_parseFromString

    def toString(self):
        return _VisusKernelPy.Box3d_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.Box3d_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.Box3d_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusKernelPy.delete_Box3d
    __del__ = lambda self: None
Box3d_swigregister = _VisusKernelPy.Box3d_swigregister
Box3d_swigregister(Box3d)

def Box3d_invalid():
    return _VisusKernelPy.Box3d_invalid()
Box3d_invalid = _VisusKernelPy.Box3d_invalid

def Box3d_parseFromString(value):
    return _VisusKernelPy.Box3d_parseFromString(value)
Box3d_parseFromString = _VisusKernelPy.Box3d_parseFromString

class Box3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box3i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _VisusKernelPy.Box3i_p1_set
    __swig_getmethods__["p1"] = _VisusKernelPy.Box3i_p1_get
    if _newclass:
        p1 = _swig_property(_VisusKernelPy.Box3i_p1_get, _VisusKernelPy.Box3i_p1_set)
    __swig_setmethods__["p2"] = _VisusKernelPy.Box3i_p2_set
    __swig_getmethods__["p2"] = _VisusKernelPy.Box3i_p2_get
    if _newclass:
        p2 = _swig_property(_VisusKernelPy.Box3i_p2_get, _VisusKernelPy.Box3i_p2_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Box3i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.Box3i_invalid)
    else:
        invalid = _VisusKernelPy.Box3i_invalid

    def valid(self):
        return _VisusKernelPy.Box3i_valid(self)

    def center(self):
        return _VisusKernelPy.Box3i_center(self)

    def size(self):
        return _VisusKernelPy.Box3i_size(self)

    def maxsize(self):
        return _VisusKernelPy.Box3i_maxsize(self)

    def minsize(self):
        return _VisusKernelPy.Box3i_minsize(self)

    def middle(self):
        return _VisusKernelPy.Box3i_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.Box3i_addPoint(self, p)

    def getPoints(self):
        return _VisusKernelPy.Box3i_getPoints(self)

    def getPoint(self, *args):
        return _VisusKernelPy.Box3i_getPoint(self, *args)

    def containsPoint(self, p):
        return _VisusKernelPy.Box3i_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.Box3i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Box3i___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.Box3i_intersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.Box3i_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.Box3i_getUnion(self, b)

    def getPlanes(self):
        return _VisusKernelPy.Box3i_getPlanes(self)

    def scaleAroundCenter(self, scale):
        return _VisusKernelPy.Box3i_scaleAroundCenter(self, scale)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.Box3i_parseFromString)
    else:
        parseFromString = _VisusKernelPy.Box3i_parseFromString

    def toString(self):
        return _VisusKernelPy.Box3i_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.Box3i_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.Box3i_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusKernelPy.delete_Box3i
    __del__ = lambda self: None
Box3i_swigregister = _VisusKernelPy.Box3i_swigregister
Box3i_swigregister(Box3i)

def Box3i_invalid():
    return _VisusKernelPy.Box3i_invalid()
Box3i_invalid = _VisusKernelPy.Box3i_invalid

def Box3i_parseFromString(value):
    return _VisusKernelPy.Box3i_parseFromString(value)
Box3i_parseFromString = _VisusKernelPy.Box3i_parseFromString

class BoxNd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxNd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxNd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _VisusKernelPy.BoxNd_p1_set
    __swig_getmethods__["p1"] = _VisusKernelPy.BoxNd_p1_get
    if _newclass:
        p1 = _swig_property(_VisusKernelPy.BoxNd_p1_get, _VisusKernelPy.BoxNd_p1_set)
    __swig_setmethods__["p2"] = _VisusKernelPy.BoxNd_p2_set
    __swig_getmethods__["p2"] = _VisusKernelPy.BoxNd_p2_get
    if _newclass:
        p2 = _swig_property(_VisusKernelPy.BoxNd_p2_get, _VisusKernelPy.BoxNd_p2_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_BoxNd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.BoxNd_getPointDim(self)
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.BoxNd_invalid)
    else:
        invalid = _VisusKernelPy.BoxNd_invalid

    def valid(self):
        return _VisusKernelPy.BoxNd_valid(self)

    def isFullDim(self):
        return _VisusKernelPy.BoxNd_isFullDim(self)

    def center(self):
        return _VisusKernelPy.BoxNd_center(self)

    def size(self):
        return _VisusKernelPy.BoxNd_size(self)

    def maxsize(self):
        return _VisusKernelPy.BoxNd_maxsize(self)

    def minsize(self):
        return _VisusKernelPy.BoxNd_minsize(self)

    def middle(self):
        return _VisusKernelPy.BoxNd_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.BoxNd_addPoint(self, p)

    def toBox3(self):
        return _VisusKernelPy.BoxNd_toBox3(self)

    def containsPoint(self, p):
        return _VisusKernelPy.BoxNd_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.BoxNd___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.BoxNd___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.BoxNd_intersect(self, other)

    def strictIntersect(self, other):
        return _VisusKernelPy.BoxNd_strictIntersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.BoxNd_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.BoxNd_getUnion(self, b)

    def containsBox(self, other):
        return _VisusKernelPy.BoxNd_containsBox(self, other)

    def scaleAroundCenter(self, scale):
        return _VisusKernelPy.BoxNd_scaleAroundCenter(self, scale)

    def getSlab(self, axis, v1, v2):
        return _VisusKernelPy.BoxNd_getSlab(self, axis, v1, v2)

    def getXSlab(self, x1, x2):
        return _VisusKernelPy.BoxNd_getXSlab(self, x1, x2)

    def getYSlab(self, y1, y2):
        return _VisusKernelPy.BoxNd_getYSlab(self, y1, y2)

    def getZSlab(self, z1, z2):
        return _VisusKernelPy.BoxNd_getZSlab(self, z1, z2)

    def translate(self, vt):
        return _VisusKernelPy.BoxNd_translate(self, vt)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.BoxNd_parseFromString)
    else:
        parseFromString = _VisusKernelPy.BoxNd_parseFromString

    def toString(self):
        return _VisusKernelPy.BoxNd_toString(self)

    def toOldFormatString(self):
        return _VisusKernelPy.BoxNd_toOldFormatString(self)
    if _newclass:
        parseFromOldFormatString = staticmethod(_VisusKernelPy.BoxNd_parseFromOldFormatString)
    else:
        parseFromOldFormatString = _VisusKernelPy.BoxNd_parseFromOldFormatString

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.BoxNd_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.BoxNd_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusKernelPy.delete_BoxNd
    __del__ = lambda self: None
BoxNd_swigregister = _VisusKernelPy.BoxNd_swigregister
BoxNd_swigregister(BoxNd)

def BoxNd_invalid(pdim):
    return _VisusKernelPy.BoxNd_invalid(pdim)
BoxNd_invalid = _VisusKernelPy.BoxNd_invalid

def BoxNd_parseFromString(value):
    return _VisusKernelPy.BoxNd_parseFromString(value)
BoxNd_parseFromString = _VisusKernelPy.BoxNd_parseFromString

def BoxNd_parseFromOldFormatString(pdim, src):
    return _VisusKernelPy.BoxNd_parseFromOldFormatString(pdim, src)
BoxNd_parseFromOldFormatString = _VisusKernelPy.BoxNd_parseFromOldFormatString

class NdBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NdBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NdBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _VisusKernelPy.NdBox_p1_set
    __swig_getmethods__["p1"] = _VisusKernelPy.NdBox_p1_get
    if _newclass:
        p1 = _swig_property(_VisusKernelPy.NdBox_p1_get, _VisusKernelPy.NdBox_p1_set)
    __swig_setmethods__["p2"] = _VisusKernelPy.NdBox_p2_set
    __swig_getmethods__["p2"] = _VisusKernelPy.NdBox_p2_get
    if _newclass:
        p2 = _swig_property(_VisusKernelPy.NdBox_p2_get, _VisusKernelPy.NdBox_p2_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_NdBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.NdBox_getPointDim(self)
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.NdBox_invalid)
    else:
        invalid = _VisusKernelPy.NdBox_invalid

    def valid(self):
        return _VisusKernelPy.NdBox_valid(self)

    def isFullDim(self):
        return _VisusKernelPy.NdBox_isFullDim(self)

    def center(self):
        return _VisusKernelPy.NdBox_center(self)

    def size(self):
        return _VisusKernelPy.NdBox_size(self)

    def maxsize(self):
        return _VisusKernelPy.NdBox_maxsize(self)

    def minsize(self):
        return _VisusKernelPy.NdBox_minsize(self)

    def middle(self):
        return _VisusKernelPy.NdBox_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.NdBox_addPoint(self, p)

    def toBox3(self):
        return _VisusKernelPy.NdBox_toBox3(self)

    def containsPoint(self, p):
        return _VisusKernelPy.NdBox_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.NdBox___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.NdBox___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.NdBox_intersect(self, other)

    def strictIntersect(self, other):
        return _VisusKernelPy.NdBox_strictIntersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.NdBox_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.NdBox_getUnion(self, b)

    def containsBox(self, other):
        return _VisusKernelPy.NdBox_containsBox(self, other)

    def scaleAroundCenter(self, scale):
        return _VisusKernelPy.NdBox_scaleAroundCenter(self, scale)

    def getSlab(self, axis, v1, v2):
        return _VisusKernelPy.NdBox_getSlab(self, axis, v1, v2)

    def getXSlab(self, x1, x2):
        return _VisusKernelPy.NdBox_getXSlab(self, x1, x2)

    def getYSlab(self, y1, y2):
        return _VisusKernelPy.NdBox_getYSlab(self, y1, y2)

    def getZSlab(self, z1, z2):
        return _VisusKernelPy.NdBox_getZSlab(self, z1, z2)

    def translate(self, vt):
        return _VisusKernelPy.NdBox_translate(self, vt)
    if _newclass:
        parseFromString = staticmethod(_VisusKernelPy.NdBox_parseFromString)
    else:
        parseFromString = _VisusKernelPy.NdBox_parseFromString

    def toString(self):
        return _VisusKernelPy.NdBox_toString(self)

    def toOldFormatString(self):
        return _VisusKernelPy.NdBox_toOldFormatString(self)
    if _newclass:
        parseFromOldFormatString = staticmethod(_VisusKernelPy.NdBox_parseFromOldFormatString)
    else:
        parseFromOldFormatString = _VisusKernelPy.NdBox_parseFromOldFormatString

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.NdBox_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.NdBox_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusKernelPy.delete_NdBox
    __del__ = lambda self: None
NdBox_swigregister = _VisusKernelPy.NdBox_swigregister
NdBox_swigregister(NdBox)

def NdBox_invalid(pdim):
    return _VisusKernelPy.NdBox_invalid(pdim)
NdBox_invalid = _VisusKernelPy.NdBox_invalid

def NdBox_parseFromString(value):
    return _VisusKernelPy.NdBox_parseFromString(value)
NdBox_parseFromString = _VisusKernelPy.NdBox_parseFromString

def NdBox_parseFromOldFormatString(pdim, src):
    return _VisusKernelPy.NdBox_parseFromOldFormatString(pdim, src)
NdBox_parseFromOldFormatString = _VisusKernelPy.NdBox_parseFromOldFormatString

class Matrix3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mat"] = _VisusKernelPy.Matrix3_mat_set
    __swig_getmethods__["mat"] = _VisusKernelPy.Matrix3_mat_get
    if _newclass:
        mat = _swig_property(_VisusKernelPy.Matrix3_mat_get, _VisusKernelPy.Matrix3_mat_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Matrix3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Matrix3
    __del__ = lambda self: None

    def assign(self, other):
        return _VisusKernelPy.Matrix3_assign(self, other)

    def toString(self):
        return _VisusKernelPy.Matrix3_toString(self)

    def __getitem__(self, idx):
        return _VisusKernelPy.Matrix3___getitem__(self, idx)

    def __getitem_ref__(self, idx):
        return _VisusKernelPy.Matrix3___getitem_ref__(self, idx)

    def __eq__(self, other):
        return _VisusKernelPy.Matrix3___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Matrix3___ne__(self, other)
    if _newclass:
        identity = staticmethod(_VisusKernelPy.Matrix3_identity)
    else:
        identity = _VisusKernelPy.Matrix3_identity
    if _newclass:
        zero = staticmethod(_VisusKernelPy.Matrix3_zero)
    else:
        zero = _VisusKernelPy.Matrix3_zero

    def __call__(self, i, j):
        return _VisusKernelPy.Matrix3___call__(self, i, j)

    def __neg__(self):
        return _VisusKernelPy.Matrix3___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.Matrix3___add__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.Matrix3___isub__(self, other)

    def __mul__(self, *args):
        return _VisusKernelPy.Matrix3___mul__(self, *args)

    def transpose(self):
        return _VisusKernelPy.Matrix3_transpose(self)

    def determinant(self):
        return _VisusKernelPy.Matrix3_determinant(self)

    def invert(self):
        return _VisusKernelPy.Matrix3_invert(self)

    def row(self, i):
        return _VisusKernelPy.Matrix3_row(self, i)

    def col(self, j):
        return _VisusKernelPy.Matrix3_col(self, j)
    if _newclass:
        translate = staticmethod(_VisusKernelPy.Matrix3_translate)
    else:
        translate = _VisusKernelPy.Matrix3_translate
    if _newclass:
        scale = staticmethod(_VisusKernelPy.Matrix3_scale)
    else:
        scale = _VisusKernelPy.Matrix3_scale
    if _newclass:
        rotate = staticmethod(_VisusKernelPy.Matrix3_rotate)
    else:
        rotate = _VisusKernelPy.Matrix3_rotate

    def toQuaternion(self):
        return _VisusKernelPy.Matrix3_toQuaternion(self)
    if _newclass:
        scaleAroundCenter = staticmethod(_VisusKernelPy.Matrix3_scaleAroundCenter)
    else:
        scaleAroundCenter = _VisusKernelPy.Matrix3_scaleAroundCenter
Matrix3_swigregister = _VisusKernelPy.Matrix3_swigregister
Matrix3_swigregister(Matrix3)

def Matrix3_identity():
    return _VisusKernelPy.Matrix3_identity()
Matrix3_identity = _VisusKernelPy.Matrix3_identity

def Matrix3_zero():
    return _VisusKernelPy.Matrix3_zero()
Matrix3_zero = _VisusKernelPy.Matrix3_zero

def Matrix3_translate(vt):
    return _VisusKernelPy.Matrix3_translate(vt)
Matrix3_translate = _VisusKernelPy.Matrix3_translate

def Matrix3_scale(*args):
    return _VisusKernelPy.Matrix3_scale(*args)
Matrix3_scale = _VisusKernelPy.Matrix3_scale

def Matrix3_rotate(q):
    return _VisusKernelPy.Matrix3_rotate(q)
Matrix3_rotate = _VisusKernelPy.Matrix3_rotate

def Matrix3_scaleAroundCenter(center, vs):
    return _VisusKernelPy.Matrix3_scaleAroundCenter(center, vs)
Matrix3_scaleAroundCenter = _VisusKernelPy.Matrix3_scaleAroundCenter


def __mul__(*args):
    return _VisusKernelPy.__mul__(*args)
__mul__ = _VisusKernelPy.__mul__
class Matrix4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mat"] = _VisusKernelPy.Matrix4_mat_set
    __swig_getmethods__["mat"] = _VisusKernelPy.Matrix4_mat_get
    if _newclass:
        mat = _swig_property(_VisusKernelPy.Matrix4_mat_get, _VisusKernelPy.Matrix4_mat_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Matrix4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dropW(self):
        return _VisusKernelPy.Matrix4_dropW(self)

    def dropZ(self):
        return _VisusKernelPy.Matrix4_dropZ(self)

    def getRow(self, R):
        return _VisusKernelPy.Matrix4_getRow(self, R)

    def setRow(self, R, value):
        return _VisusKernelPy.Matrix4_setRow(self, R, value)

    def getColumn(self, C):
        return _VisusKernelPy.Matrix4_getColumn(self, C)

    def setColumn(self, C, value):
        return _VisusKernelPy.Matrix4_setColumn(self, C, value)

    def __eq__(self, src):
        return _VisusKernelPy.Matrix4___eq__(self, src)

    def __ne__(self, src):
        return _VisusKernelPy.Matrix4___ne__(self, src)

    def valid(self):
        return _VisusKernelPy.Matrix4_valid(self)

    def __getitem__(self, idx):
        return _VisusKernelPy.Matrix4___getitem__(self, idx)

    def __getitem_ref__(self, idx):
        return _VisusKernelPy.Matrix4___getitem_ref__(self, idx)

    def __neg__(self):
        return _VisusKernelPy.Matrix4___neg__(self)

    def __mul__(self, *args):
        return _VisusKernelPy.Matrix4___mul__(self, *args)

    def __imul__(self, b):
        return _VisusKernelPy.Matrix4___imul__(self, b)

    def __call__(self, row, col):
        return _VisusKernelPy.Matrix4___call__(self, row, col)

    def toString(self):
        return _VisusKernelPy.Matrix4_toString(self)

    def toStringWithPrecision(self, precision=2):
        return _VisusKernelPy.Matrix4_toStringWithPrecision(self, precision)

    def isOrthogonal(self):
        return _VisusKernelPy.Matrix4_isOrthogonal(self)

    def transpose(self):
        return _VisusKernelPy.Matrix4_transpose(self)

    def determinant(self):
        return _VisusKernelPy.Matrix4_determinant(self)

    def invert(self):
        return _VisusKernelPy.Matrix4_invert(self)

    def getLookAt(self, pos, dir, vup):
        return _VisusKernelPy.Matrix4_getLookAt(self, pos, dir, vup)
    if _newclass:
        identity = staticmethod(_VisusKernelPy.Matrix4_identity)
    else:
        identity = _VisusKernelPy.Matrix4_identity

    def isIdentity(self):
        return _VisusKernelPy.Matrix4_isIdentity(self)

    def isZero(self):
        return _VisusKernelPy.Matrix4_isZero(self)
    if _newclass:
        zero = staticmethod(_VisusKernelPy.Matrix4_zero)
    else:
        zero = _VisusKernelPy.Matrix4_zero
    if _newclass:
        perspective = staticmethod(_VisusKernelPy.Matrix4_perspective)
    else:
        perspective = _VisusKernelPy.Matrix4_perspective
    if _newclass:
        lookAt = staticmethod(_VisusKernelPy.Matrix4_lookAt)
    else:
        lookAt = _VisusKernelPy.Matrix4_lookAt
    if _newclass:
        scale = staticmethod(_VisusKernelPy.Matrix4_scale)
    else:
        scale = _VisusKernelPy.Matrix4_scale
    if _newclass:
        translate = staticmethod(_VisusKernelPy.Matrix4_translate)
    else:
        translate = _VisusKernelPy.Matrix4_translate
    if _newclass:
        scaleAndTranslate = staticmethod(_VisusKernelPy.Matrix4_scaleAndTranslate)
    else:
        scaleAndTranslate = _VisusKernelPy.Matrix4_scaleAndTranslate
    if _newclass:
        rotate = staticmethod(_VisusKernelPy.Matrix4_rotate)
    else:
        rotate = _VisusKernelPy.Matrix4_rotate
    if _newclass:
        rotateAroundAxis = staticmethod(_VisusKernelPy.Matrix4_rotateAroundAxis)
    else:
        rotateAroundAxis = _VisusKernelPy.Matrix4_rotateAroundAxis
    if _newclass:
        rotateAroundCenter = staticmethod(_VisusKernelPy.Matrix4_rotateAroundCenter)
    else:
        rotateAroundCenter = _VisusKernelPy.Matrix4_rotateAroundCenter
    if _newclass:
        scaleAroundAxis = staticmethod(_VisusKernelPy.Matrix4_scaleAroundAxis)
    else:
        scaleAroundAxis = _VisusKernelPy.Matrix4_scaleAroundAxis
    if _newclass:
        scaleAroundCenter = staticmethod(_VisusKernelPy.Matrix4_scaleAroundCenter)
    else:
        scaleAroundCenter = _VisusKernelPy.Matrix4_scaleAroundCenter
    if _newclass:
        frustum = staticmethod(_VisusKernelPy.Matrix4_frustum)
    else:
        frustum = _VisusKernelPy.Matrix4_frustum
    if _newclass:
        ortho = staticmethod(_VisusKernelPy.Matrix4_ortho)
    else:
        ortho = _VisusKernelPy.Matrix4_ortho
    if _newclass:
        viewport = staticmethod(_VisusKernelPy.Matrix4_viewport)
    else:
        viewport = _VisusKernelPy.Matrix4_viewport

    def toQuaternion(self):
        return _VisusKernelPy.Matrix4_toQuaternion(self)

    def swapColums(self, C1, C2):
        return _VisusKernelPy.Matrix4_swapColums(self, C1, C2)
    if _newclass:
        embed = staticmethod(_VisusKernelPy.Matrix4_embed)
    else:
        embed = _VisusKernelPy.Matrix4_embed
    if _newclass:
        interpolate = staticmethod(_VisusKernelPy.Matrix4_interpolate)
    else:
        interpolate = _VisusKernelPy.Matrix4_interpolate

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.Matrix4_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.Matrix4_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusKernelPy.delete_Matrix4
    __del__ = lambda self: None
Matrix4_swigregister = _VisusKernelPy.Matrix4_swigregister
Matrix4_swigregister(Matrix4)

def Matrix4_identity():
    return _VisusKernelPy.Matrix4_identity()
Matrix4_identity = _VisusKernelPy.Matrix4_identity

def Matrix4_zero():
    return _VisusKernelPy.Matrix4_zero()
Matrix4_zero = _VisusKernelPy.Matrix4_zero

def Matrix4_perspective(fovy, aspect, zNear, zFar):
    return _VisusKernelPy.Matrix4_perspective(fovy, aspect, zNear, zFar)
Matrix4_perspective = _VisusKernelPy.Matrix4_perspective

def Matrix4_lookAt(eye, center, up):
    return _VisusKernelPy.Matrix4_lookAt(eye, center, up)
Matrix4_lookAt = _VisusKernelPy.Matrix4_lookAt

def Matrix4_scale(vs):
    return _VisusKernelPy.Matrix4_scale(vs)
Matrix4_scale = _VisusKernelPy.Matrix4_scale

def Matrix4_translate(*args):
    return _VisusKernelPy.Matrix4_translate(*args)
Matrix4_translate = _VisusKernelPy.Matrix4_translate

def Matrix4_scaleAndTranslate(vs, vt):
    return _VisusKernelPy.Matrix4_scaleAndTranslate(vs, vt)
Matrix4_scaleAndTranslate = _VisusKernelPy.Matrix4_scaleAndTranslate

def Matrix4_rotate(*args):
    return _VisusKernelPy.Matrix4_rotate(*args)
Matrix4_rotate = _VisusKernelPy.Matrix4_rotate

def Matrix4_rotateAroundAxis(axis, angle):
    return _VisusKernelPy.Matrix4_rotateAroundAxis(axis, angle)
Matrix4_rotateAroundAxis = _VisusKernelPy.Matrix4_rotateAroundAxis

def Matrix4_rotateAroundCenter(center, axis, angle):
    return _VisusKernelPy.Matrix4_rotateAroundCenter(center, axis, angle)
Matrix4_rotateAroundCenter = _VisusKernelPy.Matrix4_rotateAroundCenter

def Matrix4_scaleAroundAxis(axis, k):
    return _VisusKernelPy.Matrix4_scaleAroundAxis(axis, k)
Matrix4_scaleAroundAxis = _VisusKernelPy.Matrix4_scaleAroundAxis

def Matrix4_scaleAroundCenter(center, axis, k):
    return _VisusKernelPy.Matrix4_scaleAroundCenter(center, axis, k)
Matrix4_scaleAroundCenter = _VisusKernelPy.Matrix4_scaleAroundCenter

def Matrix4_frustum(left, right, bottom, top, nearZ, farZ):
    return _VisusKernelPy.Matrix4_frustum(left, right, bottom, top, nearZ, farZ)
Matrix4_frustum = _VisusKernelPy.Matrix4_frustum

def Matrix4_ortho(left, right, bottom, top, nearZ, farZ):
    return _VisusKernelPy.Matrix4_ortho(left, right, bottom, top, nearZ, farZ)
Matrix4_ortho = _VisusKernelPy.Matrix4_ortho

def Matrix4_viewport(x, y, width, height):
    return _VisusKernelPy.Matrix4_viewport(x, y, width, height)
Matrix4_viewport = _VisusKernelPy.Matrix4_viewport

def Matrix4_embed(axis, offset):
    return _VisusKernelPy.Matrix4_embed(axis, offset)
Matrix4_embed = _VisusKernelPy.Matrix4_embed

def Matrix4_interpolate(alpha, T1, beta, T2):
    return _VisusKernelPy.Matrix4_interpolate(alpha, T1, beta, T2)
Matrix4_interpolate = _VisusKernelPy.Matrix4_interpolate

class QDUMatrixDecomposition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QDUMatrixDecomposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QDUMatrixDecomposition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Q"] = _VisusKernelPy.QDUMatrixDecomposition_Q_set
    __swig_getmethods__["Q"] = _VisusKernelPy.QDUMatrixDecomposition_Q_get
    if _newclass:
        Q = _swig_property(_VisusKernelPy.QDUMatrixDecomposition_Q_get, _VisusKernelPy.QDUMatrixDecomposition_Q_set)
    __swig_setmethods__["D"] = _VisusKernelPy.QDUMatrixDecomposition_D_set
    __swig_getmethods__["D"] = _VisusKernelPy.QDUMatrixDecomposition_D_get
    if _newclass:
        D = _swig_property(_VisusKernelPy.QDUMatrixDecomposition_D_get, _VisusKernelPy.QDUMatrixDecomposition_D_set)
    __swig_setmethods__["U"] = _VisusKernelPy.QDUMatrixDecomposition_U_set
    __swig_getmethods__["U"] = _VisusKernelPy.QDUMatrixDecomposition_U_get
    if _newclass:
        U = _swig_property(_VisusKernelPy.QDUMatrixDecomposition_U_get, _VisusKernelPy.QDUMatrixDecomposition_U_set)

    def __init__(self, T):
        this = _VisusKernelPy.new_QDUMatrixDecomposition(T)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_QDUMatrixDecomposition
    __del__ = lambda self: None
QDUMatrixDecomposition_swigregister = _VisusKernelPy.QDUMatrixDecomposition_swigregister
QDUMatrixDecomposition_swigregister(QDUMatrixDecomposition)

class TRSMatrixDecomposition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRSMatrixDecomposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRSMatrixDecomposition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["translate"] = _VisusKernelPy.TRSMatrixDecomposition_translate_set
    __swig_getmethods__["translate"] = _VisusKernelPy.TRSMatrixDecomposition_translate_get
    if _newclass:
        translate = _swig_property(_VisusKernelPy.TRSMatrixDecomposition_translate_get, _VisusKernelPy.TRSMatrixDecomposition_translate_set)
    __swig_setmethods__["rotate"] = _VisusKernelPy.TRSMatrixDecomposition_rotate_set
    __swig_getmethods__["rotate"] = _VisusKernelPy.TRSMatrixDecomposition_rotate_get
    if _newclass:
        rotate = _swig_property(_VisusKernelPy.TRSMatrixDecomposition_rotate_get, _VisusKernelPy.TRSMatrixDecomposition_rotate_set)
    __swig_setmethods__["scale"] = _VisusKernelPy.TRSMatrixDecomposition_scale_set
    __swig_getmethods__["scale"] = _VisusKernelPy.TRSMatrixDecomposition_scale_get
    if _newclass:
        scale = _swig_property(_VisusKernelPy.TRSMatrixDecomposition_scale_get, _VisusKernelPy.TRSMatrixDecomposition_scale_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_TRSMatrixDecomposition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toMatrix(self):
        return _VisusKernelPy.TRSMatrixDecomposition_toMatrix(self)
    __swig_destroy__ = _VisusKernelPy.delete_TRSMatrixDecomposition
    __del__ = lambda self: None
TRSMatrixDecomposition_swigregister = _VisusKernelPy.TRSMatrixDecomposition_swigregister
TRSMatrixDecomposition_swigregister(TRSMatrixDecomposition)

class MatrixMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["T"] = _VisusKernelPy.MatrixMap_T_set
    __swig_getmethods__["T"] = _VisusKernelPy.MatrixMap_T_get
    if _newclass:
        T = _swig_property(_VisusKernelPy.MatrixMap_T_get, _VisusKernelPy.MatrixMap_T_set)
    __swig_setmethods__["Ti"] = _VisusKernelPy.MatrixMap_Ti_set
    __swig_getmethods__["Ti"] = _VisusKernelPy.MatrixMap_Ti_get
    if _newclass:
        Ti = _swig_property(_VisusKernelPy.MatrixMap_Ti_get, _VisusKernelPy.MatrixMap_Ti_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_MatrixMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def applyDirectMap(self, *args):
        return _VisusKernelPy.MatrixMap_applyDirectMap(self, *args)

    def applyInverseMap(self, *args):
        return _VisusKernelPy.MatrixMap_applyInverseMap(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_MatrixMap
    __del__ = lambda self: None
MatrixMap_swigregister = _VisusKernelPy.MatrixMap_swigregister
MatrixMap_swigregister(MatrixMap)

class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_Position(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.Position_invalid)
    else:
        invalid = _VisusKernelPy.Position_invalid

    def getPointDim(self):
        return _VisusKernelPy.Position_getPointDim(self)

    def __eq__(self, other):
        return _VisusKernelPy.Position___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Position___ne__(self, other)

    def valid(self):
        return _VisusKernelPy.Position_valid(self)

    def getTransformation(self):
        return _VisusKernelPy.Position_getTransformation(self)

    def setTransformation(self, value):
        return _VisusKernelPy.Position_setTransformation(self, value)

    def getBox(self):
        return _VisusKernelPy.Position_getBox(self)

    def getNdBox(self):
        return _VisusKernelPy.Position_getNdBox(self)

    def withoutTransformation(self):
        return _VisusKernelPy.Position_withoutTransformation(self)

    def toAxisAlignedBox(self):
        return _VisusKernelPy.Position_toAxisAlignedBox(self)
    if _newclass:
        shrink = staticmethod(_VisusKernelPy.Position_shrink)
    else:
        shrink = _VisusKernelPy.Position_shrink

    def toString(self):
        return _VisusKernelPy.Position_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.Position_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.Position_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusKernelPy.delete_Position
    __del__ = lambda self: None
Position_swigregister = _VisusKernelPy.Position_swigregister
Position_swigregister(Position)

def Position_invalid():
    return _VisusKernelPy.Position_invalid()
Position_invalid = _VisusKernelPy.Position_invalid

def Position_shrink(dst_box, map, position):
    return _VisusKernelPy.Position_shrink(dst_box, map, position)
Position_shrink = _VisusKernelPy.Position_shrink

class Range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["From"] = _VisusKernelPy.Range_From_set
    __swig_getmethods__["From"] = _VisusKernelPy.Range_From_get
    if _newclass:
        From = _swig_property(_VisusKernelPy.Range_From_get, _VisusKernelPy.Range_From_set)
    __swig_setmethods__["To"] = _VisusKernelPy.Range_To_set
    __swig_getmethods__["To"] = _VisusKernelPy.Range_To_get
    if _newclass:
        To = _swig_property(_VisusKernelPy.Range_To_get, _VisusKernelPy.Range_To_set)
    __swig_setmethods__["step"] = _VisusKernelPy.Range_step_set
    __swig_getmethods__["step"] = _VisusKernelPy.Range_step_get
    if _newclass:
        step = _swig_property(_VisusKernelPy.Range_step_get, _VisusKernelPy.Range_step_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Range(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Range
    __del__ = lambda self: None

    def __eq__(self, other):
        return _VisusKernelPy.Range___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Range___ne__(self, other)

    def contains(self, value):
        return _VisusKernelPy.Range_contains(self, value)
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.Range_invalid)
    else:
        invalid = _VisusKernelPy.Range_invalid

    def valid(self):
        return _VisusKernelPy.Range_valid(self)

    def delta(self):
        return _VisusKernelPy.Range_delta(self)

    def clamp(self, v):
        return _VisusKernelPy.Range_clamp(self, v)

    def toString(self):
        return _VisusKernelPy.Range_toString(self)

    def getUnion(self, other):
        return _VisusKernelPy.Range_getUnion(self, other)

    def getIntersection(self, other):
        return _VisusKernelPy.Range_getIntersection(self, other)

    def getScaleTranslate(self, *args):
        return _VisusKernelPy.Range_getScaleTranslate(self, *args)

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.Range_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.Range_readFromObjectStream(self, istream)
Range_swigregister = _VisusKernelPy.Range_swigregister
Range_swigregister(Range)

def Range_invalid():
    return _VisusKernelPy.Range_invalid()
Range_invalid = _VisusKernelPy.Range_invalid

class DType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_DType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.DType_fromString)
    else:
        fromString = _VisusKernelPy.DType_fromString

    def toString(self):
        return _VisusKernelPy.DType_toString(self)

    def isDecimal(self):
        return _VisusKernelPy.DType_isDecimal(self)

    def __eq__(self, other):
        return _VisusKernelPy.DType___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.DType___ne__(self, other)

    def valid(self):
        return _VisusKernelPy.DType_valid(self)

    def isVectorOf(self, other):
        return _VisusKernelPy.DType_isVectorOf(self, other)

    def ncomponents(self):
        return _VisusKernelPy.DType_ncomponents(self)

    def getBitSize(self, *args):
        return _VisusKernelPy.DType_getBitSize(self, *args)

    def getByteSize(self, *args):
        return _VisusKernelPy.DType_getByteSize(self, *args)

    def isUnsigned(self):
        return _VisusKernelPy.DType_isUnsigned(self)

    def getBitsOffset(self, C):
        return _VisusKernelPy.DType_getBitsOffset(self, C)

    def get(self, C):
        return _VisusKernelPy.DType_get(self, C)

    def getDTypeRange(self, component=0):
        return _VisusKernelPy.DType_getDTypeRange(self, component)

    def withDTypeRange(self, value, component=0):
        return _VisusKernelPy.DType_withDTypeRange(self, value, component)

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.DType_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.DType_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusKernelPy.delete_DType
    __del__ = lambda self: None
DType_swigregister = _VisusKernelPy.DType_swigregister
DType_swigregister(DType)

def DType_fromString(s):
    return _VisusKernelPy.DType_fromString(s)
DType_fromString = _VisusKernelPy.DType_fromString

class DTypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DTypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DTypes, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["UINT1"] = _VisusKernelPy.DTypes_UINT1_set
    __swig_getmethods__["UINT1"] = _VisusKernelPy.DTypes_UINT1_get
    if _newclass:
        UINT1 = _swig_property(_VisusKernelPy.DTypes_UINT1_get, _VisusKernelPy.DTypes_UINT1_set)
    __swig_setmethods__["INT8"] = _VisusKernelPy.DTypes_INT8_set
    __swig_getmethods__["INT8"] = _VisusKernelPy.DTypes_INT8_get
    if _newclass:
        INT8 = _swig_property(_VisusKernelPy.DTypes_INT8_get, _VisusKernelPy.DTypes_INT8_set)
    __swig_setmethods__["INT8_GA"] = _VisusKernelPy.DTypes_INT8_GA_set
    __swig_getmethods__["INT8_GA"] = _VisusKernelPy.DTypes_INT8_GA_get
    if _newclass:
        INT8_GA = _swig_property(_VisusKernelPy.DTypes_INT8_GA_get, _VisusKernelPy.DTypes_INT8_GA_set)
    __swig_setmethods__["INT8_RGB"] = _VisusKernelPy.DTypes_INT8_RGB_set
    __swig_getmethods__["INT8_RGB"] = _VisusKernelPy.DTypes_INT8_RGB_get
    if _newclass:
        INT8_RGB = _swig_property(_VisusKernelPy.DTypes_INT8_RGB_get, _VisusKernelPy.DTypes_INT8_RGB_set)
    __swig_setmethods__["INT8_RGBA"] = _VisusKernelPy.DTypes_INT8_RGBA_set
    __swig_getmethods__["INT8_RGBA"] = _VisusKernelPy.DTypes_INT8_RGBA_get
    if _newclass:
        INT8_RGBA = _swig_property(_VisusKernelPy.DTypes_INT8_RGBA_get, _VisusKernelPy.DTypes_INT8_RGBA_set)
    __swig_setmethods__["UINT8"] = _VisusKernelPy.DTypes_UINT8_set
    __swig_getmethods__["UINT8"] = _VisusKernelPy.DTypes_UINT8_get
    if _newclass:
        UINT8 = _swig_property(_VisusKernelPy.DTypes_UINT8_get, _VisusKernelPy.DTypes_UINT8_set)
    __swig_setmethods__["UINT8_GA"] = _VisusKernelPy.DTypes_UINT8_GA_set
    __swig_getmethods__["UINT8_GA"] = _VisusKernelPy.DTypes_UINT8_GA_get
    if _newclass:
        UINT8_GA = _swig_property(_VisusKernelPy.DTypes_UINT8_GA_get, _VisusKernelPy.DTypes_UINT8_GA_set)
    __swig_setmethods__["UINT8_RGB"] = _VisusKernelPy.DTypes_UINT8_RGB_set
    __swig_getmethods__["UINT8_RGB"] = _VisusKernelPy.DTypes_UINT8_RGB_get
    if _newclass:
        UINT8_RGB = _swig_property(_VisusKernelPy.DTypes_UINT8_RGB_get, _VisusKernelPy.DTypes_UINT8_RGB_set)
    __swig_setmethods__["UINT8_RGBA"] = _VisusKernelPy.DTypes_UINT8_RGBA_set
    __swig_getmethods__["UINT8_RGBA"] = _VisusKernelPy.DTypes_UINT8_RGBA_get
    if _newclass:
        UINT8_RGBA = _swig_property(_VisusKernelPy.DTypes_UINT8_RGBA_get, _VisusKernelPy.DTypes_UINT8_RGBA_set)
    __swig_setmethods__["INT16"] = _VisusKernelPy.DTypes_INT16_set
    __swig_getmethods__["INT16"] = _VisusKernelPy.DTypes_INT16_get
    if _newclass:
        INT16 = _swig_property(_VisusKernelPy.DTypes_INT16_get, _VisusKernelPy.DTypes_INT16_set)
    __swig_setmethods__["INT16_GA"] = _VisusKernelPy.DTypes_INT16_GA_set
    __swig_getmethods__["INT16_GA"] = _VisusKernelPy.DTypes_INT16_GA_get
    if _newclass:
        INT16_GA = _swig_property(_VisusKernelPy.DTypes_INT16_GA_get, _VisusKernelPy.DTypes_INT16_GA_set)
    __swig_setmethods__["INT16_RGB"] = _VisusKernelPy.DTypes_INT16_RGB_set
    __swig_getmethods__["INT16_RGB"] = _VisusKernelPy.DTypes_INT16_RGB_get
    if _newclass:
        INT16_RGB = _swig_property(_VisusKernelPy.DTypes_INT16_RGB_get, _VisusKernelPy.DTypes_INT16_RGB_set)
    __swig_setmethods__["INT16_RGBA"] = _VisusKernelPy.DTypes_INT16_RGBA_set
    __swig_getmethods__["INT16_RGBA"] = _VisusKernelPy.DTypes_INT16_RGBA_get
    if _newclass:
        INT16_RGBA = _swig_property(_VisusKernelPy.DTypes_INT16_RGBA_get, _VisusKernelPy.DTypes_INT16_RGBA_set)
    __swig_setmethods__["UINT16"] = _VisusKernelPy.DTypes_UINT16_set
    __swig_getmethods__["UINT16"] = _VisusKernelPy.DTypes_UINT16_get
    if _newclass:
        UINT16 = _swig_property(_VisusKernelPy.DTypes_UINT16_get, _VisusKernelPy.DTypes_UINT16_set)
    __swig_setmethods__["UINT16_GA"] = _VisusKernelPy.DTypes_UINT16_GA_set
    __swig_getmethods__["UINT16_GA"] = _VisusKernelPy.DTypes_UINT16_GA_get
    if _newclass:
        UINT16_GA = _swig_property(_VisusKernelPy.DTypes_UINT16_GA_get, _VisusKernelPy.DTypes_UINT16_GA_set)
    __swig_setmethods__["UINT16_RGB"] = _VisusKernelPy.DTypes_UINT16_RGB_set
    __swig_getmethods__["UINT16_RGB"] = _VisusKernelPy.DTypes_UINT16_RGB_get
    if _newclass:
        UINT16_RGB = _swig_property(_VisusKernelPy.DTypes_UINT16_RGB_get, _VisusKernelPy.DTypes_UINT16_RGB_set)
    __swig_setmethods__["UINT16_RGBA"] = _VisusKernelPy.DTypes_UINT16_RGBA_set
    __swig_getmethods__["UINT16_RGBA"] = _VisusKernelPy.DTypes_UINT16_RGBA_get
    if _newclass:
        UINT16_RGBA = _swig_property(_VisusKernelPy.DTypes_UINT16_RGBA_get, _VisusKernelPy.DTypes_UINT16_RGBA_set)
    __swig_setmethods__["INT32"] = _VisusKernelPy.DTypes_INT32_set
    __swig_getmethods__["INT32"] = _VisusKernelPy.DTypes_INT32_get
    if _newclass:
        INT32 = _swig_property(_VisusKernelPy.DTypes_INT32_get, _VisusKernelPy.DTypes_INT32_set)
    __swig_setmethods__["INT32_GA"] = _VisusKernelPy.DTypes_INT32_GA_set
    __swig_getmethods__["INT32_GA"] = _VisusKernelPy.DTypes_INT32_GA_get
    if _newclass:
        INT32_GA = _swig_property(_VisusKernelPy.DTypes_INT32_GA_get, _VisusKernelPy.DTypes_INT32_GA_set)
    __swig_setmethods__["INT32_RGB"] = _VisusKernelPy.DTypes_INT32_RGB_set
    __swig_getmethods__["INT32_RGB"] = _VisusKernelPy.DTypes_INT32_RGB_get
    if _newclass:
        INT32_RGB = _swig_property(_VisusKernelPy.DTypes_INT32_RGB_get, _VisusKernelPy.DTypes_INT32_RGB_set)
    __swig_setmethods__["INT32_RGBA"] = _VisusKernelPy.DTypes_INT32_RGBA_set
    __swig_getmethods__["INT32_RGBA"] = _VisusKernelPy.DTypes_INT32_RGBA_get
    if _newclass:
        INT32_RGBA = _swig_property(_VisusKernelPy.DTypes_INT32_RGBA_get, _VisusKernelPy.DTypes_INT32_RGBA_set)
    __swig_setmethods__["UINT32"] = _VisusKernelPy.DTypes_UINT32_set
    __swig_getmethods__["UINT32"] = _VisusKernelPy.DTypes_UINT32_get
    if _newclass:
        UINT32 = _swig_property(_VisusKernelPy.DTypes_UINT32_get, _VisusKernelPy.DTypes_UINT32_set)
    __swig_setmethods__["UINT32_GA"] = _VisusKernelPy.DTypes_UINT32_GA_set
    __swig_getmethods__["UINT32_GA"] = _VisusKernelPy.DTypes_UINT32_GA_get
    if _newclass:
        UINT32_GA = _swig_property(_VisusKernelPy.DTypes_UINT32_GA_get, _VisusKernelPy.DTypes_UINT32_GA_set)
    __swig_setmethods__["UINT32_RGB"] = _VisusKernelPy.DTypes_UINT32_RGB_set
    __swig_getmethods__["UINT32_RGB"] = _VisusKernelPy.DTypes_UINT32_RGB_get
    if _newclass:
        UINT32_RGB = _swig_property(_VisusKernelPy.DTypes_UINT32_RGB_get, _VisusKernelPy.DTypes_UINT32_RGB_set)
    __swig_setmethods__["UINT32_RGBA"] = _VisusKernelPy.DTypes_UINT32_RGBA_set
    __swig_getmethods__["UINT32_RGBA"] = _VisusKernelPy.DTypes_UINT32_RGBA_get
    if _newclass:
        UINT32_RGBA = _swig_property(_VisusKernelPy.DTypes_UINT32_RGBA_get, _VisusKernelPy.DTypes_UINT32_RGBA_set)
    __swig_setmethods__["INT64"] = _VisusKernelPy.DTypes_INT64_set
    __swig_getmethods__["INT64"] = _VisusKernelPy.DTypes_INT64_get
    if _newclass:
        INT64 = _swig_property(_VisusKernelPy.DTypes_INT64_get, _VisusKernelPy.DTypes_INT64_set)
    __swig_setmethods__["INT64_GA"] = _VisusKernelPy.DTypes_INT64_GA_set
    __swig_getmethods__["INT64_GA"] = _VisusKernelPy.DTypes_INT64_GA_get
    if _newclass:
        INT64_GA = _swig_property(_VisusKernelPy.DTypes_INT64_GA_get, _VisusKernelPy.DTypes_INT64_GA_set)
    __swig_setmethods__["INT64_RGB"] = _VisusKernelPy.DTypes_INT64_RGB_set
    __swig_getmethods__["INT64_RGB"] = _VisusKernelPy.DTypes_INT64_RGB_get
    if _newclass:
        INT64_RGB = _swig_property(_VisusKernelPy.DTypes_INT64_RGB_get, _VisusKernelPy.DTypes_INT64_RGB_set)
    __swig_setmethods__["INT64_RGBA"] = _VisusKernelPy.DTypes_INT64_RGBA_set
    __swig_getmethods__["INT64_RGBA"] = _VisusKernelPy.DTypes_INT64_RGBA_get
    if _newclass:
        INT64_RGBA = _swig_property(_VisusKernelPy.DTypes_INT64_RGBA_get, _VisusKernelPy.DTypes_INT64_RGBA_set)
    __swig_setmethods__["UINT64"] = _VisusKernelPy.DTypes_UINT64_set
    __swig_getmethods__["UINT64"] = _VisusKernelPy.DTypes_UINT64_get
    if _newclass:
        UINT64 = _swig_property(_VisusKernelPy.DTypes_UINT64_get, _VisusKernelPy.DTypes_UINT64_set)
    __swig_setmethods__["UINT64_GA"] = _VisusKernelPy.DTypes_UINT64_GA_set
    __swig_getmethods__["UINT64_GA"] = _VisusKernelPy.DTypes_UINT64_GA_get
    if _newclass:
        UINT64_GA = _swig_property(_VisusKernelPy.DTypes_UINT64_GA_get, _VisusKernelPy.DTypes_UINT64_GA_set)
    __swig_setmethods__["UINT64_RGB"] = _VisusKernelPy.DTypes_UINT64_RGB_set
    __swig_getmethods__["UINT64_RGB"] = _VisusKernelPy.DTypes_UINT64_RGB_get
    if _newclass:
        UINT64_RGB = _swig_property(_VisusKernelPy.DTypes_UINT64_RGB_get, _VisusKernelPy.DTypes_UINT64_RGB_set)
    __swig_setmethods__["UINT64_RGBA"] = _VisusKernelPy.DTypes_UINT64_RGBA_set
    __swig_getmethods__["UINT64_RGBA"] = _VisusKernelPy.DTypes_UINT64_RGBA_get
    if _newclass:
        UINT64_RGBA = _swig_property(_VisusKernelPy.DTypes_UINT64_RGBA_get, _VisusKernelPy.DTypes_UINT64_RGBA_set)
    __swig_setmethods__["FLOAT32"] = _VisusKernelPy.DTypes_FLOAT32_set
    __swig_getmethods__["FLOAT32"] = _VisusKernelPy.DTypes_FLOAT32_get
    if _newclass:
        FLOAT32 = _swig_property(_VisusKernelPy.DTypes_FLOAT32_get, _VisusKernelPy.DTypes_FLOAT32_set)
    __swig_setmethods__["FLOAT32_GA"] = _VisusKernelPy.DTypes_FLOAT32_GA_set
    __swig_getmethods__["FLOAT32_GA"] = _VisusKernelPy.DTypes_FLOAT32_GA_get
    if _newclass:
        FLOAT32_GA = _swig_property(_VisusKernelPy.DTypes_FLOAT32_GA_get, _VisusKernelPy.DTypes_FLOAT32_GA_set)
    __swig_setmethods__["FLOAT32_RGB"] = _VisusKernelPy.DTypes_FLOAT32_RGB_set
    __swig_getmethods__["FLOAT32_RGB"] = _VisusKernelPy.DTypes_FLOAT32_RGB_get
    if _newclass:
        FLOAT32_RGB = _swig_property(_VisusKernelPy.DTypes_FLOAT32_RGB_get, _VisusKernelPy.DTypes_FLOAT32_RGB_set)
    __swig_setmethods__["FLOAT32_RGBA"] = _VisusKernelPy.DTypes_FLOAT32_RGBA_set
    __swig_getmethods__["FLOAT32_RGBA"] = _VisusKernelPy.DTypes_FLOAT32_RGBA_get
    if _newclass:
        FLOAT32_RGBA = _swig_property(_VisusKernelPy.DTypes_FLOAT32_RGBA_get, _VisusKernelPy.DTypes_FLOAT32_RGBA_set)
    __swig_setmethods__["FLOAT64"] = _VisusKernelPy.DTypes_FLOAT64_set
    __swig_getmethods__["FLOAT64"] = _VisusKernelPy.DTypes_FLOAT64_get
    if _newclass:
        FLOAT64 = _swig_property(_VisusKernelPy.DTypes_FLOAT64_get, _VisusKernelPy.DTypes_FLOAT64_set)
    __swig_setmethods__["FLOAT64_GA"] = _VisusKernelPy.DTypes_FLOAT64_GA_set
    __swig_getmethods__["FLOAT64_GA"] = _VisusKernelPy.DTypes_FLOAT64_GA_get
    if _newclass:
        FLOAT64_GA = _swig_property(_VisusKernelPy.DTypes_FLOAT64_GA_get, _VisusKernelPy.DTypes_FLOAT64_GA_set)
    __swig_setmethods__["FLOAT64_RGB"] = _VisusKernelPy.DTypes_FLOAT64_RGB_set
    __swig_getmethods__["FLOAT64_RGB"] = _VisusKernelPy.DTypes_FLOAT64_RGB_get
    if _newclass:
        FLOAT64_RGB = _swig_property(_VisusKernelPy.DTypes_FLOAT64_RGB_get, _VisusKernelPy.DTypes_FLOAT64_RGB_set)
    __swig_setmethods__["FLOAT64_RGBA"] = _VisusKernelPy.DTypes_FLOAT64_RGBA_set
    __swig_getmethods__["FLOAT64_RGBA"] = _VisusKernelPy.DTypes_FLOAT64_RGBA_get
    if _newclass:
        FLOAT64_RGBA = _swig_property(_VisusKernelPy.DTypes_FLOAT64_RGBA_get, _VisusKernelPy.DTypes_FLOAT64_RGBA_set)
    __swig_destroy__ = _VisusKernelPy.delete_DTypes
    __del__ = lambda self: None
DTypes_swigregister = _VisusKernelPy.DTypes_swigregister
DTypes_swigregister(DTypes)

class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _VisusKernelPy.Field_name_set
    __swig_getmethods__["name"] = _VisusKernelPy.Field_name_get
    if _newclass:
        name = _swig_property(_VisusKernelPy.Field_name_get, _VisusKernelPy.Field_name_set)
    __swig_setmethods__["dtype"] = _VisusKernelPy.Field_dtype_set
    __swig_getmethods__["dtype"] = _VisusKernelPy.Field_dtype_get
    if _newclass:
        dtype = _swig_property(_VisusKernelPy.Field_dtype_get, _VisusKernelPy.Field_dtype_set)
    __swig_setmethods__["description"] = _VisusKernelPy.Field_description_set
    __swig_getmethods__["description"] = _VisusKernelPy.Field_description_get
    if _newclass:
        description = _swig_property(_VisusKernelPy.Field_description_get, _VisusKernelPy.Field_description_set)
    __swig_setmethods__["index"] = _VisusKernelPy.Field_index_set
    __swig_getmethods__["index"] = _VisusKernelPy.Field_index_get
    if _newclass:
        index = _swig_property(_VisusKernelPy.Field_index_get, _VisusKernelPy.Field_index_set)
    __swig_setmethods__["default_compression"] = _VisusKernelPy.Field_default_compression_set
    __swig_getmethods__["default_compression"] = _VisusKernelPy.Field_default_compression_get
    if _newclass:
        default_compression = _swig_property(_VisusKernelPy.Field_default_compression_get, _VisusKernelPy.Field_default_compression_set)
    __swig_setmethods__["default_layout"] = _VisusKernelPy.Field_default_layout_set
    __swig_getmethods__["default_layout"] = _VisusKernelPy.Field_default_layout_get
    if _newclass:
        default_layout = _swig_property(_VisusKernelPy.Field_default_layout_get, _VisusKernelPy.Field_default_layout_set)
    __swig_setmethods__["default_value"] = _VisusKernelPy.Field_default_value_set
    __swig_getmethods__["default_value"] = _VisusKernelPy.Field_default_value_get
    if _newclass:
        default_value = _swig_property(_VisusKernelPy.Field_default_value_get, _VisusKernelPy.Field_default_value_set)
    __swig_setmethods__["filter"] = _VisusKernelPy.Field_filter_set
    __swig_getmethods__["filter"] = _VisusKernelPy.Field_filter_get
    if _newclass:
        filter = _swig_property(_VisusKernelPy.Field_filter_get, _VisusKernelPy.Field_filter_set)
    __swig_setmethods__["params"] = _VisusKernelPy.Field_params_set
    __swig_getmethods__["params"] = _VisusKernelPy.Field_params_get
    if _newclass:
        params = _swig_property(_VisusKernelPy.Field_params_get, _VisusKernelPy.Field_params_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Field(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valid(self):
        return _VisusKernelPy.Field_valid(self)

    def getDescription(self, bUseNameIfEmpty=True):
        return _VisusKernelPy.Field_getDescription(self, bUseNameIfEmpty)

    def setDescription(self, value):
        return _VisusKernelPy.Field_setDescription(self, value)

    def hasParam(self, key):
        return _VisusKernelPy.Field_hasParam(self, key)

    def getParam(self, *args):
        return _VisusKernelPy.Field_getParam(self, *args)

    def getDTypeRange(self, component=0):
        return _VisusKernelPy.Field_getDTypeRange(self, component)

    def setDTypeRange(self, value, component=0):
        return _VisusKernelPy.Field_setDTypeRange(self, value, component)

    def writeToObjectStream(self, ostream):
        return _VisusKernelPy.Field_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusKernelPy.Field_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusKernelPy.delete_Field
    __del__ = lambda self: None
Field_swigregister = _VisusKernelPy.Field_swigregister
Field_swigregister(Field)

class Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dtype"] = _VisusKernelPy.Array_dtype_set
    __swig_getmethods__["dtype"] = _VisusKernelPy.Array_dtype_get
    if _newclass:
        dtype = _swig_property(_VisusKernelPy.Array_dtype_get, _VisusKernelPy.Array_dtype_set)
    __swig_setmethods__["dims"] = _VisusKernelPy.Array_dims_set
    __swig_getmethods__["dims"] = _VisusKernelPy.Array_dims_get
    if _newclass:
        dims = _swig_property(_VisusKernelPy.Array_dims_get, _VisusKernelPy.Array_dims_set)
    __swig_setmethods__["url"] = _VisusKernelPy.Array_url_set
    __swig_getmethods__["url"] = _VisusKernelPy.Array_url_get
    if _newclass:
        url = _swig_property(_VisusKernelPy.Array_url_get, _VisusKernelPy.Array_url_set)
    __swig_setmethods__["layout"] = _VisusKernelPy.Array_layout_set
    __swig_getmethods__["layout"] = _VisusKernelPy.Array_layout_get
    if _newclass:
        layout = _swig_property(_VisusKernelPy.Array_layout_get, _VisusKernelPy.Array_layout_set)
    __swig_setmethods__["bounds"] = _VisusKernelPy.Array_bounds_set
    __swig_getmethods__["bounds"] = _VisusKernelPy.Array_bounds_get
    if _newclass:
        bounds = _swig_property(_VisusKernelPy.Array_bounds_get, _VisusKernelPy.Array_bounds_set)
    __swig_setmethods__["clipping"] = _VisusKernelPy.Array_clipping_set
    __swig_getmethods__["clipping"] = _VisusKernelPy.Array_clipping_get
    if _newclass:
        clipping = _swig_property(_VisusKernelPy.Array_clipping_get, _VisusKernelPy.Array_clipping_set)
    __swig_setmethods__["heap"] = _VisusKernelPy.Array_heap_set
    __swig_getmethods__["heap"] = _VisusKernelPy.Array_heap_get
    if _newclass:
        heap = _swig_property(_VisusKernelPy.Array_heap_get, _VisusKernelPy.Array_heap_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Array
    __del__ = lambda self: None

    def __nonzero__(self):
        return _VisusKernelPy.Array___nonzero__(self)
    __bool__ = __nonzero__



    def getPointDim(self):
        return _VisusKernelPy.Array_getPointDim(self)

    def getWidth(self):
        return _VisusKernelPy.Array_getWidth(self)

    def getHeight(self):
        return _VisusKernelPy.Array_getHeight(self)

    def getDepth(self):
        return _VisusKernelPy.Array_getDepth(self)

    def getTotalNumberOfSamples(self):
        return _VisusKernelPy.Array_getTotalNumberOfSamples(self)

    def shareProperties(self, other):
        return _VisusKernelPy.Array_shareProperties(self, other)
    if _newclass:
        createView = staticmethod(_VisusKernelPy.Array_createView)
    else:
        createView = _VisusKernelPy.Array_createView

    def isAllZero(self):
        return _VisusKernelPy.Array_isAllZero(self)

    def c_capacity(self):
        return _VisusKernelPy.Array_c_capacity(self)

    def c_size(self):
        return _VisusKernelPy.Array_c_size(self)

    def c_ptr(self):
        return _VisusKernelPy.Array_c_ptr(self)

    def c_address(self):
        return _VisusKernelPy.Array_c_address(self)

    def shrink(self):
        return _VisusKernelPy.Array_shrink(self)

    def fillWithValue(self, value):
        return _VisusKernelPy.Array_fillWithValue(self, value)

    def resize(self, *args):
        return _VisusKernelPy.Array_resize(self, *args)

    def getComponent(self, *args):
        return _VisusKernelPy.Array_getComponent(self, *args)

    def setComponent(self, *args):
        return _VisusKernelPy.Array_setComponent(self, *args)

    def __getitem__(self, index):
        return _VisusKernelPy.Array___getitem__(self, index)

    def __add__(self, other):
        return _VisusKernelPy.Array___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.Array___sub__(self, other)

    def __mul__(self, *args):
        return _VisusKernelPy.Array___mul__(self, *args)

    def __truediv__(self, *args):
        return _VisusKernelPy.Array___div__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, other):
        return _VisusKernelPy.Array___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.Array___isub__(self, other)

    def __imul__(self, *args):
        return _VisusKernelPy.Array___imul__(self, *args)

    def __itruediv__(self, *args):
        return _VisusKernelPy.Array___itruediv__(self, *args)
    __idiv__ = __itruediv__




       # ////////////////////////////////////////////////////////
    def __rmul__(self, v):
       return self.__mul__(v)

    # ////////////////////////////////////////////////////////
    def toNumPy(src,bShareMem=False,bSqueeze=False):
       import numpy
       shape=list(reversed([src.dims[I] for I in range(src.dims.getPointDim())]))
       shape.append(src.dtype.ncomponents())
       if bSqueeze: shape=[it for it in shape if it>1]
       single_dtype=src.dtype.get(0)
       typestr=("|" if single_dtype.getBitSize()==8 else "<") + ("f" if single_dtype.isDecimal() else ("u" if single_dtype.isUnsigned() else "i")) + str(int(single_dtype.getBitSize()/8))
       class numpy_holder(object): pass
       holder = numpy_holder()
       holder.__array_interface__ = {'strides': None,'shape': tuple(shape), 'typestr': typestr, 'data': (int(src.c_address()), False), 'version': 3 }
       ret = numpy.array(holder, copy=not bShareMem) 
       return ret
    toNumPy = staticmethod(toNumPy)

    # ////////////////////////////////////////////////////////
    def fromNumPy(src,TargetDim=0,bShareMem=False):
       import numpy
       if src.__array_interface__["strides"] is not None: 
         if bShareMem: raise Exception("numpy array is not memory contiguous","src.__array_interface__['strides']",src.__array_interface__["strides"],"bShareMem",bShareMem)
         src=numpy.ascontiguousarray(src)
       shape=src.__array_interface__["shape"]
       shape=tuple(reversed(shape))
       dims=NdPoint.one(len(shape))
       for I in range(dims.getPointDim()): dims.set(I,shape[I])   
       typestr=src.__array_interface__["typestr"]
       dtype=DType(typestr[1]=="u", typestr[1]=="f", int(typestr[2])*8)
       c_address=str(src.__array_interface__["data"][0])
       ret=Array(dims,dtype,c_address,bShareMem)
       if TargetDim: 
         dims=NdPoint.one(TargetDim)
         for I in range(TargetDim): dims.set(I,ret.dims[ret.dims.getPointDim()-TargetDim+I])
         ret.resize(dims,DType(int(ret.dims.innerProduct()/dims.innerProduct()),ret.dtype), "Array::fromNumPy",0)
       return ret
    fromNumPy = staticmethod(fromNumPy)

Array_swigregister = _VisusKernelPy.Array_swigregister
Array_swigregister(Array)

def Array_createView(*args):
    return _VisusKernelPy.Array_createView(*args)
Array_createView = _VisusKernelPy.Array_createView

class ComputeRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputeRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputeRange, name)
    __repr__ = _swig_repr
    UseArrayRange = _VisusKernelPy.ComputeRange_UseArrayRange
    PerComponentRange = _VisusKernelPy.ComputeRange_PerComponentRange
    ComputeOverallRange = _VisusKernelPy.ComputeRange_ComputeOverallRange
    UseCustomRange = _VisusKernelPy.ComputeRange_UseCustomRange
    __swig_setmethods__["mode"] = _VisusKernelPy.ComputeRange_mode_set
    __swig_getmethods__["mode"] = _VisusKernelPy.ComputeRange_mode_get
    if _newclass:
        mode = _swig_property(_VisusKernelPy.ComputeRange_mode_get, _VisusKernelPy.ComputeRange_mode_set)
    __swig_setmethods__["custom_range"] = _VisusKernelPy.ComputeRange_custom_range_set
    __swig_getmethods__["custom_range"] = _VisusKernelPy.ComputeRange_custom_range_get
    if _newclass:
        custom_range = _swig_property(_VisusKernelPy.ComputeRange_custom_range_get, _VisusKernelPy.ComputeRange_custom_range_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_ComputeRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        createCustom = staticmethod(_VisusKernelPy.ComputeRange_createCustom)
    else:
        createCustom = _VisusKernelPy.ComputeRange_createCustom

    def isCustom(self):
        return _VisusKernelPy.ComputeRange_isCustom(self)

    def doCompute(self, *args):
        return _VisusKernelPy.ComputeRange_doCompute(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_ComputeRange
    __del__ = lambda self: None
ComputeRange_swigregister = _VisusKernelPy.ComputeRange_swigregister
ComputeRange_swigregister(ComputeRange)

def ComputeRange_createCustom(*args):
    return _VisusKernelPy.ComputeRange_createCustom(*args)
ComputeRange_createCustom = _VisusKernelPy.ComputeRange_createCustom

class ArrayUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayUtils, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        loadImage = staticmethod(_VisusKernelPy.ArrayUtils_loadImage)
    else:
        loadImage = _VisusKernelPy.ArrayUtils_loadImage
    if _newclass:
        loadImageFromMemory = staticmethod(_VisusKernelPy.ArrayUtils_loadImageFromMemory)
    else:
        loadImageFromMemory = _VisusKernelPy.ArrayUtils_loadImageFromMemory
    if _newclass:
        statImage = staticmethod(_VisusKernelPy.ArrayUtils_statImage)
    else:
        statImage = _VisusKernelPy.ArrayUtils_statImage
    if _newclass:
        saveImage = staticmethod(_VisusKernelPy.ArrayUtils_saveImage)
    else:
        saveImage = _VisusKernelPy.ArrayUtils_saveImage
    if _newclass:
        saveImageUINT8 = staticmethod(_VisusKernelPy.ArrayUtils_saveImageUINT8)
    else:
        saveImageUINT8 = _VisusKernelPy.ArrayUtils_saveImageUINT8
    if _newclass:
        encodeArray = staticmethod(_VisusKernelPy.ArrayUtils_encodeArray)
    else:
        encodeArray = _VisusKernelPy.ArrayUtils_encodeArray
    if _newclass:
        decodeArray = staticmethod(_VisusKernelPy.ArrayUtils_decodeArray)
    else:
        decodeArray = _VisusKernelPy.ArrayUtils_decodeArray
    if _newclass:
        deepCopy = staticmethod(_VisusKernelPy.ArrayUtils_deepCopy)
    else:
        deepCopy = _VisusKernelPy.ArrayUtils_deepCopy
    if _newclass:
        computeRange = staticmethod(_VisusKernelPy.ArrayUtils_computeRange)
    else:
        computeRange = _VisusKernelPy.ArrayUtils_computeRange
    if _newclass:
        interleave = staticmethod(_VisusKernelPy.ArrayUtils_interleave)
    else:
        interleave = _VisusKernelPy.ArrayUtils_interleave
    if _newclass:
        insert = staticmethod(_VisusKernelPy.ArrayUtils_insert)
    else:
        insert = _VisusKernelPy.ArrayUtils_insert
    if _newclass:
        interpolate = staticmethod(_VisusKernelPy.ArrayUtils_interpolate)
    else:
        interpolate = _VisusKernelPy.ArrayUtils_interpolate
    if _newclass:
        paste = staticmethod(_VisusKernelPy.ArrayUtils_paste)
    else:
        paste = _VisusKernelPy.ArrayUtils_paste
    if _newclass:
        smartCast = staticmethod(_VisusKernelPy.ArrayUtils_smartCast)
    else:
        smartCast = _VisusKernelPy.ArrayUtils_smartCast
    if _newclass:
        crop = staticmethod(_VisusKernelPy.ArrayUtils_crop)
    else:
        crop = _VisusKernelPy.ArrayUtils_crop
    if _newclass:
        mirror = staticmethod(_VisusKernelPy.ArrayUtils_mirror)
    else:
        mirror = _VisusKernelPy.ArrayUtils_mirror
    if _newclass:
        downSample = staticmethod(_VisusKernelPy.ArrayUtils_downSample)
    else:
        downSample = _VisusKernelPy.ArrayUtils_downSample
    if _newclass:
        upSample = staticmethod(_VisusKernelPy.ArrayUtils_upSample)
    else:
        upSample = _VisusKernelPy.ArrayUtils_upSample
    if _newclass:
        splitAndGetFirst = staticmethod(_VisusKernelPy.ArrayUtils_splitAndGetFirst)
    else:
        splitAndGetFirst = _VisusKernelPy.ArrayUtils_splitAndGetFirst
    if _newclass:
        splitAndGetSecond = staticmethod(_VisusKernelPy.ArrayUtils_splitAndGetSecond)
    else:
        splitAndGetSecond = _VisusKernelPy.ArrayUtils_splitAndGetSecond
    if _newclass:
        cast = staticmethod(_VisusKernelPy.ArrayUtils_cast)
    else:
        cast = _VisusKernelPy.ArrayUtils_cast
    if _newclass:
        selectComponents = staticmethod(_VisusKernelPy.ArrayUtils_selectComponents)
    else:
        selectComponents = _VisusKernelPy.ArrayUtils_selectComponents
    if _newclass:
        sqrt = staticmethod(_VisusKernelPy.ArrayUtils_sqrt)
    else:
        sqrt = _VisusKernelPy.ArrayUtils_sqrt
    if _newclass:
        module2 = staticmethod(_VisusKernelPy.ArrayUtils_module2)
    else:
        module2 = _VisusKernelPy.ArrayUtils_module2
    if _newclass:
        module = staticmethod(_VisusKernelPy.ArrayUtils_module)
    else:
        module = _VisusKernelPy.ArrayUtils_module
    if _newclass:
        resample = staticmethod(_VisusKernelPy.ArrayUtils_resample)
    else:
        resample = _VisusKernelPy.ArrayUtils_resample
    if _newclass:
        convolve = staticmethod(_VisusKernelPy.ArrayUtils_convolve)
    else:
        convolve = _VisusKernelPy.ArrayUtils_convolve
    if _newclass:
        medianHybrid = staticmethod(_VisusKernelPy.ArrayUtils_medianHybrid)
    else:
        medianHybrid = _VisusKernelPy.ArrayUtils_medianHybrid
    InvalidOperation = _VisusKernelPy.ArrayUtils_InvalidOperation
    AddOperation = _VisusKernelPy.ArrayUtils_AddOperation
    SubOperation = _VisusKernelPy.ArrayUtils_SubOperation
    MulOperation = _VisusKernelPy.ArrayUtils_MulOperation
    DivOperation = _VisusKernelPy.ArrayUtils_DivOperation
    MinOperation = _VisusKernelPy.ArrayUtils_MinOperation
    MaxOperation = _VisusKernelPy.ArrayUtils_MaxOperation
    AverageOperation = _VisusKernelPy.ArrayUtils_AverageOperation
    StandardDeviationOperation = _VisusKernelPy.ArrayUtils_StandardDeviationOperation
    MedianOperation = _VisusKernelPy.ArrayUtils_MedianOperation
    if _newclass:
        executeOperation = staticmethod(_VisusKernelPy.ArrayUtils_executeOperation)
    else:
        executeOperation = _VisusKernelPy.ArrayUtils_executeOperation
    if _newclass:
        add = staticmethod(_VisusKernelPy.ArrayUtils_add)
    else:
        add = _VisusKernelPy.ArrayUtils_add
    if _newclass:
        sub = staticmethod(_VisusKernelPy.ArrayUtils_sub)
    else:
        sub = _VisusKernelPy.ArrayUtils_sub
    if _newclass:
        mul = staticmethod(_VisusKernelPy.ArrayUtils_mul)
    else:
        mul = _VisusKernelPy.ArrayUtils_mul
    if _newclass:
        div = staticmethod(_VisusKernelPy.ArrayUtils_div)
    else:
        div = _VisusKernelPy.ArrayUtils_div
    if _newclass:
        min = staticmethod(_VisusKernelPy.ArrayUtils_min)
    else:
        min = _VisusKernelPy.ArrayUtils_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.ArrayUtils_max)
    else:
        max = _VisusKernelPy.ArrayUtils_max
    if _newclass:
        average = staticmethod(_VisusKernelPy.ArrayUtils_average)
    else:
        average = _VisusKernelPy.ArrayUtils_average
    if _newclass:
        standardDeviation = staticmethod(_VisusKernelPy.ArrayUtils_standardDeviation)
    else:
        standardDeviation = _VisusKernelPy.ArrayUtils_standardDeviation
    if _newclass:
        median = staticmethod(_VisusKernelPy.ArrayUtils_median)
    else:
        median = _VisusKernelPy.ArrayUtils_median
    if _newclass:
        threshold = staticmethod(_VisusKernelPy.ArrayUtils_threshold)
    else:
        threshold = _VisusKernelPy.ArrayUtils_threshold
    if _newclass:
        brightnessContrast = staticmethod(_VisusKernelPy.ArrayUtils_brightnessContrast)
    else:
        brightnessContrast = _VisusKernelPy.ArrayUtils_brightnessContrast
    if _newclass:
        invert = staticmethod(_VisusKernelPy.ArrayUtils_invert)
    else:
        invert = _VisusKernelPy.ArrayUtils_invert
    if _newclass:
        levels = staticmethod(_VisusKernelPy.ArrayUtils_levels)
    else:
        levels = _VisusKernelPy.ArrayUtils_levels
    if _newclass:
        hueSaturationBrightness = staticmethod(_VisusKernelPy.ArrayUtils_hueSaturationBrightness)
    else:
        hueSaturationBrightness = _VisusKernelPy.ArrayUtils_hueSaturationBrightness
    if _newclass:
        warpPerspective = staticmethod(_VisusKernelPy.ArrayUtils_warpPerspective)
    else:
        warpPerspective = _VisusKernelPy.ArrayUtils_warpPerspective
    if _newclass:
        setBufferColor = staticmethod(_VisusKernelPy.ArrayUtils_setBufferColor)
    else:
        setBufferColor = _VisusKernelPy.ArrayUtils_setBufferColor
    if _newclass:
        createTransformedAlpha = staticmethod(_VisusKernelPy.ArrayUtils_createTransformedAlpha)
    else:
        createTransformedAlpha = _VisusKernelPy.ArrayUtils_createTransformedAlpha
    __swig_destroy__ = _VisusKernelPy.delete_ArrayUtils
    __del__ = lambda self: None
ArrayUtils_swigregister = _VisusKernelPy.ArrayUtils_swigregister
ArrayUtils_swigregister(ArrayUtils)

def ArrayUtils_loadImage(*args):
    return _VisusKernelPy.ArrayUtils_loadImage(*args)
ArrayUtils_loadImage = _VisusKernelPy.ArrayUtils_loadImage

def ArrayUtils_loadImageFromMemory(*args):
    return _VisusKernelPy.ArrayUtils_loadImageFromMemory(*args)
ArrayUtils_loadImageFromMemory = _VisusKernelPy.ArrayUtils_loadImageFromMemory

def ArrayUtils_statImage(url):
    return _VisusKernelPy.ArrayUtils_statImage(url)
ArrayUtils_statImage = _VisusKernelPy.ArrayUtils_statImage

def ArrayUtils_saveImage(*args):
    return _VisusKernelPy.ArrayUtils_saveImage(*args)
ArrayUtils_saveImage = _VisusKernelPy.ArrayUtils_saveImage

def ArrayUtils_saveImageUINT8(*args):
    return _VisusKernelPy.ArrayUtils_saveImageUINT8(*args)
ArrayUtils_saveImageUINT8 = _VisusKernelPy.ArrayUtils_saveImageUINT8

def ArrayUtils_encodeArray(compression, value):
    return _VisusKernelPy.ArrayUtils_encodeArray(compression, value)
ArrayUtils_encodeArray = _VisusKernelPy.ArrayUtils_encodeArray

def ArrayUtils_decodeArray(*args):
    return _VisusKernelPy.ArrayUtils_decodeArray(*args)
ArrayUtils_decodeArray = _VisusKernelPy.ArrayUtils_decodeArray

def ArrayUtils_deepCopy(dst, src):
    return _VisusKernelPy.ArrayUtils_deepCopy(dst, src)
ArrayUtils_deepCopy = _VisusKernelPy.ArrayUtils_deepCopy

def ArrayUtils_computeRange(*args):
    return _VisusKernelPy.ArrayUtils_computeRange(*args)
ArrayUtils_computeRange = _VisusKernelPy.ArrayUtils_computeRange

def ArrayUtils_interleave(*args):
    return _VisusKernelPy.ArrayUtils_interleave(*args)
ArrayUtils_interleave = _VisusKernelPy.ArrayUtils_interleave

def ArrayUtils_insert(*args):
    return _VisusKernelPy.ArrayUtils_insert(*args)
ArrayUtils_insert = _VisusKernelPy.ArrayUtils_insert

def ArrayUtils_interpolate(*args):
    return _VisusKernelPy.ArrayUtils_interpolate(*args)
ArrayUtils_interpolate = _VisusKernelPy.ArrayUtils_interpolate

def ArrayUtils_paste(*args):
    return _VisusKernelPy.ArrayUtils_paste(*args)
ArrayUtils_paste = _VisusKernelPy.ArrayUtils_paste

def ArrayUtils_smartCast(*args):
    return _VisusKernelPy.ArrayUtils_smartCast(*args)
ArrayUtils_smartCast = _VisusKernelPy.ArrayUtils_smartCast

def ArrayUtils_crop(*args):
    return _VisusKernelPy.ArrayUtils_crop(*args)
ArrayUtils_crop = _VisusKernelPy.ArrayUtils_crop

def ArrayUtils_mirror(*args):
    return _VisusKernelPy.ArrayUtils_mirror(*args)
ArrayUtils_mirror = _VisusKernelPy.ArrayUtils_mirror

def ArrayUtils_downSample(*args):
    return _VisusKernelPy.ArrayUtils_downSample(*args)
ArrayUtils_downSample = _VisusKernelPy.ArrayUtils_downSample

def ArrayUtils_upSample(*args):
    return _VisusKernelPy.ArrayUtils_upSample(*args)
ArrayUtils_upSample = _VisusKernelPy.ArrayUtils_upSample

def ArrayUtils_splitAndGetFirst(*args):
    return _VisusKernelPy.ArrayUtils_splitAndGetFirst(*args)
ArrayUtils_splitAndGetFirst = _VisusKernelPy.ArrayUtils_splitAndGetFirst

def ArrayUtils_splitAndGetSecond(*args):
    return _VisusKernelPy.ArrayUtils_splitAndGetSecond(*args)
ArrayUtils_splitAndGetSecond = _VisusKernelPy.ArrayUtils_splitAndGetSecond

def ArrayUtils_cast(*args):
    return _VisusKernelPy.ArrayUtils_cast(*args)
ArrayUtils_cast = _VisusKernelPy.ArrayUtils_cast

def ArrayUtils_selectComponents(*args):
    return _VisusKernelPy.ArrayUtils_selectComponents(*args)
ArrayUtils_selectComponents = _VisusKernelPy.ArrayUtils_selectComponents

def ArrayUtils_sqrt(*args):
    return _VisusKernelPy.ArrayUtils_sqrt(*args)
ArrayUtils_sqrt = _VisusKernelPy.ArrayUtils_sqrt

def ArrayUtils_module2(input, aborted):
    return _VisusKernelPy.ArrayUtils_module2(input, aborted)
ArrayUtils_module2 = _VisusKernelPy.ArrayUtils_module2

def ArrayUtils_module(input, aborted):
    return _VisusKernelPy.ArrayUtils_module(input, aborted)
ArrayUtils_module = _VisusKernelPy.ArrayUtils_module

def ArrayUtils_resample(*args):
    return _VisusKernelPy.ArrayUtils_resample(*args)
ArrayUtils_resample = _VisusKernelPy.ArrayUtils_resample

def ArrayUtils_convolve(*args):
    return _VisusKernelPy.ArrayUtils_convolve(*args)
ArrayUtils_convolve = _VisusKernelPy.ArrayUtils_convolve

def ArrayUtils_medianHybrid(*args):
    return _VisusKernelPy.ArrayUtils_medianHybrid(*args)
ArrayUtils_medianHybrid = _VisusKernelPy.ArrayUtils_medianHybrid

def ArrayUtils_executeOperation(*args):
    return _VisusKernelPy.ArrayUtils_executeOperation(*args)
ArrayUtils_executeOperation = _VisusKernelPy.ArrayUtils_executeOperation

def ArrayUtils_add(*args):
    return _VisusKernelPy.ArrayUtils_add(*args)
ArrayUtils_add = _VisusKernelPy.ArrayUtils_add

def ArrayUtils_sub(*args):
    return _VisusKernelPy.ArrayUtils_sub(*args)
ArrayUtils_sub = _VisusKernelPy.ArrayUtils_sub

def ArrayUtils_mul(*args):
    return _VisusKernelPy.ArrayUtils_mul(*args)
ArrayUtils_mul = _VisusKernelPy.ArrayUtils_mul

def ArrayUtils_div(*args):
    return _VisusKernelPy.ArrayUtils_div(*args)
ArrayUtils_div = _VisusKernelPy.ArrayUtils_div

def ArrayUtils_min(*args):
    return _VisusKernelPy.ArrayUtils_min(*args)
ArrayUtils_min = _VisusKernelPy.ArrayUtils_min

def ArrayUtils_max(*args):
    return _VisusKernelPy.ArrayUtils_max(*args)
ArrayUtils_max = _VisusKernelPy.ArrayUtils_max

def ArrayUtils_average(*args):
    return _VisusKernelPy.ArrayUtils_average(*args)
ArrayUtils_average = _VisusKernelPy.ArrayUtils_average

def ArrayUtils_standardDeviation(*args):
    return _VisusKernelPy.ArrayUtils_standardDeviation(*args)
ArrayUtils_standardDeviation = _VisusKernelPy.ArrayUtils_standardDeviation

def ArrayUtils_median(*args):
    return _VisusKernelPy.ArrayUtils_median(*args)
ArrayUtils_median = _VisusKernelPy.ArrayUtils_median

def ArrayUtils_threshold(*args):
    return _VisusKernelPy.ArrayUtils_threshold(*args)
ArrayUtils_threshold = _VisusKernelPy.ArrayUtils_threshold

def ArrayUtils_brightnessContrast(*args):
    return _VisusKernelPy.ArrayUtils_brightnessContrast(*args)
ArrayUtils_brightnessContrast = _VisusKernelPy.ArrayUtils_brightnessContrast

def ArrayUtils_invert(*args):
    return _VisusKernelPy.ArrayUtils_invert(*args)
ArrayUtils_invert = _VisusKernelPy.ArrayUtils_invert

def ArrayUtils_levels(*args):
    return _VisusKernelPy.ArrayUtils_levels(*args)
ArrayUtils_levels = _VisusKernelPy.ArrayUtils_levels

def ArrayUtils_hueSaturationBrightness(*args):
    return _VisusKernelPy.ArrayUtils_hueSaturationBrightness(*args)
ArrayUtils_hueSaturationBrightness = _VisusKernelPy.ArrayUtils_hueSaturationBrightness

def ArrayUtils_warpPerspective(dst, dst_alpha, T, src, src_alpha, aborted):
    return _VisusKernelPy.ArrayUtils_warpPerspective(dst, dst_alpha, T, src, src_alpha, aborted)
ArrayUtils_warpPerspective = _VisusKernelPy.ArrayUtils_warpPerspective

def ArrayUtils_setBufferColor(buffer, alpha, color):
    return _VisusKernelPy.ArrayUtils_setBufferColor(buffer, alpha, color)
ArrayUtils_setBufferColor = _VisusKernelPy.ArrayUtils_setBufferColor

def ArrayUtils_createTransformedAlpha(bounds, T, dims, aborted):
    return _VisusKernelPy.ArrayUtils_createTransformedAlpha(bounds, T, dims, aborted)
ArrayUtils_createTransformedAlpha = _VisusKernelPy.ArrayUtils_createTransformedAlpha

class BlendBuffers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendBuffers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlendBuffers, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pimpl"] = _VisusKernelPy.BlendBuffers_pimpl_set
    __swig_getmethods__["pimpl"] = _VisusKernelPy.BlendBuffers_pimpl_get
    if _newclass:
        pimpl = _swig_property(_VisusKernelPy.BlendBuffers_pimpl_get, _VisusKernelPy.BlendBuffers_pimpl_set)
    GenericBlend = _VisusKernelPy.BlendBuffers_GenericBlend
    NoBlend = _VisusKernelPy.BlendBuffers_NoBlend
    AverageBlend = _VisusKernelPy.BlendBuffers_AverageBlend
    VororoiBlend = _VisusKernelPy.BlendBuffers_VororoiBlend
    __swig_setmethods__["result"] = _VisusKernelPy.BlendBuffers_result_set
    __swig_getmethods__["result"] = _VisusKernelPy.BlendBuffers_result_get
    if _newclass:
        result = _swig_property(_VisusKernelPy.BlendBuffers_result_get, _VisusKernelPy.BlendBuffers_result_set)

    def __init__(self, type, aborted_):
        this = _VisusKernelPy.new_BlendBuffers(type, aborted_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_BlendBuffers
    __del__ = lambda self: None

    def addArg(self, *args):
        return _VisusKernelPy.BlendBuffers_addArg(self, *args)
BlendBuffers_swigregister = _VisusKernelPy.BlendBuffers_swigregister
BlendBuffers_swigregister(BlendBuffers)

class ArrayPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPlugin, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_ArrayPlugin
    __del__ = lambda self: None

    def handleStatImage(self, url):
        return _VisusKernelPy.ArrayPlugin_handleStatImage(self, url)

    def handleLoadImage(self, url, args):
        return _VisusKernelPy.ArrayPlugin_handleLoadImage(self, url, args)

    def handleSaveImage(self, url, src, args):
        return _VisusKernelPy.ArrayPlugin_handleSaveImage(self, url, src, args)

    def handleLoadImageFromMemory(self, src, args):
        return _VisusKernelPy.ArrayPlugin_handleLoadImageFromMemory(self, src, args)
ArrayPlugin_swigregister = _VisusKernelPy.ArrayPlugin_swigregister
ArrayPlugin_swigregister(ArrayPlugin)

class ArrayPlugins(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPlugins, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPlugins, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_VisusKernelPy.ArrayPlugins_getSingleton)
    else:
        getSingleton = _VisusKernelPy.ArrayPlugins_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_VisusKernelPy.ArrayPlugins_allocSingleton)
    else:
        allocSingleton = _VisusKernelPy.ArrayPlugins_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_VisusKernelPy.ArrayPlugins_releaseSingleton)
    else:
        releaseSingleton = _VisusKernelPy.ArrayPlugins_releaseSingleton
    __swig_setmethods__["values"] = _VisusKernelPy.ArrayPlugins_values_set
    __swig_getmethods__["values"] = _VisusKernelPy.ArrayPlugins_values_get
    if _newclass:
        values = _swig_property(_VisusKernelPy.ArrayPlugins_values_get, _VisusKernelPy.ArrayPlugins_values_set)
    __swig_destroy__ = _VisusKernelPy.delete_ArrayPlugins
    __del__ = lambda self: None
ArrayPlugins_swigregister = _VisusKernelPy.ArrayPlugins_swigregister
ArrayPlugins_swigregister(ArrayPlugins)

def ArrayPlugins_getSingleton():
    return _VisusKernelPy.ArrayPlugins_getSingleton()
ArrayPlugins_getSingleton = _VisusKernelPy.ArrayPlugins_getSingleton

def ArrayPlugins_allocSingleton():
    return _VisusKernelPy.ArrayPlugins_allocSingleton()
ArrayPlugins_allocSingleton = _VisusKernelPy.ArrayPlugins_allocSingleton

def ArrayPlugins_releaseSingleton():
    return _VisusKernelPy.ArrayPlugins_releaseSingleton()
ArrayPlugins_releaseSingleton = _VisusKernelPy.ArrayPlugins_releaseSingleton

class NetServerModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetServerModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetServerModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_NetServerModule
    __del__ = lambda self: None

    def handleRequest(self, request):
        return _VisusKernelPy.NetServerModule_handleRequest(self, request)
NetServerModule_swigregister = _VisusKernelPy.NetServerModule_swigregister
NetServerModule_swigregister(NetServerModule)

class NetServer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetServer, name)
    __repr__ = _swig_repr

    def __init__(self, port, disown, nthreads=8):
        this = _VisusKernelPy.new_NetServer(port, disown, nthreads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_NetServer
    __del__ = lambda self: None

    def setVerbose(self, value):
        return _VisusKernelPy.NetServer_setVerbose(self, value)

    def runInThisThread(self):
        return _VisusKernelPy.NetServer_runInThisThread(self)

    def runInBackground(self):
        return _VisusKernelPy.NetServer_runInBackground(self)
NetServer_swigregister = _VisusKernelPy.NetServer_swigregister
NetServer_swigregister(NetServer)

# This file is compatible with both classic and new-style classes.


