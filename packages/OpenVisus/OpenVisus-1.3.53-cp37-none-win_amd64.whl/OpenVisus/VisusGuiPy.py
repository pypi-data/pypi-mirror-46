# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



this_dir=os.path.dirname(os.path.realpath(__file__))

# using embedded Qt5?
if os.path.isdir(os.path.join(this_dir,"bin","Qt")):
	for it in [os.path.join(this_dir,"bin")]:
		if (os.path.isdir(it)) and (not it in sys.path):
			sys.path.insert(0,it)
	os.environ["QT_PLUGIN_PATH"]= os.path.join(this_dir,"bin","Qt","plugins")

# using PyQt5
else:
	import PyQt5
	PYQT5_DIR=os.path.dirname(PyQt5.__file__)
	for it in [os.path.join(PYQT5_DIR,"Qt","bin"),os.path.join(PYQT5_DIR,"Qt","lib")]:
		if (os.path.isdir(it)) and (not it in sys.path):
			sys.path.insert(0,it)
	os.environ["QT_PLUGIN_PATH"]= os.path.join(PYQT5_DIR,"Qt","plugins")



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusGuiPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusGuiPy')
    _VisusGuiPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusGuiPy', [dirname(__file__)])
        except ImportError:
            import _VisusGuiPy
            return _VisusGuiPy
        try:
            _mod = imp.load_module('_VisusGuiPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusGuiPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusGuiPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusGuiPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusGuiPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusGuiPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusGuiPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusGuiPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusGuiPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusGuiPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusGuiPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusGuiPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusGuiPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusGuiPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusGuiPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusGuiPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusGuiPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusGuiPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusGuiPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusGuiPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusGuiPy.SHARED_PTR_DISOWN
class PairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusGuiPy.new_PairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusGuiPy.PairDoubleDouble_first_set
    __swig_getmethods__["first"] = _VisusGuiPy.PairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_VisusGuiPy.PairDoubleDouble_first_get, _VisusGuiPy.PairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _VisusGuiPy.PairDoubleDouble_second_set
    __swig_getmethods__["second"] = _VisusGuiPy.PairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_VisusGuiPy.PairDoubleDouble_second_get, _VisusGuiPy.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusGuiPy.delete_PairDoubleDouble
    __del__ = lambda self: None
PairDoubleDouble_swigregister = _VisusGuiPy.PairDoubleDouble_swigregister
PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusGuiPy.new_PairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusGuiPy.PairIntDouble_first_set
    __swig_getmethods__["first"] = _VisusGuiPy.PairIntDouble_first_get
    if _newclass:
        first = _swig_property(_VisusGuiPy.PairIntDouble_first_get, _VisusGuiPy.PairIntDouble_first_set)
    __swig_setmethods__["second"] = _VisusGuiPy.PairIntDouble_second_set
    __swig_getmethods__["second"] = _VisusGuiPy.PairIntDouble_second_get
    if _newclass:
        second = _swig_property(_VisusGuiPy.PairIntDouble_second_get, _VisusGuiPy.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusGuiPy.delete_PairIntDouble
    __del__ = lambda self: None
PairIntDouble_swigregister = _VisusGuiPy.PairIntDouble_swigregister
PairIntDouble_swigregister(PairIntDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusGuiPy.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusGuiPy.VectorString___nonzero__(self)

    def __bool__(self):
        return _VisusGuiPy.VectorString___bool__(self)

    def __len__(self):
        return _VisusGuiPy.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _VisusGuiPy.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusGuiPy.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusGuiPy.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusGuiPy.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusGuiPy.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusGuiPy.VectorString___setitem__(self, *args)

    def pop(self):
        return _VisusGuiPy.VectorString_pop(self)

    def append(self, x):
        return _VisusGuiPy.VectorString_append(self, x)

    def empty(self):
        return _VisusGuiPy.VectorString_empty(self)

    def size(self):
        return _VisusGuiPy.VectorString_size(self)

    def swap(self, v):
        return _VisusGuiPy.VectorString_swap(self, v)

    def begin(self):
        return _VisusGuiPy.VectorString_begin(self)

    def end(self):
        return _VisusGuiPy.VectorString_end(self)

    def rbegin(self):
        return _VisusGuiPy.VectorString_rbegin(self)

    def rend(self):
        return _VisusGuiPy.VectorString_rend(self)

    def clear(self):
        return _VisusGuiPy.VectorString_clear(self)

    def get_allocator(self):
        return _VisusGuiPy.VectorString_get_allocator(self)

    def pop_back(self):
        return _VisusGuiPy.VectorString_pop_back(self)

    def erase(self, *args):
        return _VisusGuiPy.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _VisusGuiPy.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusGuiPy.VectorString_push_back(self, x)

    def front(self):
        return _VisusGuiPy.VectorString_front(self)

    def back(self):
        return _VisusGuiPy.VectorString_back(self)

    def assign(self, n, x):
        return _VisusGuiPy.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _VisusGuiPy.VectorString_resize(self, *args)

    def insert(self, *args):
        return _VisusGuiPy.VectorString_insert(self, *args)

    def reserve(self, n):
        return _VisusGuiPy.VectorString_reserve(self, n)

    def capacity(self):
        return _VisusGuiPy.VectorString_capacity(self)
    __swig_destroy__ = _VisusGuiPy.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _VisusGuiPy.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusGuiPy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusGuiPy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusGuiPy.VectorInt___bool__(self)

    def __len__(self):
        return _VisusGuiPy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusGuiPy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusGuiPy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusGuiPy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusGuiPy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusGuiPy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusGuiPy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusGuiPy.VectorInt_pop(self)

    def append(self, x):
        return _VisusGuiPy.VectorInt_append(self, x)

    def empty(self):
        return _VisusGuiPy.VectorInt_empty(self)

    def size(self):
        return _VisusGuiPy.VectorInt_size(self)

    def swap(self, v):
        return _VisusGuiPy.VectorInt_swap(self, v)

    def begin(self):
        return _VisusGuiPy.VectorInt_begin(self)

    def end(self):
        return _VisusGuiPy.VectorInt_end(self)

    def rbegin(self):
        return _VisusGuiPy.VectorInt_rbegin(self)

    def rend(self):
        return _VisusGuiPy.VectorInt_rend(self)

    def clear(self):
        return _VisusGuiPy.VectorInt_clear(self)

    def get_allocator(self):
        return _VisusGuiPy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusGuiPy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusGuiPy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _VisusGuiPy.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusGuiPy.VectorInt_push_back(self, x)

    def front(self):
        return _VisusGuiPy.VectorInt_front(self)

    def back(self):
        return _VisusGuiPy.VectorInt_back(self)

    def assign(self, n, x):
        return _VisusGuiPy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusGuiPy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusGuiPy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusGuiPy.VectorInt_reserve(self, n)

    def capacity(self):
        return _VisusGuiPy.VectorInt_capacity(self)
    __swig_destroy__ = _VisusGuiPy.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _VisusGuiPy.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusGuiPy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusGuiPy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusGuiPy.VectorDouble___bool__(self)

    def __len__(self):
        return _VisusGuiPy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusGuiPy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusGuiPy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusGuiPy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusGuiPy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusGuiPy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusGuiPy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusGuiPy.VectorDouble_pop(self)

    def append(self, x):
        return _VisusGuiPy.VectorDouble_append(self, x)

    def empty(self):
        return _VisusGuiPy.VectorDouble_empty(self)

    def size(self):
        return _VisusGuiPy.VectorDouble_size(self)

    def swap(self, v):
        return _VisusGuiPy.VectorDouble_swap(self, v)

    def begin(self):
        return _VisusGuiPy.VectorDouble_begin(self)

    def end(self):
        return _VisusGuiPy.VectorDouble_end(self)

    def rbegin(self):
        return _VisusGuiPy.VectorDouble_rbegin(self)

    def rend(self):
        return _VisusGuiPy.VectorDouble_rend(self)

    def clear(self):
        return _VisusGuiPy.VectorDouble_clear(self)

    def get_allocator(self):
        return _VisusGuiPy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusGuiPy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusGuiPy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _VisusGuiPy.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusGuiPy.VectorDouble_push_back(self, x)

    def front(self):
        return _VisusGuiPy.VectorDouble_front(self)

    def back(self):
        return _VisusGuiPy.VectorDouble_back(self)

    def assign(self, n, x):
        return _VisusGuiPy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusGuiPy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusGuiPy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusGuiPy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusGuiPy.VectorDouble_capacity(self)
    __swig_destroy__ = _VisusGuiPy.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _VisusGuiPy.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusGuiPy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusGuiPy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusGuiPy.VectorFloat___bool__(self)

    def __len__(self):
        return _VisusGuiPy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusGuiPy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusGuiPy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusGuiPy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusGuiPy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusGuiPy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusGuiPy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusGuiPy.VectorFloat_pop(self)

    def append(self, x):
        return _VisusGuiPy.VectorFloat_append(self, x)

    def empty(self):
        return _VisusGuiPy.VectorFloat_empty(self)

    def size(self):
        return _VisusGuiPy.VectorFloat_size(self)

    def swap(self, v):
        return _VisusGuiPy.VectorFloat_swap(self, v)

    def begin(self):
        return _VisusGuiPy.VectorFloat_begin(self)

    def end(self):
        return _VisusGuiPy.VectorFloat_end(self)

    def rbegin(self):
        return _VisusGuiPy.VectorFloat_rbegin(self)

    def rend(self):
        return _VisusGuiPy.VectorFloat_rend(self)

    def clear(self):
        return _VisusGuiPy.VectorFloat_clear(self)

    def get_allocator(self):
        return _VisusGuiPy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusGuiPy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusGuiPy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _VisusGuiPy.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusGuiPy.VectorFloat_push_back(self, x)

    def front(self):
        return _VisusGuiPy.VectorFloat_front(self)

    def back(self):
        return _VisusGuiPy.VectorFloat_back(self)

    def assign(self, n, x):
        return _VisusGuiPy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusGuiPy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusGuiPy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusGuiPy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusGuiPy.VectorFloat_capacity(self)
    __swig_destroy__ = _VisusGuiPy.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _VisusGuiPy.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusGuiPy.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusGuiPy.MapStringString___nonzero__(self)

    def __bool__(self):
        return _VisusGuiPy.MapStringString___bool__(self)

    def __len__(self):
        return _VisusGuiPy.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusGuiPy.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusGuiPy.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _VisusGuiPy.MapStringString_has_key(self, key)

    def keys(self):
        return _VisusGuiPy.MapStringString_keys(self)

    def values(self):
        return _VisusGuiPy.MapStringString_values(self)

    def items(self):
        return _VisusGuiPy.MapStringString_items(self)

    def __contains__(self, key):
        return _VisusGuiPy.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _VisusGuiPy.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _VisusGuiPy.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusGuiPy.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _VisusGuiPy.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _VisusGuiPy.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _VisusGuiPy.MapStringString_empty(self)

    def size(self):
        return _VisusGuiPy.MapStringString_size(self)

    def swap(self, v):
        return _VisusGuiPy.MapStringString_swap(self, v)

    def begin(self):
        return _VisusGuiPy.MapStringString_begin(self)

    def end(self):
        return _VisusGuiPy.MapStringString_end(self)

    def rbegin(self):
        return _VisusGuiPy.MapStringString_rbegin(self)

    def rend(self):
        return _VisusGuiPy.MapStringString_rend(self)

    def clear(self):
        return _VisusGuiPy.MapStringString_clear(self)

    def get_allocator(self):
        return _VisusGuiPy.MapStringString_get_allocator(self)

    def count(self, x):
        return _VisusGuiPy.MapStringString_count(self, x)

    def erase(self, *args):
        return _VisusGuiPy.MapStringString_erase(self, *args)

    def find(self, x):
        return _VisusGuiPy.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _VisusGuiPy.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusGuiPy.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _VisusGuiPy.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _VisusGuiPy.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

import VisusKernelPy
class GuiModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusGuiPy.GuiModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusGuiPy.GuiModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusGuiPy.GuiModule_bAttached_get, _VisusGuiPy.GuiModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusGuiPy.GuiModule_attach)
    else:
        attach = _VisusGuiPy.GuiModule_attach
    if _newclass:
        detach = staticmethod(_VisusGuiPy.GuiModule_detach)
    else:
        detach = _VisusGuiPy.GuiModule_detach
    if _newclass:
        createApplication = staticmethod(_VisusGuiPy.GuiModule_createApplication)
    else:
        createApplication = _VisusGuiPy.GuiModule_createApplication
    if _newclass:
        execApplication = staticmethod(_VisusGuiPy.GuiModule_execApplication)
    else:
        execApplication = _VisusGuiPy.GuiModule_execApplication
    if _newclass:
        destroyApplication = staticmethod(_VisusGuiPy.GuiModule_destroyApplication)
    else:
        destroyApplication = _VisusGuiPy.GuiModule_destroyApplication

    def __init__(self):
        this = _VisusGuiPy.new_GuiModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiPy.delete_GuiModule
    __del__ = lambda self: None
GuiModule_swigregister = _VisusGuiPy.GuiModule_swigregister
GuiModule_swigregister(GuiModule)
cvar = _VisusGuiPy.cvar

def GuiModule_attach():
    return _VisusGuiPy.GuiModule_attach()
GuiModule_attach = _VisusGuiPy.GuiModule_attach

def GuiModule_detach():
    return _VisusGuiPy.GuiModule_detach()
GuiModule_detach = _VisusGuiPy.GuiModule_detach

def GuiModule_createApplication():
    return _VisusGuiPy.GuiModule_createApplication()
GuiModule_createApplication = _VisusGuiPy.GuiModule_createApplication

def GuiModule_execApplication():
    return _VisusGuiPy.GuiModule_execApplication()
GuiModule_execApplication = _VisusGuiPy.GuiModule_execApplication

def GuiModule_destroyApplication():
    return _VisusGuiPy.GuiModule_destroyApplication()
GuiModule_destroyApplication = _VisusGuiPy.GuiModule_destroyApplication

class GLObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiPy.delete_GLObject
    __del__ = lambda self: None

    def glRender(self, gl):
        return _VisusGuiPy.GLObject_glRender(self, gl)

    def glGetRenderQueue(self):
        return _VisusGuiPy.GLObject_glGetRenderQueue(self)

    def glSetRenderQueue(self, value):
        return _VisusGuiPy.GLObject_glSetRenderQueue(self, value)

    def assign(self, other):
        return _VisusGuiPy.GLObject_assign(self, other)

    def glMousePressEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMousePressEvent(self, map, evt)

    def glMouseMoveEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMouseMoveEvent(self, map, evt)

    def glMouseReleaseEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMouseReleaseEvent(self, map, evt)

    def glWheelEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glWheelEvent(self, map, evt)
GLObject_swigregister = _VisusGuiPy.GLObject_swigregister
GLObject_swigregister(GLObject)

class GLBatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLBatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLBatch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertices"] = _VisusGuiPy.GLBatch_vertices_set
    __swig_getmethods__["vertices"] = _VisusGuiPy.GLBatch_vertices_get
    if _newclass:
        vertices = _swig_property(_VisusGuiPy.GLBatch_vertices_get, _VisusGuiPy.GLBatch_vertices_set)
    __swig_setmethods__["normals"] = _VisusGuiPy.GLBatch_normals_set
    __swig_getmethods__["normals"] = _VisusGuiPy.GLBatch_normals_get
    if _newclass:
        normals = _swig_property(_VisusGuiPy.GLBatch_normals_get, _VisusGuiPy.GLBatch_normals_set)
    __swig_setmethods__["colors"] = _VisusGuiPy.GLBatch_colors_set
    __swig_getmethods__["colors"] = _VisusGuiPy.GLBatch_colors_get
    if _newclass:
        colors = _swig_property(_VisusGuiPy.GLBatch_colors_get, _VisusGuiPy.GLBatch_colors_set)
    __swig_setmethods__["texcoords"] = _VisusGuiPy.GLBatch_texcoords_set
    __swig_getmethods__["texcoords"] = _VisusGuiPy.GLBatch_texcoords_get
    if _newclass:
        texcoords = _swig_property(_VisusGuiPy.GLBatch_texcoords_get, _VisusGuiPy.GLBatch_texcoords_set)

    def getNumberOfVertices(self):
        return _VisusGuiPy.GLBatch_getNumberOfVertices(self)

    def __init__(self):
        this = _VisusGuiPy.new_GLBatch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiPy.delete_GLBatch
    __del__ = lambda self: None
GLBatch_swigregister = _VisusGuiPy.GLBatch_swigregister
GLBatch_swigregister(GLBatch)

class GLMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLMesh, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusGuiPy.new_GLMesh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self, primitive, vertices_per_batch=0):
        return _VisusGuiPy.GLMesh_begin(self, primitive, vertices_per_batch)

    def end(self):
        return _VisusGuiPy.GLMesh_end(self)

    def vertex(self, *args):
        return _VisusGuiPy.GLMesh_vertex(self, *args)

    def normal(self, *args):
        return _VisusGuiPy.GLMesh_normal(self, *args)

    def color(self, *args):
        return _VisusGuiPy.GLMesh_color(self, *args)

    def texcoord2(self, *args):
        return _VisusGuiPy.GLMesh_texcoord2(self, *args)

    def texcoord3(self, *args):
        return _VisusGuiPy.GLMesh_texcoord3(self, *args)

    def hasColorAttribute(self):
        return _VisusGuiPy.GLMesh_hasColorAttribute(self)
    if _newclass:
        WireBox = staticmethod(_VisusGuiPy.GLMesh_WireBox)
    else:
        WireBox = _VisusGuiPy.GLMesh_WireBox
    if _newclass:
        SolidBox = staticmethod(_VisusGuiPy.GLMesh_SolidBox)
    else:
        SolidBox = _VisusGuiPy.GLMesh_SolidBox
    if _newclass:
        WireCircle = staticmethod(_VisusGuiPy.GLMesh_WireCircle)
    else:
        WireCircle = _VisusGuiPy.GLMesh_WireCircle
    if _newclass:
        SolidCircle = staticmethod(_VisusGuiPy.GLMesh_SolidCircle)
    else:
        SolidCircle = _VisusGuiPy.GLMesh_SolidCircle
    if _newclass:
        SolidSphere = staticmethod(_VisusGuiPy.GLMesh_SolidSphere)
    else:
        SolidSphere = _VisusGuiPy.GLMesh_SolidSphere
    if _newclass:
        ColoredAxis = staticmethod(_VisusGuiPy.GLMesh_ColoredAxis)
    else:
        ColoredAxis = _VisusGuiPy.GLMesh_ColoredAxis
    if _newclass:
        ViewDependentUnitVolume = staticmethod(_VisusGuiPy.GLMesh_ViewDependentUnitVolume)
    else:
        ViewDependentUnitVolume = _VisusGuiPy.GLMesh_ViewDependentUnitVolume
    if _newclass:
        AxisAlignedUnitVolume = staticmethod(_VisusGuiPy.GLMesh_AxisAlignedUnitVolume)
    else:
        AxisAlignedUnitVolume = _VisusGuiPy.GLMesh_AxisAlignedUnitVolume
    __swig_destroy__ = _VisusGuiPy.delete_GLMesh
    __del__ = lambda self: None
GLMesh_swigregister = _VisusGuiPy.GLMesh_swigregister
GLMesh_swigregister(GLMesh)

def GLMesh_WireBox(box):
    return _VisusGuiPy.GLMesh_WireBox(box)
GLMesh_WireBox = _VisusGuiPy.GLMesh_WireBox

def GLMesh_SolidBox(box, bNormal=True):
    return _VisusGuiPy.GLMesh_SolidBox(box, bNormal)
GLMesh_SolidBox = _VisusGuiPy.GLMesh_SolidBox

def GLMesh_WireCircle(N=32):
    return _VisusGuiPy.GLMesh_WireCircle(N)
GLMesh_WireCircle = _VisusGuiPy.GLMesh_WireCircle

def GLMesh_SolidCircle(N=32):
    return _VisusGuiPy.GLMesh_SolidCircle(N)
GLMesh_SolidCircle = _VisusGuiPy.GLMesh_SolidCircle

def GLMesh_SolidSphere(N=32):
    return _VisusGuiPy.GLMesh_SolidSphere(N)
GLMesh_SolidSphere = _VisusGuiPy.GLMesh_SolidSphere

def GLMesh_ColoredAxis(box):
    return _VisusGuiPy.GLMesh_ColoredAxis(box)
GLMesh_ColoredAxis = _VisusGuiPy.GLMesh_ColoredAxis

def GLMesh_ViewDependentUnitVolume(frustum, nslices):
    return _VisusGuiPy.GLMesh_ViewDependentUnitVolume(frustum, nslices)
GLMesh_ViewDependentUnitVolume = _VisusGuiPy.GLMesh_ViewDependentUnitVolume

def GLMesh_AxisAlignedUnitVolume(*args):
    return _VisusGuiPy.GLMesh_AxisAlignedUnitVolume(*args)
GLMesh_AxisAlignedUnitVolume = _VisusGuiPy.GLMesh_AxisAlignedUnitVolume

class GLModelview(GLObject):
    __swig_setmethods__ = {}
    for _s in [GLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLModelview, name, value)
    __swig_getmethods__ = {}
    for _s in [GLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLModelview, name)
    __repr__ = _swig_repr
    __swig_setmethods__["T"] = _VisusGuiPy.GLModelview_T_set
    __swig_getmethods__["T"] = _VisusGuiPy.GLModelview_T_get
    if _newclass:
        T = _swig_property(_VisusGuiPy.GLModelview_T_get, _VisusGuiPy.GLModelview_T_set)

    def __init__(self, *args):
        this = _VisusGuiPy.new_GLModelview(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiPy.delete_GLModelview
    __del__ = lambda self: None

    def glRender(self, gl):
        return _VisusGuiPy.GLModelview_glRender(self, gl)
GLModelview_swigregister = _VisusGuiPy.GLModelview_swigregister
GLModelview_swigregister(GLModelview)

class GLPhongObject(GLObject):
    __swig_setmethods__ = {}
    for _s in [GLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLPhongObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLPhongObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["line_width"] = _VisusGuiPy.GLPhongObject_line_width_set
    __swig_getmethods__["line_width"] = _VisusGuiPy.GLPhongObject_line_width_get
    if _newclass:
        line_width = _swig_property(_VisusGuiPy.GLPhongObject_line_width_get, _VisusGuiPy.GLPhongObject_line_width_set)
    __swig_setmethods__["color"] = _VisusGuiPy.GLPhongObject_color_set
    __swig_getmethods__["color"] = _VisusGuiPy.GLPhongObject_color_get
    if _newclass:
        color = _swig_property(_VisusGuiPy.GLPhongObject_color_get, _VisusGuiPy.GLPhongObject_color_set)
    __swig_setmethods__["texture"] = _VisusGuiPy.GLPhongObject_texture_set
    __swig_getmethods__["texture"] = _VisusGuiPy.GLPhongObject_texture_get
    if _newclass:
        texture = _swig_property(_VisusGuiPy.GLPhongObject_texture_get, _VisusGuiPy.GLPhongObject_texture_set)
    __swig_setmethods__["mesh"] = _VisusGuiPy.GLPhongObject_mesh_set
    __swig_getmethods__["mesh"] = _VisusGuiPy.GLPhongObject_mesh_get
    if _newclass:
        mesh = _swig_property(_VisusGuiPy.GLPhongObject_mesh_get, _VisusGuiPy.GLPhongObject_mesh_set)

    def __init__(self, *args):
        this = _VisusGuiPy.new_GLPhongObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiPy.delete_GLPhongObject
    __del__ = lambda self: None

    def glRender(self, gl):
        return _VisusGuiPy.GLPhongObject_glRender(self, gl)
GLPhongObject_swigregister = _VisusGuiPy.GLPhongObject_swigregister
GLPhongObject_swigregister(GLPhongObject)

class GLSharedContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLSharedContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLSharedContext, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_VisusGuiPy.GLSharedContext_getSingleton)
    else:
        getSingleton = _VisusGuiPy.GLSharedContext_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_VisusGuiPy.GLSharedContext_allocSingleton)
    else:
        allocSingleton = _VisusGuiPy.GLSharedContext_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_VisusGuiPy.GLSharedContext_releaseSingleton)
    else:
        releaseSingleton = _VisusGuiPy.GLSharedContext_releaseSingleton
    __swig_destroy__ = _VisusGuiPy.delete_GLSharedContext
    __del__ = lambda self: None

    def makeCurrent(self):
        return _VisusGuiPy.GLSharedContext_makeCurrent(self)

    def doneCurrent(self):
        return _VisusGuiPy.GLSharedContext_doneCurrent(self)
GLSharedContext_swigregister = _VisusGuiPy.GLSharedContext_swigregister
GLSharedContext_swigregister(GLSharedContext)

def GLSharedContext_getSingleton():
    return _VisusGuiPy.GLSharedContext_getSingleton()
GLSharedContext_getSingleton = _VisusGuiPy.GLSharedContext_getSingleton

def GLSharedContext_allocSingleton():
    return _VisusGuiPy.GLSharedContext_allocSingleton()
GLSharedContext_allocSingleton = _VisusGuiPy.GLSharedContext_allocSingleton

def GLSharedContext_releaseSingleton():
    return _VisusGuiPy.GLSharedContext_releaseSingleton()
GLSharedContext_releaseSingleton = _VisusGuiPy.GLSharedContext_releaseSingleton

class GLNeedContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLNeedContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLNeedContext, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusGuiPy.new_GLNeedContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiPy.delete_GLNeedContext
    __del__ = lambda self: None

    def __structure_derefence_op__(self):
        return _VisusGuiPy.GLNeedContext___structure_derefence_op__(self)
GLNeedContext_swigregister = _VisusGuiPy.GLNeedContext_swigregister
GLNeedContext_swigregister(GLNeedContext)

class GLDoWithContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLDoWithContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLDoWithContext, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_VisusGuiPy.GLDoWithContext_getSingleton)
    else:
        getSingleton = _VisusGuiPy.GLDoWithContext_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_VisusGuiPy.GLDoWithContext_allocSingleton)
    else:
        allocSingleton = _VisusGuiPy.GLDoWithContext_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_VisusGuiPy.GLDoWithContext_releaseSingleton)
    else:
        releaseSingleton = _VisusGuiPy.GLDoWithContext_releaseSingleton

    def push_back(self, fn):
        return _VisusGuiPy.GLDoWithContext_push_back(self, fn)
    __swig_destroy__ = _VisusGuiPy.delete_GLDoWithContext
    __del__ = lambda self: None
GLDoWithContext_swigregister = _VisusGuiPy.GLDoWithContext_swigregister
GLDoWithContext_swigregister(GLDoWithContext)

def GLDoWithContext_getSingleton():
    return _VisusGuiPy.GLDoWithContext_getSingleton()
GLDoWithContext_getSingleton = _VisusGuiPy.GLDoWithContext_getSingleton

def GLDoWithContext_allocSingleton():
    return _VisusGuiPy.GLDoWithContext_allocSingleton()
GLDoWithContext_allocSingleton = _VisusGuiPy.GLDoWithContext_allocSingleton

def GLDoWithContext_releaseSingleton():
    return _VisusGuiPy.GLDoWithContext_releaseSingleton()
GLDoWithContext_releaseSingleton = _VisusGuiPy.GLDoWithContext_releaseSingleton

class GLCanvas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLCanvas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLCanvas, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusGuiPy.new_GLCanvas()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiPy.delete_GLCanvas
    __del__ = lambda self: None

    def flushGLErrors(self, bVerbose=False):
        return _VisusGuiPy.GLCanvas_flushGLErrors(self, bVerbose)

    def glRenderEvent(self, gl):
        return _VisusGuiPy.GLCanvas_glRenderEvent(self, gl)

    def glResizeEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glResizeEvent(self, evt)

    def glKeyPressEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glKeyPressEvent(self, evt)

    def glMousePressEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMousePressEvent(self, evt)

    def glMouseMoveEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMouseMoveEvent(self, evt)

    def glMouseReleaseEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMouseReleaseEvent(self, evt)

    def glWheelEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glWheelEvent(self, evt)

    def initializeGL(self):
        return _VisusGuiPy.GLCanvas_initializeGL(self)

    def postRedisplay(self, fps=30):
        return _VisusGuiPy.GLCanvas_postRedisplay(self, fps)

    def glClearColor(self, *args):
        return _VisusGuiPy.GLCanvas_glClearColor(self, *args)

    def getShader(self):
        return _VisusGuiPy.GLCanvas_getShader(self)

    def setShader(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setShader(self, value, bForce)

    def setUniform(self, *args):
        return _VisusGuiPy.GLCanvas_setUniform(self, *args)

    def setUniformColor(self, uniform, color):
        return _VisusGuiPy.GLCanvas_setUniformColor(self, uniform, color)

    def setUniformPlane(self, uniform, h):
        return _VisusGuiPy.GLCanvas_setUniformPlane(self, uniform, h)

    def setUniformMatrix(self, *args):
        return _VisusGuiPy.GLCanvas_setUniformMatrix(self, *args)

    def pushClippingBox(self, *args):
        return _VisusGuiPy.GLCanvas_pushClippingBox(self, *args)

    def popClippingBox(self):
        return _VisusGuiPy.GLCanvas_popClippingBox(self)

    def hasClippingBox(self):
        return _VisusGuiPy.GLCanvas_hasClippingBox(self)

    def setUniformMaterial(self, shader, material):
        return _VisusGuiPy.GLCanvas_setUniformMaterial(self, shader, material)

    def setUniformLight(self, shader, light_pos):
        return _VisusGuiPy.GLCanvas_setUniformLight(self, shader, light_pos)

    def getViewport(self):
        return _VisusGuiPy.GLCanvas_getViewport(self)

    def setViewport(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setViewport(self, value, bForce)

    def pushViewport(self):
        return _VisusGuiPy.GLCanvas_pushViewport(self)

    def popViewport(self):
        return _VisusGuiPy.GLCanvas_popViewport(self)

    def getProjection(self):
        return _VisusGuiPy.GLCanvas_getProjection(self)

    def setProjection(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setProjection(self, value, bForce)

    def pushProjection(self):
        return _VisusGuiPy.GLCanvas_pushProjection(self)

    def popProjection(self):
        return _VisusGuiPy.GLCanvas_popProjection(self)

    def loadProjection(self, value):
        return _VisusGuiPy.GLCanvas_loadProjection(self, value)

    def multProjection(self, value):
        return _VisusGuiPy.GLCanvas_multProjection(self, value)

    def getModelview(self):
        return _VisusGuiPy.GLCanvas_getModelview(self)

    def setModelview(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setModelview(self, value, bForce)

    def loadModelview(self, value):
        return _VisusGuiPy.GLCanvas_loadModelview(self, value)

    def multModelview(self, value):
        return _VisusGuiPy.GLCanvas_multModelview(self, value)

    def pushModelview(self):
        return _VisusGuiPy.GLCanvas_pushModelview(self)

    def popModelview(self):
        return _VisusGuiPy.GLCanvas_popModelview(self)

    def getFrustum(self):
        return _VisusGuiPy.GLCanvas_getFrustum(self)

    def setFrustum(self, value):
        return _VisusGuiPy.GLCanvas_setFrustum(self, value)

    def pushFrustum(self):
        return _VisusGuiPy.GLCanvas_pushFrustum(self)

    def popFrustum(self):
        return _VisusGuiPy.GLCanvas_popFrustum(self)

    def setHud(self):
        return _VisusGuiPy.GLCanvas_setHud(self)

    def getPointSize(self):
        return _VisusGuiPy.GLCanvas_getPointSize(self)

    def setPointSize(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setPointSize(self, value, bForce)

    def pushPointSize(self, value):
        return _VisusGuiPy.GLCanvas_pushPointSize(self, value)

    def popPointSize(self):
        return _VisusGuiPy.GLCanvas_popPointSize(self)

    def getLineWidth(self):
        return _VisusGuiPy.GLCanvas_getLineWidth(self)

    def setLineWidth(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setLineWidth(self, value, bForce)

    def pushLineWidth(self, value):
        return _VisusGuiPy.GLCanvas_pushLineWidth(self, value)

    def popLineWidth(self):
        return _VisusGuiPy.GLCanvas_popLineWidth(self)

    def getBlend(self):
        return _VisusGuiPy.GLCanvas_getBlend(self)

    def setBlend(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setBlend(self, value, bForce)

    def pushBlend(self, value):
        return _VisusGuiPy.GLCanvas_pushBlend(self, value)

    def popBlend(self):
        return _VisusGuiPy.GLCanvas_popBlend(self)

    def getDepthTest(self):
        return _VisusGuiPy.GLCanvas_getDepthTest(self)

    def setDepthTest(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthTest(self, value, bForce)

    def pushDepthTest(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthTest(self, value)

    def popDepthTest(self):
        return _VisusGuiPy.GLCanvas_popDepthTest(self)

    def getDepthMask(self):
        return _VisusGuiPy.GLCanvas_getDepthMask(self)

    def setDepthMask(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthMask(self, value, bForce)

    def pushDepthMask(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthMask(self, value)

    def popDepthMask(self):
        return _VisusGuiPy.GLCanvas_popDepthMask(self)

    def getDepthFunc(self):
        return _VisusGuiPy.GLCanvas_getDepthFunc(self)

    def setDepthFunc(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthFunc(self, value, bForce)

    def pushDepthFunc(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthFunc(self, value)

    def popDepthFunc(self):
        return _VisusGuiPy.GLCanvas_popDepthFunc(self)

    def getCullFace(self):
        return _VisusGuiPy.GLCanvas_getCullFace(self)

    def setCullFace(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setCullFace(self, value, bForce)

    def pushCullFace(self, value):
        return _VisusGuiPy.GLCanvas_pushCullFace(self, value)

    def popCullFace(self):
        return _VisusGuiPy.GLCanvas_popCullFace(self)

    def setTextureInSlot(self, slot, sampler, texture):
        return _VisusGuiPy.GLCanvas_setTextureInSlot(self, slot, sampler, texture)

    def setTexture(self, sampler, value):
        return _VisusGuiPy.GLCanvas_setTexture(self, sampler, value)

    def glRenderMesh(self, mesh):
        return _VisusGuiPy.GLCanvas_glRenderMesh(self, mesh)

    def glRenderScreenText(self, x, y, s, color):
        return _VisusGuiPy.GLCanvas_glRenderScreenText(self, x, y, s, color)

    def paintGL(self):
        return _VisusGuiPy.GLCanvas_paintGL(self)
GLCanvas_swigregister = _VisusGuiPy.GLCanvas_swigregister
GLCanvas_swigregister(GLCanvas)


def ToCppQtWidget(obj):
    return _VisusGuiPy.ToCppQtWidget(obj)
ToCppQtWidget = _VisusGuiPy.ToCppQtWidget

def FromCppQtWidget(widget):
    return _VisusGuiPy.FromCppQtWidget(widget)
FromCppQtWidget = _VisusGuiPy.FromCppQtWidget
# This file is compatible with both classic and new-style classes.


