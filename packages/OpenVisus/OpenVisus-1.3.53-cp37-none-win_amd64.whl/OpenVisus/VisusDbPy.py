# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusDbPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusDbPy')
    _VisusDbPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusDbPy', [dirname(__file__)])
        except ImportError:
            import _VisusDbPy
            return _VisusDbPy
        try:
            _mod = imp.load_module('_VisusDbPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusDbPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusDbPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusDbPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusDbPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusDbPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusDbPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusDbPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusDbPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusDbPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusDbPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusDbPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusDbPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusDbPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusDbPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusDbPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusDbPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusDbPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusDbPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusDbPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusDbPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusDbPy.SHARED_PTR_DISOWN
class PairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusDbPy.new_PairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusDbPy.PairDoubleDouble_first_set
    __swig_getmethods__["first"] = _VisusDbPy.PairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_VisusDbPy.PairDoubleDouble_first_get, _VisusDbPy.PairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _VisusDbPy.PairDoubleDouble_second_set
    __swig_getmethods__["second"] = _VisusDbPy.PairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_VisusDbPy.PairDoubleDouble_second_get, _VisusDbPy.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusDbPy.delete_PairDoubleDouble
    __del__ = lambda self: None
PairDoubleDouble_swigregister = _VisusDbPy.PairDoubleDouble_swigregister
PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusDbPy.new_PairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusDbPy.PairIntDouble_first_set
    __swig_getmethods__["first"] = _VisusDbPy.PairIntDouble_first_get
    if _newclass:
        first = _swig_property(_VisusDbPy.PairIntDouble_first_get, _VisusDbPy.PairIntDouble_first_set)
    __swig_setmethods__["second"] = _VisusDbPy.PairIntDouble_second_set
    __swig_getmethods__["second"] = _VisusDbPy.PairIntDouble_second_get
    if _newclass:
        second = _swig_property(_VisusDbPy.PairIntDouble_second_get, _VisusDbPy.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusDbPy.delete_PairIntDouble
    __del__ = lambda self: None
PairIntDouble_swigregister = _VisusDbPy.PairIntDouble_swigregister
PairIntDouble_swigregister(PairIntDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusDbPy.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusDbPy.VectorString___nonzero__(self)

    def __bool__(self):
        return _VisusDbPy.VectorString___bool__(self)

    def __len__(self):
        return _VisusDbPy.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _VisusDbPy.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusDbPy.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusDbPy.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusDbPy.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusDbPy.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusDbPy.VectorString___setitem__(self, *args)

    def pop(self):
        return _VisusDbPy.VectorString_pop(self)

    def append(self, x):
        return _VisusDbPy.VectorString_append(self, x)

    def empty(self):
        return _VisusDbPy.VectorString_empty(self)

    def size(self):
        return _VisusDbPy.VectorString_size(self)

    def swap(self, v):
        return _VisusDbPy.VectorString_swap(self, v)

    def begin(self):
        return _VisusDbPy.VectorString_begin(self)

    def end(self):
        return _VisusDbPy.VectorString_end(self)

    def rbegin(self):
        return _VisusDbPy.VectorString_rbegin(self)

    def rend(self):
        return _VisusDbPy.VectorString_rend(self)

    def clear(self):
        return _VisusDbPy.VectorString_clear(self)

    def get_allocator(self):
        return _VisusDbPy.VectorString_get_allocator(self)

    def pop_back(self):
        return _VisusDbPy.VectorString_pop_back(self)

    def erase(self, *args):
        return _VisusDbPy.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _VisusDbPy.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusDbPy.VectorString_push_back(self, x)

    def front(self):
        return _VisusDbPy.VectorString_front(self)

    def back(self):
        return _VisusDbPy.VectorString_back(self)

    def assign(self, n, x):
        return _VisusDbPy.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _VisusDbPy.VectorString_resize(self, *args)

    def insert(self, *args):
        return _VisusDbPy.VectorString_insert(self, *args)

    def reserve(self, n):
        return _VisusDbPy.VectorString_reserve(self, n)

    def capacity(self):
        return _VisusDbPy.VectorString_capacity(self)
    __swig_destroy__ = _VisusDbPy.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _VisusDbPy.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusDbPy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusDbPy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusDbPy.VectorInt___bool__(self)

    def __len__(self):
        return _VisusDbPy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusDbPy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusDbPy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusDbPy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusDbPy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusDbPy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusDbPy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusDbPy.VectorInt_pop(self)

    def append(self, x):
        return _VisusDbPy.VectorInt_append(self, x)

    def empty(self):
        return _VisusDbPy.VectorInt_empty(self)

    def size(self):
        return _VisusDbPy.VectorInt_size(self)

    def swap(self, v):
        return _VisusDbPy.VectorInt_swap(self, v)

    def begin(self):
        return _VisusDbPy.VectorInt_begin(self)

    def end(self):
        return _VisusDbPy.VectorInt_end(self)

    def rbegin(self):
        return _VisusDbPy.VectorInt_rbegin(self)

    def rend(self):
        return _VisusDbPy.VectorInt_rend(self)

    def clear(self):
        return _VisusDbPy.VectorInt_clear(self)

    def get_allocator(self):
        return _VisusDbPy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusDbPy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusDbPy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _VisusDbPy.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusDbPy.VectorInt_push_back(self, x)

    def front(self):
        return _VisusDbPy.VectorInt_front(self)

    def back(self):
        return _VisusDbPy.VectorInt_back(self)

    def assign(self, n, x):
        return _VisusDbPy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusDbPy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusDbPy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusDbPy.VectorInt_reserve(self, n)

    def capacity(self):
        return _VisusDbPy.VectorInt_capacity(self)
    __swig_destroy__ = _VisusDbPy.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _VisusDbPy.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusDbPy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusDbPy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusDbPy.VectorDouble___bool__(self)

    def __len__(self):
        return _VisusDbPy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusDbPy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusDbPy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusDbPy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusDbPy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusDbPy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusDbPy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusDbPy.VectorDouble_pop(self)

    def append(self, x):
        return _VisusDbPy.VectorDouble_append(self, x)

    def empty(self):
        return _VisusDbPy.VectorDouble_empty(self)

    def size(self):
        return _VisusDbPy.VectorDouble_size(self)

    def swap(self, v):
        return _VisusDbPy.VectorDouble_swap(self, v)

    def begin(self):
        return _VisusDbPy.VectorDouble_begin(self)

    def end(self):
        return _VisusDbPy.VectorDouble_end(self)

    def rbegin(self):
        return _VisusDbPy.VectorDouble_rbegin(self)

    def rend(self):
        return _VisusDbPy.VectorDouble_rend(self)

    def clear(self):
        return _VisusDbPy.VectorDouble_clear(self)

    def get_allocator(self):
        return _VisusDbPy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusDbPy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusDbPy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _VisusDbPy.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusDbPy.VectorDouble_push_back(self, x)

    def front(self):
        return _VisusDbPy.VectorDouble_front(self)

    def back(self):
        return _VisusDbPy.VectorDouble_back(self)

    def assign(self, n, x):
        return _VisusDbPy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusDbPy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusDbPy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusDbPy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusDbPy.VectorDouble_capacity(self)
    __swig_destroy__ = _VisusDbPy.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _VisusDbPy.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusDbPy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusDbPy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusDbPy.VectorFloat___bool__(self)

    def __len__(self):
        return _VisusDbPy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusDbPy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusDbPy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusDbPy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusDbPy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusDbPy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusDbPy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusDbPy.VectorFloat_pop(self)

    def append(self, x):
        return _VisusDbPy.VectorFloat_append(self, x)

    def empty(self):
        return _VisusDbPy.VectorFloat_empty(self)

    def size(self):
        return _VisusDbPy.VectorFloat_size(self)

    def swap(self, v):
        return _VisusDbPy.VectorFloat_swap(self, v)

    def begin(self):
        return _VisusDbPy.VectorFloat_begin(self)

    def end(self):
        return _VisusDbPy.VectorFloat_end(self)

    def rbegin(self):
        return _VisusDbPy.VectorFloat_rbegin(self)

    def rend(self):
        return _VisusDbPy.VectorFloat_rend(self)

    def clear(self):
        return _VisusDbPy.VectorFloat_clear(self)

    def get_allocator(self):
        return _VisusDbPy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusDbPy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusDbPy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _VisusDbPy.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusDbPy.VectorFloat_push_back(self, x)

    def front(self):
        return _VisusDbPy.VectorFloat_front(self)

    def back(self):
        return _VisusDbPy.VectorFloat_back(self)

    def assign(self, n, x):
        return _VisusDbPy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusDbPy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusDbPy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusDbPy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusDbPy.VectorFloat_capacity(self)
    __swig_destroy__ = _VisusDbPy.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _VisusDbPy.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusDbPy.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusDbPy.MapStringString___nonzero__(self)

    def __bool__(self):
        return _VisusDbPy.MapStringString___bool__(self)

    def __len__(self):
        return _VisusDbPy.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusDbPy.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusDbPy.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _VisusDbPy.MapStringString_has_key(self, key)

    def keys(self):
        return _VisusDbPy.MapStringString_keys(self)

    def values(self):
        return _VisusDbPy.MapStringString_values(self)

    def items(self):
        return _VisusDbPy.MapStringString_items(self)

    def __contains__(self, key):
        return _VisusDbPy.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _VisusDbPy.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _VisusDbPy.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusDbPy.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _VisusDbPy.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _VisusDbPy.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _VisusDbPy.MapStringString_empty(self)

    def size(self):
        return _VisusDbPy.MapStringString_size(self)

    def swap(self, v):
        return _VisusDbPy.MapStringString_swap(self, v)

    def begin(self):
        return _VisusDbPy.MapStringString_begin(self)

    def end(self):
        return _VisusDbPy.MapStringString_end(self)

    def rbegin(self):
        return _VisusDbPy.MapStringString_rbegin(self)

    def rend(self):
        return _VisusDbPy.MapStringString_rend(self)

    def clear(self):
        return _VisusDbPy.MapStringString_clear(self)

    def get_allocator(self):
        return _VisusDbPy.MapStringString_get_allocator(self)

    def count(self, x):
        return _VisusDbPy.MapStringString_count(self, x)

    def erase(self, *args):
        return _VisusDbPy.MapStringString_erase(self, *args)

    def find(self, x):
        return _VisusDbPy.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _VisusDbPy.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusDbPy.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _VisusDbPy.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _VisusDbPy.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

import VisusKernelPy
class DbModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DbModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DbModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusDbPy.DbModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusDbPy.DbModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusDbPy.DbModule_bAttached_get, _VisusDbPy.DbModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusDbPy.DbModule_attach)
    else:
        attach = _VisusDbPy.DbModule_attach
    if _newclass:
        detach = staticmethod(_VisusDbPy.DbModule_detach)
    else:
        detach = _VisusDbPy.DbModule_detach

    def __init__(self):
        this = _VisusDbPy.new_DbModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_DbModule
    __del__ = lambda self: None
DbModule_swigregister = _VisusDbPy.DbModule_swigregister
DbModule_swigregister(DbModule)
cvar = _VisusDbPy.cvar

def DbModule_attach():
    return _VisusDbPy.DbModule_attach()
DbModule_attach = _VisusDbPy.DbModule_attach

def DbModule_detach():
    return _VisusDbPy.DbModule_detach()
DbModule_detach = _VisusDbPy.DbModule_detach

class Access(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Access, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Access, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _VisusDbPy.Access_name_set
    __swig_getmethods__["name"] = _VisusDbPy.Access_name_get
    if _newclass:
        name = _swig_property(_VisusDbPy.Access_name_get, _VisusDbPy.Access_name_set)
    __swig_setmethods__["can_read"] = _VisusDbPy.Access_can_read_set
    __swig_getmethods__["can_read"] = _VisusDbPy.Access_can_read_get
    if _newclass:
        can_read = _swig_property(_VisusDbPy.Access_can_read_get, _VisusDbPy.Access_can_read_set)
    __swig_setmethods__["can_write"] = _VisusDbPy.Access_can_write_set
    __swig_getmethods__["can_write"] = _VisusDbPy.Access_can_write_get
    if _newclass:
        can_write = _swig_property(_VisusDbPy.Access_can_write_get, _VisusDbPy.Access_can_write_set)
    __swig_setmethods__["bitsperblock"] = _VisusDbPy.Access_bitsperblock_set
    __swig_getmethods__["bitsperblock"] = _VisusDbPy.Access_bitsperblock_get
    if _newclass:
        bitsperblock = _swig_property(_VisusDbPy.Access_bitsperblock_get, _VisusDbPy.Access_bitsperblock_set)
    __swig_setmethods__["statistics"] = _VisusDbPy.Access_statistics_set
    __swig_getmethods__["statistics"] = _VisusDbPy.Access_statistics_get
    if _newclass:
        statistics = _swig_property(_VisusDbPy.Access_statistics_get, _VisusDbPy.Access_statistics_set)
    __swig_setmethods__["bVerbose"] = _VisusDbPy.Access_bVerbose_set
    __swig_getmethods__["bVerbose"] = _VisusDbPy.Access_bVerbose_get
    if _newclass:
        bVerbose = _swig_property(_VisusDbPy.Access_bVerbose_get, _VisusDbPy.Access_bVerbose_set)
    __swig_setmethods__["bDisableWriteLocks"] = _VisusDbPy.Access_bDisableWriteLocks_set
    __swig_getmethods__["bDisableWriteLocks"] = _VisusDbPy.Access_bDisableWriteLocks_get
    if _newclass:
        bDisableWriteLocks = _swig_property(_VisusDbPy.Access_bDisableWriteLocks_get, _VisusDbPy.Access_bDisableWriteLocks_set)
    __swig_destroy__ = _VisusDbPy.delete_Access
    __del__ = lambda self: None

    def getSamplesPerBlock(self):
        return _VisusDbPy.Access_getSamplesPerBlock(self)

    def getFilename(self, *args):
        return _VisusDbPy.Access_getFilename(self, *args)
    if _newclass:
        guessBlockFilenameTemplate = staticmethod(_VisusDbPy.Access_guessBlockFilenameTemplate)
    else:
        guessBlockFilenameTemplate = _VisusDbPy.Access_guessBlockFilenameTemplate

    def guessBlockFilename(self, *args):
        return _VisusDbPy.Access_guessBlockFilename(self, *args)

    def getStartAddress(self, block_id):
        return _VisusDbPy.Access_getStartAddress(self, block_id)

    def getEndAddress(self, block_id):
        return _VisusDbPy.Access_getEndAddress(self, block_id)

    def getMode(self):
        return _VisusDbPy.Access_getMode(self)

    def isReading(self):
        return _VisusDbPy.Access_isReading(self)

    def isWriting(self):
        return _VisusDbPy.Access_isWriting(self)

    def beginIO(self, mode):
        return _VisusDbPy.Access_beginIO(self, mode)

    def readBlock(self, query):
        return _VisusDbPy.Access_readBlock(self, query)

    def writeBlock(self, query):
        return _VisusDbPy.Access_writeBlock(self, query)

    def endIO(self):
        return _VisusDbPy.Access_endIO(self)

    def beginRead(self):
        return _VisusDbPy.Access_beginRead(self)

    def endRead(self):
        return _VisusDbPy.Access_endRead(self)

    def beginWrite(self):
        return _VisusDbPy.Access_beginWrite(self)

    def endWrite(self):
        return _VisusDbPy.Access_endWrite(self)

    def beginReadWrite(self):
        return _VisusDbPy.Access_beginReadWrite(self)

    def endReadWrite(self):
        return _VisusDbPy.Access_endReadWrite(self)

    def acquireWriteLock(self, query):
        return _VisusDbPy.Access_acquireWriteLock(self, query)

    def releaseWriteLock(self, query):
        return _VisusDbPy.Access_releaseWriteLock(self, query)

    def resetStatistics(self):
        return _VisusDbPy.Access_resetStatistics(self)

    def printStatistics(self):
        return _VisusDbPy.Access_printStatistics(self)

    def writeToObjectStream(self, ostream):
        return _VisusDbPy.Access_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusDbPy.Access_readFromObjectStream(self, istream)

    def readOk(self, query):
        return _VisusDbPy.Access_readOk(self, query)

    def readFailed(self, query):
        return _VisusDbPy.Access_readFailed(self, query)

    def writeOk(self, query):
        return _VisusDbPy.Access_writeOk(self, query)

    def writeFailed(self, query):
        return _VisusDbPy.Access_writeFailed(self, query)
Access_swigregister = _VisusDbPy.Access_swigregister
Access_swigregister(Access)

def Access_guessBlockFilenameTemplate():
    return _VisusDbPy.Access_guessBlockFilenameTemplate()
Access_guessBlockFilenameTemplate = _VisusDbPy.Access_guessBlockFilenameTemplate

class LogicBox(VisusKernelPy.NdBox):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.NdBox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicBox, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.NdBox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogicBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nsamples"] = _VisusDbPy.LogicBox_nsamples_set
    __swig_getmethods__["nsamples"] = _VisusDbPy.LogicBox_nsamples_get
    if _newclass:
        nsamples = _swig_property(_VisusDbPy.LogicBox_nsamples_get, _VisusDbPy.LogicBox_nsamples_set)
    __swig_setmethods__["delta"] = _VisusDbPy.LogicBox_delta_set
    __swig_getmethods__["delta"] = _VisusDbPy.LogicBox_delta_get
    if _newclass:
        delta = _swig_property(_VisusDbPy.LogicBox_delta_get, _VisusDbPy.LogicBox_delta_set)
    __swig_setmethods__["shift"] = _VisusDbPy.LogicBox_shift_set
    __swig_getmethods__["shift"] = _VisusDbPy.LogicBox_shift_get
    if _newclass:
        shift = _swig_property(_VisusDbPy.LogicBox_shift_get, _VisusDbPy.LogicBox_shift_set)

    def __init__(self, *args):
        this = _VisusDbPy.new_LogicBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valid(self):
        return _VisusDbPy.LogicBox_valid(self)

    def pixelToLogic(self, value):
        return _VisusDbPy.LogicBox_pixelToLogic(self, value)

    def logicToPixel(self, value):
        return _VisusDbPy.LogicBox_logicToPixel(self, value)

    def alignBox(self, value):
        return _VisusDbPy.LogicBox_alignBox(self, value)
    __swig_destroy__ = _VisusDbPy.delete_LogicBox
    __del__ = lambda self: None
LogicBox_swigregister = _VisusDbPy.LogicBox_swigregister
LogicBox_swigregister(LogicBox)

QueryCreated = _VisusDbPy.QueryCreated
QueryRunning = _VisusDbPy.QueryRunning
QueryFailed = _VisusDbPy.QueryFailed
QueryOk = _VisusDbPy.QueryOk
class BlockQuery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockQuery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockQuery, name)
    __repr__ = _swig_repr
    __swig_setmethods__["aborted"] = _VisusDbPy.BlockQuery_aborted_set
    __swig_getmethods__["aborted"] = _VisusDbPy.BlockQuery_aborted_get
    if _newclass:
        aborted = _swig_property(_VisusDbPy.BlockQuery_aborted_get, _VisusDbPy.BlockQuery_aborted_set)
    __swig_setmethods__["field"] = _VisusDbPy.BlockQuery_field_set
    __swig_getmethods__["field"] = _VisusDbPy.BlockQuery_field_get
    if _newclass:
        field = _swig_property(_VisusDbPy.BlockQuery_field_get, _VisusDbPy.BlockQuery_field_set)
    __swig_setmethods__["time"] = _VisusDbPy.BlockQuery_time_set
    __swig_getmethods__["time"] = _VisusDbPy.BlockQuery_time_get
    if _newclass:
        time = _swig_property(_VisusDbPy.BlockQuery_time_get, _VisusDbPy.BlockQuery_time_set)
    __swig_setmethods__["buffer"] = _VisusDbPy.BlockQuery_buffer_set
    __swig_getmethods__["buffer"] = _VisusDbPy.BlockQuery_buffer_get
    if _newclass:
        buffer = _swig_property(_VisusDbPy.BlockQuery_buffer_get, _VisusDbPy.BlockQuery_buffer_set)
    __swig_setmethods__["nsamples"] = _VisusDbPy.BlockQuery_nsamples_set
    __swig_getmethods__["nsamples"] = _VisusDbPy.BlockQuery_nsamples_get
    if _newclass:
        nsamples = _swig_property(_VisusDbPy.BlockQuery_nsamples_get, _VisusDbPy.BlockQuery_nsamples_set)
    __swig_setmethods__["logic_box"] = _VisusDbPy.BlockQuery_logic_box_set
    __swig_getmethods__["logic_box"] = _VisusDbPy.BlockQuery_logic_box_get
    if _newclass:
        logic_box = _swig_property(_VisusDbPy.BlockQuery_logic_box_get, _VisusDbPy.BlockQuery_logic_box_set)
    __swig_setmethods__["done"] = _VisusDbPy.BlockQuery_done_set
    __swig_getmethods__["done"] = _VisusDbPy.BlockQuery_done_get
    if _newclass:
        done = _swig_property(_VisusDbPy.BlockQuery_done_get, _VisusDbPy.BlockQuery_done_set)
    __swig_setmethods__["start_address"] = _VisusDbPy.BlockQuery_start_address_set
    __swig_getmethods__["start_address"] = _VisusDbPy.BlockQuery_start_address_get
    if _newclass:
        start_address = _swig_property(_VisusDbPy.BlockQuery_start_address_get, _VisusDbPy.BlockQuery_start_address_set)
    __swig_setmethods__["end_address"] = _VisusDbPy.BlockQuery_end_address_set
    __swig_getmethods__["end_address"] = _VisusDbPy.BlockQuery_end_address_get
    if _newclass:
        end_address = _swig_property(_VisusDbPy.BlockQuery_end_address_get, _VisusDbPy.BlockQuery_end_address_set)

    def __init__(self, field_, time_, start_address_, end_address_, aborted_):
        this = _VisusDbPy.new_BlockQuery(field_, time_, start_address_, end_address_, aborted_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_BlockQuery
    __del__ = lambda self: None

    def getByteSize(self):
        return _VisusDbPy.BlockQuery_getByteSize(self)

    def getBlockNumber(self, bitsperblock):
        return _VisusDbPy.BlockQuery_getBlockNumber(self, bitsperblock)

    def setRunning(self):
        return _VisusDbPy.BlockQuery_setRunning(self)

    def ok(self):
        return _VisusDbPy.BlockQuery_ok(self)

    def setOk(self):
        return _VisusDbPy.BlockQuery_setOk(self)

    def failed(self):
        return _VisusDbPy.BlockQuery_failed(self)

    def setFailed(self):
        return _VisusDbPy.BlockQuery_setFailed(self)

    def allocateBufferIfNeeded(self):
        return _VisusDbPy.BlockQuery_allocateBufferIfNeeded(self)
BlockQuery_swigregister = _VisusDbPy.BlockQuery_swigregister
BlockQuery_swigregister(BlockQuery)

class Query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Query, name)
    __repr__ = _swig_repr
    InsertSamples = _VisusDbPy.Query_InsertSamples
    InterpolateSamples = _VisusDbPy.Query_InterpolateSamples
    __swig_setmethods__["aborted"] = _VisusDbPy.Query_aborted_set
    __swig_getmethods__["aborted"] = _VisusDbPy.Query_aborted_get
    if _newclass:
        aborted = _swig_property(_VisusDbPy.Query_aborted_get, _VisusDbPy.Query_aborted_set)
    __swig_setmethods__["field"] = _VisusDbPy.Query_field_set
    __swig_getmethods__["field"] = _VisusDbPy.Query_field_get
    if _newclass:
        field = _swig_property(_VisusDbPy.Query_field_get, _VisusDbPy.Query_field_set)
    __swig_setmethods__["time"] = _VisusDbPy.Query_time_set
    __swig_getmethods__["time"] = _VisusDbPy.Query_time_get
    if _newclass:
        time = _swig_property(_VisusDbPy.Query_time_get, _VisusDbPy.Query_time_set)
    __swig_setmethods__["buffer"] = _VisusDbPy.Query_buffer_set
    __swig_getmethods__["buffer"] = _VisusDbPy.Query_buffer_get
    if _newclass:
        buffer = _swig_property(_VisusDbPy.Query_buffer_get, _VisusDbPy.Query_buffer_set)
    __swig_setmethods__["nsamples"] = _VisusDbPy.Query_nsamples_set
    __swig_getmethods__["nsamples"] = _VisusDbPy.Query_nsamples_get
    if _newclass:
        nsamples = _swig_property(_VisusDbPy.Query_nsamples_get, _VisusDbPy.Query_nsamples_set)
    __swig_setmethods__["logic_box"] = _VisusDbPy.Query_logic_box_set
    __swig_getmethods__["logic_box"] = _VisusDbPy.Query_logic_box_get
    if _newclass:
        logic_box = _swig_property(_VisusDbPy.Query_logic_box_get, _VisusDbPy.Query_logic_box_set)
    GuessProgression = _VisusDbPy.Query_GuessProgression
    NoProgression = _VisusDbPy.Query_NoProgression
    DefaultQuality = _VisusDbPy.Query_DefaultQuality
    __swig_setmethods__["mode"] = _VisusDbPy.Query_mode_set
    __swig_getmethods__["mode"] = _VisusDbPy.Query_mode_get
    if _newclass:
        mode = _swig_property(_VisusDbPy.Query_mode_get, _VisusDbPy.Query_mode_set)
    __swig_setmethods__["merge_mode"] = _VisusDbPy.Query_merge_mode_set
    __swig_getmethods__["merge_mode"] = _VisusDbPy.Query_merge_mode_get
    if _newclass:
        merge_mode = _swig_property(_VisusDbPy.Query_merge_mode_get, _VisusDbPy.Query_merge_mode_set)
    __swig_setmethods__["position"] = _VisusDbPy.Query_position_set
    __swig_getmethods__["position"] = _VisusDbPy.Query_position_get
    if _newclass:
        position = _swig_property(_VisusDbPy.Query_position_get, _VisusDbPy.Query_position_set)
    __swig_setmethods__["viewdep"] = _VisusDbPy.Query_viewdep_set
    __swig_getmethods__["viewdep"] = _VisusDbPy.Query_viewdep_get
    if _newclass:
        viewdep = _swig_property(_VisusDbPy.Query_viewdep_get, _VisusDbPy.Query_viewdep_set)
    __swig_setmethods__["clipping"] = _VisusDbPy.Query_clipping_set
    __swig_getmethods__["clipping"] = _VisusDbPy.Query_clipping_get
    if _newclass:
        clipping = _swig_property(_VisusDbPy.Query_clipping_get, _VisusDbPy.Query_clipping_set)
    __swig_setmethods__["incrementalPublish"] = _VisusDbPy.Query_incrementalPublish_set
    __swig_getmethods__["incrementalPublish"] = _VisusDbPy.Query_incrementalPublish_get
    if _newclass:
        incrementalPublish = _swig_property(_VisusDbPy.Query_incrementalPublish_get, _VisusDbPy.Query_incrementalPublish_set)
    __swig_setmethods__["start_resolution"] = _VisusDbPy.Query_start_resolution_set
    __swig_getmethods__["start_resolution"] = _VisusDbPy.Query_start_resolution_get
    if _newclass:
        start_resolution = _swig_property(_VisusDbPy.Query_start_resolution_get, _VisusDbPy.Query_start_resolution_set)
    __swig_setmethods__["cur_resolution"] = _VisusDbPy.Query_cur_resolution_set
    __swig_getmethods__["cur_resolution"] = _VisusDbPy.Query_cur_resolution_get
    if _newclass:
        cur_resolution = _swig_property(_VisusDbPy.Query_cur_resolution_get, _VisusDbPy.Query_cur_resolution_set)
    __swig_setmethods__["end_resolutions"] = _VisusDbPy.Query_end_resolutions_set
    __swig_getmethods__["end_resolutions"] = _VisusDbPy.Query_end_resolutions_get
    if _newclass:
        end_resolutions = _swig_property(_VisusDbPy.Query_end_resolutions_get, _VisusDbPy.Query_end_resolutions_set)
    __swig_setmethods__["max_resolution"] = _VisusDbPy.Query_max_resolution_set
    __swig_getmethods__["max_resolution"] = _VisusDbPy.Query_max_resolution_get
    if _newclass:
        max_resolution = _swig_property(_VisusDbPy.Query_max_resolution_get, _VisusDbPy.Query_max_resolution_set)
    __swig_setmethods__["query_cursor"] = _VisusDbPy.Query_query_cursor_set
    __swig_getmethods__["query_cursor"] = _VisusDbPy.Query_query_cursor_get
    if _newclass:
        query_cursor = _swig_property(_VisusDbPy.Query_query_cursor_get, _VisusDbPy.Query_query_cursor_set)
    __swig_setmethods__["filter"] = _VisusDbPy.Query_filter_set
    __swig_getmethods__["filter"] = _VisusDbPy.Query_filter_get
    if _newclass:
        filter = _swig_property(_VisusDbPy.Query_filter_get, _VisusDbPy.Query_filter_set)
    __swig_setmethods__["aligned_box"] = _VisusDbPy.Query_aligned_box_set
    __swig_getmethods__["aligned_box"] = _VisusDbPy.Query_aligned_box_get
    if _newclass:
        aligned_box = _swig_property(_VisusDbPy.Query_aligned_box_get, _VisusDbPy.Query_aligned_box_set)
    __swig_setmethods__["filter_query"] = _VisusDbPy.Query_filter_query_set
    __swig_getmethods__["filter_query"] = _VisusDbPy.Query_filter_query_get
    if _newclass:
        filter_query = _swig_property(_VisusDbPy.Query_filter_query_get, _VisusDbPy.Query_filter_query_set)
    __swig_setmethods__["down_queries"] = _VisusDbPy.Query_down_queries_set
    __swig_getmethods__["down_queries"] = _VisusDbPy.Query_down_queries_get
    if _newclass:
        down_queries = _swig_property(_VisusDbPy.Query_down_queries_get, _VisusDbPy.Query_down_queries_set)
    __swig_setmethods__["point_coordinates"] = _VisusDbPy.Query_point_coordinates_set
    __swig_getmethods__["point_coordinates"] = _VisusDbPy.Query_point_coordinates_get
    if _newclass:
        point_coordinates = _swig_property(_VisusDbPy.Query_point_coordinates_get, _VisusDbPy.Query_point_coordinates_set)

    def __init__(self, dataset, mode):
        this = _VisusDbPy.new_Query(dataset, mode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_Query
    __del__ = lambda self: None

    def getByteSize(self):
        return _VisusDbPy.Query_getByteSize(self)

    def isPointQuery(self):
        return _VisusDbPy.Query_isPointQuery(self)

    def isRunning(self):
        return _VisusDbPy.Query_isRunning(self)

    def setRunning(self):
        return _VisusDbPy.Query_setRunning(self)

    def failed(self):
        return _VisusDbPy.Query_failed(self)

    def getLastErrorMsg(self):
        return _VisusDbPy.Query_getLastErrorMsg(self)

    def ok(self):
        return _VisusDbPy.Query_ok(self)

    def setFailed(self, msg):
        return _VisusDbPy.Query_setFailed(self, msg)

    def setOk(self):
        return _VisusDbPy.Query_setOk(self)

    def canBegin(self):
        return _VisusDbPy.Query_canBegin(self)

    def canNext(self):
        return _VisusDbPy.Query_canNext(self)

    def canExecute(self):
        return _VisusDbPy.Query_canExecute(self)

    def getEndResolution(self):
        return _VisusDbPy.Query_getEndResolution(self)

    def currentLevelReady(self):
        return _VisusDbPy.Query_currentLevelReady(self)

    def allocateBufferIfNeeded(self):
        return _VisusDbPy.Query_allocateBufferIfNeeded(self)
    if _newclass:
        mergeSamples = staticmethod(_VisusDbPy.Query_mergeSamples)
    else:
        mergeSamples = _VisusDbPy.Query_mergeSamples
Query_swigregister = _VisusDbPy.Query_swigregister
Query_swigregister(Query)

def Query_mergeSamples(*args):
    return _VisusDbPy.Query_mergeSamples(*args)
Query_mergeSamples = _VisusDbPy.Query_mergeSamples

DatasetBitmaskMaxLen = _VisusDbPy.DatasetBitmaskMaxLen
class DatasetBitmask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetBitmask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetBitmask, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusDbPy.new_DatasetBitmask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        guess = staticmethod(_VisusDbPy.DatasetBitmask_guess)
    else:
        guess = _VisusDbPy.DatasetBitmask_guess
    if _newclass:
        invalid = staticmethod(_VisusDbPy.DatasetBitmask_invalid)
    else:
        invalid = _VisusDbPy.DatasetBitmask_invalid

    def empty(self):
        return _VisusDbPy.DatasetBitmask_empty(self)

    def valid(self):
        return _VisusDbPy.DatasetBitmask_valid(self)

    def getMaxResolution(self):
        return _VisusDbPy.DatasetBitmask_getMaxResolution(self)

    def hasRegExpr(self):
        return _VisusDbPy.DatasetBitmask_hasRegExpr(self)

    def getPointDim(self):
        return _VisusDbPy.DatasetBitmask_getPointDim(self)

    def getPow2Dims(self):
        return _VisusDbPy.DatasetBitmask_getPow2Dims(self)

    def getPow2Box(self):
        return _VisusDbPy.DatasetBitmask_getPow2Box(self)

    def clear(self):
        return _VisusDbPy.DatasetBitmask_clear(self)

    def __getitem__(self, I):
        return _VisusDbPy.DatasetBitmask___getitem__(self, I)

    def __eq__(self, other):
        return _VisusDbPy.DatasetBitmask___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.DatasetBitmask___ne__(self, other)

    def upgradeBox(self, box, maxh):
        return _VisusDbPy.DatasetBitmask_upgradeBox(self, box, maxh)

    def deinterleave(self, z, max_resolution):
        return _VisusDbPy.DatasetBitmask_deinterleave(self, z, max_resolution)

    def toString(self):
        return _VisusDbPy.DatasetBitmask_toString(self)

    def __add__(self, other):
        return _VisusDbPy.DatasetBitmask___add__(self, other)
    __swig_destroy__ = _VisusDbPy.delete_DatasetBitmask
    __del__ = lambda self: None
DatasetBitmask_swigregister = _VisusDbPy.DatasetBitmask_swigregister
DatasetBitmask_swigregister(DatasetBitmask)

def DatasetBitmask_guess(dims, makeRegularAsSoonAsPossible=True):
    return _VisusDbPy.DatasetBitmask_guess(dims, makeRegularAsSoonAsPossible)
DatasetBitmask_guess = _VisusDbPy.DatasetBitmask_guess

def DatasetBitmask_invalid():
    return _VisusDbPy.DatasetBitmask_invalid()
DatasetBitmask_invalid = _VisusDbPy.DatasetBitmask_invalid

class DatasetTimesteps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetTimesteps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetTimesteps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusDbPy.new_DatasetTimesteps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_DatasetTimesteps
    __del__ = lambda self: None
    if _newclass:
        star = staticmethod(_VisusDbPy.DatasetTimesteps_star)
    else:
        star = _VisusDbPy.DatasetTimesteps_star

    def clear(self):
        return _VisusDbPy.DatasetTimesteps_clear(self)

    def empty(self):
        return _VisusDbPy.DatasetTimesteps_empty(self)

    def size(self):
        return _VisusDbPy.DatasetTimesteps_size(self)

    def getAt(self, I):
        return _VisusDbPy.DatasetTimesteps_getAt(self, I)

    def __eq__(self, other):
        return _VisusDbPy.DatasetTimesteps___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.DatasetTimesteps___ne__(self, other)

    def containsTimestep(self, t):
        return _VisusDbPy.DatasetTimesteps_containsTimestep(self, t)

    def addTimesteps(self, *args):
        return _VisusDbPy.DatasetTimesteps_addTimesteps(self, *args)

    def addTimestep(self, t):
        return _VisusDbPy.DatasetTimesteps_addTimestep(self, t)

    def getDefault(self):
        return _VisusDbPy.DatasetTimesteps_getDefault(self)

    def getMin(self):
        return _VisusDbPy.DatasetTimesteps_getMin(self)

    def getMax(self):
        return _VisusDbPy.DatasetTimesteps_getMax(self)

    def getRange(self):
        return _VisusDbPy.DatasetTimesteps_getRange(self)

    def asVector(self):
        return _VisusDbPy.DatasetTimesteps_asVector(self)

    def toString(self):
        return _VisusDbPy.DatasetTimesteps_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusDbPy.DatasetTimesteps_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusDbPy.DatasetTimesteps_readFromObjectStream(self, istream)
DatasetTimesteps_swigregister = _VisusDbPy.DatasetTimesteps_swigregister
DatasetTimesteps_swigregister(DatasetTimesteps)

def DatasetTimesteps_star():
    return _VisusDbPy.DatasetTimesteps_star()
DatasetTimesteps_star = _VisusDbPy.DatasetTimesteps_star

class DatasetFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetFilter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusDbPy.delete_DatasetFilter
    __del__ = lambda self: None

    def getDataset(self):
        return _VisusDbPy.DatasetFilter_getDataset(self)

    def setNeedExtraComponent(self, value):
        return _VisusDbPy.DatasetFilter_setNeedExtraComponent(self, value)

    def doesNeedExtraComponent(self):
        return _VisusDbPy.DatasetFilter_doesNeedExtraComponent(self)

    def getName(self):
        return _VisusDbPy.DatasetFilter_getName(self)

    def getSize(self):
        return _VisusDbPy.DatasetFilter_getSize(self)

    def getDType(self):
        return _VisusDbPy.DatasetFilter_getDType(self)

    def getFilterStep(self, H, MaxH):
        return _VisusDbPy.DatasetFilter_getFilterStep(self, H, MaxH)

    def dropExtraComponentIfExists(self, src):
        return _VisusDbPy.DatasetFilter_dropExtraComponentIfExists(self, src)

    def computeFilter(self, *args):
        return _VisusDbPy.DatasetFilter_computeFilter(self, *args)
DatasetFilter_swigregister = _VisusDbPy.DatasetFilter_swigregister
DatasetFilter_swigregister(DatasetFilter)

class KdQueryMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KdQueryMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KdQueryMode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NotSpecified = _VisusDbPy.KdQueryMode_NotSpecified
    UseBlockQuery = _VisusDbPy.KdQueryMode_UseBlockQuery
    UseQuery = _VisusDbPy.KdQueryMode_UseQuery
    if _newclass:
        fromString = staticmethod(_VisusDbPy.KdQueryMode_fromString)
    else:
        fromString = _VisusDbPy.KdQueryMode_fromString
    if _newclass:
        toString = staticmethod(_VisusDbPy.KdQueryMode_toString)
    else:
        toString = _VisusDbPy.KdQueryMode_toString
    __swig_destroy__ = _VisusDbPy.delete_KdQueryMode
    __del__ = lambda self: None
KdQueryMode_swigregister = _VisusDbPy.KdQueryMode_swigregister
KdQueryMode_swigregister(KdQueryMode)

def KdQueryMode_fromString(value):
    return _VisusDbPy.KdQueryMode_fromString(value)
KdQueryMode_fromString = _VisusDbPy.KdQueryMode_fromString

def KdQueryMode_toString(value):
    return _VisusDbPy.KdQueryMode_toString(value)
KdQueryMode_toString = _VisusDbPy.KdQueryMode_toString

class Dataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dataset, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["url"] = _VisusDbPy.Dataset_url_set
    __swig_getmethods__["url"] = _VisusDbPy.Dataset_url_get
    if _newclass:
        url = _swig_property(_VisusDbPy.Dataset_url_get, _VisusDbPy.Dataset_url_set)
    __swig_setmethods__["dataset_body"] = _VisusDbPy.Dataset_dataset_body_set
    __swig_getmethods__["dataset_body"] = _VisusDbPy.Dataset_dataset_body_get
    if _newclass:
        dataset_body = _swig_property(_VisusDbPy.Dataset_dataset_body_get, _VisusDbPy.Dataset_dataset_body_set)
    __swig_setmethods__["bitmask"] = _VisusDbPy.Dataset_bitmask_set
    __swig_getmethods__["bitmask"] = _VisusDbPy.Dataset_bitmask_get
    if _newclass:
        bitmask = _swig_property(_VisusDbPy.Dataset_bitmask_get, _VisusDbPy.Dataset_bitmask_set)
    __swig_setmethods__["default_bitsperblock"] = _VisusDbPy.Dataset_default_bitsperblock_set
    __swig_getmethods__["default_bitsperblock"] = _VisusDbPy.Dataset_default_bitsperblock_get
    if _newclass:
        default_bitsperblock = _swig_property(_VisusDbPy.Dataset_default_bitsperblock_get, _VisusDbPy.Dataset_default_bitsperblock_set)
    __swig_setmethods__["box"] = _VisusDbPy.Dataset_box_set
    __swig_getmethods__["box"] = _VisusDbPy.Dataset_box_get
    if _newclass:
        box = _swig_property(_VisusDbPy.Dataset_box_get, _VisusDbPy.Dataset_box_set)
    __swig_setmethods__["timesteps"] = _VisusDbPy.Dataset_timesteps_set
    __swig_getmethods__["timesteps"] = _VisusDbPy.Dataset_timesteps_get
    if _newclass:
        timesteps = _swig_property(_VisusDbPy.Dataset_timesteps_get, _VisusDbPy.Dataset_timesteps_set)
    __swig_setmethods__["default_scene"] = _VisusDbPy.Dataset_default_scene_set
    __swig_getmethods__["default_scene"] = _VisusDbPy.Dataset_default_scene_get
    if _newclass:
        default_scene = _swig_property(_VisusDbPy.Dataset_default_scene_get, _VisusDbPy.Dataset_default_scene_set)
    __swig_setmethods__["config"] = _VisusDbPy.Dataset_config_set
    __swig_getmethods__["config"] = _VisusDbPy.Dataset_config_get
    if _newclass:
        config = _swig_property(_VisusDbPy.Dataset_config_get, _VisusDbPy.Dataset_config_set)
    __swig_setmethods__["ram_access"] = _VisusDbPy.Dataset_ram_access_set
    __swig_getmethods__["ram_access"] = _VisusDbPy.Dataset_ram_access_get
    if _newclass:
        ram_access = _swig_property(_VisusDbPy.Dataset_ram_access_get, _VisusDbPy.Dataset_ram_access_set)
    __swig_setmethods__["kdquery_mode"] = _VisusDbPy.Dataset_kdquery_mode_set
    __swig_getmethods__["kdquery_mode"] = _VisusDbPy.Dataset_kdquery_mode_get
    if _newclass:
        kdquery_mode = _swig_property(_VisusDbPy.Dataset_kdquery_mode_get, _VisusDbPy.Dataset_kdquery_mode_set)
    __swig_setmethods__["fields"] = _VisusDbPy.Dataset_fields_set
    __swig_getmethods__["fields"] = _VisusDbPy.Dataset_fields_get
    if _newclass:
        fields = _swig_property(_VisusDbPy.Dataset_fields_get, _VisusDbPy.Dataset_fields_set)
    __swig_setmethods__["find_field"] = _VisusDbPy.Dataset_find_field_set
    __swig_getmethods__["find_field"] = _VisusDbPy.Dataset_find_field_get
    if _newclass:
        find_field = _swig_property(_VisusDbPy.Dataset_find_field_get, _VisusDbPy.Dataset_find_field_set)
    __swig_setmethods__["bServerMode"] = _VisusDbPy.Dataset_bServerMode_set
    __swig_getmethods__["bServerMode"] = _VisusDbPy.Dataset_bServerMode_get
    if _newclass:
        bServerMode = _swig_property(_VisusDbPy.Dataset_bServerMode_get, _VisusDbPy.Dataset_bServerMode_set)
    __swig_destroy__ = _VisusDbPy.delete_Dataset
    __del__ = lambda self: None

    def getTypeName(self):
        return _VisusDbPy.Dataset_getTypeName(self)

    def clone(self):
        return _VisusDbPy.Dataset_clone(self)
    if _newclass:
        copyDataset = staticmethod(_VisusDbPy.Dataset_copyDataset)
    else:
        copyDataset = _VisusDbPy.Dataset_copyDataset

    def valid(self):
        return _VisusDbPy.Dataset_valid(self)

    def invalidate(self):
        return _VisusDbPy.Dataset_invalidate(self)

    def getUrl(self):
        return _VisusDbPy.Dataset_getUrl(self)

    def setUrl(self, value):
        return _VisusDbPy.Dataset_setUrl(self, value)

    def setDatasetBody(self, value):
        return _VisusDbPy.Dataset_setDatasetBody(self, value)

    def getBitmask(self):
        return _VisusDbPy.Dataset_getBitmask(self)

    def getBox(self):
        return _VisusDbPy.Dataset_getBox(self)

    def getTimesteps(self):
        return _VisusDbPy.Dataset_getTimesteps(self)

    def getDefaultBitsPerBlock(self):
        return _VisusDbPy.Dataset_getDefaultBitsPerBlock(self)

    def getTotalnumberOfBlocks(self):
        return _VisusDbPy.Dataset_getTotalnumberOfBlocks(self)

    def getConfig(self):
        return _VisusDbPy.Dataset_getConfig(self)

    def getDefaultTime(self):
        return _VisusDbPy.Dataset_getDefaultTime(self)

    def getAccessConfigs(self):
        return _VisusDbPy.Dataset_getAccessConfigs(self)

    def getDefaultAccessConfig(self):
        return _VisusDbPy.Dataset_getDefaultAccessConfig(self)

    def getMaxResolution(self):
        return _VisusDbPy.Dataset_getMaxResolution(self)

    def getPointDim(self):
        return _VisusDbPy.Dataset_getPointDim(self)

    def getKdQueryMode(self):
        return _VisusDbPy.Dataset_getKdQueryMode(self)

    def setKdQueryMode(self, value):
        return _VisusDbPy.Dataset_setKdQueryMode(self, value)

    def getDefaultField(self):
        return _VisusDbPy.Dataset_getDefaultField(self)

    def getDefaultScene(self):
        return _VisusDbPy.Dataset_getDefaultScene(self)

    def getFields(self):
        return _VisusDbPy.Dataset_getFields(self)

    def getDatasetBody(self):
        return _VisusDbPy.Dataset_getDatasetBody(self)

    def getDatasetInfos(self):
        return _VisusDbPy.Dataset_getDatasetInfos(self)

    def extractLevelImage(self, access, field, time, H):
        return _VisusDbPy.Dataset_extractLevelImage(self, access, field, time, H)

    def openFromUrl(self, url):
        return _VisusDbPy.Dataset_openFromUrl(self, url)

    def compressDataset(self, compression):
        return _VisusDbPy.Dataset_compressDataset(self, compression)

    def getInnerDatasets(self):
        return _VisusDbPy.Dataset_getInnerDatasets(self)

    def guessEndResolutions(self, *args):
        return _VisusDbPy.Dataset_guessEndResolutions(self, *args)

    def getFieldByNameThrowEx(self, name):
        return _VisusDbPy.Dataset_getFieldByNameThrowEx(self, name)

    def getFieldByName(self, name):
        return _VisusDbPy.Dataset_getFieldByName(self, name)

    def createAccess(self, *args):
        return _VisusDbPy.Dataset_createAccess(self, *args)

    def createAccessForBlockQuery(self, *args):
        return _VisusDbPy.Dataset_createAccessForBlockQuery(self, *args)

    def getLevelBox(self, H):
        return _VisusDbPy.Dataset_getLevelBox(self, H)

    def getAddressRangeBox(self, start_address, end_address):
        return _VisusDbPy.Dataset_getAddressRangeBox(self, start_address, end_address)

    def readBlock(self, access, query):
        return _VisusDbPy.Dataset_readBlock(self, access, query)

    def writeBlock(self, access, query):
        return _VisusDbPy.Dataset_writeBlock(self, access, query)

    def readBlockAndWait(self, access, query):
        return _VisusDbPy.Dataset_readBlockAndWait(self, access, query)

    def writeBlockAndWait(self, access, query):
        return _VisusDbPy.Dataset_writeBlockAndWait(self, access, query)

    def convertBlockQueryToRowMajor(self, block_query):
        return _VisusDbPy.Dataset_convertBlockQueryToRowMajor(self, block_query)

    def createQueryFilter(self, field):
        return _VisusDbPy.Dataset_createQueryFilter(self, field)

    def beginQuery(self, query):
        return _VisusDbPy.Dataset_beginQuery(self, query)

    def executeQuery(self, access, query):
        return _VisusDbPy.Dataset_executeQuery(self, access, query)

    def nextQuery(self, query):
        return _VisusDbPy.Dataset_nextQuery(self, query)

    def mergeQueryWithBlock(self, query, block_query):
        return _VisusDbPy.Dataset_mergeQueryWithBlock(self, query, block_query)

    def createPureRemoteQueryNetRequest(self, query):
        return _VisusDbPy.Dataset_createPureRemoteQueryNetRequest(self, query)

    def createRamAccess(self, available, can_read=True, can_write=True):
        return _VisusDbPy.Dataset_createRamAccess(self, available, can_read, can_write)

    def addField(self, *args):
        return _VisusDbPy.Dataset_addField(self, *args)

    def executePureRemoteQuery(self, query):
        return _VisusDbPy.Dataset_executePureRemoteQuery(self, query)

    def generateTiles(self, TileSize):
        return _VisusDbPy.Dataset_generateTiles(self, TileSize)

    def readFullResolutionData(self, *args):
        return _VisusDbPy.Dataset_readFullResolutionData(self, *args)

    def writeFullResolutionData(self, *args):
        return _VisusDbPy.Dataset_writeFullResolutionData(self, *args)

    def toString(self):
        return _VisusDbPy.Dataset_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusDbPy.Dataset_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusDbPy.Dataset_readFromObjectStream(self, istream)
Dataset_swigregister = _VisusDbPy.Dataset_swigregister
Dataset_swigregister(Dataset)

def Dataset_copyDataset(Dvf, Daccess, Dfield, Dtime, Svf, Saccess, Sfield, Stime):
    return _VisusDbPy.Dataset_copyDataset(Dvf, Daccess, Dfield, Dtime, Svf, Saccess, Sfield, Stime)
Dataset_copyDataset = _VisusDbPy.Dataset_copyDataset

class DatasetFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_VisusDbPy.DatasetFactory_getSingleton)
    else:
        getSingleton = _VisusDbPy.DatasetFactory_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_VisusDbPy.DatasetFactory_allocSingleton)
    else:
        allocSingleton = _VisusDbPy.DatasetFactory_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_VisusDbPy.DatasetFactory_releaseSingleton)
    else:
        releaseSingleton = _VisusDbPy.DatasetFactory_releaseSingleton

    def registerDatasetType(self, extension, TypeName, createInstance):
        return _VisusDbPy.DatasetFactory_registerDatasetType(self, extension, TypeName, createInstance)

    def getDatasetTypeNameFromExtension(self, extension):
        return _VisusDbPy.DatasetFactory_getDatasetTypeNameFromExtension(self, extension)

    def createInstance(self, TypeName):
        return _VisusDbPy.DatasetFactory_createInstance(self, TypeName)
    __swig_destroy__ = _VisusDbPy.delete_DatasetFactory
    __del__ = lambda self: None
DatasetFactory_swigregister = _VisusDbPy.DatasetFactory_swigregister
DatasetFactory_swigregister(DatasetFactory)

def DatasetFactory_getSingleton():
    return _VisusDbPy.DatasetFactory_getSingleton()
DatasetFactory_getSingleton = _VisusDbPy.DatasetFactory_getSingleton

def DatasetFactory_allocSingleton():
    return _VisusDbPy.DatasetFactory_allocSingleton()
DatasetFactory_allocSingleton = _VisusDbPy.DatasetFactory_allocSingleton

def DatasetFactory_releaseSingleton():
    return _VisusDbPy.DatasetFactory_releaseSingleton()
DatasetFactory_releaseSingleton = _VisusDbPy.DatasetFactory_releaseSingleton


def LoadDatasetEx(name, config):
    return _VisusDbPy.LoadDatasetEx(name, config)
LoadDatasetEx = _VisusDbPy.LoadDatasetEx

def LoadDataset(url):
    return _VisusDbPy.LoadDataset(url)
LoadDataset = _VisusDbPy.LoadDataset
class ModVisus(VisusKernelPy.NetServerModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.NetServerModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModVisus, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.NetServerModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModVisus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusDbPy.new_ModVisus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_ModVisus
    __del__ = lambda self: None

    def configureDatasets(self, *args):
        return _VisusDbPy.ModVisus_configureDatasets(self, *args)

    def handleRequest(self, request):
        return _VisusDbPy.ModVisus_handleRequest(self, request)
ModVisus_swigregister = _VisusDbPy.ModVisus_swigregister
ModVisus_swigregister(ModVisus)

# This file is compatible with both classic and new-style classes.


