# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusNodesPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusNodesPy')
    _VisusNodesPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusNodesPy', [dirname(__file__)])
        except ImportError:
            import _VisusNodesPy
            return _VisusNodesPy
        try:
            _mod = imp.load_module('_VisusNodesPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusNodesPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusNodesPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusNodesPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusNodesPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusNodesPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusNodesPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusNodesPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusNodesPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusNodesPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusNodesPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusNodesPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusNodesPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusNodesPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusNodesPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusNodesPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusNodesPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusNodesPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusNodesPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusNodesPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusNodesPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusNodesPy.SHARED_PTR_DISOWN
class PairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_PairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusNodesPy.PairDoubleDouble_first_set
    __swig_getmethods__["first"] = _VisusNodesPy.PairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_VisusNodesPy.PairDoubleDouble_first_get, _VisusNodesPy.PairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _VisusNodesPy.PairDoubleDouble_second_set
    __swig_getmethods__["second"] = _VisusNodesPy.PairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_VisusNodesPy.PairDoubleDouble_second_get, _VisusNodesPy.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusNodesPy.delete_PairDoubleDouble
    __del__ = lambda self: None
PairDoubleDouble_swigregister = _VisusNodesPy.PairDoubleDouble_swigregister
PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_PairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusNodesPy.PairIntDouble_first_set
    __swig_getmethods__["first"] = _VisusNodesPy.PairIntDouble_first_get
    if _newclass:
        first = _swig_property(_VisusNodesPy.PairIntDouble_first_get, _VisusNodesPy.PairIntDouble_first_set)
    __swig_setmethods__["second"] = _VisusNodesPy.PairIntDouble_second_set
    __swig_getmethods__["second"] = _VisusNodesPy.PairIntDouble_second_get
    if _newclass:
        second = _swig_property(_VisusNodesPy.PairIntDouble_second_get, _VisusNodesPy.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusNodesPy.delete_PairIntDouble
    __del__ = lambda self: None
PairIntDouble_swigregister = _VisusNodesPy.PairIntDouble_swigregister
PairIntDouble_swigregister(PairIntDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusNodesPy.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusNodesPy.VectorString___nonzero__(self)

    def __bool__(self):
        return _VisusNodesPy.VectorString___bool__(self)

    def __len__(self):
        return _VisusNodesPy.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _VisusNodesPy.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusNodesPy.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusNodesPy.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusNodesPy.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusNodesPy.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusNodesPy.VectorString___setitem__(self, *args)

    def pop(self):
        return _VisusNodesPy.VectorString_pop(self)

    def append(self, x):
        return _VisusNodesPy.VectorString_append(self, x)

    def empty(self):
        return _VisusNodesPy.VectorString_empty(self)

    def size(self):
        return _VisusNodesPy.VectorString_size(self)

    def swap(self, v):
        return _VisusNodesPy.VectorString_swap(self, v)

    def begin(self):
        return _VisusNodesPy.VectorString_begin(self)

    def end(self):
        return _VisusNodesPy.VectorString_end(self)

    def rbegin(self):
        return _VisusNodesPy.VectorString_rbegin(self)

    def rend(self):
        return _VisusNodesPy.VectorString_rend(self)

    def clear(self):
        return _VisusNodesPy.VectorString_clear(self)

    def get_allocator(self):
        return _VisusNodesPy.VectorString_get_allocator(self)

    def pop_back(self):
        return _VisusNodesPy.VectorString_pop_back(self)

    def erase(self, *args):
        return _VisusNodesPy.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _VisusNodesPy.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusNodesPy.VectorString_push_back(self, x)

    def front(self):
        return _VisusNodesPy.VectorString_front(self)

    def back(self):
        return _VisusNodesPy.VectorString_back(self)

    def assign(self, n, x):
        return _VisusNodesPy.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _VisusNodesPy.VectorString_resize(self, *args)

    def insert(self, *args):
        return _VisusNodesPy.VectorString_insert(self, *args)

    def reserve(self, n):
        return _VisusNodesPy.VectorString_reserve(self, n)

    def capacity(self):
        return _VisusNodesPy.VectorString_capacity(self)
    __swig_destroy__ = _VisusNodesPy.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _VisusNodesPy.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusNodesPy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusNodesPy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusNodesPy.VectorInt___bool__(self)

    def __len__(self):
        return _VisusNodesPy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusNodesPy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusNodesPy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusNodesPy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusNodesPy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusNodesPy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusNodesPy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusNodesPy.VectorInt_pop(self)

    def append(self, x):
        return _VisusNodesPy.VectorInt_append(self, x)

    def empty(self):
        return _VisusNodesPy.VectorInt_empty(self)

    def size(self):
        return _VisusNodesPy.VectorInt_size(self)

    def swap(self, v):
        return _VisusNodesPy.VectorInt_swap(self, v)

    def begin(self):
        return _VisusNodesPy.VectorInt_begin(self)

    def end(self):
        return _VisusNodesPy.VectorInt_end(self)

    def rbegin(self):
        return _VisusNodesPy.VectorInt_rbegin(self)

    def rend(self):
        return _VisusNodesPy.VectorInt_rend(self)

    def clear(self):
        return _VisusNodesPy.VectorInt_clear(self)

    def get_allocator(self):
        return _VisusNodesPy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusNodesPy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusNodesPy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _VisusNodesPy.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusNodesPy.VectorInt_push_back(self, x)

    def front(self):
        return _VisusNodesPy.VectorInt_front(self)

    def back(self):
        return _VisusNodesPy.VectorInt_back(self)

    def assign(self, n, x):
        return _VisusNodesPy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusNodesPy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusNodesPy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusNodesPy.VectorInt_reserve(self, n)

    def capacity(self):
        return _VisusNodesPy.VectorInt_capacity(self)
    __swig_destroy__ = _VisusNodesPy.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _VisusNodesPy.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusNodesPy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusNodesPy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusNodesPy.VectorDouble___bool__(self)

    def __len__(self):
        return _VisusNodesPy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusNodesPy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusNodesPy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusNodesPy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusNodesPy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusNodesPy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusNodesPy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusNodesPy.VectorDouble_pop(self)

    def append(self, x):
        return _VisusNodesPy.VectorDouble_append(self, x)

    def empty(self):
        return _VisusNodesPy.VectorDouble_empty(self)

    def size(self):
        return _VisusNodesPy.VectorDouble_size(self)

    def swap(self, v):
        return _VisusNodesPy.VectorDouble_swap(self, v)

    def begin(self):
        return _VisusNodesPy.VectorDouble_begin(self)

    def end(self):
        return _VisusNodesPy.VectorDouble_end(self)

    def rbegin(self):
        return _VisusNodesPy.VectorDouble_rbegin(self)

    def rend(self):
        return _VisusNodesPy.VectorDouble_rend(self)

    def clear(self):
        return _VisusNodesPy.VectorDouble_clear(self)

    def get_allocator(self):
        return _VisusNodesPy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusNodesPy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusNodesPy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _VisusNodesPy.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusNodesPy.VectorDouble_push_back(self, x)

    def front(self):
        return _VisusNodesPy.VectorDouble_front(self)

    def back(self):
        return _VisusNodesPy.VectorDouble_back(self)

    def assign(self, n, x):
        return _VisusNodesPy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusNodesPy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusNodesPy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusNodesPy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusNodesPy.VectorDouble_capacity(self)
    __swig_destroy__ = _VisusNodesPy.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _VisusNodesPy.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusNodesPy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusNodesPy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusNodesPy.VectorFloat___bool__(self)

    def __len__(self):
        return _VisusNodesPy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusNodesPy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusNodesPy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusNodesPy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusNodesPy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusNodesPy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusNodesPy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusNodesPy.VectorFloat_pop(self)

    def append(self, x):
        return _VisusNodesPy.VectorFloat_append(self, x)

    def empty(self):
        return _VisusNodesPy.VectorFloat_empty(self)

    def size(self):
        return _VisusNodesPy.VectorFloat_size(self)

    def swap(self, v):
        return _VisusNodesPy.VectorFloat_swap(self, v)

    def begin(self):
        return _VisusNodesPy.VectorFloat_begin(self)

    def end(self):
        return _VisusNodesPy.VectorFloat_end(self)

    def rbegin(self):
        return _VisusNodesPy.VectorFloat_rbegin(self)

    def rend(self):
        return _VisusNodesPy.VectorFloat_rend(self)

    def clear(self):
        return _VisusNodesPy.VectorFloat_clear(self)

    def get_allocator(self):
        return _VisusNodesPy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusNodesPy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusNodesPy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _VisusNodesPy.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusNodesPy.VectorFloat_push_back(self, x)

    def front(self):
        return _VisusNodesPy.VectorFloat_front(self)

    def back(self):
        return _VisusNodesPy.VectorFloat_back(self)

    def assign(self, n, x):
        return _VisusNodesPy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusNodesPy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusNodesPy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusNodesPy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusNodesPy.VectorFloat_capacity(self)
    __swig_destroy__ = _VisusNodesPy.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _VisusNodesPy.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusNodesPy.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusNodesPy.MapStringString___nonzero__(self)

    def __bool__(self):
        return _VisusNodesPy.MapStringString___bool__(self)

    def __len__(self):
        return _VisusNodesPy.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusNodesPy.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusNodesPy.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _VisusNodesPy.MapStringString_has_key(self, key)

    def keys(self):
        return _VisusNodesPy.MapStringString_keys(self)

    def values(self):
        return _VisusNodesPy.MapStringString_values(self)

    def items(self):
        return _VisusNodesPy.MapStringString_items(self)

    def __contains__(self, key):
        return _VisusNodesPy.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _VisusNodesPy.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _VisusNodesPy.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusNodesPy.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _VisusNodesPy.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _VisusNodesPy.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _VisusNodesPy.MapStringString_empty(self)

    def size(self):
        return _VisusNodesPy.MapStringString_size(self)

    def swap(self, v):
        return _VisusNodesPy.MapStringString_swap(self, v)

    def begin(self):
        return _VisusNodesPy.MapStringString_begin(self)

    def end(self):
        return _VisusNodesPy.MapStringString_end(self)

    def rbegin(self):
        return _VisusNodesPy.MapStringString_rbegin(self)

    def rend(self):
        return _VisusNodesPy.MapStringString_rend(self)

    def clear(self):
        return _VisusNodesPy.MapStringString_clear(self)

    def get_allocator(self):
        return _VisusNodesPy.MapStringString_get_allocator(self)

    def count(self, x):
        return _VisusNodesPy.MapStringString_count(self, x)

    def erase(self, *args):
        return _VisusNodesPy.MapStringString_erase(self, *args)

    def find(self, x):
        return _VisusNodesPy.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _VisusNodesPy.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusNodesPy.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _VisusNodesPy.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _VisusNodesPy.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

import VisusKernelPy
import VisusDataflowPy
import VisusDbPy
import VisusIdxPy
class NodesModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodesModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodesModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusNodesPy.NodesModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusNodesPy.NodesModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusNodesPy.NodesModule_bAttached_get, _VisusNodesPy.NodesModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusNodesPy.NodesModule_attach)
    else:
        attach = _VisusNodesPy.NodesModule_attach
    if _newclass:
        detach = staticmethod(_VisusNodesPy.NodesModule_detach)
    else:
        detach = _VisusNodesPy.NodesModule_detach

    def __init__(self):
        this = _VisusNodesPy.new_NodesModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_NodesModule
    __del__ = lambda self: None
NodesModule_swigregister = _VisusNodesPy.NodesModule_swigregister
NodesModule_swigregister(NodesModule)
cvar = _VisusNodesPy.cvar

def NodesModule_attach():
    return _VisusNodesPy.NodesModule_attach()
NodesModule_attach = _VisusNodesPy.NodesModule_attach

def NodesModule_detach():
    return _VisusNodesPy.NodesModule_detach()
NodesModule_detach = _VisusNodesPy.NodesModule_detach

class CpuPaletteNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuPaletteNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpuPaletteNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_CpuPaletteNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_CpuPaletteNode
    __del__ = lambda self: None

    def processInput(self):
        return _VisusNodesPy.CpuPaletteNode_processInput(self)

    def getTransferFunction(self):
        return _VisusNodesPy.CpuPaletteNode_getTransferFunction(self)

    def setTransferFunction(self, value):
        return _VisusNodesPy.CpuPaletteNode_setTransferFunction(self, value)

    def getNodeBounds(self):
        return _VisusNodesPy.CpuPaletteNode_getNodeBounds(self)

    def writeToObjectStream(self, ostream):
        return _VisusNodesPy.CpuPaletteNode_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusNodesPy.CpuPaletteNode_readFromObjectStream(self, istream)
CpuPaletteNode_swigregister = _VisusNodesPy.CpuPaletteNode_swigregister
CpuPaletteNode_swigregister(CpuPaletteNode)

class FieldNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_FieldNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_FieldNode
    __del__ = lambda self: None

    def getFieldName(self):
        return _VisusNodesPy.FieldNode_getFieldName(self)

    def setFieldName(self, fieldname):
        return _VisusNodesPy.FieldNode_setFieldName(self, fieldname)

    def writeToObjectStream(self, ostream):
        return _VisusNodesPy.FieldNode_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusNodesPy.FieldNode_readFromObjectStream(self, istream)
FieldNode_swigregister = _VisusNodesPy.FieldNode_swigregister
FieldNode_swigregister(FieldNode)

class ModelViewNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelViewNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelViewNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_ModelViewNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_ModelViewNode
    __del__ = lambda self: None

    def getModelview(self):
        return _VisusNodesPy.ModelViewNode_getModelview(self)

    def setModelview(self, value):
        return _VisusNodesPy.ModelViewNode_setModelview(self, value)

    def writeToObjectStream(self, ostream):
        return _VisusNodesPy.ModelViewNode_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusNodesPy.ModelViewNode_readFromObjectStream(self, istream)
    if _newclass:
        castFrom = staticmethod(_VisusNodesPy.ModelViewNode_castFrom)
    else:
        castFrom = _VisusNodesPy.ModelViewNode_castFrom
ModelViewNode_swigregister = _VisusNodesPy.ModelViewNode_swigregister
ModelViewNode_swigregister(ModelViewNode)

def ModelViewNode_castFrom(obj):
    return _VisusNodesPy.ModelViewNode_castFrom(obj)
ModelViewNode_castFrom = _VisusNodesPy.ModelViewNode_castFrom

class PaletteNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaletteNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PaletteNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_PaletteNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_PaletteNode
    __del__ = lambda self: None

    def getPalette(self):
        return _VisusNodesPy.PaletteNode_getPalette(self)

    def setPalette(self, value):
        return _VisusNodesPy.PaletteNode_setPalette(self, value)

    def areStatisticsEnabled(self):
        return _VisusNodesPy.PaletteNode_areStatisticsEnabled(self)

    def processInput(self):
        return _VisusNodesPy.PaletteNode_processInput(self)

    def enterInDataflow(self):
        return _VisusNodesPy.PaletteNode_enterInDataflow(self)

    def exitFromDataflow(self):
        return _VisusNodesPy.PaletteNode_exitFromDataflow(self)

    def writeToObjectStream(self, ostream):
        return _VisusNodesPy.PaletteNode_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusNodesPy.PaletteNode_readFromObjectStream(self, istream)
    if _newclass:
        castFrom = staticmethod(_VisusNodesPy.PaletteNode_castFrom)
    else:
        castFrom = _VisusNodesPy.PaletteNode_castFrom
PaletteNode_swigregister = _VisusNodesPy.PaletteNode_swigregister
PaletteNode_swigregister(PaletteNode)

def PaletteNode_castFrom(obj):
    return _VisusNodesPy.PaletteNode_castFrom(obj)
PaletteNode_castFrom = _VisusNodesPy.PaletteNode_castFrom

class BasePaletteNodeView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasePaletteNodeView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasePaletteNodeView, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def newStatsAvailable(self, stats):
        return _VisusNodesPy.BasePaletteNodeView_newStatsAvailable(self, stats)
    __swig_destroy__ = _VisusNodesPy.delete_BasePaletteNodeView
    __del__ = lambda self: None
BasePaletteNodeView_swigregister = _VisusNodesPy.BasePaletteNodeView_swigregister
BasePaletteNodeView_swigregister(BasePaletteNodeView)

class ScriptingNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptingNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptingNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_ScriptingNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_ScriptingNode
    __del__ = lambda self: None

    def getCode(self):
        return _VisusNodesPy.ScriptingNode_getCode(self)

    def getMaxPublishMSec(self):
        return _VisusNodesPy.ScriptingNode_getMaxPublishMSec(self)

    def setMaxPublishMSec(self, value):
        return _VisusNodesPy.ScriptingNode_setMaxPublishMSec(self, value)

    def setCode(self, code):
        return _VisusNodesPy.ScriptingNode_setCode(self, code)

    def addUserInput(self, key, value):
        return _VisusNodesPy.ScriptingNode_addUserInput(self, key, value)

    def clearPresets(self):
        return _VisusNodesPy.ScriptingNode_clearPresets(self)

    def getPresets(self):
        return _VisusNodesPy.ScriptingNode_getPresets(self)

    def addPreset(self, key, code):
        return _VisusNodesPy.ScriptingNode_addPreset(self, key, code)

    def getPresetCode(self, *args):
        return _VisusNodesPy.ScriptingNode_getPresetCode(self, *args)

    def processInput(self):
        return _VisusNodesPy.ScriptingNode_processInput(self)

    def getNodeBounds(self):
        return _VisusNodesPy.ScriptingNode_getNodeBounds(self)
    if _newclass:
        castFrom = staticmethod(_VisusNodesPy.ScriptingNode_castFrom)
    else:
        castFrom = _VisusNodesPy.ScriptingNode_castFrom

    def writeToObjectStream(self, ostream):
        return _VisusNodesPy.ScriptingNode_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusNodesPy.ScriptingNode_readFromObjectStream(self, istream)
ScriptingNode_swigregister = _VisusNodesPy.ScriptingNode_swigregister
ScriptingNode_swigregister(ScriptingNode)

def ScriptingNode_castFrom(obj):
    return _VisusNodesPy.ScriptingNode_castFrom(obj)
ScriptingNode_castFrom = _VisusNodesPy.ScriptingNode_castFrom

class ScriptingNodeBaseView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptingNodeBaseView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptingNodeBaseView, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusNodesPy.delete_ScriptingNodeBaseView
    __del__ = lambda self: None

    def clearPresets(self):
        return _VisusNodesPy.ScriptingNodeBaseView_clearPresets(self)

    def addPreset(self, key, code):
        return _VisusNodesPy.ScriptingNodeBaseView_addPreset(self, key, code)
ScriptingNodeBaseView_swigregister = _VisusNodesPy.ScriptingNodeBaseView_swigregister
ScriptingNodeBaseView_swigregister(ScriptingNodeBaseView)

class StatisticsNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatisticsNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatisticsNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_StatisticsNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_StatisticsNode
    __del__ = lambda self: None

    def processInput(self):
        return _VisusNodesPy.StatisticsNode_processInput(self)
    if _newclass:
        castFrom = staticmethod(_VisusNodesPy.StatisticsNode_castFrom)
    else:
        castFrom = _VisusNodesPy.StatisticsNode_castFrom
StatisticsNode_swigregister = _VisusNodesPy.StatisticsNode_swigregister
StatisticsNode_swigregister(StatisticsNode)

def StatisticsNode_castFrom(obj):
    return _VisusNodesPy.StatisticsNode_castFrom(obj)
StatisticsNode_castFrom = _VisusNodesPy.StatisticsNode_castFrom

class BaseStatisticsNodeView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseStatisticsNodeView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseStatisticsNodeView, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def newStatsAvailable(self, stats):
        return _VisusNodesPy.BaseStatisticsNodeView_newStatsAvailable(self, stats)
    __swig_destroy__ = _VisusNodesPy.delete_BaseStatisticsNodeView
    __del__ = lambda self: None
BaseStatisticsNodeView_swigregister = _VisusNodesPy.BaseStatisticsNodeView_swigregister
BaseStatisticsNodeView_swigregister(BaseStatisticsNodeView)

class TimeNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_TimeNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_TimeNode
    __del__ = lambda self: None

    def getCurrentTime(self):
        return _VisusNodesPy.TimeNode_getCurrentTime(self)

    def setCurrentTime(self, value, bPublish=True):
        return _VisusNodesPy.TimeNode_setCurrentTime(self, value, bPublish)

    def getTimesteps(self):
        return _VisusNodesPy.TimeNode_getTimesteps(self)

    def getUserRange(self):
        return _VisusNodesPy.TimeNode_getUserRange(self)

    def setUserRange(self, value):
        return _VisusNodesPy.TimeNode_setUserRange(self, value)

    def getPlayMsec(self):
        return _VisusNodesPy.TimeNode_getPlayMsec(self)

    def setPlayMsec(self, value):
        return _VisusNodesPy.TimeNode_setPlayMsec(self, value)

    def enterInDataflow(self):
        return _VisusNodesPy.TimeNode_enterInDataflow(self)

    def exitFromDataflow(self):
        return _VisusNodesPy.TimeNode_exitFromDataflow(self)

    def doPublish(self, *args):
        return _VisusNodesPy.TimeNode_doPublish(self, *args)
    if _newclass:
        castFrom = staticmethod(_VisusNodesPy.TimeNode_castFrom)
    else:
        castFrom = _VisusNodesPy.TimeNode_castFrom

    def writeToObjectStream(self, ostream):
        return _VisusNodesPy.TimeNode_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusNodesPy.TimeNode_readFromObjectStream(self, istream)
TimeNode_swigregister = _VisusNodesPy.TimeNode_swigregister
TimeNode_swigregister(TimeNode)

def TimeNode_castFrom(obj):
    return _VisusNodesPy.TimeNode_castFrom(obj)
TimeNode_castFrom = _VisusNodesPy.TimeNode_castFrom

class DatasetNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_DatasetNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_DatasetNode
    __del__ = lambda self: None

    def getDataset(self):
        return _VisusNodesPy.DatasetNode_getDataset(self)

    def setDataset(self, dataset, bPublish=True):
        return _VisusNodesPy.DatasetNode_setDataset(self, dataset, bPublish)

    def processInput(self):
        return _VisusNodesPy.DatasetNode_processInput(self)

    def enterInDataflow(self):
        return _VisusNodesPy.DatasetNode_enterInDataflow(self)

    def exitFromDataflow(self):
        return _VisusNodesPy.DatasetNode_exitFromDataflow(self)

    def getBox(self):
        return _VisusNodesPy.DatasetNode_getBox(self)

    def getNodeBounds(self):
        return _VisusNodesPy.DatasetNode_getNodeBounds(self)

    def showBounds(self):
        return _VisusNodesPy.DatasetNode_showBounds(self)

    def setShowBounds(self, value):
        return _VisusNodesPy.DatasetNode_setShowBounds(self, value)
    if _newclass:
        castFrom = staticmethod(_VisusNodesPy.DatasetNode_castFrom)
    else:
        castFrom = _VisusNodesPy.DatasetNode_castFrom

    def writeToObjectStream(self, ostream):
        return _VisusNodesPy.DatasetNode_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusNodesPy.DatasetNode_readFromObjectStream(self, istream)
DatasetNode_swigregister = _VisusNodesPy.DatasetNode_swigregister
DatasetNode_swigregister(DatasetNode)

def DatasetNode_castFrom(obj):
    return _VisusNodesPy.DatasetNode_castFrom(obj)
DatasetNode_castFrom = _VisusNodesPy.DatasetNode_castFrom

class QueryNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueryNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QueryNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bDisableFindQUeryIntersectionWithDatasetBox"] = _VisusNodesPy.QueryNode_bDisableFindQUeryIntersectionWithDatasetBox_set
    __swig_getmethods__["bDisableFindQUeryIntersectionWithDatasetBox"] = _VisusNodesPy.QueryNode_bDisableFindQUeryIntersectionWithDatasetBox_get
    if _newclass:
        bDisableFindQUeryIntersectionWithDatasetBox = _swig_property(_VisusNodesPy.QueryNode_bDisableFindQUeryIntersectionWithDatasetBox_get, _VisusNodesPy.QueryNode_bDisableFindQUeryIntersectionWithDatasetBox_set)

    def __init__(self, *args):
        this = _VisusNodesPy.new_QueryNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_QueryNode
    __del__ = lambda self: None

    def processInput(self):
        return _VisusNodesPy.QueryNode_processInput(self)

    def getDatasetNode(self):
        return _VisusNodesPy.QueryNode_getDatasetNode(self)

    def getDataset(self):
        return _VisusNodesPy.QueryNode_getDataset(self)

    def getField(self):
        return _VisusNodesPy.QueryNode_getField(self)

    def isVerbose(self):
        return _VisusNodesPy.QueryNode_isVerbose(self)

    def setVerbose(self, value):
        return _VisusNodesPy.QueryNode_setVerbose(self, value)

    def getAccessIndex(self):
        return _VisusNodesPy.QueryNode_getAccessIndex(self)

    def setAccessIndex(self, value):
        return _VisusNodesPy.QueryNode_setAccessIndex(self, value)

    def setAccess(self, value):
        return _VisusNodesPy.QueryNode_setAccess(self, value)

    def getProgression(self):
        return _VisusNodesPy.QueryNode_getProgression(self)

    def setProgression(self, value):
        return _VisusNodesPy.QueryNode_setProgression(self, value)

    def getQuality(self):
        return _VisusNodesPy.QueryNode_getQuality(self)

    def setQuality(self, value):
        return _VisusNodesPy.QueryNode_setQuality(self, value)

    def getNodeBounds(self):
        return _VisusNodesPy.QueryNode_getNodeBounds(self)

    def setNodeBounds(self, value, bForce=False):
        return _VisusNodesPy.QueryNode_setNodeBounds(self, value, bForce)

    def getQueryPosition(self):
        return _VisusNodesPy.QueryNode_getQueryPosition(self)

    def setQueryPosition(self, value):
        return _VisusNodesPy.QueryNode_setQueryPosition(self, value)

    def getViewDep(self):
        return _VisusNodesPy.QueryNode_getViewDep(self)

    def setViewDep(self, value):
        return _VisusNodesPy.QueryNode_setViewDep(self, value)

    def isViewDependentEnabled(self):
        return _VisusNodesPy.QueryNode_isViewDependentEnabled(self)

    def setViewDependentEnabled(self, value):
        return _VisusNodesPy.QueryNode_setViewDependentEnabled(self, value)

    def exitFromDataflow(self):
        return _VisusNodesPy.QueryNode_exitFromDataflow(self)
    if _newclass:
        castFrom = staticmethod(_VisusNodesPy.QueryNode_castFrom)
    else:
        castFrom = _VisusNodesPy.QueryNode_castFrom

    def writeToObjectStream(self, ostream):
        return _VisusNodesPy.QueryNode_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusNodesPy.QueryNode_readFromObjectStream(self, istream)
QueryNode_swigregister = _VisusNodesPy.QueryNode_swigregister
QueryNode_swigregister(QueryNode)

def QueryNode_castFrom(obj):
    return _VisusNodesPy.QueryNode_castFrom(obj)
QueryNode_castFrom = _VisusNodesPy.QueryNode_castFrom

class KdQueryNode(QueryNode):
    __swig_setmethods__ = {}
    for _s in [QueryNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KdQueryNode, name, value)
    __swig_getmethods__ = {}
    for _s in [QueryNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KdQueryNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusNodesPy.new_KdQueryNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusNodesPy.delete_KdQueryNode
    __del__ = lambda self: None

    def processInput(self):
        return _VisusNodesPy.KdQueryNode_processInput(self)
KdQueryNode_swigregister = _VisusNodesPy.KdQueryNode_swigregister
KdQueryNode_swigregister(KdQueryNode)

# This file is compatible with both classic and new-style classes.


