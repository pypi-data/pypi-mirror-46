# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusAppKitPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusAppKitPy')
    _VisusAppKitPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusAppKitPy', [dirname(__file__)])
        except ImportError:
            import _VisusAppKitPy
            return _VisusAppKitPy
        try:
            _mod = imp.load_module('_VisusAppKitPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusAppKitPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusAppKitPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusAppKitPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusAppKitPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusAppKitPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusAppKitPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusAppKitPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusAppKitPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusAppKitPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusAppKitPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusAppKitPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusAppKitPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusAppKitPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusAppKitPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusAppKitPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusAppKitPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusAppKitPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusAppKitPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusAppKitPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusAppKitPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusAppKitPy.SHARED_PTR_DISOWN
class PairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusAppKitPy.new_PairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusAppKitPy.PairDoubleDouble_first_set
    __swig_getmethods__["first"] = _VisusAppKitPy.PairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_VisusAppKitPy.PairDoubleDouble_first_get, _VisusAppKitPy.PairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _VisusAppKitPy.PairDoubleDouble_second_set
    __swig_getmethods__["second"] = _VisusAppKitPy.PairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_VisusAppKitPy.PairDoubleDouble_second_get, _VisusAppKitPy.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusAppKitPy.delete_PairDoubleDouble
    __del__ = lambda self: None
PairDoubleDouble_swigregister = _VisusAppKitPy.PairDoubleDouble_swigregister
PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusAppKitPy.new_PairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusAppKitPy.PairIntDouble_first_set
    __swig_getmethods__["first"] = _VisusAppKitPy.PairIntDouble_first_get
    if _newclass:
        first = _swig_property(_VisusAppKitPy.PairIntDouble_first_get, _VisusAppKitPy.PairIntDouble_first_set)
    __swig_setmethods__["second"] = _VisusAppKitPy.PairIntDouble_second_set
    __swig_getmethods__["second"] = _VisusAppKitPy.PairIntDouble_second_get
    if _newclass:
        second = _swig_property(_VisusAppKitPy.PairIntDouble_second_get, _VisusAppKitPy.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusAppKitPy.delete_PairIntDouble
    __del__ = lambda self: None
PairIntDouble_swigregister = _VisusAppKitPy.PairIntDouble_swigregister
PairIntDouble_swigregister(PairIntDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusAppKitPy.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusAppKitPy.VectorString___nonzero__(self)

    def __bool__(self):
        return _VisusAppKitPy.VectorString___bool__(self)

    def __len__(self):
        return _VisusAppKitPy.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _VisusAppKitPy.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusAppKitPy.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusAppKitPy.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusAppKitPy.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusAppKitPy.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusAppKitPy.VectorString___setitem__(self, *args)

    def pop(self):
        return _VisusAppKitPy.VectorString_pop(self)

    def append(self, x):
        return _VisusAppKitPy.VectorString_append(self, x)

    def empty(self):
        return _VisusAppKitPy.VectorString_empty(self)

    def size(self):
        return _VisusAppKitPy.VectorString_size(self)

    def swap(self, v):
        return _VisusAppKitPy.VectorString_swap(self, v)

    def begin(self):
        return _VisusAppKitPy.VectorString_begin(self)

    def end(self):
        return _VisusAppKitPy.VectorString_end(self)

    def rbegin(self):
        return _VisusAppKitPy.VectorString_rbegin(self)

    def rend(self):
        return _VisusAppKitPy.VectorString_rend(self)

    def clear(self):
        return _VisusAppKitPy.VectorString_clear(self)

    def get_allocator(self):
        return _VisusAppKitPy.VectorString_get_allocator(self)

    def pop_back(self):
        return _VisusAppKitPy.VectorString_pop_back(self)

    def erase(self, *args):
        return _VisusAppKitPy.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _VisusAppKitPy.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusAppKitPy.VectorString_push_back(self, x)

    def front(self):
        return _VisusAppKitPy.VectorString_front(self)

    def back(self):
        return _VisusAppKitPy.VectorString_back(self)

    def assign(self, n, x):
        return _VisusAppKitPy.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _VisusAppKitPy.VectorString_resize(self, *args)

    def insert(self, *args):
        return _VisusAppKitPy.VectorString_insert(self, *args)

    def reserve(self, n):
        return _VisusAppKitPy.VectorString_reserve(self, n)

    def capacity(self):
        return _VisusAppKitPy.VectorString_capacity(self)
    __swig_destroy__ = _VisusAppKitPy.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _VisusAppKitPy.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusAppKitPy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusAppKitPy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusAppKitPy.VectorInt___bool__(self)

    def __len__(self):
        return _VisusAppKitPy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusAppKitPy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusAppKitPy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusAppKitPy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusAppKitPy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusAppKitPy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusAppKitPy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusAppKitPy.VectorInt_pop(self)

    def append(self, x):
        return _VisusAppKitPy.VectorInt_append(self, x)

    def empty(self):
        return _VisusAppKitPy.VectorInt_empty(self)

    def size(self):
        return _VisusAppKitPy.VectorInt_size(self)

    def swap(self, v):
        return _VisusAppKitPy.VectorInt_swap(self, v)

    def begin(self):
        return _VisusAppKitPy.VectorInt_begin(self)

    def end(self):
        return _VisusAppKitPy.VectorInt_end(self)

    def rbegin(self):
        return _VisusAppKitPy.VectorInt_rbegin(self)

    def rend(self):
        return _VisusAppKitPy.VectorInt_rend(self)

    def clear(self):
        return _VisusAppKitPy.VectorInt_clear(self)

    def get_allocator(self):
        return _VisusAppKitPy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusAppKitPy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusAppKitPy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _VisusAppKitPy.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusAppKitPy.VectorInt_push_back(self, x)

    def front(self):
        return _VisusAppKitPy.VectorInt_front(self)

    def back(self):
        return _VisusAppKitPy.VectorInt_back(self)

    def assign(self, n, x):
        return _VisusAppKitPy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusAppKitPy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusAppKitPy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusAppKitPy.VectorInt_reserve(self, n)

    def capacity(self):
        return _VisusAppKitPy.VectorInt_capacity(self)
    __swig_destroy__ = _VisusAppKitPy.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _VisusAppKitPy.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusAppKitPy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusAppKitPy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusAppKitPy.VectorDouble___bool__(self)

    def __len__(self):
        return _VisusAppKitPy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusAppKitPy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusAppKitPy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusAppKitPy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusAppKitPy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusAppKitPy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusAppKitPy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusAppKitPy.VectorDouble_pop(self)

    def append(self, x):
        return _VisusAppKitPy.VectorDouble_append(self, x)

    def empty(self):
        return _VisusAppKitPy.VectorDouble_empty(self)

    def size(self):
        return _VisusAppKitPy.VectorDouble_size(self)

    def swap(self, v):
        return _VisusAppKitPy.VectorDouble_swap(self, v)

    def begin(self):
        return _VisusAppKitPy.VectorDouble_begin(self)

    def end(self):
        return _VisusAppKitPy.VectorDouble_end(self)

    def rbegin(self):
        return _VisusAppKitPy.VectorDouble_rbegin(self)

    def rend(self):
        return _VisusAppKitPy.VectorDouble_rend(self)

    def clear(self):
        return _VisusAppKitPy.VectorDouble_clear(self)

    def get_allocator(self):
        return _VisusAppKitPy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusAppKitPy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusAppKitPy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _VisusAppKitPy.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusAppKitPy.VectorDouble_push_back(self, x)

    def front(self):
        return _VisusAppKitPy.VectorDouble_front(self)

    def back(self):
        return _VisusAppKitPy.VectorDouble_back(self)

    def assign(self, n, x):
        return _VisusAppKitPy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusAppKitPy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusAppKitPy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusAppKitPy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusAppKitPy.VectorDouble_capacity(self)
    __swig_destroy__ = _VisusAppKitPy.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _VisusAppKitPy.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusAppKitPy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusAppKitPy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusAppKitPy.VectorFloat___bool__(self)

    def __len__(self):
        return _VisusAppKitPy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusAppKitPy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusAppKitPy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusAppKitPy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusAppKitPy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusAppKitPy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusAppKitPy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusAppKitPy.VectorFloat_pop(self)

    def append(self, x):
        return _VisusAppKitPy.VectorFloat_append(self, x)

    def empty(self):
        return _VisusAppKitPy.VectorFloat_empty(self)

    def size(self):
        return _VisusAppKitPy.VectorFloat_size(self)

    def swap(self, v):
        return _VisusAppKitPy.VectorFloat_swap(self, v)

    def begin(self):
        return _VisusAppKitPy.VectorFloat_begin(self)

    def end(self):
        return _VisusAppKitPy.VectorFloat_end(self)

    def rbegin(self):
        return _VisusAppKitPy.VectorFloat_rbegin(self)

    def rend(self):
        return _VisusAppKitPy.VectorFloat_rend(self)

    def clear(self):
        return _VisusAppKitPy.VectorFloat_clear(self)

    def get_allocator(self):
        return _VisusAppKitPy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusAppKitPy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusAppKitPy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _VisusAppKitPy.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusAppKitPy.VectorFloat_push_back(self, x)

    def front(self):
        return _VisusAppKitPy.VectorFloat_front(self)

    def back(self):
        return _VisusAppKitPy.VectorFloat_back(self)

    def assign(self, n, x):
        return _VisusAppKitPy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusAppKitPy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusAppKitPy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusAppKitPy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusAppKitPy.VectorFloat_capacity(self)
    __swig_destroy__ = _VisusAppKitPy.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _VisusAppKitPy.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusAppKitPy.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusAppKitPy.MapStringString___nonzero__(self)

    def __bool__(self):
        return _VisusAppKitPy.MapStringString___bool__(self)

    def __len__(self):
        return _VisusAppKitPy.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusAppKitPy.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusAppKitPy.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _VisusAppKitPy.MapStringString_has_key(self, key)

    def keys(self):
        return _VisusAppKitPy.MapStringString_keys(self)

    def values(self):
        return _VisusAppKitPy.MapStringString_values(self)

    def items(self):
        return _VisusAppKitPy.MapStringString_items(self)

    def __contains__(self, key):
        return _VisusAppKitPy.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _VisusAppKitPy.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _VisusAppKitPy.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusAppKitPy.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _VisusAppKitPy.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _VisusAppKitPy.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _VisusAppKitPy.MapStringString_empty(self)

    def size(self):
        return _VisusAppKitPy.MapStringString_size(self)

    def swap(self, v):
        return _VisusAppKitPy.MapStringString_swap(self, v)

    def begin(self):
        return _VisusAppKitPy.MapStringString_begin(self)

    def end(self):
        return _VisusAppKitPy.MapStringString_end(self)

    def rbegin(self):
        return _VisusAppKitPy.MapStringString_rbegin(self)

    def rend(self):
        return _VisusAppKitPy.MapStringString_rend(self)

    def clear(self):
        return _VisusAppKitPy.MapStringString_clear(self)

    def get_allocator(self):
        return _VisusAppKitPy.MapStringString_get_allocator(self)

    def count(self, x):
        return _VisusAppKitPy.MapStringString_count(self, x)

    def erase(self, *args):
        return _VisusAppKitPy.MapStringString_erase(self, *args)

    def find(self, x):
        return _VisusAppKitPy.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _VisusAppKitPy.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusAppKitPy.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _VisusAppKitPy.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _VisusAppKitPy.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

import VisusKernelPy
import VisusDataflowPy
import VisusDbPy
import VisusNodesPy
import VisusIdxPy
import VisusGuiPy
import VisusGuiNodesPy
class AppKitModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppKitModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppKitModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusAppKitPy.AppKitModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusAppKitPy.AppKitModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusAppKitPy.AppKitModule_bAttached_get, _VisusAppKitPy.AppKitModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusAppKitPy.AppKitModule_attach)
    else:
        attach = _VisusAppKitPy.AppKitModule_attach
    if _newclass:
        detach = staticmethod(_VisusAppKitPy.AppKitModule_detach)
    else:
        detach = _VisusAppKitPy.AppKitModule_detach

    def __init__(self):
        this = _VisusAppKitPy.new_AppKitModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusAppKitPy.delete_AppKitModule
    __del__ = lambda self: None
AppKitModule_swigregister = _VisusAppKitPy.AppKitModule_swigregister
AppKitModule_swigregister(AppKitModule)
cvar = _VisusAppKitPy.cvar

def AppKitModule_attach():
    return _VisusAppKitPy.AppKitModule_attach()
AppKitModule_attach = _VisusAppKitPy.AppKitModule_attach

def AppKitModule_detach():
    return _VisusAppKitPy.AppKitModule_detach()
AppKitModule_detach = _VisusAppKitPy.AppKitModule_detach

class ViewerPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerPlugin, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["viewer"] = _VisusAppKitPy.ViewerPlugin_viewer_set
    __swig_getmethods__["viewer"] = _VisusAppKitPy.ViewerPlugin_viewer_get
    if _newclass:
        viewer = _swig_property(_VisusAppKitPy.ViewerPlugin_viewer_get, _VisusAppKitPy.ViewerPlugin_viewer_set)
    __swig_destroy__ = _VisusAppKitPy.delete_ViewerPlugin
    __del__ = lambda self: None

    def getPluginName(self):
        return _VisusAppKitPy.ViewerPlugin_getPluginName(self)
ViewerPlugin_swigregister = _VisusAppKitPy.ViewerPlugin_swigregister
ViewerPlugin_swigregister(ViewerPlugin)

class Viewer(VisusDataflowPy.DataflowListener):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.DataflowListener]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewer, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.DataflowListener]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Viewer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusAppKitPy.new_Viewer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusAppKitPy.delete_Viewer
    __del__ = lambda self: None

    def getTypeName(self):
        return _VisusAppKitPy.Viewer_getTypeName(self)

    def c_ptr(self):
        return _VisusAppKitPy.Viewer_c_ptr(self)

    def setMinimal(self):
        return _VisusAppKitPy.Viewer_setMinimal(self)

    def setFieldName(self, value):
        return _VisusAppKitPy.Viewer_setFieldName(self, value)

    def setScriptingCode(self, value):
        return _VisusAppKitPy.Viewer_setScriptingCode(self, value)

    def configureFromCommandLine(self, args):
        return _VisusAppKitPy.Viewer_configureFromCommandLine(self, args)

    def showLicences(self):
        return _VisusAppKitPy.Viewer_showLicences(self)

    def getDataflow(self):
        return _VisusAppKitPy.Viewer_getDataflow(self)

    def getNodes(self):
        return _VisusAppKitPy.Viewer_getNodes(self)

    def findNodeByUUID(self, uuid):
        return _VisusAppKitPy.Viewer_findNodeByUUID(self, uuid)

    def findNodeByName(self, name):
        return _VisusAppKitPy.Viewer_findNodeByName(self, name)

    def dropProcessing(self):
        return _VisusAppKitPy.Viewer_dropProcessing(self)

    def getRoot(self):
        return _VisusAppKitPy.Viewer_getRoot(self)

    def getSelection(self):
        return _VisusAppKitPy.Viewer_getSelection(self)

    def setSelection(self, node):
        return _VisusAppKitPy.Viewer_setSelection(self, node)

    def dropSelection(self):
        return _VisusAppKitPy.Viewer_dropSelection(self)

    def getAutoRefresh(self):
        return _VisusAppKitPy.Viewer_getAutoRefresh(self)

    def setAutoRefresh(self, value):
        return _VisusAppKitPy.Viewer_setAutoRefresh(self, value)

    def beginFreeTransform(self, *args):
        return _VisusAppKitPy.Viewer_beginFreeTransform(self, *args)

    def endFreeTransform(self):
        return _VisusAppKitPy.Viewer_endFreeTransform(self)

    def getNodeBoundsInAnotherSpace(self, dst, src):
        return _VisusAppKitPy.Viewer_getNodeBoundsInAnotherSpace(self, dst, src)

    def getQueryBoundsInDatasetSpace(self, query_node):
        return _VisusAppKitPy.Viewer_getQueryBoundsInDatasetSpace(self, query_node)

    def computeNodeFrustum(self, frustum, node):
        return _VisusAppKitPy.Viewer_computeNodeFrustum(self, frustum, node)

    def New(self):
        return _VisusAppKitPy.Viewer_New(self)

    def setName(self, node, value):
        return _VisusAppKitPy.Viewer_setName(self, node, value)

    def setHidden(self, node, value):
        return _VisusAppKitPy.Viewer_setHidden(self, node, value)

    def addNode(self, *args):
        return _VisusAppKitPy.Viewer_addNode(self, *args)

    def removeNode(self, node):
        return _VisusAppKitPy.Viewer_removeNode(self, node)

    def moveNode(self, dst, src, index=-1):
        return _VisusAppKitPy.Viewer_moveNode(self, dst, src, index)

    def connectPorts(self, *args):
        return _VisusAppKitPy.Viewer_connectPorts(self, *args)

    def disconnectPorts(self, arg2, oport_name, iport_name, to):
        return _VisusAppKitPy.Viewer_disconnectPorts(self, arg2, oport_name, iport_name, to)

    def autoConnectPorts(self):
        return _VisusAppKitPy.Viewer_autoConnectPorts(self)

    def fastRendering(self):
        return _VisusAppKitPy.Viewer_fastRendering(self)

    def setFastRendering(self, value):
        return _VisusAppKitPy.Viewer_setFastRendering(self, value)

    def reloadVisusConfig(self, bChooseAFile=False):
        return _VisusAppKitPy.Viewer_reloadVisusConfig(self, bChooseAFile)

    def setPreferences(self, value):
        return _VisusAppKitPy.Viewer_setPreferences(self, value)

    def openFile(self, url, parent=None, bShowUrlDialogIfNeeded=False):
        return _VisusAppKitPy.Viewer_openFile(self, url, parent, bShowUrlDialogIfNeeded)

    def saveFile(self, filename, bSaveHistory=False, bShowDialogs=True):
        return _VisusAppKitPy.Viewer_saveFile(self, filename, bSaveHistory, bShowDialogs)

    def openScene(self, url, parent=None, bShowUrlDialogIfNeeded=False):
        return _VisusAppKitPy.Viewer_openScene(self, url, parent, bShowUrlDialogIfNeeded)

    def saveScene(self, filename, bShowDialogs=True):
        return _VisusAppKitPy.Viewer_saveScene(self, filename, bShowDialogs)

    def takeSnapshot(self, *args):
        return _VisusAppKitPy.Viewer_takeSnapshot(self, *args)

    def editNode(self, node=None):
        return _VisusAppKitPy.Viewer_editNode(self, node)

    def setDataflow(self, dataflow):
        return _VisusAppKitPy.Viewer_setDataflow(self, dataflow)

    def getGLCamera(self):
        return _VisusAppKitPy.Viewer_getGLCamera(self)

    def refreshData(self, node=None):
        return _VisusAppKitPy.Viewer_refreshData(self, node)

    def addGLCameraNode(self, glcamera, parent=None):
        return _VisusAppKitPy.Viewer_addGLCameraNode(self, glcamera, parent)

    def guessGLCameraPosition(self, ref_=-1):
        return _VisusAppKitPy.Viewer_guessGLCameraPosition(self, ref_)

    def mirrorGLCamera(self, ref=0):
        return _VisusAppKitPy.Viewer_mirrorGLCamera(self, ref)

    def addGroupNode(self, *args):
        return _VisusAppKitPy.Viewer_addGroupNode(self, *args)

    def addModelViewNode(self, parent, bInsert=False):
        return _VisusAppKitPy.Viewer_addModelViewNode(self, parent, bInsert)

    def addDatasetNode(self, dataset, parent=None):
        return _VisusAppKitPy.Viewer_addDatasetNode(self, dataset, parent)

    def addQueryNode(self, *args):
        return _VisusAppKitPy.Viewer_addQueryNode(self, *args)

    def addKdQueryNode(self, *args):
        return _VisusAppKitPy.Viewer_addKdQueryNode(self, *args)

    def addIsoContourNode(self, parent, data_provider=None, isovalue=0.0):
        return _VisusAppKitPy.Viewer_addIsoContourNode(self, parent, data_provider, isovalue)

    def addRenderArrayNode(self, *args):
        return _VisusAppKitPy.Viewer_addRenderArrayNode(self, *args)

    def addKdRenderArrayNode(self, parent, data_provider=None):
        return _VisusAppKitPy.Viewer_addKdRenderArrayNode(self, parent, data_provider)

    def addScriptingNode(self, parent, data_provider=None):
        return _VisusAppKitPy.Viewer_addScriptingNode(self, parent, data_provider)

    def addCpuTransferFunctionNode(self, parent, data_provider=None):
        return _VisusAppKitPy.Viewer_addCpuTransferFunctionNode(self, parent, data_provider)

    def addPaletteNode(self, *args):
        return _VisusAppKitPy.Viewer_addPaletteNode(self, *args)

    def addStatisticsNode(self, parent, data_provider=None):
        return _VisusAppKitPy.Viewer_addStatisticsNode(self, parent, data_provider)

    def getWorldDimension(self):
        return _VisusAppKitPy.Viewer_getWorldDimension(self)

    def getWorldBoundingBox(self):
        return _VisusAppKitPy.Viewer_getWorldBoundingBox(self)

    def getNodeBounds(self, node, bRecursive=False):
        return _VisusAppKitPy.Viewer_getNodeBounds(self, node, bRecursive)

    def getGLCanvas(self):
        return _VisusAppKitPy.Viewer_getGLCanvas(self)

    def getTreeView(self):
        return _VisusAppKitPy.Viewer_getTreeView(self)

    def getFrameView(self):
        return _VisusAppKitPy.Viewer_getFrameView(self)

    def getLog(self):
        return _VisusAppKitPy.Viewer_getLog(self)

    def showNodeContextMenu(self, node):
        return _VisusAppKitPy.Viewer_showNodeContextMenu(self, node)

    def postRedisplay(self):
        return _VisusAppKitPy.Viewer_postRedisplay(self)

    def addDockWidget(self, *args):
        return _VisusAppKitPy.Viewer_addDockWidget(self, *args)

    def showPopupWidget(self, widget):
        return _VisusAppKitPy.Viewer_showPopupWidget(self, widget)

    def writeToObjectStream(self, ostream):
        return _VisusAppKitPy.Viewer_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, ostream):
        return _VisusAppKitPy.Viewer_readFromObjectStream(self, ostream)

    def addNetRcv(self, port):
        return _VisusAppKitPy.Viewer_addNetRcv(self, port)

    def addNetSnd(self, *args):
        return _VisusAppKitPy.Viewer_addNetSnd(self, *args)

    def getPlugins(self):
        return _VisusAppKitPy.Viewer_getPlugins(self)

    def postFlushMessages(self):
        return _VisusAppKitPy.Viewer_postFlushMessages(self)
Viewer_swigregister = _VisusAppKitPy.Viewer_swigregister
Viewer_swigregister(Viewer)

# This file is compatible with both classic and new-style classes.


