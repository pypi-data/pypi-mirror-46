# coding: utf-8

"""
    Bleumi Pay API

    The power of fiat at the speed of cryptocurrency  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.address import Address  # noqa: F401,E501
from bleumi_pay.models.payment_address import PaymentAddress  # noqa: F401,E501
from bleumi_pay.models.payment_status import PaymentStatus  # noqa: F401,E501
from bleumi_pay.models.token import Token  # noqa: F401,E501
from bleumi_pay.models.transfer import Transfer  # noqa: F401,E501


class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'int',
        'status': 'PaymentStatus',
        'amount_paid': 'str',
        'payment_amount': 'str',
        'token': 'Token',
        'from_address': 'Address',
        'from_memo': 'str',
        'to_address': 'Address',
        'to_memo': 'str',
        'payment_address': 'PaymentAddress',
        'is_processing': 'bool',
        'transfers': 'list[Transfer]'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'status': 'status',
        'amount_paid': 'amountPaid',
        'payment_amount': 'paymentAmount',
        'token': 'token',
        'from_address': 'fromAddress',
        'from_memo': 'fromMemo',
        'to_address': 'toAddress',
        'to_memo': 'toMemo',
        'payment_address': 'paymentAddress',
        'is_processing': 'isProcessing',
        'transfers': 'transfers'
    }

    def __init__(self, id=None, created_at=None, status=None, amount_paid=None, payment_amount=None, token=None, from_address=None, from_memo=None, to_address=None, to_memo=None, payment_address=None, is_processing=None, transfers=None):  # noqa: E501
        """Payment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._status = None
        self._amount_paid = None
        self._payment_amount = None
        self._token = None
        self._from_address = None
        self._from_memo = None
        self._to_address = None
        self._to_memo = None
        self._payment_address = None
        self._is_processing = None
        self._transfers = None
        self.discriminator = None
        self.id = id
        self.created_at = created_at
        self.status = status
        self.amount_paid = amount_paid
        self.payment_amount = payment_amount
        self.token = token
        if from_address is not None:
            self.from_address = from_address
        if from_memo is not None:
            self.from_memo = from_memo
        self.to_address = to_address
        if to_memo is not None:
            self.to_memo = to_memo
        if payment_address is not None:
            self.payment_address = payment_address
        self.is_processing = is_processing
        self.transfers = transfers

    @property
    def id(self):
        """Gets the id of this Payment.  # noqa: E501


        :return: The id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.


        :param id: The id of this Payment.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Payment.  # noqa: E501


        :return: The created_at of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Payment.


        :param created_at: The created_at of this Payment.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def status(self):
        """Gets the status of this Payment.  # noqa: E501


        :return: The status of this Payment.  # noqa: E501
        :rtype: PaymentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.


        :param status: The status of this Payment.  # noqa: E501
        :type: PaymentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def amount_paid(self):
        """Gets the amount_paid of this Payment.  # noqa: E501


        :return: The amount_paid of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this Payment.


        :param amount_paid: The amount_paid of this Payment.  # noqa: E501
        :type: str
        """
        if amount_paid is None:
            raise ValueError("Invalid value for `amount_paid`, must not be `None`")  # noqa: E501

        self._amount_paid = amount_paid

    @property
    def payment_amount(self):
        """Gets the payment_amount of this Payment.  # noqa: E501


        :return: The payment_amount of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this Payment.


        :param payment_amount: The payment_amount of this Payment.  # noqa: E501
        :type: str
        """
        if payment_amount is None:
            raise ValueError("Invalid value for `payment_amount`, must not be `None`")  # noqa: E501

        self._payment_amount = payment_amount

    @property
    def token(self):
        """Gets the token of this Payment.  # noqa: E501


        :return: The token of this Payment.  # noqa: E501
        :rtype: Token
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Payment.


        :param token: The token of this Payment.  # noqa: E501
        :type: Token
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def from_address(self):
        """Gets the from_address of this Payment.  # noqa: E501


        :return: The from_address of this Payment.  # noqa: E501
        :rtype: Address
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this Payment.


        :param from_address: The from_address of this Payment.  # noqa: E501
        :type: Address
        """

        self._from_address = from_address

    @property
    def from_memo(self):
        """Gets the from_memo of this Payment.  # noqa: E501


        :return: The from_memo of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._from_memo

    @from_memo.setter
    def from_memo(self, from_memo):
        """Sets the from_memo of this Payment.


        :param from_memo: The from_memo of this Payment.  # noqa: E501
        :type: str
        """

        self._from_memo = from_memo

    @property
    def to_address(self):
        """Gets the to_address of this Payment.  # noqa: E501


        :return: The to_address of this Payment.  # noqa: E501
        :rtype: Address
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this Payment.


        :param to_address: The to_address of this Payment.  # noqa: E501
        :type: Address
        """
        if to_address is None:
            raise ValueError("Invalid value for `to_address`, must not be `None`")  # noqa: E501

        self._to_address = to_address

    @property
    def to_memo(self):
        """Gets the to_memo of this Payment.  # noqa: E501


        :return: The to_memo of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._to_memo

    @to_memo.setter
    def to_memo(self, to_memo):
        """Sets the to_memo of this Payment.


        :param to_memo: The to_memo of this Payment.  # noqa: E501
        :type: str
        """

        self._to_memo = to_memo

    @property
    def payment_address(self):
        """Gets the payment_address of this Payment.  # noqa: E501


        :return: The payment_address of this Payment.  # noqa: E501
        :rtype: PaymentAddress
        """
        return self._payment_address

    @payment_address.setter
    def payment_address(self, payment_address):
        """Sets the payment_address of this Payment.


        :param payment_address: The payment_address of this Payment.  # noqa: E501
        :type: PaymentAddress
        """

        self._payment_address = payment_address

    @property
    def is_processing(self):
        """Gets the is_processing of this Payment.  # noqa: E501


        :return: The is_processing of this Payment.  # noqa: E501
        :rtype: bool
        """
        return self._is_processing

    @is_processing.setter
    def is_processing(self, is_processing):
        """Sets the is_processing of this Payment.


        :param is_processing: The is_processing of this Payment.  # noqa: E501
        :type: bool
        """
        if is_processing is None:
            raise ValueError("Invalid value for `is_processing`, must not be `None`")  # noqa: E501

        self._is_processing = is_processing

    @property
    def transfers(self):
        """Gets the transfers of this Payment.  # noqa: E501


        :return: The transfers of this Payment.  # noqa: E501
        :rtype: list[Transfer]
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers):
        """Sets the transfers of this Payment.


        :param transfers: The transfers of this Payment.  # noqa: E501
        :type: list[Transfer]
        """

        self._transfers = transfers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
