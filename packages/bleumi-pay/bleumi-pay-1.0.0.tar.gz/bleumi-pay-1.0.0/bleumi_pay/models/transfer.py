# coding: utf-8

"""
    Bleumi Pay API

    The power of fiat at the speed of cryptocurrency  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.address import Address  # noqa: F401,E501


class Transfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transfer_type': 'str',
        'tx_hash': 'str',
        'to_addr': 'Address',
        'to_memo': 'str',
        'value': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'transfer_type': 'transferType',
        'tx_hash': 'txHash',
        'to_addr': 'toAddr',
        'to_memo': 'toMemo',
        'value': 'value',
        'timestamp': 'timestamp'
    }

    def __init__(self, transfer_type=None, tx_hash=None, to_addr=None, to_memo=None, value=None, timestamp=None):  # noqa: E501
        """Transfer - a model defined in Swagger"""  # noqa: E501
        self._transfer_type = None
        self._tx_hash = None
        self._to_addr = None
        self._to_memo = None
        self._value = None
        self._timestamp = None
        self.discriminator = None
        self.transfer_type = transfer_type
        self.tx_hash = tx_hash
        self.to_addr = to_addr
        if to_memo is not None:
            self.to_memo = to_memo
        self.value = value
        self.timestamp = timestamp

    @property
    def transfer_type(self):
        """Gets the transfer_type of this Transfer.  # noqa: E501


        :return: The transfer_type of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this Transfer.


        :param transfer_type: The transfer_type of this Transfer.  # noqa: E501
        :type: str
        """
        if transfer_type is None:
            raise ValueError("Invalid value for `transfer_type`, must not be `None`")  # noqa: E501

        self._transfer_type = transfer_type

    @property
    def tx_hash(self):
        """Gets the tx_hash of this Transfer.  # noqa: E501


        :return: The tx_hash of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this Transfer.


        :param tx_hash: The tx_hash of this Transfer.  # noqa: E501
        :type: str
        """
        if tx_hash is None:
            raise ValueError("Invalid value for `tx_hash`, must not be `None`")  # noqa: E501

        self._tx_hash = tx_hash

    @property
    def to_addr(self):
        """Gets the to_addr of this Transfer.  # noqa: E501


        :return: The to_addr of this Transfer.  # noqa: E501
        :rtype: Address
        """
        return self._to_addr

    @to_addr.setter
    def to_addr(self, to_addr):
        """Sets the to_addr of this Transfer.


        :param to_addr: The to_addr of this Transfer.  # noqa: E501
        :type: Address
        """
        if to_addr is None:
            raise ValueError("Invalid value for `to_addr`, must not be `None`")  # noqa: E501

        self._to_addr = to_addr

    @property
    def to_memo(self):
        """Gets the to_memo of this Transfer.  # noqa: E501


        :return: The to_memo of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._to_memo

    @to_memo.setter
    def to_memo(self, to_memo):
        """Sets the to_memo of this Transfer.


        :param to_memo: The to_memo of this Transfer.  # noqa: E501
        :type: str
        """

        self._to_memo = to_memo

    @property
    def value(self):
        """Gets the value of this Transfer.  # noqa: E501


        :return: The value of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Transfer.


        :param value: The value of this Transfer.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def timestamp(self):
        """Gets the timestamp of this Transfer.  # noqa: E501


        :return: The timestamp of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Transfer.


        :param timestamp: The timestamp of this Transfer.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
