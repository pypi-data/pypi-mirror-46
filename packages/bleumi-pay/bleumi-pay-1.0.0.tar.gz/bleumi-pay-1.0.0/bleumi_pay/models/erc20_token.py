# coding: utf-8

"""
    Bleumi Pay API

    The power of fiat at the speed of cryptocurrency  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.eth_address import EthAddress  # noqa: F401,E501
from bleumi_pay.models.eth_network import EthNetwork  # noqa: F401,E501
from bleumi_pay.models.token import Token  # noqa: F401,E501


class ERC20Token(Token):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network': 'EthNetwork',
        'addr': 'EthAddress',
        'decimals': 'int'
    }

    attribute_map = {
        'network': 'network',
        'addr': 'addr',
        'decimals': 'decimals'
    }

    def __init__(self, network=None, addr=None, decimals=None):  # noqa: E501
        """ERC20Token - a model defined in Swagger"""  # noqa: E501
        self._network = None
        self._addr = None
        self._decimals = None
        self.discriminator = None
        self.network = network
        self.addr = addr
        if decimals is not None:
            self.decimals = decimals

    @property
    def network(self):
        """Gets the network of this ERC20Token.  # noqa: E501


        :return: The network of this ERC20Token.  # noqa: E501
        :rtype: EthNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ERC20Token.


        :param network: The network of this ERC20Token.  # noqa: E501
        :type: EthNetwork
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def addr(self):
        """Gets the addr of this ERC20Token.  # noqa: E501


        :return: The addr of this ERC20Token.  # noqa: E501
        :rtype: EthAddress
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this ERC20Token.


        :param addr: The addr of this ERC20Token.  # noqa: E501
        :type: EthAddress
        """
        if addr is None:
            raise ValueError("Invalid value for `addr`, must not be `None`")  # noqa: E501

        self._addr = addr

    @property
    def decimals(self):
        """Gets the decimals of this ERC20Token.  # noqa: E501

        Decimal places for ERC20 token, required if token does not implement 'decimals' function  # noqa: E501

        :return: The decimals of this ERC20Token.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this ERC20Token.

        Decimal places for ERC20 token, required if token does not implement 'decimals' function  # noqa: E501

        :param decimals: The decimals of this ERC20Token.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ERC20Token, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ERC20Token):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
