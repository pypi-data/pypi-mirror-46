# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from MatricesM.matrix import Matrix
from MatricesM.constructors.matrices import Identity
try:
    plotting=bool(int(input("Enable plotting ?(0/1) (Requires matplotlib)")))
except:
    plotting=0
# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(8,fill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=Matrix([4,3],dtype="float")
e=Matrix(8,fill="gauss",ranged=[0,3])
f=Matrix(dim=6,ranged=[-1250,1250],dtype="float")
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=Matrix(4,dtype="float")
q1=Matrix(9,decimal=2,dtype="float")
q2=Matrix(6,decimal=6,dtype="float")
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
c1=Matrix(5,dtype="complex")
c2=Matrix([7,3],ranged=[-10,10],dtype="complex")
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid,dtype="integer")
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"])
# =============================================================================
# Identity Matrices
# =============================================================================
id1=Matrix(listed=Identity())
id2=Matrix(listed=Identity(5))
id3=id2[:3,:3]
id4=Matrix(listed=Identity(6))

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,q1,q2,y,c1,c2]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f[:4,1:3]:\n",f[:4,1:3],"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
print("q1.decimal",q1.decimal)
q1.p
print("q1.decimal=5")
q1.decimal=5
q1.p
print('################')      
h=proj[11:18,4:11]
print("h=proj[11:18,4:11]:\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4,returndet=False):\n",h.minor(3,4,returndet=False),"\n")
print("h.minor(3,4):\n",h.minor(3,4),"\n")
print('################')
      
j=g[:2,:4]
print("j=g.[:2,:4]:\n",j,"\n")
print("j.obj:\n",j.obj)

print('\n################')
      
print("proj=proj[:5,:15]:\n")
proj=proj[:5,:15]
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(2,1)\np.p")
p.remove(2,1)
p.p
print("p.add(col=2,lis=[55]*4):")
p.add(col=2,lis=[55]*4)
print(p)
print("p.sdev()")
print(p.sdev())

print('################\n')

print("proj.find(40)")
print(proj.find(40))
print("\nproj.find(40,0)")
print(proj.find(40,0))
print("\nproj.find(111)")
proj.find(111)

print("################\n")

print("r=p.t")
r=p.t
print("r.remove(2):")
r.remove(2)
print(r)
print("r.rank:",r.rank)
print("\nr.matrix[0]=r.matrix[1][:]")
r.matrix[0]=r.matrix[1][:]
print(r)
print("r.rank:",r.rank)    

      
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("e+=Matrix(listed=Identity(e.dim[0]))*99")
e+=Matrix(listed=Identity(e.dim[0]))*99
print(e)
print("\ne-=33:")
e-=33
print(e)
print("\ne+=Matrix(e.dim):")
e+=Matrix(e.dim,dtype="float")
print(e)
print("\ne*=[2,1,1,0.5,0.2,0.0003,1,3]:")
e*=[2,1,1,0.5,0.2,0.0003,1,3]
print(e)
print("e%=[2,2,2,2,1,1,1,1]")
e%=[5,5,5,5,3,3,1,1]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("\nbool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):")
print(bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)))
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.freq()")
print(validStr4.freq())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.var()")
print(validStr4.var())
print("")

print('################')
print("Linear model for validStr4:")
print("""
validStr4.corr().p #First and second columns have strong positive correlation. Let's choose first column to be predicted

var = validStr4[:,1:2]
var.add([1]*validStr4.dim[0],col=1,feature="bias")

out = validStr4[:,:1]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

""")

validStr4.corr().p

var = validStr4[:,1:2]
var.add([1]*validStr4.dim[0],col=1,feature="bias")

out = validStr4[:,:1]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2}".format(coefs[0,0],coefs[1,0],validStr4.features[1]))
print("\nModel range:",var.ranged(2))
print("\nAverage error:",err.mean(1)[err.features[0]])

if plotting:
    try:
        from matplotlib import pyplot as plt
    except ImportError:
        print("Couldn't import matplotlib")
    else:
        model = plt.figure()
        
        #Data in a scatter plot
        plt.scatter(var.col(2,0),out.col(1,0))
        
        #Linear model to predict
        plt.plot(var.col(2,0),preds.col(1,0),c="red")
        
        #Titles
        plt.xlabel(validStr4.features[1])
        plt.ylabel(validStr4.features[0])
        plt.legend(["Linear model","Data points"],loc=4)
        model.suptitle("Height prediction")
        plt.show()

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10', 'Col 11', 'Col 12', 'Col 13', 'Col 14', 'Col 15', 'Col 16', 'Col 17', 'Col 18', 'Col 19', 'Col 20']

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 


Square matrix
Dimension: 1x1
Features: ['Col 1']

0.3447 


Dimension: 2x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

 28.9791 -35.6217  12.9245 -36.5192 
-37.4168   1.4578  39.3484  16.3215 


Dimension: 4x3
Features: ['Col 1', 'Col 2', 'Col 3']

0.3240 0.9228 0.7479 
0.9073 0.5260 0.8748 
0.2274 0.4331 0.1442 
0.1702 0.6816 0.6758 


Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

 1.9227  2.1811  0.0140  0.4496  0.3004  0.0329 -0.6834  0.7418 
 3.6551 -1.0692  4.0259 -0.8316  1.2044 -4.3249 -5.4819  0.5931 
-2.2693  0.5020 -0.3509  1.6533  0.1755 -3.3657 -5.8269  0.9334 
-0.9947  2.1005  0.9557  1.0656 -0.8993  0.2057 -2.2390 -1.9667 
 0.0308  1.7880 -5.8090 -0.6545 -4.5075 -1.3475 -0.4172  2.3070 
-1.3303  0.6103 -0.7880 -0.8566 -0.1760  0.4592 -1.1947 -1.7715 
-5.2116 -3.2351 -2.4142 -1.4432  4.8742 -3.7025 -0.0938 -5.1788 
 1.7422  3.7228  4.2103  1.9277 -1.2036  0.9757  3.8912  0.5395 


Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1128.9626 -1135.7953  -749.2512   674.8171  1141.8505  1090.5003 
 -450.7960  -680.7817   541.5639   732.9589   283.5171  -702.9913 
   91.4164  -695.8997  -657.8747 -1203.2806  -168.2777  1127.4078 
 -344.2972  -123.9639   674.1000 -1135.1794   633.0954  -602.2676 
  710.8553  -431.5520  -687.4437 -1150.9986   996.4525  1052.6910 
 -907.8519  -448.2569  1085.9872   361.5660   343.2514  -359.6849 


Dimension: 3x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

9.9190 6.2648 7.0414 3.8408 9.8946 9.0888 
8.7736 7.5337 4.1928 5.1280 4.1073 5.4517 
2.9055 9.9445 3.4769 7.5887 4.0728 4.5365 


Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

43.2554 48.7135  6.6364 91.4776 41.1481 
 1.4373 10.7817 75.7742 67.5449 10.1647 
87.6480 55.0064 87.2946 80.7367 63.7149 
63.1289 96.8597 67.5103 96.6135 45.3667 
82.3843 88.9788 91.3583 68.6519  8.5855 


Square matrix
Dimension: 4x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

0.2107 0.1545 0.2200 0.9585 
0.5589 0.9490 0.7907 0.9727 
0.5741 0.0206 0.3504 0.5885 
0.9847 0.5876 0.5366 0.5192 


Square matrix
Dimension: 9x9
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9']

0.55 0.17 0.49 0.48 0.63 0.44 0.75 0.70 0.55 
0.25 0.78 0.72 0.48 0.40 0.65 0.60 0.00 0.50 
0.10 0.88 0.66 0.75 0.36 0.78 0.63 0.75 0.98 
0.30 0.45 0.71 0.10 0.05 0.68 0.35 0.03 0.11 
0.39 0.84 0.60 0.72 0.41 0.79 0.11 0.92 0.28 
0.02 0.34 0.16 0.66 0.91 0.54 0.02 0.34 0.01 
0.76 0.82 0.53 0.87 0.45 0.41 0.49 0.64 0.75 
0.00 0.28 0.55 0.31 0.22 0.72 0.60 0.18 0.18 
0.21 0.75 0.50 0.95 0.61 0.92 0.56 0.00 0.79 


Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

0.896329 0.223762 0.086184 0.782342 0.889950 0.340068 
0.088351 0.794763 0.579119 0.743645 0.513291 0.466781 
0.162023 0.879421 0.407300 0.015381 0.419935 0.607379 
0.079775 0.345012 0.642018 0.552568 0.677480 0.449446 
0.044496 0.973022 0.206061 0.472152 0.215155 0.551317 
0.780480 0.080813 0.614307 0.016327 0.384472 0.312723 


Square matrix
Dimension: 3x3
Features: ['Col 1', 'Col 2', 'Col 3']

3.0000 5.0000 7.0000 
8.0000 3.0000 4.0000 
5.0000 2.0000 5.0000 


Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

 0.5586+0.1534j   0.0906+0.4883j   0.2654+0.3425j   0.2857+0.6177j   0.8896+0.9171j  
 0.6478+0.9364j   0.7128+0.7266j    0.1834+0.305j   0.1452+0.8513j   0.4396+0.4583j  
 0.4369+0.7444j   0.6794+0.8337j   0.2078+0.1523j   0.0349+0.9119j     0.0101+0.24j  
 0.8914+0.9691j   0.7941+0.1279j    0.2877+0.173j   0.4948+0.0248j   0.5162+0.2957j  
  0.335+0.2115j   0.6656+0.5524j   0.2331+0.1302j   0.4079+0.3008j   0.2138+0.6747j  


Dimension: 7x3
Features: ['Col 1', 'Col 2', 'Col 3']

 -5.8618+5.0023j    -5.691+1.0268j    -1.399-8.5093j  
  6.2519+2.3279j    5.6771-5.9892j   -4.9994+6.0318j  
  2.4214-0.2003j   -5.9178-8.6464j     5.9007+1.717j  
  0.9496-0.8389j    5.7676+0.7557j    7.6162-6.6679j  
  3.8998-9.5591j   -6.0618-2.9992j    5.1129-6.8476j  
  -5.8971-2.863j   -5.3929-8.0976j    3.7254-7.1124j  
  -6.333-4.4982j    0.0655-9.7507j   -5.5348+8.2123j  

################################
################################
Identity matrices

Square matrix
Dimension: 1x1
Features: ['Col 1']

1.0000 


Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 


Square matrix
Dimension: 3x3
Features: ['Col 1', 'Col 2', 'Col 3']

1.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 
0.0000 0.0000 1.0000 


Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 

################################
################################
Attribute call outputs

################

d:

Dimension: 4x3
Features: ['Col 1', 'Col 2', 'Col 3']

0.3240 0.9228 0.7479 
0.9073 0.5260 0.8748 
0.2274 0.4331 0.1442 
0.1702 0.6816 0.6758 

d.matrix:

[[0.3239539780877102, 0.9227881710257271, 0.7479171117282631], [0.9073458052308725, 0.5259865108188116, 0.8747825556199835], [0.2273628955961791, 0.4330576494644002, 0.14419995727408674], [0.17023224585711233, 0.6815698721274452, 0.6758018738364818]]

################

f[:4,1:3]:
 
Dimension: 4x2
Features: ['Col 2', 'Col 3']

-1135.7953  -749.2512 
 -680.7817   541.5639 
 -695.8997  -657.8747 
 -123.9639   674.1000 
 


Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1128.9626 -1135.7953  -749.2512   674.8171  1141.8505  1090.5003 
 -450.7960  -680.7817   541.5639   732.9589   283.5171  -702.9913 
   91.4164  -695.8997  -657.8747 -1203.2806  -168.2777  1127.4078 
 -344.2972  -123.9639   674.1000 -1135.1794   633.0954  -602.2676 
  710.8553  -431.5520  -687.4437 -1150.9986   996.4525  1052.6910 
 -907.8519  -448.2569  1085.9872   361.5660   343.2514  -359.6849 

f.delDim(4)

Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1128.9626 -1135.7953  -749.2512   674.8171  1141.8505  1090.5003 
 -450.7960  -680.7817   541.5639   732.9589   283.5171  -702.9913 
   91.4164  -695.8997  -657.8747 -1203.2806  -168.2777  1127.4078 
 -344.2972  -123.9639   674.1000 -1135.1794   633.0954  -602.2676 
  710.8553  -431.5520  -687.4437 -1150.9986   996.4525  1052.6910 
 -907.8519  -448.2569  1085.9872   361.5660   343.2514  -359.6849 

f.uptri.p

Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1128.9626 -1135.7953  -749.2512   674.8171  1141.8505  1090.5003 
    0.0000 -1134.3060   242.3870  1002.4141   739.4593  -267.5533 
    0.0000     0.0000  -726.2573 -1791.6310  -654.4425  1181.5572 
    0.0000     0.0000     0.0000 -2196.3666   363.7316   402.6825 
    0.0000     0.0000     0.0000     0.0000   445.9844  -125.9683 
    0.0000     0.0000     0.0000     0.0000     0.0000  1030.0981 

f.lowtri.p

Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
-0.3993  1.0000  0.0000  0.0000  0.0000  0.0000 
 0.0810  0.5324  1.0000  0.0000  0.0000  0.0000 
-0.3050  0.4147 -0.4752  1.0000  0.0000  0.0000 
 0.6297 -0.2500  0.2135  0.4292  1.0000  0.0000 
-0.8041  1.2004 -0.2651  0.3524  0.1618  1.0000 

f-(f.lowtri@f.uptri)

Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [2.9054747346225245, 9.919046820722183], 'Col 2': [6.264820274872137, 9.944501331840213], 'Col 3': [3.476904899596563, 7.041431012731835], 'Col 4': [3.840846671863889, 7.588737337481828], 'Col 5': [4.072789186023634, 9.894612981272605], 'Col 6': [4.536488537216428, 9.088769933156808]}
g: 
Dimension: 3x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

9.9190 6.2648 7.0414 3.8408 9.8946 9.0888 
8.7736 7.5337 4.1928 5.1280 4.1073 5.4517 
2.9055 9.9445 3.4769 7.5887 4.0728 4.5365 

g.remove(3):

Dimension: 2x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

9.9190 6.2648 7.0414 3.8408 9.8946 9.0888 
8.7736 7.5337 4.1928 5.1280 4.1073 5.4517 

################
q1.decimal 2

Square matrix
Dimension: 9x9
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9']

0.55 0.17 0.49 0.48 0.63 0.44 0.75 0.70 0.55 
0.25 0.78 0.72 0.48 0.40 0.65 0.60 0.00 0.50 
0.10 0.88 0.66 0.75 0.36 0.78 0.63 0.75 0.98 
0.30 0.45 0.71 0.10 0.05 0.68 0.35 0.03 0.11 
0.39 0.84 0.60 0.72 0.41 0.79 0.11 0.92 0.28 
0.02 0.34 0.16 0.66 0.91 0.54 0.02 0.34 0.01 
0.76 0.82 0.53 0.87 0.45 0.41 0.49 0.64 0.75 
0.00 0.28 0.55 0.31 0.22 0.72 0.60 0.18 0.18 
0.21 0.75 0.50 0.95 0.61 0.92 0.56 0.00 0.79 

q1.decimal=5

Square matrix
Dimension: 9x9
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9']

0.54634 0.17359 0.48656 0.48247 0.63335 0.43635 0.74621 0.70266 0.54787 
0.25077 0.77935 0.72268 0.48299 0.39946 0.65297 0.59798 0.00317 0.49599 
0.10480 0.87957 0.66320 0.75375 0.36235 0.78191 0.62856 0.74877 0.97940 
0.29838 0.45473 0.70779 0.09641 0.04520 0.68035 0.35322 0.03098 0.11499 
0.39137 0.83590 0.60466 0.72140 0.41215 0.78689 0.11222 0.91607 0.27958 
0.01975 0.33992 0.15912 0.65682 0.91458 0.53874 0.02423 0.34278 0.01459 
0.75896 0.82003 0.53337 0.86737 0.45244 0.40828 0.49113 0.64083 0.74844 
0.00122 0.27918 0.54649 0.30979 0.21818 0.71599 0.60024 0.17548 0.18323 
0.20692 0.75222 0.49525 0.94546 0.60933 0.91751 0.56374 0.00226 0.78665 

################
h=proj[11:18,4:11]:
 
Square matrix
Dimension: 7x7
Features: ['Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10', 'Col 11']

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 5': 57.142857142857146, 'Col 6': 50.285714285714285, 'Col 7': 49.714285714285715, 'Col 8': 44.285714285714285, 'Col 9': 22.285714285714285, 'Col 10': 67.71428571428571, 'Col 11': 69.28571428571429}

h.det: 1287494716522.8682

h.rank: 7

h.rrechelon: 
Square matrix
Dimension: 7x7
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7']

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Square matrix
Dimension: 7x7
Features: ['Col 8', 'Col 9', 'Col 10', 'Col 11', 'Col 12', 'Col 13', 'Col 14']

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4,returndet=False):
 
Square matrix
Dimension: 6x6
Features: ['Col 5', 'Col 6', 'Col 7', 'Col 9', 'Col 10', 'Col 11']

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

h.minor(3,4):
 -46677834292.743515 

################
j=g.[:2,:4]:
 
Dimension: 2x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

9.9190 6.2648 7.0414 3.8408 
8.7736 7.5337 4.1928 5.1280 
 

j.obj:
 Matrix(dim=[2, 4],listed=[[9.919046820722183, 6.264820274872137, 7.041431012731835, 3.840846671863889], [8.773575514861, 7.533685240069361, 4.1928085860143876, 5.128016592466491]],ranged=[0, 1],fill='uniform',features=['Col 1', 'Col 2', 'Col 3', 'Col 4'],header=False,directory='',decimal=4,seed=None,dtype='float',coldtypes=[float, float, float, float])

################
proj=proj[:5,:15]:


Dimension: 5x15
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10', 'Col 11', 'Col 12', 'Col 13', 'Col 14', 'Col 15']

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

43.2554 48.7135  6.6364 91.4776 41.1481 
 1.4373 10.7817 75.7742 67.5449 10.1647 
87.6480 55.0064 87.2946 80.7367 63.7149 
63.1289 96.8597 67.5103 96.6135 45.3667 
82.3843 88.9788 91.3583 68.6519  8.5855 

p.det:
 1097435151.2887857

p.adj:
 
Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

 13556334.5671  -8506561.2524   9311397.0779 -26660602.5605  16874673.4098 
-11843139.4644  -7036484.2267 -10162094.1171  27303969.7686  -3770023.7447 
-13742058.0485   7892409.3540   4489936.0389   4625331.8294  -1243588.1056 
 19093628.4329   9452282.5015  -5772778.6594 -12353808.0287   5418109.1332 
-13790925.3600  -5014152.7152  14351735.5441  22420096.6398 -25120310.4035 

p.inv:


Square matrix
Dimension: 5x5
Features: ['Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10']

 0.0124 -0.0078  0.0085 -0.0243  0.0154 
-0.0108 -0.0064 -0.0093  0.0249 -0.0034 
-0.0125  0.0072  0.0041  0.0042 -0.0011 
 0.0174  0.0086 -0.0053 -0.0113  0.0049 
-0.0126 -0.0046  0.0131  0.0204 -0.0229 

################
p:

Square matrix
Dimension: 5x5
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5']

43.2554 48.7135  6.6364 91.4776 41.1481 
 1.4373 10.7817 75.7742 67.5449 10.1647 
87.6480 55.0064 87.2946 80.7367 63.7149 
63.1289 96.8597 67.5103 96.6135 45.3667 
82.3843 88.9788 91.3583 68.6519  8.5855 

p.remove(2,1)
p.p

Square matrix
Dimension: 4x4
Features: ['Col 2', 'Col 3', 'Col 4', 'Col 5']

48.7135  6.6364 91.4776 41.1481 
55.0064 87.2946 80.7367 63.7149 
96.8597 67.5103 96.6135 45.3667 
88.9788 91.3583 68.6519  8.5855 

p.add(col=2,lis=[55]*4):

Dimension: 4x5
Features: ['Col 2', 'Col', 'Col 3', 'Col 4', 'Col 5']

48.7135 55.0000  6.6364 91.4776 41.1481 
55.0064 55.0000 87.2946 80.7367 63.7149 
96.8597 55.0000 67.5103 96.6135 45.3667 
88.9788 55.0000 91.3583 68.6519  8.5855 

p.sdev()
{'Col 2': 20.836979934724635, 'Col': 0.0, 'Col 3': 33.88015645235222, 'Col 4': 10.731750514580963, 'Col 5': 19.868511993090117}
################

proj.find(40)
[(1, 8), (2, 4), (2, 12), (3, 11), (5, 14), (5, 15)]

proj.find(40,0)
[(0, 7), (1, 3), (1, 11), (2, 10), (4, 13), (4, 14)]

proj.find(111)
################

r=p.t
r.remove(2):

Square matrix
Dimension: 4x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

48.7135 55.0064 96.8597 88.9788 
 6.6364 87.2946 67.5103 91.3583 
91.4776 80.7367 96.6135 68.6519 
41.1481 63.7149 45.3667  8.5855 

r.rank: 4

r.matrix[0]=r.matrix[1][:]

Square matrix
Dimension: 4x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

 6.6364 87.2946 67.5103 91.3583 
 6.6364 87.2946 67.5103 91.3583 
91.4776 80.7367 96.6135 68.6519 
41.1481 63.7149 45.3667  8.5855 

r.rank: 3
################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Dimension: 2x3
Features: ['Col 1', 'Col 2', 'Col 3']

-26.2115 -11.2883 -32.3033 
  0.9263  -5.5966 -10.0052 


((((mMulti)+125)**3)%2):

Dimension: 2x3
Features: ['Col 1', 'Col 2', 'Col 3']

1.4081 1.9238 0.2970 
0.6911 0.0191 0.6921 

################

f:
 
Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1128.9626 -1135.7953  -749.2512   674.8171  1141.8505  1090.5003 
 -450.7960  -680.7817   541.5639   732.9589   283.5171  -702.9913 
   91.4164  -695.8997  -657.8747 -1203.2806  -168.2777  1127.4078 
 -344.2972  -123.9639   674.1000 -1135.1794   633.0954  -602.2676 
  710.8553  -431.5520  -687.4437 -1150.9986   996.4525  1052.6910 
 -907.8519  -448.2569  1085.9872   361.5660   343.2514  -359.6849 

f1=f.intForm

Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1128 -1135  -749   674  1141  1090 
 -450  -680   541   732   283  -702 
   91  -695  -657 -1203  -168  1127 
 -344  -123   674 -1135   633  -602 
  710  -431  -687 -1150   996  1052 
 -907  -448  1085   361   343  -359 

f2=f.roundForm(3)

Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 1128.9600 -1135.8000  -749.2500   674.8200  1141.8500  1090.5000 
 -450.8000  -680.7800   541.5600   732.9600   283.5200  -702.9900 
   91.4200  -695.9000  -657.8700 -1203.2800  -168.2800  1127.4100 
 -344.3000  -123.9600   674.1000 -1135.1800   633.1000  -602.2700 
  710.8600  -431.5500  -687.4400 -1151.0000   996.4500  1052.6900 
 -907.8500  -448.2600  1085.9900   361.5700   343.2500  -359.6800 

f2-f1

Square matrix
Dimension: 6x6
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6']

 0.9600 -0.8000 -0.2500  0.8200  0.8500  0.5000 
-0.8000 -0.7800  0.5600  0.9600  0.5200 -0.9900 
 0.4200 -0.9000 -0.8700 -0.2800 -0.2800  0.4100 
-0.3000 -0.9600  0.1000 -0.1800  0.1000 -0.2700 
 0.8600 -0.5500 -0.4400 -1.0000  0.4500  0.6900 
-0.8500 -0.2600  0.9900  0.5700  0.2500 -0.6800 

################
e+=Matrix(listed=Identity(e.dim[0]))*99

Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

100.9227   2.1811   0.0140   0.4496   0.3004   0.0329  -0.6834   0.7418 
  3.6551  97.9308   4.0259  -0.8316   1.2044  -4.3249  -5.4819   0.5931 
 -2.2693   0.5020  98.6491   1.6533   0.1755  -3.3657  -5.8269   0.9334 
 -0.9947   2.1005   0.9557 100.0656  -0.8993   0.2057  -2.2390  -1.9667 
  0.0308   1.7880  -5.8090  -0.6545  94.4925  -1.3475  -0.4172   2.3070 
 -1.3303   0.6103  -0.7880  -0.8566  -0.1760  99.4592  -1.1947  -1.7715 
 -5.2116  -3.2351  -2.4142  -1.4432   4.8742  -3.7025  98.9062  -5.1788 
  1.7422   3.7228   4.2103   1.9277  -1.2036   0.9757   3.8912  99.5395 


e-=33:

Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

 67.9227 -30.8189 -32.9860 -32.5504 -32.6996 -32.9671 -33.6834 -32.2582 
-29.3449  64.9308 -28.9741 -33.8316 -31.7956 -37.3249 -38.4819 -32.4069 
-35.2693 -32.4980  65.6491 -31.3467 -32.8245 -36.3657 -38.8269 -32.0666 
-33.9947 -30.8995 -32.0443  67.0656 -33.8993 -32.7943 -35.2390 -34.9667 
-32.9692 -31.2120 -38.8090 -33.6545  61.4925 -34.3475 -33.4172 -30.6930 
-34.3303 -32.3897 -33.7880 -33.8566 -33.1760  66.4592 -34.1947 -34.7715 
-38.2116 -36.2351 -35.4142 -34.4432 -28.1258 -36.7025  65.9062 -38.1788 
-31.2578 -29.2772 -28.7897 -31.0723 -34.2036 -32.0243 -29.1088  66.5395 


e+=Matrix(e.dim):

Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

 68.4791 -29.8438 -32.9823 -31.6325 -32.5887 -32.5474 -33.4387 -31.4889 
-28.4076  65.4192 -28.6461 -32.9745 -31.7501 -36.4300 -38.1038 -31.8973 
-34.4240 -31.7727  66.3408 -30.6756 -32.3240 -35.3679 -38.6429 -31.8779 
-33.8015 -30.4021 -32.0364  67.6438 -32.9485 -31.8762 -34.9845 -34.4172 
-32.7747 -30.3703 -38.6701 -33.5813  62.1575 -33.7598 -32.8385 -30.4233 
-33.4491 -31.9283 -33.2158 -32.9556 -32.3880  66.8945 -33.9145 -34.0236 
-37.4615 -35.4422 -35.1933 -33.7899 -27.5781 -35.9369  66.3870 -37.6660 
-30.7270 -28.5800 -28.4394 -30.0799 -33.6164 -31.2619 -28.8198  66.7982 


e*=[2,1,1,0.5,0.2,0.0003,1,3]:

Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

 136.9581  -29.8438  -32.9823  -15.8163   -6.5177   -0.0098  -33.4387  -94.4668 
 -56.8153   65.4192  -28.6461  -16.4872   -6.3500   -0.0109  -38.1038  -95.6918 
 -68.8481  -31.7727   66.3408  -15.3378   -6.4648   -0.0106  -38.6429  -95.6336 
 -67.6029  -30.4021  -32.0364   33.8219   -6.5897   -0.0096  -34.9845 -103.2516 
 -65.5495  -30.3703  -38.6701  -16.7907   12.4315   -0.0101  -32.8385  -91.2699 
 -66.8981  -31.9283  -33.2158  -16.4778   -6.4776    0.0201  -33.9145 -102.0708 
 -74.9231  -35.4422  -35.1933  -16.8949   -5.5156   -0.0108   66.3870 -112.9980 
 -61.4540  -28.5800  -28.4394  -15.0399   -6.7233   -0.0094  -28.8198  200.3947 

e%=[2,2,2,2,1,1,1,1]

Square matrix
Dimension: 8x8
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8']

1.9581 0.1562 2.0177 4.1837 2.4823 2.9902 0.5613 0.5332 
3.1847 0.4192 1.3539 3.5128 2.6500 2.9891 0.8962 0.3082 
1.1519 3.2273 1.3408 4.6622 2.5352 2.9894 0.3571 0.3664 
2.3971 4.5979 2.9636 3.8219 2.4103 2.9904 0.0155 0.7484 
4.4505 4.6297 1.3299 3.2093 0.4315 2.9899 0.1615 0.7301 
3.1019 3.0717 1.7842 3.5222 2.5224 0.0201 0.0855 0.9292 
0.0769 4.5578 4.8067 3.1051 0.4844 2.9892 0.3870 0.0020 
3.5460 1.4200 1.5606 4.9601 2.2767 2.9906 0.1802 0.3947 

################

c%j

Dimension: 2x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

9.1410 1.9672 5.8831 1.8893 
6.4511 1.4578 1.6131 0.9374 


bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Features: ['Col 1', 'Col 2', 'Col 3']

 34.0000 -52.0000  33.0000 
  9.0000  88.0000  -3.0000 

################
validStr2:

Dimension: 1x10
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4', 'Col 5', 'Col 6', 'Col 7', 'Col 8', 'Col 9', 'Col 10']

312.0000  45.0000  12.0000  44.0000 352.0000  45.0000  12.0000  44.0000   3.0000  -5.0000 

################
validStr3:

Dimension: 1x4
Features: ['Col 1', 'Col 2', 'Col 3', 'Col 4']

 34.0000   5.0000  44.0000 659.0000 

################
validStr4:

Dimension: 22x3
Features: ['Height', 'Weight', 'Age']

130.0000  30.0000  10.0000 
125.0000  36.0000  11.0000 
135.0000  34.0000  10.0000 
133.0000  30.0000   9.0000 
129.0000  38.0000  12.0000 
180.0000  90.0000  30.0000 
190.0000  80.0000  25.0000 
175.0000  90.0000  35.0000 
177.0000  60.0000  22.0000 
185.0000 105.0000  33.0000 
165.0000  55.0000  27.0000 
155.0000  50.0000  44.0000 
160.0000  58.0000  39.0000 
162.0000  59.0000  41.0000 
167.0000  62.0000  55.0000 
174.0000  70.0000  47.0000 
193.0000  90.0000  23.0000 
187.0000  80.0000  27.0000 
183.0000  88.0000  28.0000 
159.0000  40.0000  29.0000 
164.0000  66.0000  32.0000 
166.0000  56.0000  42.0000 

################

validStr4.ranged()
{'Height': [125.0, 193.0], 'Weight': [30.0, 105.0], 'Age': [9.0, 55.0]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 20.592464320155067, 'Weight': 21.774245534462064, 'Age': 12.68996154316246}

validStr4.median()
{'Height': 166.0, 'Weight': 60.0, 'Age': 29.0}

validStr4.freq()
{'Height': {130.0: 1, 125.0: 1, 135.0: 1, 133.0: 1, 129.0: 1, 180.0: 1, 190.0: 1, 175.0: 1, 177.0: 1, 185.0: 1, 165.0: 1, 155.0: 1, 160.0: 1, 162.0: 1, 167.0: 1, 174.0: 1, 193.0: 1, 187.0: 1, 183.0: 1, 159.0: 1, 164.0: 1, 166.0: 1}, 'Weight': {30.0: 2, 36.0: 1, 34.0: 1, 38.0: 1, 90.0: 3, 80.0: 2, 60.0: 1, 105.0: 1, 55.0: 1, 50.0: 1, 58.0: 1, 59.0: 1, 62.0: 1, 70.0: 1, 88.0: 1, 40.0: 1, 66.0: 1, 56.0: 1}, 'Age': {10.0: 2, 11.0: 1, 9.0: 1, 12.0: 1, 30.0: 1, 25.0: 1, 35.0: 1, 22.0: 1, 33.0: 1, 27.0: 2, 44.0: 1, 39.0: 1, 41.0: 1, 55.0: 1, 47.0: 1, 23.0: 1, 28.0: 1, 29.0: 1, 32.0: 1, 42.0: 1}}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {90.0: 3}, 'Age': {(10.0, 27.0): 2}}

validStr4.iqr()
{'Height': 25.0, 'Weight': 40.0, 'Age': 17.0}

validStr4.iqr(as_quartiles=True)
{'Height': [155.0, 166.0, 180.0], 'Weight': [40.0, 60.0, 80.0], 'Age': [22.0, 29.0, 39.0]}

validStr4.var()
{'Height': 424.0495867768595, 'Weight': 474.1177685950411, 'Age': 161.03512396694214}

################
Linear model for validStr4:

validStr4.corr().p #First and second columns have strong positive correlation. Let's choose first column to be predicted

var = validStr4[:,1:2]
var.add([1]*validStr4.dim[0],col=1,feature="bias")

out = validStr4[:,:1]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]



Square matrix
Dimension: 3x3
Features: ['Height', 'Weight', 'Age']

1.0000 0.8992 0.5087 
0.8992 1.0000 0.4233 
0.5087 0.4233 1.0000 

Height=110.5244538162 + 0.850374553976*Weight

Model range: {'Weight': [30.0, 105.0]}

Average error: 3.4473087980173164e-08
"""
# =============================================================================

