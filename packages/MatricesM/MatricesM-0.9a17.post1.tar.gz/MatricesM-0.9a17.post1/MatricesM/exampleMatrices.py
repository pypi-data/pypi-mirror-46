# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from MatricesM.matrix import Matrix
from MatricesM.constructors.matrices import Identity
try:
    plotting=bool(int(input("Enable plotting ?(0/1) (Requires matplotlib)")))
except:
    plotting=0
# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(8,fill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=Matrix([4,3],dtype="float")
e=Matrix(8,fill="gauss",ranged=[0,3])
f=Matrix(dim=6,ranged=[-1250,1250],dtype="float")
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=Matrix(4,dtype="float")
q1=Matrix(9,decimal=2,dtype="float")
q2=Matrix(6,decimal=6,dtype="float")
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
c1=Matrix(5,dtype="complex")
c2=Matrix([7,3],ranged=[-10,10],dtype="complex")
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid,dtype="integer")
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"],dtype="dataframe",coldtypes=[int]*3)
# =============================================================================
# Identity Matrices
# =============================================================================
id1=Matrix(listed=Identity())
id2=Matrix(listed=Identity(5))
id3=id2[:3,:3]
id4=Matrix(listed=Identity(6))

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,q1,q2,y,c1,c2]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f[:4,1:3]:\n",f[:4,1:3],"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
print("q1.decimal",q1.decimal)
q1.p
print("q1.decimal=5")
q1.decimal=5
q1.p
print('################')      
h=proj[11:18,4:11]
print("h=proj[11:18,4:11]:\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4,returndet=False):\n",h.minor(3,4,returndet=False),"\n")
print("h.minor(3,4):\n",h.minor(3,4),"\n")
print('################')
      
j=g[:2,:4]
print("j=g.[:2,:4]:\n",j,"\n")
print("j.obj:\n",j.obj)

print('\n################')
      
print("proj=proj[:5,:15]:\n")
proj=proj[:5,:15]
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(2,1)\np.p")
p.remove(2,1)
p.p
print("p.add(col=2,lis=[55]*4):")
p.add(col=2,lis=[55]*4)
print(p)
print("p.sdev()")
print(p.sdev())

print('################\n')

print("proj.find(40)")
print(proj.find(40))
print("\nproj.find(40,0)")
print(proj.find(40,0))
print("\nproj.find(111)")
proj.find(111)

print("################\n")

print("r=p.t")
r=p.t
print("r.remove(2):")
r.remove(2)
print(r)
print("r.rank:",r.rank)
print("\nr.matrix[0]=r.matrix[1][:]")
r.matrix[0]=r.matrix[1][:]
print(r)
print("r.rank:",r.rank)    

      
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("e+=Matrix(listed=Identity(e.dim[0]))*99")
e+=Matrix(listed=Identity(e.dim[0]))*99
print(e)
print("\ne-=33:")
e-=33
print(e)
print("\ne+=Matrix(e.dim):")
e+=Matrix(e.dim,dtype="float")
print(e)
print("\ne*=[2,1,1,0.5,0.2,0.0003,1,3]:")
e*=[2,1,1,0.5,0.2,0.0003,1,3]
print(e)
print("e%=[2,2,2,2,1,1,1,1]")
e%=[5,5,5,5,3,3,1,1]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("\nbool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):")
print(bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)))
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.freq()")
print(validStr4.freq())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.var()")
print(validStr4.var())
print("")

print('################')
print("Linear model for validStr4:")
print("""
validStr4.corr().p #First and second columns have strong positive correlation. Let's choose first column to be predicted

var = validStr4[:,1:2]
var.add([1]*validStr4.dim[0],col=1,feature="bias")

out = validStr4[:,:1]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

""")

validStr4.corr().p

var = validStr4[:,1:2]
var.add([1]*validStr4.dim[0],col=1,feature="bias")

out = validStr4[:,:1]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2}".format(coefs[0,0],coefs[1,0],validStr4.features[1]))
print("\nModel range:",var.ranged(2))
print("\nAverage error:",err.mean(1)[err.features[0]])

if plotting:
    try:
        from matplotlib import pyplot as plt
    except ImportError:
        print("Couldn't import matplotlib")
    else:
        model = plt.figure()
        
        #Data in a scatter plot
        plt.scatter(var.col(2,0),out.col(1,0))
        
        #Linear model to predict
        plt.plot(var.col(2,0),preds.col(1,0),c="red")
        
        #Titles
        plt.xlabel(validStr4.features[1])
        plt.ylabel(validStr4.features[0])
        plt.legend(["Linear model","Data points"],loc=4)
        model.suptitle("Height prediction")
        plt.show()

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 


Square matrix
Dimension: 1x1

0.4530 


Dimension: 2x4

-11.6518  10.9115  27.0671  49.2274 
-25.4521  -9.8132  -9.3358 -12.4472 


Dimension: 4x3

0.3840 0.2853 0.8642 
0.4509 0.7060 0.4376 
0.6250 0.7989 0.9217 
0.5605 0.3001 0.5809 


Square matrix
Dimension: 8x8

-2.7946  1.7935 -1.4870  2.6722  8.8945 -1.0383  0.7211 -4.3665 
 5.3562  0.7538  1.0478 -4.7014 -1.1498 -2.9885  2.8451 -2.4375 
 3.1468 -3.6691  1.5452  2.0252  1.4388  2.1338 -2.9689 -0.4933 
-3.2207 -0.9433  4.0920  1.4021  0.9280  3.4154  4.3177  0.6572 
-2.1942 -4.5939 -0.7934  3.7445 -6.5934 -7.8288 -2.1103 -0.4060 
 0.3664  1.2942 -0.3363 -2.1015 -0.9458 -0.5400  4.1823 -4.8399 
-4.7359  0.8857 -3.8448 -0.4245 -4.6340  1.0903  0.4600  0.3687 
 1.7540  5.8500  1.3483  3.1771 -3.7916 -2.4219  0.4432  2.1400 


Square matrix
Dimension: 6x6

-1082.4543  -908.9358 -1121.7542   896.0865  -805.1137 -1192.2105 
 -818.6950 -1077.0658   402.4356  -670.4950   998.1030   737.7048 
 -754.7217 -1029.6632  1203.0357 -1009.0519 -1145.2505  -886.7933 
 -925.4480  -847.8560   148.5222   985.7965 -1164.5272   271.3564 
  199.5826 -1136.7206  -178.7878 -1045.2485    56.0496   -62.4305 
  220.9551   534.6472   975.5008  -778.7507   -32.8922   260.1648 


Dimension: 3x6

6.4679 2.9903 9.8928 6.6105 3.7246 9.7784 
7.1630 4.7371 8.0859 4.1691 2.2091 6.5049 
7.1553 2.8526 2.7606 6.5338 6.4160 5.1912 


Square matrix
Dimension: 5x5

59.1769 65.0457 63.4385 80.0075 71.6159 
61.0865 53.1604 15.4578 27.4196 59.3465 
25.8711 89.7931 52.2471 26.9703 69.1844 
31.0160  7.6374 41.1583 49.4708 80.0692 
48.3173 43.3577  5.7357 38.2202 43.3015 


Square matrix
Dimension: 4x4

0.7544 0.1299 0.7624 0.0621 
0.6492 0.6961 0.8305 0.0054 
0.0344 0.9204 0.9409 0.5527 
0.0722 0.8252 0.0018 0.5535 


Square matrix
Dimension: 9x9

0.46 0.28 0.70 0.79 0.14 0.92 0.64 0.07 0.15 
0.96 0.35 0.16 0.81 0.22 0.70 0.26 0.81 0.27 
0.52 0.48 0.26 0.94 0.40 0.36 0.32 0.97 0.86 
0.78 0.45 0.04 0.21 0.05 0.46 0.15 0.78 0.91 
0.45 0.36 0.55 0.23 0.02 0.00 0.93 0.23 0.52 
0.28 0.84 0.95 0.97 0.36 0.72 0.81 0.34 0.02 
0.63 0.96 0.75 0.74 0.09 0.32 0.39 0.51 0.88 
0.94 0.68 0.09 0.32 0.58 0.43 0.00 0.36 0.28 
0.56 0.14 0.97 0.62 0.13 0.15 0.14 0.54 0.29 


Square matrix
Dimension: 6x6

0.129795 0.518143 0.132359 0.113712 0.712882 0.740318 
0.319590 0.688284 0.488693 0.189673 0.814692 0.151860 
0.815699 0.361950 0.918149 0.740226 0.075167 0.347972 
0.153020 0.997986 0.791772 0.597858 0.597003 0.907407 
0.872646 0.328074 0.286813 0.800134 0.497330 0.976959 
0.476272 0.708243 0.689261 0.615528 0.028901 0.311167 


Square matrix
Dimension: 3x3

3.0000 5.0000 7.0000 
8.0000 3.0000 4.0000 
5.0000 2.0000 5.0000 


Square matrix
Dimension: 5x5

  0.2683+0.136j   0.3668+0.5148j   0.1956+0.9286j   0.9095+0.8669j   0.6525+0.8016j  
 0.0082+0.8353j   0.2949+0.8287j    0.8575+0.376j   0.0805+0.6052j   0.0719+0.0764j  
 0.0799+0.3343j    0.4526+0.227j   0.5301+0.7232j   0.9194+0.8487j   0.6128+0.0337j  
  0.322+0.0406j   0.6211+0.6878j   0.8252+0.5557j   0.2379+0.0917j   0.2304+0.3369j  
 0.3895+0.7319j    0.887+0.4686j   0.0593+0.6779j   0.9021+0.1811j    0.3518+0.777j  


Dimension: 7x3

 -4.8328+3.4232j    3.9834-0.0386j    6.7347-6.6319j  
   3.418+2.4514j   -7.1877+4.8929j   -4.1246-8.3222j  
  1.4168-4.5815j    -5.432+1.0432j    -3.405-2.4443j  
   -5.4273+2.51j   -0.9058+5.4045j    -9.673-0.9677j  
    9.686+9.847j    -1.4829+3.818j    5.6225-2.1323j  
 -8.7361+9.0828j    2.3125+0.8054j    8.2966-2.9261j  
 -2.4719+4.8365j   -9.4848+1.3272j    7.5308+2.5799j  

################################
################################
Identity matrices

Square matrix
Dimension: 1x1

1.0000 


Square matrix
Dimension: 5x5

1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 


Square matrix
Dimension: 3x3

1.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 
0.0000 0.0000 1.0000 


Square matrix
Dimension: 6x6

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 

################################
################################
Attribute call outputs

################

d:

Dimension: 4x3

0.3840 0.2853 0.8642 
0.4509 0.7060 0.4376 
0.6250 0.7989 0.9217 
0.5605 0.3001 0.5809 

d.matrix:

[[0.3840449232459487, 0.28525650807214575, 0.8642231513412885], [0.4509109775078585, 0.7060151982177191, 0.43757438886684774], [0.6249580370494705, 0.7989440595721305, 0.9216589861751152], [0.5605029450361644, 0.3001190221869564, 0.5809198278756066]]

################

f[:4,1:3]:
 
Dimension: 4x2

 -908.9358 -1121.7542 
-1077.0658   402.4356 
-1029.6632  1203.0357 
 -847.8560   148.5222 
 


Square matrix
Dimension: 6x6

-1082.4543  -908.9358 -1121.7542   896.0865  -805.1137 -1192.2105 
 -818.6950 -1077.0658   402.4356  -670.4950   998.1030   737.7048 
 -754.7217 -1029.6632  1203.0357 -1009.0519 -1145.2505  -886.7933 
 -925.4480  -847.8560   148.5222   985.7965 -1164.5272   271.3564 
  199.5826 -1136.7206  -178.7878 -1045.2485    56.0496   -62.4305 
  220.9551   534.6472   975.5008  -778.7507   -32.8922   260.1648 

f.delDim(4)

Square matrix
Dimension: 6x6

-1082.4543  -908.9358 -1121.7542   896.0865  -805.1137 -1192.2105 
 -818.6950 -1077.0658   402.4356  -670.4950   998.1030   737.7048 
 -754.7217 -1029.6632  1203.0357 -1009.0519 -1145.2505  -886.7933 
 -925.4480  -847.8560   148.5222   985.7965 -1164.5272   271.3564 
  199.5826 -1136.7206  -178.7878 -1045.2485    56.0496   -62.4305 
  220.9551   534.6472   975.5008  -778.7507   -32.8922   260.1648 

f.uptri.p

Square matrix
Dimension: 6x6

 -1082.4543   -908.9358  -1121.7542    896.0865   -805.1137  -1192.2105 
     0.0000   -389.6085   1250.8544  -1348.2341   1607.0364   1639.4120 
     0.0000      0.0000    714.0274   -263.7426  -2216.9866  -1721.5335 
     0.0000      0.0000      0.0000    789.7373   1965.4979   3115.5565 
     0.0000      0.0000      0.0000      0.0000 -24510.5716 -24466.9775 
     0.0000      0.0000      0.0000      0.0000      0.0000    587.3007 

f.lowtri.p

Square matrix
Dimension: 6x6

 1.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.7563  1.0000  0.0000  0.0000  0.0000  0.0000 
 0.6972  1.0162  1.0000  0.0000  0.0000  0.0000 
 0.8550  0.1816  1.2330  1.0000  0.0000  0.0000 
-0.1844  3.3477 -6.4047  2.4620  1.0000  0.0000 
-0.2041 -0.8961  2.6153 -1.4108 -0.4004  1.0000 

f-(f.lowtri@f.uptri)

Square matrix
Dimension: 6x6

 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000  0.0000  0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [6.4679330922437686, 7.163036468121277], 'Col 2': [2.852563313139404, 4.737121039403613], 'Col 3': [2.760621213405763, 9.892767682864108], 'Col 4': [4.169058580152914, 6.610474833159311], 'Col 5': [2.2090931120566033, 6.4160076010685225], 'Col 6': [5.191161216518754, 9.778407914522035]}
g: 
Dimension: 3x6

6.4679 2.9903 9.8928 6.6105 3.7246 9.7784 
7.1630 4.7371 8.0859 4.1691 2.2091 6.5049 
7.1553 2.8526 2.7606 6.5338 6.4160 5.1912 

g.remove(3):

Dimension: 2x6

6.4679 2.9903 9.8928 6.6105 3.7246 9.7784 
7.1630 4.7371 8.0859 4.1691 2.2091 6.5049 

################
q1.decimal 2

Square matrix
Dimension: 9x9

0.46 0.28 0.70 0.79 0.14 0.92 0.64 0.07 0.15 
0.96 0.35 0.16 0.81 0.22 0.70 0.26 0.81 0.27 
0.52 0.48 0.26 0.94 0.40 0.36 0.32 0.97 0.86 
0.78 0.45 0.04 0.21 0.05 0.46 0.15 0.78 0.91 
0.45 0.36 0.55 0.23 0.02 0.00 0.93 0.23 0.52 
0.28 0.84 0.95 0.97 0.36 0.72 0.81 0.34 0.02 
0.63 0.96 0.75 0.74 0.09 0.32 0.39 0.51 0.88 
0.94 0.68 0.09 0.32 0.58 0.43 0.00 0.36 0.28 
0.56 0.14 0.97 0.62 0.13 0.15 0.14 0.54 0.29 

q1.decimal=5

Square matrix
Dimension: 9x9

0.46474 0.28352 0.70122 0.78631 0.13511 0.92059 0.63652 0.06818 0.14542 
0.96438 0.35316 0.15738 0.81082 0.21809 0.69597 0.25626 0.81378 0.26545 
0.51988 0.48225 0.25571 0.94147 0.40239 0.35520 0.31956 0.96927 0.85809 
0.77914 0.45015 0.04425 0.21131 0.04901 0.45820 0.14682 0.78335 0.91461 
0.45463 0.36451 0.55010 0.23151 0.02112 0.00565 0.92715 0.23237 0.52315 
0.28483 0.83746 0.94739 0.97195 0.36222 0.71902 0.80728 0.34144 0.01743 
0.62792 0.95871 0.74685 0.73965 0.09345 0.32405 0.39030 0.51454 0.88147 
0.93646 0.68078 0.09037 0.32197 0.58144 0.43385 0.00327 0.35789 0.27674 
0.55791 0.14386 0.97021 0.62087 0.13279 0.14600 0.13663 0.54237 0.28755 

################
h=proj[11:18,4:11]:
 
Square matrix
Dimension: 7x7

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 5': 57.142857142857146, 'Col 6': 50.285714285714285, 'Col 7': 49.714285714285715, 'Col 8': 44.285714285714285, 'Col 9': 22.285714285714285, 'Col 10': 67.71428571428571, 'Col 11': 69.28571428571429}

h.det: 1287494716522.8682

h.rank: 7

h.rrechelon: 
Square matrix
Dimension: 7x7

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Square matrix
Dimension: 7x7

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4,returndet=False):
 
Square matrix
Dimension: 6x6

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

h.minor(3,4):
 -46677834292.743515 

################
j=g.[:2,:4]:
 
Dimension: 2x4

6.4679 2.9903 9.8928 6.6105 
7.1630 4.7371 8.0859 4.1691 
 

j.obj:
 Matrix(dim=[2, 4],listed=[[6.4679330922437686, 2.9903118470051755, 9.892767682864108, 6.610474833159311], [7.163036468121277, 4.737121039403613, 8.08587195914928, 4.169058580152914]],ranged=[0, 1],fill='uniform',features=['Col 1', 'Col 2', 'Col 3', 'Col 4'],header=False,directory='',decimal=4,seed=None,dtype='float',coldtypes=[float, float, float, float])

################
proj=proj[:5,:15]:


Dimension: 5x15

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5

59.1769 65.0457 63.4385 80.0075 71.6159 
61.0865 53.1604 15.4578 27.4196 59.3465 
25.8711 89.7931 52.2471 26.9703 69.1844 
31.0160  7.6374 41.1583 49.4708 80.0692 
48.3173 43.3577  5.7357 38.2202 43.3015 

p.det:
 -222732237.196766

p.adj:
 
Square matrix
Dimension: 5x5

-3133683.0786 -9485880.9556  4007944.5504  2240678.1020  7636640.4083 
  753521.8682  2675642.5777 -2815309.5203  1974019.5160 -4065368.8905 
-4915650.5275 -5929382.5497  1122956.4509  1281176.1547 12093165.2697 
-1040502.8580  8397849.2561   223758.3727  -566230.5247 -9099192.9503 
 4311691.6932  1278563.9896 -1999483.2454 -4146719.8166 -3164745.8242 

p.inv:


Square matrix
Dimension: 5x5

 0.0141  0.0426 -0.0180 -0.0101 -0.0343 
-0.0034 -0.0120  0.0126 -0.0089  0.0183 
 0.0221  0.0266 -0.0050 -0.0058 -0.0543 
 0.0047 -0.0377 -0.0010  0.0025  0.0409 
-0.0194 -0.0057  0.0090  0.0186  0.0142 

################
p:

Square matrix
Dimension: 5x5

59.1769 65.0457 63.4385 80.0075 71.6159 
61.0865 53.1604 15.4578 27.4196 59.3465 
25.8711 89.7931 52.2471 26.9703 69.1844 
31.0160  7.6374 41.1583 49.4708 80.0692 
48.3173 43.3577  5.7357 38.2202 43.3015 

p.remove(2,1)
p.p

Square matrix
Dimension: 4x4

65.0457 63.4385 80.0075 71.6159 
89.7931 52.2471 26.9703 69.1844 
 7.6374 41.1583 49.4708 80.0692 
43.3577  5.7357 38.2202 43.3015 

p.add(col=2,lis=[55]*4):

Dimension: 4x5

65.0457 55.0000 63.4385 80.0075 71.6159 
89.7931 55.0000 52.2471 26.9703 69.1844 
 7.6374 55.0000 41.1583 49.4708 80.0692 
43.3577 55.0000  5.7357 38.2202 43.3015 

p.sdev()
{'Col 2': 30.166454077234203, 'Col': 0.0, 'Col 3': 21.639535205360406, 'Col 4': 19.76586902311501, 'Col 5': 13.73712772259709}
################

proj.find(40)
[(1, 8), (2, 4), (2, 12), (3, 11), (5, 14), (5, 15)]

proj.find(40,0)
[(0, 7), (1, 3), (1, 11), (2, 10), (4, 13), (4, 14)]

proj.find(111)
################

r=p.t
r.remove(2):

Square matrix
Dimension: 4x4

65.0457 89.7931  7.6374 43.3577 
63.4385 52.2471 41.1583  5.7357 
80.0075 26.9703 49.4708 38.2202 
71.6159 69.1844 80.0692 43.3015 

r.rank: 4

r.matrix[0]=r.matrix[1][:]

Square matrix
Dimension: 4x4

63.4385 52.2471 41.1583  5.7357 
63.4385 52.2471 41.1583  5.7357 
80.0075 26.9703 49.4708 38.2202 
71.6159 69.1844 80.0692 43.3015 

r.rank: 3
################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Dimension: 2x3

 44.9532  40.7791  48.2486 
-27.0108 -25.3831 -42.1256 


((((mMulti)+125)**3)%2):

Dimension: 2x3

0.6822 0.2313 1.7070 
0.1871 1.0438 1.2228 

################

f:
 
Square matrix
Dimension: 6x6

-1082.4543  -908.9358 -1121.7542   896.0865  -805.1137 -1192.2105 
 -818.6950 -1077.0658   402.4356  -670.4950   998.1030   737.7048 
 -754.7217 -1029.6632  1203.0357 -1009.0519 -1145.2505  -886.7933 
 -925.4480  -847.8560   148.5222   985.7965 -1164.5272   271.3564 
  199.5826 -1136.7206  -178.7878 -1045.2485    56.0496   -62.4305 
  220.9551   534.6472   975.5008  -778.7507   -32.8922   260.1648 

f1=f.intForm

Square matrix
Dimension: 6x6

-1082  -908 -1121   896  -805 -1192 
 -818 -1077   402  -670   998   737 
 -754 -1029  1203 -1009 -1145  -886 
 -925  -847   148   985 -1164   271 
  199 -1136  -178 -1045    56   -62 
  220   534   975  -778   -32   260 

f2=f.roundForm(3)

Square matrix
Dimension: 6x6

-1082.4500  -908.9400 -1121.7500   896.0900  -805.1100 -1192.2100 
 -818.6900 -1077.0700   402.4400  -670.5000   998.1000   737.7000 
 -754.7200 -1029.6600  1203.0400 -1009.0500 -1145.2500  -886.7900 
 -925.4500  -847.8600   148.5200   985.8000 -1164.5300   271.3600 
  199.5800 -1136.7200  -178.7900 -1045.2500    56.0500   -62.4300 
  220.9600   534.6500   975.5000  -778.7500   -32.8900   260.1600 

f2-f1

Square matrix
Dimension: 6x6

-0.4500 -0.9400 -0.7500  0.0900 -0.1100 -0.2100 
-0.6900 -0.0700  0.4400 -0.5000  0.1000  0.7000 
-0.7200 -0.6600  0.0400 -0.0500 -0.2500 -0.7900 
-0.4500 -0.8600  0.5200  0.8000 -0.5300  0.3600 
 0.5800 -0.7200 -0.7900 -0.2500  0.0500 -0.4300 
 0.9600  0.6500  0.5000 -0.7500 -0.8900  0.1600 

################
e+=Matrix(listed=Identity(e.dim[0]))*99

Square matrix
Dimension: 8x8

 96.2054   1.7935  -1.4870   2.6722   8.8945  -1.0383   0.7211  -4.3665 
  5.3562  99.7538   1.0478  -4.7014  -1.1498  -2.9885   2.8451  -2.4375 
  3.1468  -3.6691 100.5452   2.0252   1.4388   2.1338  -2.9689  -0.4933 
 -3.2207  -0.9433   4.0920 100.4021   0.9280   3.4154   4.3177   0.6572 
 -2.1942  -4.5939  -0.7934   3.7445  92.4066  -7.8288  -2.1103  -0.4060 
  0.3664   1.2942  -0.3363  -2.1015  -0.9458  98.4600   4.1823  -4.8399 
 -4.7359   0.8857  -3.8448  -0.4245  -4.6340   1.0903  99.4600   0.3687 
  1.7540   5.8500   1.3483   3.1771  -3.7916  -2.4219   0.4432 101.1400 


e-=33:

Square matrix
Dimension: 8x8

 63.2054 -31.2065 -34.4870 -30.3278 -24.1055 -34.0383 -32.2789 -37.3665 
-27.6438  66.7538 -31.9522 -37.7014 -34.1498 -35.9885 -30.1549 -35.4375 
-29.8532 -36.6691  67.5452 -30.9748 -31.5612 -30.8662 -35.9689 -33.4933 
-36.2207 -33.9433 -28.9080  67.4021 -32.0720 -29.5846 -28.6823 -32.3428 
-35.1942 -37.5939 -33.7934 -29.2555  59.4066 -40.8288 -35.1103 -33.4060 
-32.6336 -31.7058 -33.3363 -35.1015 -33.9458  65.4600 -28.8177 -37.8399 
-37.7359 -32.1143 -36.8448 -33.4245 -37.6340 -31.9097  66.4600 -32.6313 
-31.2460 -27.1500 -31.6517 -29.8229 -36.7916 -35.4219 -32.5568  68.1400 


e+=Matrix(e.dim):

Square matrix
Dimension: 8x8

 63.5429 -31.1648 -34.1760 -30.0687 -23.1637 -33.6091 -31.7684 -36.6797 
-27.3969  67.5060 -31.1304 -36.7715 -33.2164 -35.3850 -30.0942 -35.1785 
-29.3153 -35.8397  68.3669 -29.9846 -31.2497 -30.2888 -35.5094 -33.3260 
-35.9212 -33.2610 -28.8515  67.6859 -31.7732 -29.1638 -28.3997 -32.0138 
-34.3476 -37.4264 -33.2394 -28.3201  60.3071 -39.8473 -34.7133 -32.4931 
-32.2698 -31.0496 -32.9126 -34.1536 -33.8345  65.7239 -27.9936 -37.0902 
-37.0599 -31.3893 -36.0615 -32.9988 -37.3868 -31.4760  67.1877 -32.2646 
-31.1039 -26.6773 -30.8428 -29.4009 -36.3892 -34.9761 -32.0289  68.7885 


e*=[2,1,1,0.5,0.2,0.0003,1,3]:

Square matrix
Dimension: 8x8

 127.0858  -31.1648  -34.1760  -15.0343   -4.6327   -0.0101  -31.7684 -110.0391 
 -54.7938   67.5060  -31.1304  -18.3858   -6.6433   -0.0106  -30.0942 -105.5355 
 -58.6307  -35.8397   68.3669  -14.9923   -6.2499   -0.0091  -35.5094  -99.9780 
 -71.8424  -33.2610  -28.8515   33.8430   -6.3546   -0.0087  -28.3997  -96.0415 
 -68.6953  -37.4264  -33.2394  -14.1600   12.0614   -0.0120  -34.7133  -97.4793 
 -64.5396  -31.0496  -32.9126  -17.0768   -6.7669    0.0197  -27.9936 -111.2707 
 -74.1198  -31.3893  -36.0615  -16.4994   -7.4774   -0.0094   67.1877  -96.7939 
 -62.2077  -26.6773  -30.8428  -14.7004   -7.2778   -0.0105  -32.0289  206.3655 

e%=[2,2,2,2,1,1,1,1]

Square matrix
Dimension: 8x8

2.0858 3.8352 0.8240 4.9657 1.3673 2.9899 0.2316 0.9609 
0.2062 2.5060 3.8696 1.6142 2.3567 2.9894 0.9058 0.4645 
1.3693 4.1603 3.3669 0.0077 2.7501 2.9909 0.4906 0.0220 
3.1576 1.7390 1.1485 3.8430 2.6454 2.9913 0.6003 0.9585 
1.3047 2.5736 1.7606 0.8400 0.0614 2.9880 0.2867 0.5207 
0.4604 3.9504 2.0874 2.9232 2.2331 0.0197 0.0064 0.7293 
0.8802 3.6107 3.9385 3.5006 1.5226 2.9906 0.1877 0.2061 
2.7923 3.3227 4.1572 0.2996 1.7222 2.9895 0.9711 0.3655 

################

c%j

Dimension: 2x4

1.2840 1.9406 7.2816 2.9540 
3.2000 4.3982 6.8359 0.0600 


bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3

 34.0000 -52.0000  33.0000 
  9.0000  88.0000  -3.0000 

################
validStr2:

Dimension: 1x10

312.0000  45.0000  12.0000  44.0000 352.0000  45.0000  12.0000  44.0000   3.0000  -5.0000 

################
validStr3:

Dimension: 1x4

 34.0000   5.0000  44.0000 659.0000 

################
validStr4:

Dimension: 22x3

     Height       Weight       Age  
        130           30        10  
        125           36        11  
        135           34        10  
        133           30         9  
        129           38        12  
        180           90        30  
        190           80        25  
        175           90        35  
        177           60        22  
        185          105        33  
        165           55        27  
        155           50        44  
        160           58        39  
        162           59        41  
        167           62        55  
        174           70        47  
        193           90        23  
        187           80        27  
        183           88        28  
        159           40        29  
        164           66        32  
        166           56        42  

################

validStr4.ranged()
{'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 20.592464320155067, 'Weight': 21.774245534462064, 'Age': 12.68996154316246}

validStr4.median()
{'Height': 166, 'Weight': 60, 'Age': 29}

validStr4.freq()
{'Height': {130: 1, 125: 1, 135: 1, 133: 1, 129: 1, 180: 1, 190: 1, 175: 1, 177: 1, 185: 1, 165: 1, 155: 1, 160: 1, 162: 1, 167: 1, 174: 1, 193: 1, 187: 1, 183: 1, 159: 1, 164: 1, 166: 1}, 'Weight': {30: 2, 36: 1, 34: 1, 38: 1, 90: 3, 80: 2, 60: 1, 105: 1, 55: 1, 50: 1, 58: 1, 59: 1, 62: 1, 70: 1, 88: 1, 40: 1, 66: 1, 56: 1}, 'Age': {10: 2, 11: 1, 9: 1, 12: 1, 30: 1, 25: 1, 35: 1, 22: 1, 33: 1, 27: 2, 44: 1, 39: 1, 41: 1, 55: 1, 47: 1, 23: 1, 28: 1, 29: 1, 32: 1, 42: 1}}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {90: 3}, 'Age': {(10, 27): 2}}

validStr4.iqr()
{'Height': 25, 'Weight': 40, 'Age': 17}

validStr4.iqr(as_quartiles=True)
{'Height': [155, 166, 180], 'Weight': [40, 60, 80], 'Age': [22, 29, 39]}

validStr4.var()
{'Height': 424.0495867768595, 'Weight': 474.1177685950411, 'Age': 161.03512396694214}

################
Linear model for validStr4:

validStr4.corr().p #First and second columns have strong positive correlation. Let's choose first column to be predicted

var = validStr4[:,1:2]
var.add([1]*validStr4.dim[0],col=1,feature="bias")

out = validStr4[:,:1]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]



Square matrix
Dimension: 3x3

1.0000 0.8992 0.5087 
0.8992 1.0000 0.4233 
0.5087 0.4233 1.0000 

Height=110.5244538162 + 0.850374553976*Weight

Model range: {'Weight': [30, 105]}

Average error: 3.4473087980173164e-08
"""
# =============================================================================

