[tox]
envlist = {simple,use_env,used_by_env,reversed,nested,nested_reversed,nested_reversed_default,literal_ignored,with_literal}
skipsdist = True

[testenv]
commands =
  python -c 'assert False, "invalid testenv"'

[testenv:cross]
# Fails during config due to recursive definition
setenv =
  BAR=`python -c 'import sys; sys.stdout.write("{env:FOO:python}")'`
  FOO=`{env:BAR} -c 'import sys; sys.stdout.write("foo")'`
commands =
  python -c 'assert "{env:BAR}" == "foo"'

[testenv:simple]
setenv =
  FOO=`python -c 'import sys; sys.stdout.write("foo")'`
commands =
  python -c 'assert "{env:FOO}" == "foo"'

[testenv:use_env]
setenv =
  FOO=foo
  BAR=`python -c 'import sys; sys.stdout.write("{env:FOO}")'`
commands =
  python -c 'assert "{env:BAR}" == "foo"'

[testenv:used_by_env]
setenv =
  FOO=foo
  BAR=`python -c 'import sys; sys.stdout.write("{env:FOO}")'`
  BAZ={env:BAR}
commands =
  python -c 'assert "{env:BAZ}" == "foo"'

[testenv:reversed]
setenv =
  BAZ={env:BAR}
  BAR=`python -c 'import sys; sys.stdout.write("{env:FOO}")'`
  FOO=foo
commands =
  python -c 'assert "{env:BAZ}" == "foo"'

[testenv:nested]
setenv =
  FOO=`python -c 'import sys; sys.stdout.write("python")'`
  BAR=`{env:FOO} -c 'import sys; sys.stdout.write("foo")'`
commands =
  python -c 'assert "{env:BAR}" == "foo"'

[testenv:nested_reversed]
setenv =
  BAR=`{env:FOO} -c 'import sys; sys.stdout.write("foo")'`
  FOO=`python -c 'import sys; sys.stdout.write("python")'`
commands =
  python -c 'assert "{env:BAR}" == "foo"'

[testenv:nested_reversed_default]
passenv =
  NOTSET
setenv =
  BAR=`{env:NOTSET:{env:FOO}} -c 'import sys; sys.stdout.write("foo")'`
  FOO=`python -c 'import sys; sys.stdout.write("python")'`
commands =
  python -c 'assert "{env:BAR}" == "foo"'

[testenv:literal_ignored]
setenv =
  BACKTICK=`
  BACKTICKS=``
  INNERBACKTICK=``{env:BACKTICK}
  FOO={env:INNERBACKTICK}
commands =
  python -c 'assert "{env:BACKTICK}" == "`"'
  python -c 'assert "{env:BACKTICKS}" == "``"'
  python -c 'assert "{env:INNERBACKTICK}" == "```"'
  python -c 'assert "{env:FOO}" == "```"'

[testenv:with_literal]
setenv =
  BACKTICKS=``
  FOO=start {env:BACKTICKS} end
  BAR=`python -c 'import sys; sys.stdout.write("{env:FOO}")'`
commands =
  python -c 'assert "{env:BAR}" == "start `` end"'
