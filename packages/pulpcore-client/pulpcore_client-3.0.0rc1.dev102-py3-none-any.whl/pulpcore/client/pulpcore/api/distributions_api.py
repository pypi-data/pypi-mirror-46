# coding: utf-8

"""
    Pulp 3 API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pulpcore.client.pulpcore.api_client import ApiClient
from pulpcore.client.pulpcore.exceptions import (
    ApiTypeError,
    ApiValueError
)


class DistributionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def distributions_create(self, data, **kwargs):  # noqa: E501
        """Create a distribution  # noqa: E501

        Trigger an asynchronous create task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Distribution data: (required)
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def distributions_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """Create a distribution  # noqa: E501

        Trigger an asynchronous create task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Distribution data: (required)
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in local_var_params or
                local_var_params['data'] is None):
            raise ApiValueError("Missing the required parameter `data` when calling `distributions_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/pulp/api/v3/distributions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_delete(self, distribution_href, **kwargs):  # noqa: E501
        """Delete a distribution  # noqa: E501

        Trigger an asynchronous delete task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_delete(distribution_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distribution_href: URI of Distribution. e.g.: /pulp/api/v3/distributions/1/ (required)
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_delete_with_http_info(distribution_href, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_delete_with_http_info(distribution_href, **kwargs)  # noqa: E501
            return data

    def distributions_delete_with_http_info(self, distribution_href, **kwargs):  # noqa: E501
        """Delete a distribution  # noqa: E501

        Trigger an asynchronous delete task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_delete_with_http_info(distribution_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distribution_href: URI of Distribution. e.g.: /pulp/api/v3/distributions/1/ (required)
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['distribution_href']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'distribution_href' is set
        if ('distribution_href' not in local_var_params or
                local_var_params['distribution_href'] is None):
            raise ApiValueError("Missing the required parameter `distribution_href` when calling `distributions_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_href' in local_var_params:
            path_params['distribution_href'] = local_var_params['distribution_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '{distribution_href}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_list(self, **kwargs):  # noqa: E501
        """List distributions  # noqa: E501

        Provides read and list methods and also provides asynchronous CUD methods to dispatch tasks with reservation that lock all Distributions preventing race conditions during base_path checking.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param str name__in: Filter results where name is in a comma-separated list of values
        :param str base_path:
        :param str base_path__contains: Filter results where base_path contains value
        :param str base_path__icontains: Filter results where base_path contains value
        :param str base_path__in: Filter results where base_path is in a comma-separated list of values
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.distributions_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def distributions_list_with_http_info(self, **kwargs):  # noqa: E501
        """List distributions  # noqa: E501

        Provides read and list methods and also provides asynchronous CUD methods to dispatch tasks with reservation that lock all Distributions preventing race conditions during base_path checking.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param str name__in: Filter results where name is in a comma-separated list of values
        :param str base_path:
        :param str base_path__contains: Filter results where base_path contains value
        :param str base_path__icontains: Filter results where base_path contains value
        :param str base_path__in: Filter results where base_path is in a comma-separated list of values
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'name__in', 'base_path', 'base_path__contains', 'base_path__icontains', 'base_path__in', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'name__in' in local_var_params:
            query_params.append(('name__in', local_var_params['name__in']))  # noqa: E501
        if 'base_path' in local_var_params:
            query_params.append(('base_path', local_var_params['base_path']))  # noqa: E501
        if 'base_path__contains' in local_var_params:
            query_params.append(('base_path__contains', local_var_params['base_path__contains']))  # noqa: E501
        if 'base_path__icontains' in local_var_params:
            query_params.append(('base_path__icontains', local_var_params['base_path__icontains']))  # noqa: E501
        if 'base_path__in' in local_var_params:
            query_params.append(('base_path__in', local_var_params['base_path__in']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params:
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/pulp/api/v3/distributions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_partial_update(self, distribution_href, data, **kwargs):  # noqa: E501
        """Partially update a distribution  # noqa: E501

        Trigger an asynchronous partial update task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_partial_update(distribution_href, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distribution_href: URI of Distribution. e.g.: /pulp/api/v3/distributions/1/ (required)
        :param Distribution data: (required)
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_partial_update_with_http_info(distribution_href, data, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_partial_update_with_http_info(distribution_href, data, **kwargs)  # noqa: E501
            return data

    def distributions_partial_update_with_http_info(self, distribution_href, data, **kwargs):  # noqa: E501
        """Partially update a distribution  # noqa: E501

        Trigger an asynchronous partial update task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_partial_update_with_http_info(distribution_href, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distribution_href: URI of Distribution. e.g.: /pulp/api/v3/distributions/1/ (required)
        :param Distribution data: (required)
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['distribution_href', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'distribution_href' is set
        if ('distribution_href' not in local_var_params or
                local_var_params['distribution_href'] is None):
            raise ApiValueError("Missing the required parameter `distribution_href` when calling `distributions_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in local_var_params or
                local_var_params['data'] is None):
            raise ApiValueError("Missing the required parameter `data` when calling `distributions_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_href' in local_var_params:
            path_params['distribution_href'] = local_var_params['distribution_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '{distribution_href}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_read(self, distribution_href, **kwargs):  # noqa: E501
        """Inspect a distribution  # noqa: E501

        Provides read and list methods and also provides asynchronous CUD methods to dispatch tasks with reservation that lock all Distributions preventing race conditions during base_path checking.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_read(distribution_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distribution_href: URI of Distribution. e.g.: /pulp/api/v3/distributions/1/ (required)
        :return: Distribution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_read_with_http_info(distribution_href, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_read_with_http_info(distribution_href, **kwargs)  # noqa: E501
            return data

    def distributions_read_with_http_info(self, distribution_href, **kwargs):  # noqa: E501
        """Inspect a distribution  # noqa: E501

        Provides read and list methods and also provides asynchronous CUD methods to dispatch tasks with reservation that lock all Distributions preventing race conditions during base_path checking.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_read_with_http_info(distribution_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distribution_href: URI of Distribution. e.g.: /pulp/api/v3/distributions/1/ (required)
        :return: Distribution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['distribution_href']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'distribution_href' is set
        if ('distribution_href' not in local_var_params or
                local_var_params['distribution_href'] is None):
            raise ApiValueError("Missing the required parameter `distribution_href` when calling `distributions_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_href' in local_var_params:
            path_params['distribution_href'] = local_var_params['distribution_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '{distribution_href}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Distribution',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_update(self, distribution_href, data, **kwargs):  # noqa: E501
        """Update a distribution  # noqa: E501

        Trigger an asynchronous update task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_update(distribution_href, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distribution_href: URI of Distribution. e.g.: /pulp/api/v3/distributions/1/ (required)
        :param Distribution data: (required)
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_update_with_http_info(distribution_href, data, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_update_with_http_info(distribution_href, data, **kwargs)  # noqa: E501
            return data

    def distributions_update_with_http_info(self, distribution_href, data, **kwargs):  # noqa: E501
        """Update a distribution  # noqa: E501

        Trigger an asynchronous update task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_update_with_http_info(distribution_href, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str distribution_href: URI of Distribution. e.g.: /pulp/api/v3/distributions/1/ (required)
        :param Distribution data: (required)
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['distribution_href', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'distribution_href' is set
        if ('distribution_href' not in local_var_params or
                local_var_params['distribution_href'] is None):
            raise ApiValueError("Missing the required parameter `distribution_href` when calling `distributions_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in local_var_params or
                local_var_params['data'] is None):
            raise ApiValueError("Missing the required parameter `data` when calling `distributions_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'distribution_href' in local_var_params:
            path_params['distribution_href'] = local_var_params['distribution_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '{distribution_href}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
