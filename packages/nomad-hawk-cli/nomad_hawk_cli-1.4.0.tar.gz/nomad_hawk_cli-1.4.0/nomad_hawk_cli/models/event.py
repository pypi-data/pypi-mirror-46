# coding: utf-8

"""
    Nomad Hawk

    This is the API descriptor for the Nomad Hawk API, responsible for tracking and analytics.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: paul@samarkand.global
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'category': 'str',
        'label': 'str',
        'message': 'str',
        'location_city': 'str',
        'location_country': 'str',
        'company': 'str',
        'value': 'str',
        'value_type': 'str',
        'source': 'str',
        'sales_channel': 'str',
        'user': 'str',
        'id': 'str',
        'items': 'list[EventItem]'
    }

    attribute_map = {
        'type': 'type',
        'category': 'category',
        'label': 'label',
        'message': 'message',
        'location_city': 'location_city',
        'location_country': 'location_country',
        'company': 'company',
        'value': 'value',
        'value_type': 'value_type',
        'source': 'source',
        'sales_channel': 'sales_channel',
        'user': 'user',
        'id': 'id',
        'items': 'items'
    }

    def __init__(self, type=None, category=None, label=None, message=None, location_city=None, location_country=None, company=None, value=None, value_type=None, source=None, sales_channel=None, user=None, id=None, items=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._category = None
        self._label = None
        self._message = None
        self._location_city = None
        self._location_country = None
        self._company = None
        self._value = None
        self._value_type = None
        self._source = None
        self._sales_channel = None
        self._user = None
        self._id = None
        self._items = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if category is not None:
            self.category = category
        if label is not None:
            self.label = label
        if message is not None:
            self.message = message
        if location_city is not None:
            self.location_city = location_city
        if location_country is not None:
            self.location_country = location_country
        if company is not None:
            self.company = company
        if value is not None:
            self.value = value
        if value_type is not None:
            self.value_type = value_type
        if source is not None:
            self.source = source
        if sales_channel is not None:
            self.sales_channel = sales_channel
        if user is not None:
            self.user = user
        if id is not None:
            self.id = id
        if items is not None:
            self.items = items

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501


        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def category(self):
        """Gets the category of this Event.  # noqa: E501


        :return: The category of this Event.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Event.


        :param category: The category of this Event.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def label(self):
        """Gets the label of this Event.  # noqa: E501


        :return: The label of this Event.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Event.


        :param label: The label of this Event.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def message(self):
        """Gets the message of this Event.  # noqa: E501


        :return: The message of this Event.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Event.


        :param message: The message of this Event.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def location_city(self):
        """Gets the location_city of this Event.  # noqa: E501


        :return: The location_city of this Event.  # noqa: E501
        :rtype: str
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this Event.


        :param location_city: The location_city of this Event.  # noqa: E501
        :type: str
        """

        self._location_city = location_city

    @property
    def location_country(self):
        """Gets the location_country of this Event.  # noqa: E501


        :return: The location_country of this Event.  # noqa: E501
        :rtype: str
        """
        return self._location_country

    @location_country.setter
    def location_country(self, location_country):
        """Sets the location_country of this Event.


        :param location_country: The location_country of this Event.  # noqa: E501
        :type: str
        """

        self._location_country = location_country

    @property
    def company(self):
        """Gets the company of this Event.  # noqa: E501


        :return: The company of this Event.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Event.


        :param company: The company of this Event.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def value(self):
        """Gets the value of this Event.  # noqa: E501


        :return: The value of this Event.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Event.


        :param value: The value of this Event.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_type(self):
        """Gets the value_type of this Event.  # noqa: E501


        :return: The value_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this Event.


        :param value_type: The value_type of this Event.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    @property
    def source(self):
        """Gets the source of this Event.  # noqa: E501


        :return: The source of this Event.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Event.


        :param source: The source of this Event.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def sales_channel(self):
        """Gets the sales_channel of this Event.  # noqa: E501


        :return: The sales_channel of this Event.  # noqa: E501
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this Event.


        :param sales_channel: The sales_channel of this Event.  # noqa: E501
        :type: str
        """

        self._sales_channel = sales_channel

    @property
    def user(self):
        """Gets the user of this Event.  # noqa: E501


        :return: The user of this Event.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Event.


        :param user: The user of this Event.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def items(self):
        """Gets the items of this Event.  # noqa: E501


        :return: The items of this Event.  # noqa: E501
        :rtype: list[EventItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Event.


        :param items: The items of this Event.  # noqa: E501
        :type: list[EventItem]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
