# AWS Auth Specification

# AWS account Id for the Organization master account.  This must be in quotes.
master_account_id: 'XXXXXXXXXXXX'

# AWS account Id for the Central Auth account.  This must be in quotes.
auth_account_id: 'XXXXXXXXXXXX'

# Role to use when managing resources in accounts.  This must not itself
# be a managed delegation role.  This is the role created by Organizations
# service when an account is created or invited into an Organization.
org_access_role: OrganizationAccountAccessRole

# This string is prepended to all IAM resource 'path' attributes.
default_path: awsauth


# Users Specification.  List of IAM users managed within the Auth account.
# Each user has 5 attributes all of type 'str':
#   Name:   The name of the user - required.
#   Ensure: One of 'present' (default) or 'absent'.
#           Setting to 'absent' will cause the user to be deleted.
#   Email:  The email address with which the user can be contacted.
#   Team:   A label for associating the IAM user with a project team.
#   Path:   Set a path element to the IAM user resource.
#
users:
  - Name: ashely
    Email: agould@example.com
    Team: systems
    Path: orgadmin
  - Name: eric
    Email: eric@example.com
    Team: systems
  - Name: elena
    Email: elena@example.com
    Team: project1
    Path: dev
  - Name: mary
    Email: mary@example.com
    Team: project2
  - Name: quincey
    Ensure: absent
    Email: quincey@example.com
    Team: project2


# Groups Specification.  List of IAM group resources managed within the
# Auth account.  Each group has 5 possible attributes:
#  Name:            Type 'str'.   The group name (required).
#  Ensure:          Type 'str'.   One of 'present' (default) or 'absent'.
#                   Setting to 'absent' will cause the group to be deleted but
#                   only if the group contains no users.
#  Members:         Type 'list' or keyword 'ALL'.  List of IAM users who are
#                   members of this group.  If set to 'ALL', all managed users
#                   in the Auth account become members.
#  ExcludeMembers:  Type 'list'.  If 'Members' attribute is set to 'ALL', any
#                   users listed in 'ExludeMembers' are excluded from the group.
#  Policies:        Type 'list'.  List of IAM policies to attach to this group.
#
groups:
  - Name: all-users
    Members: ALL
    ExcludeMembers:
      - mary
    Policies:
      - UserSelfService
  - Name: admins
    Ensure: present
    Members:
      - ashely
      - eric
    Policies:
      - PowerUserAccess
  - Name: project1
    Members:
      - elena
  - Name: project2
    Members:
      - mary


# Delegations Specification.  A delegation is a complex of IAM resources
# which combine to allow users in the ('trusted') Auth account
# to access and manipulate resources in one or several or the other
# ('trusting') accounts in the Organization.  This is accomplished by
# managing a delegation role in the trusting accounts which contains a
# trust policy naming the Auth account as 'principal', and by assigning
# 'assume role' policies to a managed group in the Auth account for each
# trusting account within the scope of the delegation specification.
#
# Each delegation spec has 8 possible attributes:
#  RoleName:         Type 'str'.   The name of the delegation role in the
#                    trusting accounts.
#  Ensure:           Type 'str'.   One of 'present' (default) or 'absent'.
#                    Setting to 'absent' deletes delegation roles in
#                    trusting accounts and removes assume role policies
#                    from the trusted group.
#  Description:      Type 'str'.  A decription applied to the delegation role.
#  TrustingAccount:  Type 'list' or keyword 'ALL'.  List of trusting accounts
#                    within the scope of the delegation.  If set to 'ALL',
#                    all accounts in the Organization are include in the
#                    delegation.
#  ExludeAccounts:   Type 'list'.  If 'TrustingAccount' attribute is set
#                    to 'ALL', any accounts listed in 'ExludeAccounts' are
#                    excluded from the delegation.
#  TrustedGroup:     The IAM group in the Auth account in which to assign
#                    assume role policies for this delegation.
#  TrustedAccount:   The account Id to use as principle in service roles.
#  RequireMFA:       Type 'bool'.  When set to 'True' (the default), add
#                    a condition to the trust policy requiring users 
#                    assuming the delegation role to have valid MFA token.
#  Duration:         Type 'int'.  MaxSessionDuration time in seconds. 
#                    Default is 3600 (one hour).
#  Policies:         Type 'list'.  List of IAM policies to attach to the 
#                    delegation role in the trusting accounts.
delegations:
  - RoleName: AuthAdminRole
    Ensure: present
    Description: Allow auth admins full access to IAM
    TrustingAccount: ALL
    TrustedGroup: authadmin
    RequireMFA: True
    Duration: 43200
    Policies:
      - IAMFullAccess
      - ListAccountsInOrganization
  - RoleName: AccountAdminitratorRole
    Ensure: present
    Description: Allow admins full access to all services
    TrustingAccount: ALL
    ExcludeAccounts:
     - Master
     - Auth
    TrustedGroup: admins
    RequireMFA: True
    Policies:
      - AdministratorAccess
  - RoleName: ProjectAccessRole
    Description: Allow developers access to project1 account
    TrustingAccount:
      - project1-prod
      - project1-poc
    TrustedGroup: project1
    RequireMFA: True
    Policies:
      - PowerUserAccess


# Local Users Specification
local_users:
  # service user
  - Name: eoc-monitor
    Description: Service user for third party CA monitoring suite
    Path: service/ca
    Team: eoc
    AuthMethod:
      - access-key
    TrustingAccount: All
    TrustedGroup: monitoring
    Policies:
      - CloudWatchLogsReadOnlyAccess
  # codecommit user
  - Name: cbrothers
    Description: Carol Brothers git user
    Path: codecommit
    Contact: carol.brothers@ucop.edu
    AuthMethod:
      - ssh-key
      - https-git
    TrustingAccount:
      - ppers-build
      - ppers-poc
    TrustedGroup: project1
    Policies:
      - CodeCommitPowerUser
  # s3 content user













# Custom Policy Specification.  List of IAM policy definitions.  Custom
# policies are created in accounts in which the policy is attached to
# least one group or delegation role.  Each custom_policy has 3 attributes:
#   PolicyName:   Type 'str'.  The name of the Policy (required)
#   Description:  Type 'str'.  The policy SID.
#   Statement:    Type 'dict'. The IAM policy statement.  
custom_policies:
  - PolicyName: ListAccountsInOrganization
    Description: Allow Users to list accounts in an Organization
    Statement:
      - Effect: Allow
        Action:
          - organizations:ListAccounts
        Resource: '*'
  - PolicyName: UserSelfService
    Description: Allow users to manage thier own account and credentials
    Statement:
      - Sid: AllowAllUsersToListAccounts
        Effect: Allow
        Action:
          - iam:ListAccountAliases
          - iam:ListUsers
          - iam:GetAccountSummary
        Resource: "*"
      - Sid: AllowIndividualUserToSeeAndManageTheirOwnAccountInformation
        Effect: Allow
        Action:
          - iam:ChangePassword
          - iam:CreateAccessKey
          - iam:CreateLoginProfile
          - iam:DeleteAccessKey
          - iam:DeleteLoginProfile
          - iam:GetAccountPasswordPolicy
          - iam:GetLoginProfile
          - iam:ListAccessKeys
          - iam:UpdateAccessKey
          - iam:UpdateLoginProfile
          - iam:ListSigningCertificates
          - iam:DeleteSigningCertificate
          - iam:UpdateSigningCertificate
          - iam:UploadSigningCertificate
          - iam:ListSSHPublicKeys
          - iam:GetSSHPublicKey
          - iam:DeleteSSHPublicKey
          - iam:UpdateSSHPublicKey
          - iam:UploadSSHPublicKey
        Resource: arn:aws:iam::*:user/*/${aws:username}
      - Sid: AllowIndividualUserToListTheirOwnMFA
        Effect: Allow
        Action:
          - iam:ListVirtualMFADevices
          - iam:ListMFADevices
        Resource:
          - arn:aws:iam::*:mfa/*
          - arn:aws:iam::*:user/*/${aws:username}
      - Sid: AllowIndividualUserToManageTheirOwnMFA
        Effect: Allow
        Action:
          - iam:CreateVirtualMFADevice
          - iam:DeactivateMFADevice
          - iam:DeleteVirtualMFADevice
          - iam:RequestSmsMfaRegistration
          - iam:FinalizeSmsMfaRegistration
          - iam:EnableMFADevice
          - iam:ResyncMFADevice
        Resource:
          - arn:aws:iam::*:mfa/${aws:username}
          - arn:aws:iam::*:user/*/${aws:username}
      - Sid: BlockAnyAccessOtherThanAboveUnlessSignedInWithMFA
        Effect: Deny
        NotAction:
          - iam:*
        Resource: "*"
        Condition:
          BoolIfExists:
            aws:MultiFactorAuthPresent: 'false'

