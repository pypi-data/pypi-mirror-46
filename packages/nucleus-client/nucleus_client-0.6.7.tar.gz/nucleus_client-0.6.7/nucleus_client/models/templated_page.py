# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemplatedPage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'client_id': 'str',
        'dt_u': 'datetime',
        'filters': 'list[Filter]',
        'page_template_id': 'str',
        'page_template_slug': 'str',
        'settings': 'dict(str, object)',
        'slug': 'str',
        'title': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'id': '_id',
        'client_id': 'client_id',
        'dt_u': 'dt_u',
        'filters': 'filters',
        'page_template_id': 'page_template_id',
        'page_template_slug': 'page_template_slug',
        'settings': 'settings',
        'slug': 'slug',
        'title': 'title',
        'user_id': 'user_id'
    }

    def __init__(self, id=None, client_id=None, dt_u=None, filters=None, page_template_id=None, page_template_slug=None, settings=None, slug=None, title=None, user_id=None):  # noqa: E501
        """TemplatedPage - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._dt_u = None
        self._filters = None
        self._page_template_id = None
        self._page_template_slug = None
        self._settings = None
        self._slug = None
        self._title = None
        self._user_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.client_id = client_id
        if dt_u is not None:
            self.dt_u = dt_u
        if filters is not None:
            self.filters = filters
        if page_template_id is not None:
            self.page_template_id = page_template_id
        self.page_template_slug = page_template_slug
        if settings is not None:
            self.settings = settings
        self.slug = slug
        self.title = title
        if user_id is not None:
            self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this TemplatedPage.  # noqa: E501


        :return: The id of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplatedPage.


        :param id: The id of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this TemplatedPage.  # noqa: E501


        :return: The client_id of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TemplatedPage.


        :param client_id: The client_id of this TemplatedPage.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def dt_u(self):
        """Gets the dt_u of this TemplatedPage.  # noqa: E501


        :return: The dt_u of this TemplatedPage.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this TemplatedPage.


        :param dt_u: The dt_u of this TemplatedPage.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def filters(self):
        """Gets the filters of this TemplatedPage.  # noqa: E501


        :return: The filters of this TemplatedPage.  # noqa: E501
        :rtype: list[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this TemplatedPage.


        :param filters: The filters of this TemplatedPage.  # noqa: E501
        :type: list[Filter]
        """

        self._filters = filters

    @property
    def page_template_id(self):
        """Gets the page_template_id of this TemplatedPage.  # noqa: E501


        :return: The page_template_id of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._page_template_id

    @page_template_id.setter
    def page_template_id(self, page_template_id):
        """Sets the page_template_id of this TemplatedPage.


        :param page_template_id: The page_template_id of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._page_template_id = page_template_id

    @property
    def page_template_slug(self):
        """Gets the page_template_slug of this TemplatedPage.  # noqa: E501


        :return: The page_template_slug of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._page_template_slug

    @page_template_slug.setter
    def page_template_slug(self, page_template_slug):
        """Sets the page_template_slug of this TemplatedPage.


        :param page_template_slug: The page_template_slug of this TemplatedPage.  # noqa: E501
        :type: str
        """
        if page_template_slug is None:
            raise ValueError("Invalid value for `page_template_slug`, must not be `None`")  # noqa: E501

        self._page_template_slug = page_template_slug

    @property
    def settings(self):
        """Gets the settings of this TemplatedPage.  # noqa: E501


        :return: The settings of this TemplatedPage.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this TemplatedPage.


        :param settings: The settings of this TemplatedPage.  # noqa: E501
        :type: dict(str, object)
        """

        self._settings = settings

    @property
    def slug(self):
        """Gets the slug of this TemplatedPage.  # noqa: E501


        :return: The slug of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this TemplatedPage.


        :param slug: The slug of this TemplatedPage.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this TemplatedPage.  # noqa: E501


        :return: The title of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TemplatedPage.


        :param title: The title of this TemplatedPage.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def user_id(self):
        """Gets the user_id of this TemplatedPage.  # noqa: E501


        :return: The user_id of this TemplatedPage.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TemplatedPage.


        :param user_id: The user_id of this TemplatedPage.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplatedPage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
