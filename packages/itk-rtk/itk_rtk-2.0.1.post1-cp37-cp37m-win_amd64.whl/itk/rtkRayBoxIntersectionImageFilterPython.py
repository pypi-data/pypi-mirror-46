# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkRayBoxIntersectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkRayBoxIntersectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkRayBoxIntersectionImageFilterPython
            return _rtkRayBoxIntersectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkRayBoxIntersectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkRayBoxIntersectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkRayBoxIntersectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkPointPython
import itkFixedArrayPython
import pyBasePython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import ITKCommonBasePython
import itkIndexPython
import itkRGBAPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import rtkRayConvexIntersectionImageFilterPython
import rtkConvexShapePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython

def rtkRayBoxIntersectionImageFilterIF3IF3_New():
  return rtkRayBoxIntersectionImageFilterIF3IF3.New()

class rtkRayBoxIntersectionImageFilterIF3IF3(rtkRayConvexIntersectionImageFilterPython.rtkRayConvexIntersectionImageFilterIF3IF3):
    """Proxy of C++ rtkRayBoxIntersectionImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkRayBoxIntersectionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> rtkRayBoxIntersectionImageFilterIF3IF3_Pointer"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkRayBoxIntersectionImageFilterIF3IF3_Pointer":
        """Clone(rtkRayBoxIntersectionImageFilterIF3IF3 self) -> rtkRayBoxIntersectionImageFilterIF3IF3_Pointer"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_Clone(self)


    def GetDensity(self) -> "double":
        """GetDensity(rtkRayBoxIntersectionImageFilterIF3IF3 self) -> double"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetDensity(self)


    def SetDensity(self, _arg: 'double const') -> "void":
        """SetDensity(rtkRayBoxIntersectionImageFilterIF3IF3 self, double const _arg)"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetDensity(self, _arg)


    def GetPlaneDirections(self) -> "std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &":
        """GetPlaneDirections(rtkRayBoxIntersectionImageFilterIF3IF3 self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetPlaneDirections(self)


    def GetPlanePositions(self) -> "std::vector< double,std::allocator< double > > const &":
        """GetPlanePositions(rtkRayBoxIntersectionImageFilterIF3IF3 self) -> vectorD"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetPlanePositions(self)


    def AddClipPlane(self, dir: 'itkVectorD3', pos: 'double const &') -> "void":
        """AddClipPlane(rtkRayBoxIntersectionImageFilterIF3IF3 self, itkVectorD3 dir, double const & pos)"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_AddClipPlane(self, dir, pos)


    def SetBoxFromImage(self, img: 'itkImageBase3', bWithExternalHalfPixelBorder: 'bool'=True) -> "void":
        """
        SetBoxFromImage(rtkRayBoxIntersectionImageFilterIF3IF3 self, itkImageBase3 img, bool bWithExternalHalfPixelBorder=True)
        SetBoxFromImage(rtkRayBoxIntersectionImageFilterIF3IF3 self, itkImageBase3 img)
        """
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetBoxFromImage(self, img, bWithExternalHalfPixelBorder)


    def GetBoxMin(self) -> "itkVectorD3":
        """GetBoxMin(rtkRayBoxIntersectionImageFilterIF3IF3 self) -> itkVectorD3"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetBoxMin(self)


    def SetBoxMin(self, _arg: 'itkVectorD3') -> "void":
        """SetBoxMin(rtkRayBoxIntersectionImageFilterIF3IF3 self, itkVectorD3 _arg)"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetBoxMin(self, _arg)


    def GetBoxMax(self) -> "itkVectorD3":
        """GetBoxMax(rtkRayBoxIntersectionImageFilterIF3IF3 self) -> itkVectorD3"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetBoxMax(self)


    def SetBoxMax(self, _arg: 'itkVectorD3') -> "void":
        """SetBoxMax(rtkRayBoxIntersectionImageFilterIF3IF3 self, itkVectorD3 _arg)"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetBoxMax(self, _arg)


    def GetDirection(self) -> "itkMatrixD33":
        """GetDirection(rtkRayBoxIntersectionImageFilterIF3IF3 self) -> itkMatrixD33"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetDirection(self)


    def SetDirection(self, _arg: 'itkMatrixD33') -> "void":
        """SetDirection(rtkRayBoxIntersectionImageFilterIF3IF3 self, itkMatrixD33 _arg)"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetDirection(self, _arg)

    __swig_destroy__ = _rtkRayBoxIntersectionImageFilterPython.delete_rtkRayBoxIntersectionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "rtkRayBoxIntersectionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> rtkRayBoxIntersectionImageFilterIF3IF3"""
        return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkRayBoxIntersectionImageFilterIF3IF3

        Create a new object of the class rtkRayBoxIntersectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkRayBoxIntersectionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkRayBoxIntersectionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkRayBoxIntersectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkRayBoxIntersectionImageFilterIF3IF3.Clone = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_Clone, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.GetDensity = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetDensity, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.SetDensity = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetDensity, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.GetPlaneDirections = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetPlaneDirections, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.GetPlanePositions = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetPlanePositions, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.AddClipPlane = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_AddClipPlane, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.SetBoxFromImage = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetBoxFromImage, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.GetBoxMin = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetBoxMin, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.SetBoxMin = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetBoxMin, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.GetBoxMax = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetBoxMax, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.SetBoxMax = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetBoxMax, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.GetDirection = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_GetDirection, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3.SetDirection = new_instancemethod(_rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_SetDirection, None, rtkRayBoxIntersectionImageFilterIF3IF3)
rtkRayBoxIntersectionImageFilterIF3IF3_swigregister = _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_swigregister
rtkRayBoxIntersectionImageFilterIF3IF3_swigregister(rtkRayBoxIntersectionImageFilterIF3IF3)

def rtkRayBoxIntersectionImageFilterIF3IF3___New_orig__() -> "rtkRayBoxIntersectionImageFilterIF3IF3_Pointer":
    """rtkRayBoxIntersectionImageFilterIF3IF3___New_orig__() -> rtkRayBoxIntersectionImageFilterIF3IF3_Pointer"""
    return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3___New_orig__()

def rtkRayBoxIntersectionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "rtkRayBoxIntersectionImageFilterIF3IF3 *":
    """rtkRayBoxIntersectionImageFilterIF3IF3_cast(itkLightObject obj) -> rtkRayBoxIntersectionImageFilterIF3IF3"""
    return _rtkRayBoxIntersectionImageFilterPython.rtkRayBoxIntersectionImageFilterIF3IF3_cast(obj)


def ray_box_intersection_image_filter(*args, **kwargs):
    """Procedural interface for RayBoxIntersectionImageFilter"""
    import itk
    instance = itk.RayBoxIntersectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def ray_box_intersection_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.RayBoxIntersectionImageFilter, itkTemplate.itkTemplate):
        ray_box_intersection_image_filter.__doc__ = itk.RayBoxIntersectionImageFilter.values()[0].__doc__
    else:
        ray_box_intersection_image_filter.__doc__ = itk.RayBoxIntersectionImageFilter.__doc__




