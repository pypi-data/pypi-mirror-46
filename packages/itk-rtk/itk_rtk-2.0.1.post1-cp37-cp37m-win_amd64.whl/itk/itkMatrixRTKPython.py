# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMatrixRTKPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMatrixRTKPython', [dirname(__file__)])
        except ImportError:
            import _itkMatrixRTKPython
            return _itkMatrixRTKPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMatrixRTKPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMatrixRTKPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMatrixRTKPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointRTKPython
import vnl_vector_refPython
import stdcomplexPython
import pyBasePython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkCovariantVectorRTKPython

def itkMatrixD11_New():
  return itkMatrixD11.New()

class itkMatrixD11(object):
    """Proxy of C++ itkMatrixD11 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __add__(self, matrix: 'itkMatrixD11') -> "itkMatrixD11":
        """__add__(itkMatrixD11 self, itkMatrixD11 matrix) -> itkMatrixD11"""
        return _itkMatrixRTKPython.itkMatrixD11___add__(self, matrix)


    def __iadd__(self, matrix: 'itkMatrixD11') -> "itkMatrixD11 const &":
        """__iadd__(itkMatrixD11 self, itkMatrixD11 matrix) -> itkMatrixD11"""
        return _itkMatrixRTKPython.itkMatrixD11___iadd__(self, matrix)


    def __sub__(self, matrix: 'itkMatrixD11') -> "itkMatrixD11":
        """__sub__(itkMatrixD11 self, itkMatrixD11 matrix) -> itkMatrixD11"""
        return _itkMatrixRTKPython.itkMatrixD11___sub__(self, matrix)


    def __isub__(self, matrix: 'itkMatrixD11') -> "itkMatrixD11 const &":
        """__isub__(itkMatrixD11 self, itkMatrixD11 matrix) -> itkMatrixD11"""
        return _itkMatrixRTKPython.itkMatrixD11___isub__(self, matrix)


    def __imul__(self, *args) -> "void":
        """
        __imul__(itkMatrixD11 self, itkMatrixD11 matrix)
        __imul__(itkMatrixD11 self, vnl_matrixD matrix)
        __imul__(itkMatrixD11 self, double const & value)
        """
        return _itkMatrixRTKPython.itkMatrixD11___imul__(self, *args)


    def __mul__(self, *args) -> "itkMatrixD11":
        """
        __mul__(itkMatrixD11 self, itkVectorD1 vector) -> itkVectorD1
        __mul__(itkMatrixD11 self, itkPointD1 vector) -> itkPointD1
        __mul__(itkMatrixD11 self, itkCovariantVectorD1 vector) -> itkCovariantVectorD1
        __mul__(itkMatrixD11 self, vnl_vector_fixed< double,1 > const & vector) -> vnl_vector_fixed< double,1 >
        __mul__(itkMatrixD11 self, itkMatrixD11 matrix) -> itkMatrixD11
        __mul__(itkMatrixD11 self, vnl_matrixD matrix) -> vnl_matrixD
        __mul__(itkMatrixD11 self, vnl_vectorD matrix) -> vnl_vectorD
        __mul__(itkMatrixD11 self, double const & value) -> itkMatrixD11
        """
        return _itkMatrixRTKPython.itkMatrixD11___mul__(self, *args)


    def __idiv__(self, value: 'double const &') -> "void":
        """__idiv__(itkMatrixD11 self, double const & value)"""
        return _itkMatrixRTKPython.itkMatrixD11___idiv__(self, value)


    def __div__(self, value: 'double const &') -> "itkMatrixD11":
        """__div__(itkMatrixD11 self, double const & value) -> itkMatrixD11"""
        return _itkMatrixRTKPython.itkMatrixD11___div__(self, value)


    def __call__(self, *args) -> "double const &":
        """
        __call__(itkMatrixD11 self, unsigned int row, unsigned int col) -> double
        __call__(itkMatrixD11 self, unsigned int row, unsigned int col) -> double const &
        """
        return _itkMatrixRTKPython.itkMatrixD11___call__(self, *args)


    def __GetVnlMatrix_orig__(self, *args) -> "vnl_matrix_fixed< double,1,1 > const &":
        """
        __GetVnlMatrix_orig__(itkMatrixD11 self) -> vnl_matrix_fixed< double,1,1 >
        __GetVnlMatrix_orig__(itkMatrixD11 self) -> vnl_matrix_fixed< double,1,1 > const &
        """
        return _itkMatrixRTKPython.itkMatrixD11___GetVnlMatrix_orig__(self, *args)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkMatrixD11 self)"""
        return _itkMatrixRTKPython.itkMatrixD11_SetIdentity(self)


    def Fill(self, value: 'double const &') -> "void":
        """Fill(itkMatrixD11 self, double const & value)"""
        return _itkMatrixRTKPython.itkMatrixD11_Fill(self, value)


    def __eq__(self, matrix: 'itkMatrixD11') -> "bool":
        """__eq__(itkMatrixD11 self, itkMatrixD11 matrix) -> bool"""
        return _itkMatrixRTKPython.itkMatrixD11___eq__(self, matrix)


    def __ne__(self, matrix: 'itkMatrixD11') -> "bool":
        """__ne__(itkMatrixD11 self, itkMatrixD11 matrix) -> bool"""
        return _itkMatrixRTKPython.itkMatrixD11___ne__(self, matrix)


    def GetInverse(self) -> "vnl_matrix_fixed< double,1,1 >":
        """GetInverse(itkMatrixD11 self) -> vnl_matrix_fixed< double,1,1 >"""
        return _itkMatrixRTKPython.itkMatrixD11_GetInverse(self)


    def GetTranspose(self) -> "vnl_matrix_fixed< double,1,1 >":
        """GetTranspose(itkMatrixD11 self) -> vnl_matrix_fixed< double,1,1 >"""
        return _itkMatrixRTKPython.itkMatrixD11_GetTranspose(self)


    def __init__(self, *args):
        """
        __init__(itkMatrixD11 self, vnl_matrixD matrix) -> itkMatrixD11
        __init__(itkMatrixD11 self, vnl_matrix_fixed< double,1,1 > const & matrix) -> itkMatrixD11
        __init__(itkMatrixD11 self) -> itkMatrixD11
        __init__(itkMatrixD11 self, itkMatrixD11 matrix) -> itkMatrixD11
        """
        _itkMatrixRTKPython.itkMatrixD11_swiginit(self, _itkMatrixRTKPython.new_itkMatrixD11(*args))

    def swap(self, other: 'itkMatrixD11') -> "void":
        """swap(itkMatrixD11 self, itkMatrixD11 other)"""
        return _itkMatrixRTKPython.itkMatrixD11_swap(self, other)

    __swig_destroy__ = _itkMatrixRTKPython.delete_itkMatrixD11

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

itkMatrixD11.__add__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___add__, None, itkMatrixD11)
itkMatrixD11.__iadd__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___iadd__, None, itkMatrixD11)
itkMatrixD11.__sub__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___sub__, None, itkMatrixD11)
itkMatrixD11.__isub__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___isub__, None, itkMatrixD11)
itkMatrixD11.__imul__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___imul__, None, itkMatrixD11)
itkMatrixD11.__mul__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___mul__, None, itkMatrixD11)
itkMatrixD11.__idiv__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___idiv__, None, itkMatrixD11)
itkMatrixD11.__div__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___div__, None, itkMatrixD11)
itkMatrixD11.__call__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___call__, None, itkMatrixD11)
itkMatrixD11.__GetVnlMatrix_orig__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___GetVnlMatrix_orig__, None, itkMatrixD11)
itkMatrixD11.SetIdentity = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11_SetIdentity, None, itkMatrixD11)
itkMatrixD11.Fill = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11_Fill, None, itkMatrixD11)
itkMatrixD11.__eq__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___eq__, None, itkMatrixD11)
itkMatrixD11.__ne__ = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11___ne__, None, itkMatrixD11)
itkMatrixD11.GetInverse = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11_GetInverse, None, itkMatrixD11)
itkMatrixD11.GetTranspose = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11_GetTranspose, None, itkMatrixD11)
itkMatrixD11.swap = new_instancemethod(_itkMatrixRTKPython.itkMatrixD11_swap, None, itkMatrixD11)
itkMatrixD11_swigregister = _itkMatrixRTKPython.itkMatrixD11_swigregister
itkMatrixD11_swigregister(itkMatrixD11)



