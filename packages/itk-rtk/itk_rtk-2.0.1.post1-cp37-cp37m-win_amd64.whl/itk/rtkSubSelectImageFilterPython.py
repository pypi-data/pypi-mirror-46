# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkSubSelectImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkSubSelectImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkSubSelectImageFilterPython
            return _rtkSubSelectImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkSubSelectImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkSubSelectImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkSubSelectImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkPointPython
import itkFixedArrayPython
import pyBasePython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import ITKCommonBasePython
import itkIndexPython
import itkRGBAPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRTKPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkPointRTKPython
import itkCovariantVectorRTKPython
import itkImageRegionRTKPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def rtkSubSelectImageFilterIF3_New():
  return rtkSubSelectImageFilterIF3.New()

class rtkSubSelectImageFilterIF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ rtkSubSelectImageFilterIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInputProjectionStack(self, Projections: 'itkImageF3') -> "void":
        """SetInputProjectionStack(rtkSubSelectImageFilterIF3 self, itkImageF3 Projections)"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_SetInputProjectionStack(self, Projections)


    def GetInputProjectionStack(self) -> "itkImageF3_ConstPointer":
        """GetInputProjectionStack(rtkSubSelectImageFilterIF3 self) -> itkImageF3_ConstPointer"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetInputProjectionStack(self)


    def SetInputGeometry(self, _arg: 'rtkThreeDCircularProjectionGeometry') -> "void":
        """SetInputGeometry(rtkSubSelectImageFilterIF3 self, rtkThreeDCircularProjectionGeometry _arg)"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_SetInputGeometry(self, _arg)


    def GetModifiableInputGeometry(self) -> "rtkThreeDCircularProjectionGeometry *":
        """GetModifiableInputGeometry(rtkSubSelectImageFilterIF3 self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetModifiableInputGeometry(self)


    def GetInputGeometry(self, *args) -> "rtkThreeDCircularProjectionGeometry *":
        """
        GetInputGeometry(rtkSubSelectImageFilterIF3 self) -> rtkThreeDCircularProjectionGeometry
        GetInputGeometry(rtkSubSelectImageFilterIF3 self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetInputGeometry(self, *args)


    def GetSelectedProjections(self) -> "std::vector< bool,std::allocator< bool > >":
        """GetSelectedProjections(rtkSubSelectImageFilterIF3 self) -> vectorB"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetSelectedProjections(self)


    def GetOutputGeometry(self) -> "rtkThreeDCircularProjectionGeometry_Pointer":
        """GetOutputGeometry(rtkSubSelectImageFilterIF3 self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetOutputGeometry(self)

    __swig_destroy__ = _rtkSubSelectImageFilterPython.delete_rtkSubSelectImageFilterIF3

    def cast(obj: 'itkLightObject') -> "rtkSubSelectImageFilterIF3 *":
        """cast(itkLightObject obj) -> rtkSubSelectImageFilterIF3"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkSubSelectImageFilterIF3

        Create a new object of the class rtkSubSelectImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSubSelectImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkSubSelectImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkSubSelectImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkSubSelectImageFilterIF3.SetInputProjectionStack = new_instancemethod(_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_SetInputProjectionStack, None, rtkSubSelectImageFilterIF3)
rtkSubSelectImageFilterIF3.GetInputProjectionStack = new_instancemethod(_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetInputProjectionStack, None, rtkSubSelectImageFilterIF3)
rtkSubSelectImageFilterIF3.SetInputGeometry = new_instancemethod(_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_SetInputGeometry, None, rtkSubSelectImageFilterIF3)
rtkSubSelectImageFilterIF3.GetModifiableInputGeometry = new_instancemethod(_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetModifiableInputGeometry, None, rtkSubSelectImageFilterIF3)
rtkSubSelectImageFilterIF3.GetInputGeometry = new_instancemethod(_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetInputGeometry, None, rtkSubSelectImageFilterIF3)
rtkSubSelectImageFilterIF3.GetSelectedProjections = new_instancemethod(_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetSelectedProjections, None, rtkSubSelectImageFilterIF3)
rtkSubSelectImageFilterIF3.GetOutputGeometry = new_instancemethod(_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetOutputGeometry, None, rtkSubSelectImageFilterIF3)
rtkSubSelectImageFilterIF3_swigregister = _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_swigregister
rtkSubSelectImageFilterIF3_swigregister(rtkSubSelectImageFilterIF3)

def rtkSubSelectImageFilterIF3_cast(obj: 'itkLightObject') -> "rtkSubSelectImageFilterIF3 *":
    """rtkSubSelectImageFilterIF3_cast(itkLightObject obj) -> rtkSubSelectImageFilterIF3"""
    return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_cast(obj)


def sub_select_image_filter(*args, **kwargs):
    """Procedural interface for SubSelectImageFilter"""
    import itk
    instance = itk.SubSelectImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def sub_select_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.SubSelectImageFilter, itkTemplate.itkTemplate):
        sub_select_image_filter.__doc__ = itk.SubSelectImageFilter.values()[0].__doc__
    else:
        sub_select_image_filter.__doc__ = itk.SubSelectImageFilter.__doc__




