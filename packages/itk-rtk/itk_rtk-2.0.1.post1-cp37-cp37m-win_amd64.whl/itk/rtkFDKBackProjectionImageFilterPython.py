# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkFDKBackProjectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkFDKBackProjectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkFDKBackProjectionImageFilterPython
            return _rtkFDKBackProjectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkFDKBackProjectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkFDKBackProjectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkFDKBackProjectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkPointPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkRGBAPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import rtkBackProjectionImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython

def rtkFDKBackProjectionImageFilterIF3IF3_New():
  return rtkFDKBackProjectionImageFilterIF3IF3.New()

class rtkFDKBackProjectionImageFilterIF3IF3(rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterIF3IF3):
    """Proxy of C++ rtkFDKBackProjectionImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkFDKBackProjectionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> rtkFDKBackProjectionImageFilterIF3IF3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkFDKBackProjectionImageFilterIF3IF3_Pointer":
        """Clone(rtkFDKBackProjectionImageFilterIF3IF3 self) -> rtkFDKBackProjectionImageFilterIF3IF3_Pointer"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3_Clone(self)

    __swig_destroy__ = _rtkFDKBackProjectionImageFilterPython.delete_rtkFDKBackProjectionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "rtkFDKBackProjectionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> rtkFDKBackProjectionImageFilterIF3IF3"""
        return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkFDKBackProjectionImageFilterIF3IF3

        Create a new object of the class rtkFDKBackProjectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKBackProjectionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkFDKBackProjectionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkFDKBackProjectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkFDKBackProjectionImageFilterIF3IF3.Clone = new_instancemethod(_rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3_Clone, None, rtkFDKBackProjectionImageFilterIF3IF3)
rtkFDKBackProjectionImageFilterIF3IF3_swigregister = _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3_swigregister
rtkFDKBackProjectionImageFilterIF3IF3_swigregister(rtkFDKBackProjectionImageFilterIF3IF3)

def rtkFDKBackProjectionImageFilterIF3IF3___New_orig__() -> "rtkFDKBackProjectionImageFilterIF3IF3_Pointer":
    """rtkFDKBackProjectionImageFilterIF3IF3___New_orig__() -> rtkFDKBackProjectionImageFilterIF3IF3_Pointer"""
    return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3___New_orig__()

def rtkFDKBackProjectionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "rtkFDKBackProjectionImageFilterIF3IF3 *":
    """rtkFDKBackProjectionImageFilterIF3IF3_cast(itkLightObject obj) -> rtkFDKBackProjectionImageFilterIF3IF3"""
    return _rtkFDKBackProjectionImageFilterPython.rtkFDKBackProjectionImageFilterIF3IF3_cast(obj)


def fdk_back_projection_image_filter(*args, **kwargs):
    """Procedural interface for FDKBackProjectionImageFilter"""
    import itk
    instance = itk.FDKBackProjectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fdk_back_projection_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.FDKBackProjectionImageFilter, itkTemplate.itkTemplate):
        fdk_back_projection_image_filter.__doc__ = itk.FDKBackProjectionImageFilter.values()[0].__doc__
    else:
        fdk_back_projection_image_filter.__doc__ = itk.FDKBackProjectionImageFilter.__doc__




