# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkLagCorrectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkLagCorrectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkLagCorrectionImageFilterPython
            return _rtkLagCorrectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkLagCorrectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkLagCorrectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkLagCorrectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkImagePython
import itkPointPython
import itkRGBPixelPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterAPython

def rtkLagCorrectionImageFilterIF34_New():
  return rtkLagCorrectionImageFilterIF34.New()


def rtkLagCorrectionImageFilterIF33_New():
  return rtkLagCorrectionImageFilterIF33.New()


def rtkLagCorrectionImageFilterIF32_New():
  return rtkLagCorrectionImageFilterIF32.New()


def rtkLagCorrectionImageFilterIF31_New():
  return rtkLagCorrectionImageFilterIF31.New()

class rtkLagCorrectionImageFilterIF31(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ rtkLagCorrectionImageFilterIF31 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkLagCorrectionImageFilterIF31_Pointer":
        """__New_orig__() -> rtkLagCorrectionImageFilterIF31_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkLagCorrectionImageFilterIF31_Pointer":
        """Clone(rtkLagCorrectionImageFilterIF31 self) -> rtkLagCorrectionImageFilterIF31_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_Clone(self)


    def GetA(self) -> "itkVectorF1":
        """GetA(rtkLagCorrectionImageFilterIF31 self) -> itkVectorF1"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_GetA(self)


    def GetB(self) -> "itkVectorF1":
        """GetB(rtkLagCorrectionImageFilterIF31 self) -> itkVectorF1"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_GetB(self)


    def SetCoefficients(self, A: 'itkVectorF1', B: 'itkVectorF1') -> "void":
        """SetCoefficients(rtkLagCorrectionImageFilterIF31 self, itkVectorF1 A, itkVectorF1 B)"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_SetCoefficients(self, A, B)

    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF31

    def cast(obj: 'itkLightObject') -> "rtkLagCorrectionImageFilterIF31 *":
        """cast(itkLightObject obj) -> rtkLagCorrectionImageFilterIF31"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF31

        Create a new object of the class rtkLagCorrectionImageFilterIF31 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF31.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF31.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkLagCorrectionImageFilterIF31.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkLagCorrectionImageFilterIF31.Clone = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_Clone, None, rtkLagCorrectionImageFilterIF31)
rtkLagCorrectionImageFilterIF31.GetA = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_GetA, None, rtkLagCorrectionImageFilterIF31)
rtkLagCorrectionImageFilterIF31.GetB = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_GetB, None, rtkLagCorrectionImageFilterIF31)
rtkLagCorrectionImageFilterIF31.SetCoefficients = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_SetCoefficients, None, rtkLagCorrectionImageFilterIF31)
rtkLagCorrectionImageFilterIF31_swigregister = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_swigregister
rtkLagCorrectionImageFilterIF31_swigregister(rtkLagCorrectionImageFilterIF31)

def rtkLagCorrectionImageFilterIF31___New_orig__() -> "rtkLagCorrectionImageFilterIF31_Pointer":
    """rtkLagCorrectionImageFilterIF31___New_orig__() -> rtkLagCorrectionImageFilterIF31_Pointer"""
    return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31___New_orig__()

def rtkLagCorrectionImageFilterIF31_cast(obj: 'itkLightObject') -> "rtkLagCorrectionImageFilterIF31 *":
    """rtkLagCorrectionImageFilterIF31_cast(itkLightObject obj) -> rtkLagCorrectionImageFilterIF31"""
    return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_cast(obj)

class rtkLagCorrectionImageFilterIF32(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ rtkLagCorrectionImageFilterIF32 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkLagCorrectionImageFilterIF32_Pointer":
        """__New_orig__() -> rtkLagCorrectionImageFilterIF32_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkLagCorrectionImageFilterIF32_Pointer":
        """Clone(rtkLagCorrectionImageFilterIF32 self) -> rtkLagCorrectionImageFilterIF32_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_Clone(self)


    def GetA(self) -> "itkVectorF2":
        """GetA(rtkLagCorrectionImageFilterIF32 self) -> itkVectorF2"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_GetA(self)


    def GetB(self) -> "itkVectorF2":
        """GetB(rtkLagCorrectionImageFilterIF32 self) -> itkVectorF2"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_GetB(self)


    def SetCoefficients(self, A: 'itkVectorF2', B: 'itkVectorF2') -> "void":
        """SetCoefficients(rtkLagCorrectionImageFilterIF32 self, itkVectorF2 A, itkVectorF2 B)"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_SetCoefficients(self, A, B)

    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF32

    def cast(obj: 'itkLightObject') -> "rtkLagCorrectionImageFilterIF32 *":
        """cast(itkLightObject obj) -> rtkLagCorrectionImageFilterIF32"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF32

        Create a new object of the class rtkLagCorrectionImageFilterIF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkLagCorrectionImageFilterIF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkLagCorrectionImageFilterIF32.Clone = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_Clone, None, rtkLagCorrectionImageFilterIF32)
rtkLagCorrectionImageFilterIF32.GetA = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_GetA, None, rtkLagCorrectionImageFilterIF32)
rtkLagCorrectionImageFilterIF32.GetB = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_GetB, None, rtkLagCorrectionImageFilterIF32)
rtkLagCorrectionImageFilterIF32.SetCoefficients = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_SetCoefficients, None, rtkLagCorrectionImageFilterIF32)
rtkLagCorrectionImageFilterIF32_swigregister = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_swigregister
rtkLagCorrectionImageFilterIF32_swigregister(rtkLagCorrectionImageFilterIF32)

def rtkLagCorrectionImageFilterIF32___New_orig__() -> "rtkLagCorrectionImageFilterIF32_Pointer":
    """rtkLagCorrectionImageFilterIF32___New_orig__() -> rtkLagCorrectionImageFilterIF32_Pointer"""
    return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32___New_orig__()

def rtkLagCorrectionImageFilterIF32_cast(obj: 'itkLightObject') -> "rtkLagCorrectionImageFilterIF32 *":
    """rtkLagCorrectionImageFilterIF32_cast(itkLightObject obj) -> rtkLagCorrectionImageFilterIF32"""
    return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_cast(obj)

class rtkLagCorrectionImageFilterIF33(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ rtkLagCorrectionImageFilterIF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkLagCorrectionImageFilterIF33_Pointer":
        """__New_orig__() -> rtkLagCorrectionImageFilterIF33_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkLagCorrectionImageFilterIF33_Pointer":
        """Clone(rtkLagCorrectionImageFilterIF33 self) -> rtkLagCorrectionImageFilterIF33_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_Clone(self)


    def GetA(self) -> "itkVectorF3":
        """GetA(rtkLagCorrectionImageFilterIF33 self) -> itkVectorF3"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_GetA(self)


    def GetB(self) -> "itkVectorF3":
        """GetB(rtkLagCorrectionImageFilterIF33 self) -> itkVectorF3"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_GetB(self)


    def SetCoefficients(self, A: 'itkVectorF3', B: 'itkVectorF3') -> "void":
        """SetCoefficients(rtkLagCorrectionImageFilterIF33 self, itkVectorF3 A, itkVectorF3 B)"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_SetCoefficients(self, A, B)

    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF33

    def cast(obj: 'itkLightObject') -> "rtkLagCorrectionImageFilterIF33 *":
        """cast(itkLightObject obj) -> rtkLagCorrectionImageFilterIF33"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF33

        Create a new object of the class rtkLagCorrectionImageFilterIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkLagCorrectionImageFilterIF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkLagCorrectionImageFilterIF33.Clone = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_Clone, None, rtkLagCorrectionImageFilterIF33)
rtkLagCorrectionImageFilterIF33.GetA = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_GetA, None, rtkLagCorrectionImageFilterIF33)
rtkLagCorrectionImageFilterIF33.GetB = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_GetB, None, rtkLagCorrectionImageFilterIF33)
rtkLagCorrectionImageFilterIF33.SetCoefficients = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_SetCoefficients, None, rtkLagCorrectionImageFilterIF33)
rtkLagCorrectionImageFilterIF33_swigregister = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_swigregister
rtkLagCorrectionImageFilterIF33_swigregister(rtkLagCorrectionImageFilterIF33)

def rtkLagCorrectionImageFilterIF33___New_orig__() -> "rtkLagCorrectionImageFilterIF33_Pointer":
    """rtkLagCorrectionImageFilterIF33___New_orig__() -> rtkLagCorrectionImageFilterIF33_Pointer"""
    return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33___New_orig__()

def rtkLagCorrectionImageFilterIF33_cast(obj: 'itkLightObject') -> "rtkLagCorrectionImageFilterIF33 *":
    """rtkLagCorrectionImageFilterIF33_cast(itkLightObject obj) -> rtkLagCorrectionImageFilterIF33"""
    return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_cast(obj)

class rtkLagCorrectionImageFilterIF34(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ rtkLagCorrectionImageFilterIF34 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkLagCorrectionImageFilterIF34_Pointer":
        """__New_orig__() -> rtkLagCorrectionImageFilterIF34_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkLagCorrectionImageFilterIF34_Pointer":
        """Clone(rtkLagCorrectionImageFilterIF34 self) -> rtkLagCorrectionImageFilterIF34_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_Clone(self)


    def GetA(self) -> "itkVectorF4":
        """GetA(rtkLagCorrectionImageFilterIF34 self) -> itkVectorF4"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_GetA(self)


    def GetB(self) -> "itkVectorF4":
        """GetB(rtkLagCorrectionImageFilterIF34 self) -> itkVectorF4"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_GetB(self)


    def SetCoefficients(self, A: 'itkVectorF4', B: 'itkVectorF4') -> "void":
        """SetCoefficients(rtkLagCorrectionImageFilterIF34 self, itkVectorF4 A, itkVectorF4 B)"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_SetCoefficients(self, A, B)

    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF34

    def cast(obj: 'itkLightObject') -> "rtkLagCorrectionImageFilterIF34 *":
        """cast(itkLightObject obj) -> rtkLagCorrectionImageFilterIF34"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF34

        Create a new object of the class rtkLagCorrectionImageFilterIF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF34.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF34.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkLagCorrectionImageFilterIF34.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkLagCorrectionImageFilterIF34.Clone = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_Clone, None, rtkLagCorrectionImageFilterIF34)
rtkLagCorrectionImageFilterIF34.GetA = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_GetA, None, rtkLagCorrectionImageFilterIF34)
rtkLagCorrectionImageFilterIF34.GetB = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_GetB, None, rtkLagCorrectionImageFilterIF34)
rtkLagCorrectionImageFilterIF34.SetCoefficients = new_instancemethod(_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_SetCoefficients, None, rtkLagCorrectionImageFilterIF34)
rtkLagCorrectionImageFilterIF34_swigregister = _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_swigregister
rtkLagCorrectionImageFilterIF34_swigregister(rtkLagCorrectionImageFilterIF34)

def rtkLagCorrectionImageFilterIF34___New_orig__() -> "rtkLagCorrectionImageFilterIF34_Pointer":
    """rtkLagCorrectionImageFilterIF34___New_orig__() -> rtkLagCorrectionImageFilterIF34_Pointer"""
    return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34___New_orig__()

def rtkLagCorrectionImageFilterIF34_cast(obj: 'itkLightObject') -> "rtkLagCorrectionImageFilterIF34 *":
    """rtkLagCorrectionImageFilterIF34_cast(itkLightObject obj) -> rtkLagCorrectionImageFilterIF34"""
    return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_cast(obj)


def lag_correction_image_filter(*args, **kwargs):
    """Procedural interface for LagCorrectionImageFilter"""
    import itk
    instance = itk.LagCorrectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def lag_correction_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.LagCorrectionImageFilter, itkTemplate.itkTemplate):
        lag_correction_image_filter.__doc__ = itk.LagCorrectionImageFilter.values()[0].__doc__
    else:
        lag_correction_image_filter.__doc__ = itk.LagCorrectionImageFilter.__doc__




