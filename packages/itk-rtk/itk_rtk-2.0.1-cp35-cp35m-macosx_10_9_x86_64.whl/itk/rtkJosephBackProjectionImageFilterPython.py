# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkJosephBackProjectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkJosephBackProjectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkJosephBackProjectionImageFilterPython
            return _rtkJosephBackProjectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkJosephBackProjectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkJosephBackProjectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkJosephBackProjectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import rtkBackProjectionImageFilterPython
import ITKCommonBasePython
import pyBasePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkImagePython
import itkPointPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkRGBPixelPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterAPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython

def rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_New():
  return rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.New()

class rtkFunctorSplatWeightMultiplicationFDF(object):
    """Proxy of C++ rtkFunctorSplatWeightMultiplicationFDF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackProjectionImageFilterPython.delete_rtkFunctorSplatWeightMultiplicationFDF

    def __ne__(self, arg0: 'rtkFunctorSplatWeightMultiplicationFDF') -> "bool":
        """__ne__(rtkFunctorSplatWeightMultiplicationFDF self, rtkFunctorSplatWeightMultiplicationFDF arg0) -> bool"""
        return _rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___ne__(self, arg0)


    def __eq__(self, other: 'rtkFunctorSplatWeightMultiplicationFDF') -> "bool":
        """__eq__(rtkFunctorSplatWeightMultiplicationFDF self, rtkFunctorSplatWeightMultiplicationFDF other) -> bool"""
        return _rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___eq__(self, other)


    def __call__(self, rayValue: 'float const &', output: 'float &', stepLengthInVoxel: 'double const', voxelSize: 'double const', weight: 'double const') -> "void":
        """__call__(rtkFunctorSplatWeightMultiplicationFDF self, float const & rayValue, float & output, double const stepLengthInVoxel, double const voxelSize, double const weight)"""
        return _rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___call__(self, rayValue, output, stepLengthInVoxel, voxelSize, weight)


    def __init__(self, *args):
        """
        __init__(rtkFunctorSplatWeightMultiplicationFDF self) -> rtkFunctorSplatWeightMultiplicationFDF
        __init__(rtkFunctorSplatWeightMultiplicationFDF self, rtkFunctorSplatWeightMultiplicationFDF arg0) -> rtkFunctorSplatWeightMultiplicationFDF
        """
        _rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF_swiginit(self, _rtkJosephBackProjectionImageFilterPython.new_rtkFunctorSplatWeightMultiplicationFDF(*args))
rtkFunctorSplatWeightMultiplicationFDF.__ne__ = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___ne__, None, rtkFunctorSplatWeightMultiplicationFDF)
rtkFunctorSplatWeightMultiplicationFDF.__eq__ = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___eq__, None, rtkFunctorSplatWeightMultiplicationFDF)
rtkFunctorSplatWeightMultiplicationFDF.__call__ = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___call__, None, rtkFunctorSplatWeightMultiplicationFDF)
rtkFunctorSplatWeightMultiplicationFDF_swigregister = _rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF_swigregister
rtkFunctorSplatWeightMultiplicationFDF_swigregister(rtkFunctorSplatWeightMultiplicationFDF)

class rtkJosephBackProjectionImageFilterIF3IF3SWMFDF(rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterIF3IF3):
    """Proxy of C++ rtkJosephBackProjectionImageFilterIF3IF3SWMFDF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Pointer":
        """__New_orig__() -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Pointer"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Pointer":
        """Clone(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Pointer"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Clone(self)


    def GetInterpolationWeightMultiplication(self, *args) -> "rtk::Functor::InterpolationWeightMultiplicationBackProjection< float,float,float > const &":
        """
        GetInterpolationWeightMultiplication(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> rtk::Functor::InterpolationWeightMultiplicationBackProjection< float,float,float >
        GetInterpolationWeightMultiplication(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> rtk::Functor::InterpolationWeightMultiplicationBackProjection< float,float,float > const &
        """
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetInterpolationWeightMultiplication(self, *args)


    def SetInterpolationWeightMultiplication(self, _arg: 'rtk::Functor::InterpolationWeightMultiplicationBackProjection< float,float,float > const &') -> "void":
        """SetInterpolationWeightMultiplication(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self, rtk::Functor::InterpolationWeightMultiplicationBackProjection< float,float,float > const & _arg)"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetInterpolationWeightMultiplication(self, _arg)


    def GetSplatWeightMultiplication(self, *args) -> "rtkFunctorSplatWeightMultiplicationFDF const &":
        """
        GetSplatWeightMultiplication(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> rtkFunctorSplatWeightMultiplicationFDF
        GetSplatWeightMultiplication(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> rtkFunctorSplatWeightMultiplicationFDF
        """
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSplatWeightMultiplication(self, *args)


    def SetSplatWeightMultiplication(self, _arg: 'rtkFunctorSplatWeightMultiplicationFDF') -> "void":
        """SetSplatWeightMultiplication(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self, rtkFunctorSplatWeightMultiplicationFDF _arg)"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSplatWeightMultiplication(self, _arg)


    def GetSumAlongRay(self, *args) -> "rtk::Functor::ValueAlongRay< float,float > const &":
        """
        GetSumAlongRay(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> rtk::Functor::ValueAlongRay< float,float >
        GetSumAlongRay(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> rtk::Functor::ValueAlongRay< float,float > const &
        """
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSumAlongRay(self, *args)


    def SetSumAlongRay(self, _arg: 'rtk::Functor::ValueAlongRay< float,float > const &') -> "void":
        """SetSumAlongRay(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self, rtk::Functor::ValueAlongRay< float,float > const & _arg)"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSumAlongRay(self, _arg)


    def GetInferiorClip(self) -> "double":
        """GetInferiorClip(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> double"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetInferiorClip(self)


    def SetInferiorClip(self, _arg: 'double const') -> "void":
        """SetInferiorClip(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self, double const _arg)"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetInferiorClip(self, _arg)


    def GetSuperiorClip(self) -> "double":
        """GetSuperiorClip(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self) -> double"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSuperiorClip(self)


    def SetSuperiorClip(self, _arg: 'double const') -> "void":
        """SetSuperiorClip(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF self, double const _arg)"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSuperiorClip(self, _arg)

    __swig_destroy__ = _rtkJosephBackProjectionImageFilterPython.delete_rtkJosephBackProjectionImageFilterIF3IF3SWMFDF

    def cast(obj: 'itkLightObject') -> "rtkJosephBackProjectionImageFilterIF3IF3SWMFDF *":
        """cast(itkLightObject obj) -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDF"""
        return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDF

        Create a new object of the class rtkJosephBackProjectionImageFilterIF3IF3SWMFDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.Clone = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Clone, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.GetInterpolationWeightMultiplication = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetInterpolationWeightMultiplication, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.SetInterpolationWeightMultiplication = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetInterpolationWeightMultiplication, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.GetSplatWeightMultiplication = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSplatWeightMultiplication, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.SetSplatWeightMultiplication = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSplatWeightMultiplication, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.GetSumAlongRay = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSumAlongRay, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.SetSumAlongRay = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSumAlongRay, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.GetInferiorClip = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetInferiorClip, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.SetInferiorClip = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetInferiorClip, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.GetSuperiorClip = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSuperiorClip, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.SetSuperiorClip = new_instancemethod(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSuperiorClip, None, rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_swigregister = _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_swigregister
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_swigregister(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)

def rtkJosephBackProjectionImageFilterIF3IF3SWMFDF___New_orig__() -> "rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Pointer":
    """rtkJosephBackProjectionImageFilterIF3IF3SWMFDF___New_orig__() -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Pointer"""
    return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF___New_orig__()

def rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_cast(obj: 'itkLightObject') -> "rtkJosephBackProjectionImageFilterIF3IF3SWMFDF *":
    """rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_cast(itkLightObject obj) -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDF"""
    return _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_cast(obj)


def joseph_back_projection_image_filter(*args, **kwargs):
    """Procedural interface for JosephBackProjectionImageFilter"""
    import itk
    instance = itk.JosephBackProjectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def joseph_back_projection_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.JosephBackProjectionImageFilter, itkTemplate.itkTemplate):
        joseph_back_projection_image_filter.__doc__ = itk.JosephBackProjectionImageFilter.values()[0].__doc__
    else:
        joseph_back_projection_image_filter.__doc__ = itk.JosephBackProjectionImageFilter.__doc__




