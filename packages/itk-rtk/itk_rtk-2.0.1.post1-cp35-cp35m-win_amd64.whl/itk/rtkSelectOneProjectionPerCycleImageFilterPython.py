# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkSelectOneProjectionPerCycleImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkSelectOneProjectionPerCycleImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkSelectOneProjectionPerCycleImageFilterPython
            return _rtkSelectOneProjectionPerCycleImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkSelectOneProjectionPerCycleImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkSelectOneProjectionPerCycleImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkSelectOneProjectionPerCycleImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import rtkSubSelectImageFilterPython
import itkImageRTKPython
import itkImagePython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkOffsetPython
import itkSizePython
import itkRGBPixelPython
import itkCovariantVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython
import itkImageRegionRTKPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def rtkSelectOneProjectionPerCycleImageFilterIF3_New():
  return rtkSelectOneProjectionPerCycleImageFilterIF3.New()

class rtkSelectOneProjectionPerCycleImageFilterIF3(rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3):
    """Proxy of C++ rtkSelectOneProjectionPerCycleImageFilterIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkSelectOneProjectionPerCycleImageFilterIF3_Pointer":
        """__New_orig__() -> rtkSelectOneProjectionPerCycleImageFilterIF3_Pointer"""
        return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkSelectOneProjectionPerCycleImageFilterIF3_Pointer":
        """Clone(rtkSelectOneProjectionPerCycleImageFilterIF3 self) -> rtkSelectOneProjectionPerCycleImageFilterIF3_Pointer"""
        return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_Clone(self)


    def GetSignalFilename(self) -> "std::string":
        """GetSignalFilename(rtkSelectOneProjectionPerCycleImageFilterIF3 self) -> std::string"""
        return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_GetSignalFilename(self)


    def SetSignalFilename(self, _arg: 'std::string const') -> "void":
        """SetSignalFilename(rtkSelectOneProjectionPerCycleImageFilterIF3 self, std::string const _arg)"""
        return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_SetSignalFilename(self, _arg)


    def SetPhase(self, _arg: 'double const') -> "void":
        """SetPhase(rtkSelectOneProjectionPerCycleImageFilterIF3 self, double const _arg)"""
        return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_SetPhase(self, _arg)


    def GetPhase(self) -> "double":
        """GetPhase(rtkSelectOneProjectionPerCycleImageFilterIF3 self) -> double"""
        return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_GetPhase(self)

    __swig_destroy__ = _rtkSelectOneProjectionPerCycleImageFilterPython.delete_rtkSelectOneProjectionPerCycleImageFilterIF3

    def cast(obj: 'itkLightObject') -> "rtkSelectOneProjectionPerCycleImageFilterIF3 *":
        """cast(itkLightObject obj) -> rtkSelectOneProjectionPerCycleImageFilterIF3"""
        return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkSelectOneProjectionPerCycleImageFilterIF3

        Create a new object of the class rtkSelectOneProjectionPerCycleImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSelectOneProjectionPerCycleImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkSelectOneProjectionPerCycleImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkSelectOneProjectionPerCycleImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkSelectOneProjectionPerCycleImageFilterIF3.Clone = new_instancemethod(_rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_Clone, None, rtkSelectOneProjectionPerCycleImageFilterIF3)
rtkSelectOneProjectionPerCycleImageFilterIF3.GetSignalFilename = new_instancemethod(_rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_GetSignalFilename, None, rtkSelectOneProjectionPerCycleImageFilterIF3)
rtkSelectOneProjectionPerCycleImageFilterIF3.SetSignalFilename = new_instancemethod(_rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_SetSignalFilename, None, rtkSelectOneProjectionPerCycleImageFilterIF3)
rtkSelectOneProjectionPerCycleImageFilterIF3.SetPhase = new_instancemethod(_rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_SetPhase, None, rtkSelectOneProjectionPerCycleImageFilterIF3)
rtkSelectOneProjectionPerCycleImageFilterIF3.GetPhase = new_instancemethod(_rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_GetPhase, None, rtkSelectOneProjectionPerCycleImageFilterIF3)
rtkSelectOneProjectionPerCycleImageFilterIF3_swigregister = _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_swigregister
rtkSelectOneProjectionPerCycleImageFilterIF3_swigregister(rtkSelectOneProjectionPerCycleImageFilterIF3)

def rtkSelectOneProjectionPerCycleImageFilterIF3___New_orig__() -> "rtkSelectOneProjectionPerCycleImageFilterIF3_Pointer":
    """rtkSelectOneProjectionPerCycleImageFilterIF3___New_orig__() -> rtkSelectOneProjectionPerCycleImageFilterIF3_Pointer"""
    return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3___New_orig__()

def rtkSelectOneProjectionPerCycleImageFilterIF3_cast(obj: 'itkLightObject') -> "rtkSelectOneProjectionPerCycleImageFilterIF3 *":
    """rtkSelectOneProjectionPerCycleImageFilterIF3_cast(itkLightObject obj) -> rtkSelectOneProjectionPerCycleImageFilterIF3"""
    return _rtkSelectOneProjectionPerCycleImageFilterPython.rtkSelectOneProjectionPerCycleImageFilterIF3_cast(obj)


def select_one_projection_per_cycle_image_filter(*args, **kwargs):
    """Procedural interface for SelectOneProjectionPerCycleImageFilter"""
    import itk
    instance = itk.SelectOneProjectionPerCycleImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def select_one_projection_per_cycle_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.SelectOneProjectionPerCycleImageFilter, itkTemplate.itkTemplate):
        select_one_projection_per_cycle_image_filter.__doc__ = itk.SelectOneProjectionPerCycleImageFilter.values()[0].__doc__
    else:
        select_one_projection_per_cycle_image_filter.__doc__ = itk.SelectOneProjectionPerCycleImageFilter.__doc__




