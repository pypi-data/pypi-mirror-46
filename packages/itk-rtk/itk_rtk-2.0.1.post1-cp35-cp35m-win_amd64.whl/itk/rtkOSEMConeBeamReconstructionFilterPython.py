# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkOSEMConeBeamReconstructionFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkOSEMConeBeamReconstructionFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkOSEMConeBeamReconstructionFilterPython
            return _rtkOSEMConeBeamReconstructionFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkOSEMConeBeamReconstructionFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkOSEMConeBeamReconstructionFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkOSEMConeBeamReconstructionFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import rtkIterativeConeBeamReconstructionFilterPython
import itkImageToImageFilterRTKPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import stdcomplexPython
import pyBasePython
import ITKCommonBasePython
import itkImagePython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkOffsetPython
import itkSizePython
import itkRGBPixelPython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkImageSourceRTKPython
import itkImageSourceCommonPython
import itkImageRegionRTKPython
import itkImageRTKPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython
import itkImageSourcePython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import rtkForwardProjectionImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython
import rtkBackProjectionImageFilterPython

def rtkOSEMConeBeamReconstructionFilterIF3IF3_New():
  return rtkOSEMConeBeamReconstructionFilterIF3IF3.New()

class rtkOSEMConeBeamReconstructionFilterIF3IF3(rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3):
    """Proxy of C++ rtkOSEMConeBeamReconstructionFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkOSEMConeBeamReconstructionFilterIF3IF3_Pointer":
        """__New_orig__() -> rtkOSEMConeBeamReconstructionFilterIF3IF3_Pointer"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkOSEMConeBeamReconstructionFilterIF3IF3_Pointer":
        """Clone(rtkOSEMConeBeamReconstructionFilterIF3IF3 self) -> rtkOSEMConeBeamReconstructionFilterIF3IF3_Pointer"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_Clone(self)


    def GetModifiableGeometry(self) -> "rtkThreeDCircularProjectionGeometry *":
        """GetModifiableGeometry(rtkOSEMConeBeamReconstructionFilterIF3IF3 self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_GetModifiableGeometry(self)


    def GetGeometry(self, *args) -> "rtkThreeDCircularProjectionGeometry *":
        """
        GetGeometry(rtkOSEMConeBeamReconstructionFilterIF3IF3 self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(rtkOSEMConeBeamReconstructionFilterIF3IF3 self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_GetGeometry(self, *args)


    def SetGeometry(self, _arg: 'rtkThreeDCircularProjectionGeometry') -> "void":
        """SetGeometry(rtkOSEMConeBeamReconstructionFilterIF3IF3 self, rtkThreeDCircularProjectionGeometry _arg)"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_SetGeometry(self, _arg)


    def GetNumberOfIterations(self) -> "unsigned int":
        """GetNumberOfIterations(rtkOSEMConeBeamReconstructionFilterIF3IF3 self) -> unsigned int"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_GetNumberOfIterations(self)


    def SetNumberOfIterations(self, _arg: 'unsigned int const') -> "void":
        """SetNumberOfIterations(rtkOSEMConeBeamReconstructionFilterIF3IF3 self, unsigned int const _arg)"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_SetNumberOfIterations(self, _arg)


    def GetNumberOfProjectionsPerSubset(self) -> "unsigned int":
        """GetNumberOfProjectionsPerSubset(rtkOSEMConeBeamReconstructionFilterIF3IF3 self) -> unsigned int"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_GetNumberOfProjectionsPerSubset(self)


    def SetNumberOfProjectionsPerSubset(self, _arg: 'unsigned int const') -> "void":
        """SetNumberOfProjectionsPerSubset(rtkOSEMConeBeamReconstructionFilterIF3IF3 self, unsigned int const _arg)"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_SetNumberOfProjectionsPerSubset(self, _arg)

    __swig_destroy__ = _rtkOSEMConeBeamReconstructionFilterPython.delete_rtkOSEMConeBeamReconstructionFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "rtkOSEMConeBeamReconstructionFilterIF3IF3 *":
        """cast(itkLightObject obj) -> rtkOSEMConeBeamReconstructionFilterIF3IF3"""
        return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkOSEMConeBeamReconstructionFilterIF3IF3

        Create a new object of the class rtkOSEMConeBeamReconstructionFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkOSEMConeBeamReconstructionFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkOSEMConeBeamReconstructionFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkOSEMConeBeamReconstructionFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkOSEMConeBeamReconstructionFilterIF3IF3.Clone = new_instancemethod(_rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_Clone, None, rtkOSEMConeBeamReconstructionFilterIF3IF3)
rtkOSEMConeBeamReconstructionFilterIF3IF3.GetModifiableGeometry = new_instancemethod(_rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_GetModifiableGeometry, None, rtkOSEMConeBeamReconstructionFilterIF3IF3)
rtkOSEMConeBeamReconstructionFilterIF3IF3.GetGeometry = new_instancemethod(_rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_GetGeometry, None, rtkOSEMConeBeamReconstructionFilterIF3IF3)
rtkOSEMConeBeamReconstructionFilterIF3IF3.SetGeometry = new_instancemethod(_rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_SetGeometry, None, rtkOSEMConeBeamReconstructionFilterIF3IF3)
rtkOSEMConeBeamReconstructionFilterIF3IF3.GetNumberOfIterations = new_instancemethod(_rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_GetNumberOfIterations, None, rtkOSEMConeBeamReconstructionFilterIF3IF3)
rtkOSEMConeBeamReconstructionFilterIF3IF3.SetNumberOfIterations = new_instancemethod(_rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_SetNumberOfIterations, None, rtkOSEMConeBeamReconstructionFilterIF3IF3)
rtkOSEMConeBeamReconstructionFilterIF3IF3.GetNumberOfProjectionsPerSubset = new_instancemethod(_rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_GetNumberOfProjectionsPerSubset, None, rtkOSEMConeBeamReconstructionFilterIF3IF3)
rtkOSEMConeBeamReconstructionFilterIF3IF3.SetNumberOfProjectionsPerSubset = new_instancemethod(_rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_SetNumberOfProjectionsPerSubset, None, rtkOSEMConeBeamReconstructionFilterIF3IF3)
rtkOSEMConeBeamReconstructionFilterIF3IF3_swigregister = _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_swigregister
rtkOSEMConeBeamReconstructionFilterIF3IF3_swigregister(rtkOSEMConeBeamReconstructionFilterIF3IF3)

def rtkOSEMConeBeamReconstructionFilterIF3IF3___New_orig__() -> "rtkOSEMConeBeamReconstructionFilterIF3IF3_Pointer":
    """rtkOSEMConeBeamReconstructionFilterIF3IF3___New_orig__() -> rtkOSEMConeBeamReconstructionFilterIF3IF3_Pointer"""
    return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3___New_orig__()

def rtkOSEMConeBeamReconstructionFilterIF3IF3_cast(obj: 'itkLightObject') -> "rtkOSEMConeBeamReconstructionFilterIF3IF3 *":
    """rtkOSEMConeBeamReconstructionFilterIF3IF3_cast(itkLightObject obj) -> rtkOSEMConeBeamReconstructionFilterIF3IF3"""
    return _rtkOSEMConeBeamReconstructionFilterPython.rtkOSEMConeBeamReconstructionFilterIF3IF3_cast(obj)


def osem_cone_beam_reconstruction_filter(*args, **kwargs):
    """Procedural interface for OSEMConeBeamReconstructionFilter"""
    import itk
    instance = itk.OSEMConeBeamReconstructionFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def osem_cone_beam_reconstruction_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.OSEMConeBeamReconstructionFilter, itkTemplate.itkTemplate):
        osem_cone_beam_reconstruction_filter.__doc__ = itk.OSEMConeBeamReconstructionFilter.values()[0].__doc__
    else:
        osem_cone_beam_reconstruction_filter.__doc__ = itk.OSEMConeBeamReconstructionFilter.__doc__




