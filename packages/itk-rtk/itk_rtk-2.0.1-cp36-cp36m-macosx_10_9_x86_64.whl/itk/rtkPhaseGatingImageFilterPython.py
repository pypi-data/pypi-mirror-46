# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkPhaseGatingImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkPhaseGatingImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkPhaseGatingImageFilterPython
            return _rtkPhaseGatingImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkPhaseGatingImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkPhaseGatingImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkPhaseGatingImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import rtkSubSelectImageFilterPython
import itkImageRTKPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkFixedArrayPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkImagePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkPointRTKPython
import itkCovariantVectorRTKPython
import itkImageRegionRTKPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def rtkPhaseGatingImageFilterIF3_New():
  return rtkPhaseGatingImageFilterIF3.New()

class rtkPhaseGatingImageFilterIF3(rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3):
    """Proxy of C++ rtkPhaseGatingImageFilterIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkPhaseGatingImageFilterIF3_Pointer":
        """__New_orig__() -> rtkPhaseGatingImageFilterIF3_Pointer"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkPhaseGatingImageFilterIF3_Pointer":
        """Clone(rtkPhaseGatingImageFilterIF3 self) -> rtkPhaseGatingImageFilterIF3_Pointer"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_Clone(self)


    def SetPhasesFileName(self, _arg: 'std::string const') -> "void":
        """SetPhasesFileName(rtkPhaseGatingImageFilterIF3 self, std::string const _arg)"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_SetPhasesFileName(self, _arg)


    def GetPhasesFileName(self) -> "std::string":
        """GetPhasesFileName(rtkPhaseGatingImageFilterIF3 self) -> std::string"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetPhasesFileName(self)


    def SetGatingWindowWidth(self, _arg: 'float const') -> "void":
        """SetGatingWindowWidth(rtkPhaseGatingImageFilterIF3 self, float const _arg)"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_SetGatingWindowWidth(self, _arg)


    def GetGatingWindowWidth(self) -> "float":
        """GetGatingWindowWidth(rtkPhaseGatingImageFilterIF3 self) -> float"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWindowWidth(self)


    def SetGatingWindowCenter(self, _arg: 'float const') -> "void":
        """SetGatingWindowCenter(rtkPhaseGatingImageFilterIF3 self, float const _arg)"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_SetGatingWindowCenter(self, _arg)


    def GetGatingWindowCenter(self) -> "float":
        """GetGatingWindowCenter(rtkPhaseGatingImageFilterIF3 self) -> float"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWindowCenter(self)


    def SetGatingWindowShape(self, _arg: 'int const') -> "void":
        """SetGatingWindowShape(rtkPhaseGatingImageFilterIF3 self, int const _arg)"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_SetGatingWindowShape(self, _arg)


    def GetGatingWindowShape(self) -> "int":
        """GetGatingWindowShape(rtkPhaseGatingImageFilterIF3 self) -> int"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWindowShape(self)


    def GetGatingWeights(self) -> "std::vector< float,std::allocator< float > >":
        """GetGatingWeights(rtkPhaseGatingImageFilterIF3 self) -> vectorF"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWeights(self)


    def GetGatingWeightsOnSelectedProjections(self) -> "std::vector< float,std::allocator< float > >":
        """GetGatingWeightsOnSelectedProjections(rtkPhaseGatingImageFilterIF3 self) -> vectorF"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWeightsOnSelectedProjections(self)

    __swig_destroy__ = _rtkPhaseGatingImageFilterPython.delete_rtkPhaseGatingImageFilterIF3

    def cast(obj: 'itkLightObject') -> "rtkPhaseGatingImageFilterIF3 *":
        """cast(itkLightObject obj) -> rtkPhaseGatingImageFilterIF3"""
        return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkPhaseGatingImageFilterIF3

        Create a new object of the class rtkPhaseGatingImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkPhaseGatingImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkPhaseGatingImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkPhaseGatingImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkPhaseGatingImageFilterIF3.Clone = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_Clone, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.SetPhasesFileName = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_SetPhasesFileName, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.GetPhasesFileName = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetPhasesFileName, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.SetGatingWindowWidth = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_SetGatingWindowWidth, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.GetGatingWindowWidth = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWindowWidth, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.SetGatingWindowCenter = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_SetGatingWindowCenter, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.GetGatingWindowCenter = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWindowCenter, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.SetGatingWindowShape = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_SetGatingWindowShape, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.GetGatingWindowShape = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWindowShape, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.GetGatingWeights = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWeights, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3.GetGatingWeightsOnSelectedProjections = new_instancemethod(_rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_GetGatingWeightsOnSelectedProjections, None, rtkPhaseGatingImageFilterIF3)
rtkPhaseGatingImageFilterIF3_swigregister = _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_swigregister
rtkPhaseGatingImageFilterIF3_swigregister(rtkPhaseGatingImageFilterIF3)

def rtkPhaseGatingImageFilterIF3___New_orig__() -> "rtkPhaseGatingImageFilterIF3_Pointer":
    """rtkPhaseGatingImageFilterIF3___New_orig__() -> rtkPhaseGatingImageFilterIF3_Pointer"""
    return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3___New_orig__()

def rtkPhaseGatingImageFilterIF3_cast(obj: 'itkLightObject') -> "rtkPhaseGatingImageFilterIF3 *":
    """rtkPhaseGatingImageFilterIF3_cast(itkLightObject obj) -> rtkPhaseGatingImageFilterIF3"""
    return _rtkPhaseGatingImageFilterPython.rtkPhaseGatingImageFilterIF3_cast(obj)


def phase_gating_image_filter(*args, **kwargs):
    """Procedural interface for PhaseGatingImageFilter"""
    import itk
    instance = itk.PhaseGatingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def phase_gating_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.PhaseGatingImageFilter, itkTemplate.itkTemplate):
        phase_gating_image_filter.__doc__ = itk.PhaseGatingImageFilter.values()[0].__doc__
    else:
        phase_gating_image_filter.__doc__ = itk.PhaseGatingImageFilter.__doc__




