# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkProjectionStackToFourDImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkProjectionStackToFourDImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkProjectionStackToFourDImageFilterPython
            return _rtkProjectionStackToFourDImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkProjectionStackToFourDImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkProjectionStackToFourDImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkProjectionStackToFourDImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterRTKPython
import itkImageRegionPython
import itkSizePython
import pyBasePython
import itkIndexPython
import itkOffsetPython
import ITKCommonBasePython
import itkVectorImagePython
import stdcomplexPython
import itkVariableLengthVectorPython
import itkImagePython
import itkPointPython
import itkFixedArrayPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkImageSourceRTKPython
import itkImageSourceCommonPython
import itkImageRTKPython
import itkImageBaseRTKPython
import itkPointRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkImageRegionRTKPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import rtkBackProjectionImageFilterPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImageToImageFilterAPython
import itkArray2DPython

def rtkProjectionStackToFourDImageFilterIF4IF3D_New():
  return rtkProjectionStackToFourDImageFilterIF4IF3D.New()

class rtkProjectionStackToFourDImageFilterIF4IF3D(itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4):
    """Proxy of C++ rtkProjectionStackToFourDImageFilterIF4IF3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkProjectionStackToFourDImageFilterIF4IF3D_Pointer":
        """__New_orig__() -> rtkProjectionStackToFourDImageFilterIF4IF3D_Pointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkProjectionStackToFourDImageFilterIF4IF3D_Pointer":
        """Clone(rtkProjectionStackToFourDImageFilterIF4IF3D self) -> rtkProjectionStackToFourDImageFilterIF4IF3D_Pointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_Clone(self)


    def SetInputVolumeSeries(self, VolumeSeries: 'itkImageF4') -> "void":
        """SetInputVolumeSeries(rtkProjectionStackToFourDImageFilterIF4IF3D self, itkImageF4 VolumeSeries)"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetInputVolumeSeries(self, VolumeSeries)


    def GetInputVolumeSeries(self) -> "itkImageF4_ConstPointer":
        """GetInputVolumeSeries(rtkProjectionStackToFourDImageFilterIF4IF3D self) -> itkImageF4_ConstPointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetInputVolumeSeries(self)


    def SetInputProjectionStack(self, Projections: 'itkImageF3') -> "void":
        """SetInputProjectionStack(rtkProjectionStackToFourDImageFilterIF4IF3D self, itkImageF3 Projections)"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetInputProjectionStack(self, Projections)


    def GetInputProjectionStack(self) -> "itkImageF3_ConstPointer":
        """GetInputProjectionStack(rtkProjectionStackToFourDImageFilterIF4IF3D self) -> itkImageF3_ConstPointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetInputProjectionStack(self)


    def SetBackProjectionFilter(self, _arg: 'rtkBackProjectionImageFilterIF3IF3_Pointer const') -> "void":
        """SetBackProjectionFilter(rtkProjectionStackToFourDImageFilterIF4IF3D self, rtkBackProjectionImageFilterIF3IF3_Pointer const _arg)"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetBackProjectionFilter(self, _arg)


    def SetGeometry(self, _arg: 'rtkThreeDCircularProjectionGeometry') -> "void":
        """SetGeometry(rtkProjectionStackToFourDImageFilterIF4IF3D self, rtkThreeDCircularProjectionGeometry _arg)"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetGeometry(self, _arg)


    def SetUseCudaSplat(self, _arg: 'bool const') -> "void":
        """SetUseCudaSplat(rtkProjectionStackToFourDImageFilterIF4IF3D self, bool const _arg)"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetUseCudaSplat(self, _arg)


    def GetUseCudaSplat(self) -> "bool":
        """GetUseCudaSplat(rtkProjectionStackToFourDImageFilterIF4IF3D self) -> bool"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetUseCudaSplat(self)


    def SetUseCudaSources(self, _arg: 'bool const') -> "void":
        """SetUseCudaSources(rtkProjectionStackToFourDImageFilterIF4IF3D self, bool const _arg)"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetUseCudaSources(self, _arg)


    def GetUseCudaSources(self) -> "bool":
        """GetUseCudaSources(rtkProjectionStackToFourDImageFilterIF4IF3D self) -> bool"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetUseCudaSources(self)


    def GetWeights(self) -> "itkArray2DF":
        """GetWeights(rtkProjectionStackToFourDImageFilterIF4IF3D self) -> itkArray2DF"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetWeights(self)


    def SetWeights(self, _arg: 'itkArray2DF') -> "void":
        """SetWeights(rtkProjectionStackToFourDImageFilterIF4IF3D self, itkArray2DF _arg)"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetWeights(self, _arg)


    def SetSignal(self, signal: 'vectorD') -> "void":
        """SetSignal(rtkProjectionStackToFourDImageFilterIF4IF3D self, vectorD signal)"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetSignal(self, signal)

    __swig_destroy__ = _rtkProjectionStackToFourDImageFilterPython.delete_rtkProjectionStackToFourDImageFilterIF4IF3D

    def cast(obj: 'itkLightObject') -> "rtkProjectionStackToFourDImageFilterIF4IF3D *":
        """cast(itkLightObject obj) -> rtkProjectionStackToFourDImageFilterIF4IF3D"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkProjectionStackToFourDImageFilterIF4IF3D

        Create a new object of the class rtkProjectionStackToFourDImageFilterIF4IF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkProjectionStackToFourDImageFilterIF4IF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkProjectionStackToFourDImageFilterIF4IF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkProjectionStackToFourDImageFilterIF4IF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkProjectionStackToFourDImageFilterIF4IF3D.Clone = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_Clone, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.SetInputVolumeSeries = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetInputVolumeSeries, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.GetInputVolumeSeries = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetInputVolumeSeries, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.SetInputProjectionStack = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetInputProjectionStack, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.GetInputProjectionStack = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetInputProjectionStack, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.SetBackProjectionFilter = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetBackProjectionFilter, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.SetGeometry = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetGeometry, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.SetUseCudaSplat = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetUseCudaSplat, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.GetUseCudaSplat = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetUseCudaSplat, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.SetUseCudaSources = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetUseCudaSources, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.GetUseCudaSources = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetUseCudaSources, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.GetWeights = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetWeights, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.SetWeights = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetWeights, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D.SetSignal = new_instancemethod(_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetSignal, None, rtkProjectionStackToFourDImageFilterIF4IF3D)
rtkProjectionStackToFourDImageFilterIF4IF3D_swigregister = _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_swigregister
rtkProjectionStackToFourDImageFilterIF4IF3D_swigregister(rtkProjectionStackToFourDImageFilterIF4IF3D)

def rtkProjectionStackToFourDImageFilterIF4IF3D___New_orig__() -> "rtkProjectionStackToFourDImageFilterIF4IF3D_Pointer":
    """rtkProjectionStackToFourDImageFilterIF4IF3D___New_orig__() -> rtkProjectionStackToFourDImageFilterIF4IF3D_Pointer"""
    return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D___New_orig__()

def rtkProjectionStackToFourDImageFilterIF4IF3D_cast(obj: 'itkLightObject') -> "rtkProjectionStackToFourDImageFilterIF4IF3D *":
    """rtkProjectionStackToFourDImageFilterIF4IF3D_cast(itkLightObject obj) -> rtkProjectionStackToFourDImageFilterIF4IF3D"""
    return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_cast(obj)


def projection_stack_to_four_d_image_filter(*args, **kwargs):
    """Procedural interface for ProjectionStackToFourDImageFilter"""
    import itk
    instance = itk.ProjectionStackToFourDImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def projection_stack_to_four_d_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ProjectionStackToFourDImageFilter, itkTemplate.itkTemplate):
        projection_stack_to_four_d_image_filter.__doc__ = itk.ProjectionStackToFourDImageFilter.values()[0].__doc__
    else:
        projection_stack_to_four_d_image_filter.__doc__ = itk.ProjectionStackToFourDImageFilter.__doc__




