# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageSourceRTKPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageSourceRTKPython', [dirname(__file__)])
        except ImportError:
            import _itkImageSourceRTKPython
            return _itkImageSourceRTKPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageSourceRTKPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageSourceRTKPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageSourceRTKPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRTKPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkImagePython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython
import itkImageRegionRTKPython
import itkImageSourceCommonPython

def itkImageSourceIF4_New():
  return itkImageSourceIF4.New()


def itkImageSourceIUC1_New():
  return itkImageSourceIUC1.New()


def itkImageSourceIF1_New():
  return itkImageSourceIF1.New()


def itkImageSourceID3_New():
  return itkImageSourceID3.New()


def itkImageSourceID2_New():
  return itkImageSourceID2.New()


def itkImageSourceID1_New():
  return itkImageSourceID1.New()

class itkImageSourceID1(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceID1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceID1 self) -> itkImageD1
        GetOutput(itkImageSourceID1 self) -> itkImageD1
        GetOutput(itkImageSourceID1 self, unsigned int idx) -> itkImageD1
        """
        return _itkImageSourceRTKPython.itkImageSourceID1_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceID1 self, itkDataObject output)
        GraftOutput(itkImageSourceID1 self, std::string const & key, itkDataObject output)
        """
        return _itkImageSourceRTKPython.itkImageSourceID1_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceID1 self, unsigned int idx, itkDataObject output)"""
        return _itkImageSourceRTKPython.itkImageSourceID1_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceID1 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceID1 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkImageSourceRTKPython.itkImageSourceID1_MakeOutput(self, *args)

    __swig_destroy__ = _itkImageSourceRTKPython.delete_itkImageSourceID1

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceID1"""
        return _itkImageSourceRTKPython.itkImageSourceID1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceID1

        Create a new object of the class itkImageSourceID1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceID1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceID1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceID1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceID1.GetOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID1_GetOutput, None, itkImageSourceID1)
itkImageSourceID1.GraftOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID1_GraftOutput, None, itkImageSourceID1)
itkImageSourceID1.GraftNthOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID1_GraftNthOutput, None, itkImageSourceID1)
itkImageSourceID1.MakeOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID1_MakeOutput, None, itkImageSourceID1)
itkImageSourceID1_swigregister = _itkImageSourceRTKPython.itkImageSourceID1_swigregister
itkImageSourceID1_swigregister(itkImageSourceID1)

def itkImageSourceID1_cast(obj):
    """itkImageSourceID1_cast(itkLightObject obj) -> itkImageSourceID1"""
    return _itkImageSourceRTKPython.itkImageSourceID1_cast(obj)

class itkImageSourceID2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceID2 self) -> itkImageD2
        GetOutput(itkImageSourceID2 self) -> itkImageD2
        GetOutput(itkImageSourceID2 self, unsigned int idx) -> itkImageD2
        """
        return _itkImageSourceRTKPython.itkImageSourceID2_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceID2 self, itkDataObject output)
        GraftOutput(itkImageSourceID2 self, std::string const & key, itkDataObject output)
        """
        return _itkImageSourceRTKPython.itkImageSourceID2_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceID2 self, unsigned int idx, itkDataObject output)"""
        return _itkImageSourceRTKPython.itkImageSourceID2_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceID2 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceID2 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkImageSourceRTKPython.itkImageSourceID2_MakeOutput(self, *args)

    __swig_destroy__ = _itkImageSourceRTKPython.delete_itkImageSourceID2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceID2"""
        return _itkImageSourceRTKPython.itkImageSourceID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceID2

        Create a new object of the class itkImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceID2.GetOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID2_GetOutput, None, itkImageSourceID2)
itkImageSourceID2.GraftOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID2_GraftOutput, None, itkImageSourceID2)
itkImageSourceID2.GraftNthOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID2_GraftNthOutput, None, itkImageSourceID2)
itkImageSourceID2.MakeOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID2_MakeOutput, None, itkImageSourceID2)
itkImageSourceID2_swigregister = _itkImageSourceRTKPython.itkImageSourceID2_swigregister
itkImageSourceID2_swigregister(itkImageSourceID2)

def itkImageSourceID2_cast(obj):
    """itkImageSourceID2_cast(itkLightObject obj) -> itkImageSourceID2"""
    return _itkImageSourceRTKPython.itkImageSourceID2_cast(obj)

class itkImageSourceID3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceID3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceID3 self) -> itkImageD3
        GetOutput(itkImageSourceID3 self) -> itkImageD3
        GetOutput(itkImageSourceID3 self, unsigned int idx) -> itkImageD3
        """
        return _itkImageSourceRTKPython.itkImageSourceID3_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceID3 self, itkDataObject output)
        GraftOutput(itkImageSourceID3 self, std::string const & key, itkDataObject output)
        """
        return _itkImageSourceRTKPython.itkImageSourceID3_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceID3 self, unsigned int idx, itkDataObject output)"""
        return _itkImageSourceRTKPython.itkImageSourceID3_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceID3 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceID3 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkImageSourceRTKPython.itkImageSourceID3_MakeOutput(self, *args)

    __swig_destroy__ = _itkImageSourceRTKPython.delete_itkImageSourceID3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceID3"""
        return _itkImageSourceRTKPython.itkImageSourceID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceID3

        Create a new object of the class itkImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceID3.GetOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID3_GetOutput, None, itkImageSourceID3)
itkImageSourceID3.GraftOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID3_GraftOutput, None, itkImageSourceID3)
itkImageSourceID3.GraftNthOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID3_GraftNthOutput, None, itkImageSourceID3)
itkImageSourceID3.MakeOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceID3_MakeOutput, None, itkImageSourceID3)
itkImageSourceID3_swigregister = _itkImageSourceRTKPython.itkImageSourceID3_swigregister
itkImageSourceID3_swigregister(itkImageSourceID3)

def itkImageSourceID3_cast(obj):
    """itkImageSourceID3_cast(itkLightObject obj) -> itkImageSourceID3"""
    return _itkImageSourceRTKPython.itkImageSourceID3_cast(obj)

class itkImageSourceIF1(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceIF1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceIF1 self) -> itkImageF1
        GetOutput(itkImageSourceIF1 self) -> itkImageF1
        GetOutput(itkImageSourceIF1 self, unsigned int idx) -> itkImageF1
        """
        return _itkImageSourceRTKPython.itkImageSourceIF1_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceIF1 self, itkDataObject output)
        GraftOutput(itkImageSourceIF1 self, std::string const & key, itkDataObject output)
        """
        return _itkImageSourceRTKPython.itkImageSourceIF1_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceIF1 self, unsigned int idx, itkDataObject output)"""
        return _itkImageSourceRTKPython.itkImageSourceIF1_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceIF1 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceIF1 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkImageSourceRTKPython.itkImageSourceIF1_MakeOutput(self, *args)

    __swig_destroy__ = _itkImageSourceRTKPython.delete_itkImageSourceIF1

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceIF1"""
        return _itkImageSourceRTKPython.itkImageSourceIF1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceIF1

        Create a new object of the class itkImageSourceIF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceIF1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceIF1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceIF1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceIF1.GetOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIF1_GetOutput, None, itkImageSourceIF1)
itkImageSourceIF1.GraftOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIF1_GraftOutput, None, itkImageSourceIF1)
itkImageSourceIF1.GraftNthOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIF1_GraftNthOutput, None, itkImageSourceIF1)
itkImageSourceIF1.MakeOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIF1_MakeOutput, None, itkImageSourceIF1)
itkImageSourceIF1_swigregister = _itkImageSourceRTKPython.itkImageSourceIF1_swigregister
itkImageSourceIF1_swigregister(itkImageSourceIF1)

def itkImageSourceIF1_cast(obj):
    """itkImageSourceIF1_cast(itkLightObject obj) -> itkImageSourceIF1"""
    return _itkImageSourceRTKPython.itkImageSourceIF1_cast(obj)

class itkImageSourceIF4(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceIF4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceIF4 self) -> itkImageF4
        GetOutput(itkImageSourceIF4 self) -> itkImageF4
        GetOutput(itkImageSourceIF4 self, unsigned int idx) -> itkImageF4
        """
        return _itkImageSourceRTKPython.itkImageSourceIF4_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceIF4 self, itkDataObject output)
        GraftOutput(itkImageSourceIF4 self, std::string const & key, itkDataObject output)
        """
        return _itkImageSourceRTKPython.itkImageSourceIF4_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceIF4 self, unsigned int idx, itkDataObject output)"""
        return _itkImageSourceRTKPython.itkImageSourceIF4_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceIF4 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceIF4 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkImageSourceRTKPython.itkImageSourceIF4_MakeOutput(self, *args)

    __swig_destroy__ = _itkImageSourceRTKPython.delete_itkImageSourceIF4

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceIF4"""
        return _itkImageSourceRTKPython.itkImageSourceIF4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceIF4

        Create a new object of the class itkImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceIF4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceIF4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceIF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceIF4.GetOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIF4_GetOutput, None, itkImageSourceIF4)
itkImageSourceIF4.GraftOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIF4_GraftOutput, None, itkImageSourceIF4)
itkImageSourceIF4.GraftNthOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIF4_GraftNthOutput, None, itkImageSourceIF4)
itkImageSourceIF4.MakeOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIF4_MakeOutput, None, itkImageSourceIF4)
itkImageSourceIF4_swigregister = _itkImageSourceRTKPython.itkImageSourceIF4_swigregister
itkImageSourceIF4_swigregister(itkImageSourceIF4)

def itkImageSourceIF4_cast(obj):
    """itkImageSourceIF4_cast(itkLightObject obj) -> itkImageSourceIF4"""
    return _itkImageSourceRTKPython.itkImageSourceIF4_cast(obj)

class itkImageSourceIUC1(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceIUC1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceIUC1 self) -> itkImageUC1
        GetOutput(itkImageSourceIUC1 self) -> itkImageUC1
        GetOutput(itkImageSourceIUC1 self, unsigned int idx) -> itkImageUC1
        """
        return _itkImageSourceRTKPython.itkImageSourceIUC1_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceIUC1 self, itkDataObject output)
        GraftOutput(itkImageSourceIUC1 self, std::string const & key, itkDataObject output)
        """
        return _itkImageSourceRTKPython.itkImageSourceIUC1_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceIUC1 self, unsigned int idx, itkDataObject output)"""
        return _itkImageSourceRTKPython.itkImageSourceIUC1_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceIUC1 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceIUC1 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkImageSourceRTKPython.itkImageSourceIUC1_MakeOutput(self, *args)

    __swig_destroy__ = _itkImageSourceRTKPython.delete_itkImageSourceIUC1

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceIUC1"""
        return _itkImageSourceRTKPython.itkImageSourceIUC1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceIUC1

        Create a new object of the class itkImageSourceIUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceIUC1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceIUC1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceIUC1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceIUC1.GetOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIUC1_GetOutput, None, itkImageSourceIUC1)
itkImageSourceIUC1.GraftOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIUC1_GraftOutput, None, itkImageSourceIUC1)
itkImageSourceIUC1.GraftNthOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIUC1_GraftNthOutput, None, itkImageSourceIUC1)
itkImageSourceIUC1.MakeOutput = new_instancemethod(_itkImageSourceRTKPython.itkImageSourceIUC1_MakeOutput, None, itkImageSourceIUC1)
itkImageSourceIUC1_swigregister = _itkImageSourceRTKPython.itkImageSourceIUC1_swigregister
itkImageSourceIUC1_swigregister(itkImageSourceIUC1)

def itkImageSourceIUC1_cast(obj):
    """itkImageSourceIUC1_cast(itkLightObject obj) -> itkImageSourceIUC1"""
    return _itkImageSourceRTKPython.itkImageSourceIUC1_cast(obj)


def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageSource, itkTemplate.itkTemplate):
        image_source.__doc__ = itk.ImageSource.values()[0].__doc__
    else:
        image_source.__doc__ = itk.ImageSource.__doc__




