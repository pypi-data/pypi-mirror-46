# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPointRTKPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPointRTKPython', [dirname(__file__)])
        except ImportError:
            import _itkPointRTKPython
            return _itkPointRTKPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPointRTKPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPointRTKPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPointRTKPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
class vectoritkPointD1(object):
    """Proxy of C++ std::vector<(itkPointD1)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vectoritkPointD1 self) -> SwigPyIterator"""
        return _itkPointRTKPython.vectoritkPointD1_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vectoritkPointD1 self) -> bool"""
        return _itkPointRTKPython.vectoritkPointD1___nonzero__(self)


    def __bool__(self):
        """__bool__(vectoritkPointD1 self) -> bool"""
        return _itkPointRTKPython.vectoritkPointD1___bool__(self)


    def __len__(self):
        """__len__(vectoritkPointD1 self) -> std::vector< itkPointD1 >::size_type"""
        return _itkPointRTKPython.vectoritkPointD1___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vectoritkPointD1 self, std::vector< itkPointD1 >::difference_type i, std::vector< itkPointD1 >::difference_type j) -> vectoritkPointD1"""
        return _itkPointRTKPython.vectoritkPointD1___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vectoritkPointD1 self, std::vector< itkPointD1 >::difference_type i, std::vector< itkPointD1 >::difference_type j)
        __setslice__(vectoritkPointD1 self, std::vector< itkPointD1 >::difference_type i, std::vector< itkPointD1 >::difference_type j, vectoritkPointD1 v)
        """
        return _itkPointRTKPython.vectoritkPointD1___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vectoritkPointD1 self, std::vector< itkPointD1 >::difference_type i, std::vector< itkPointD1 >::difference_type j)"""
        return _itkPointRTKPython.vectoritkPointD1___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vectoritkPointD1 self, std::vector< itkPointD1 >::difference_type i)
        __delitem__(vectoritkPointD1 self, PySliceObject * slice)
        """
        return _itkPointRTKPython.vectoritkPointD1___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vectoritkPointD1 self, PySliceObject * slice) -> vectoritkPointD1
        __getitem__(vectoritkPointD1 self, std::vector< itkPointD1 >::difference_type i) -> itkPointD1
        """
        return _itkPointRTKPython.vectoritkPointD1___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vectoritkPointD1 self, PySliceObject * slice, vectoritkPointD1 v)
        __setitem__(vectoritkPointD1 self, PySliceObject * slice)
        __setitem__(vectoritkPointD1 self, std::vector< itkPointD1 >::difference_type i, itkPointD1 x)
        """
        return _itkPointRTKPython.vectoritkPointD1___setitem__(self, *args)


    def pop(self):
        """pop(vectoritkPointD1 self) -> itkPointD1"""
        return _itkPointRTKPython.vectoritkPointD1_pop(self)


    def append(self, x):
        """append(vectoritkPointD1 self, itkPointD1 x)"""
        return _itkPointRTKPython.vectoritkPointD1_append(self, x)


    def empty(self):
        """empty(vectoritkPointD1 self) -> bool"""
        return _itkPointRTKPython.vectoritkPointD1_empty(self)


    def size(self):
        """size(vectoritkPointD1 self) -> std::vector< itkPointD1 >::size_type"""
        return _itkPointRTKPython.vectoritkPointD1_size(self)


    def swap(self, v):
        """swap(vectoritkPointD1 self, vectoritkPointD1 v)"""
        return _itkPointRTKPython.vectoritkPointD1_swap(self, v)


    def begin(self):
        """begin(vectoritkPointD1 self) -> std::vector< itkPointD1 >::iterator"""
        return _itkPointRTKPython.vectoritkPointD1_begin(self)


    def end(self):
        """end(vectoritkPointD1 self) -> std::vector< itkPointD1 >::iterator"""
        return _itkPointRTKPython.vectoritkPointD1_end(self)


    def rbegin(self):
        """rbegin(vectoritkPointD1 self) -> std::vector< itkPointD1 >::reverse_iterator"""
        return _itkPointRTKPython.vectoritkPointD1_rbegin(self)


    def rend(self):
        """rend(vectoritkPointD1 self) -> std::vector< itkPointD1 >::reverse_iterator"""
        return _itkPointRTKPython.vectoritkPointD1_rend(self)


    def clear(self):
        """clear(vectoritkPointD1 self)"""
        return _itkPointRTKPython.vectoritkPointD1_clear(self)


    def get_allocator(self):
        """get_allocator(vectoritkPointD1 self) -> std::vector< itkPointD1 >::allocator_type"""
        return _itkPointRTKPython.vectoritkPointD1_get_allocator(self)


    def pop_back(self):
        """pop_back(vectoritkPointD1 self)"""
        return _itkPointRTKPython.vectoritkPointD1_pop_back(self)


    def erase(self, *args):
        """
        erase(vectoritkPointD1 self, std::vector< itkPointD1 >::iterator pos) -> std::vector< itkPointD1 >::iterator
        erase(vectoritkPointD1 self, std::vector< itkPointD1 >::iterator first, std::vector< itkPointD1 >::iterator last) -> std::vector< itkPointD1 >::iterator
        """
        return _itkPointRTKPython.vectoritkPointD1_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkPointD1)> self) -> vectoritkPointD1
        __init__(std::vector<(itkPointD1)> self, vectoritkPointD1 arg2) -> vectoritkPointD1
        __init__(std::vector<(itkPointD1)> self, std::vector< itkPointD1 >::size_type size) -> vectoritkPointD1
        __init__(std::vector<(itkPointD1)> self, std::vector< itkPointD1 >::size_type size, itkPointD1 value) -> vectoritkPointD1
        """
        _itkPointRTKPython.vectoritkPointD1_swiginit(self, _itkPointRTKPython.new_vectoritkPointD1(*args))

    def push_back(self, x):
        """push_back(vectoritkPointD1 self, itkPointD1 x)"""
        return _itkPointRTKPython.vectoritkPointD1_push_back(self, x)


    def front(self):
        """front(vectoritkPointD1 self) -> itkPointD1"""
        return _itkPointRTKPython.vectoritkPointD1_front(self)


    def back(self):
        """back(vectoritkPointD1 self) -> itkPointD1"""
        return _itkPointRTKPython.vectoritkPointD1_back(self)


    def assign(self, n, x):
        """assign(vectoritkPointD1 self, std::vector< itkPointD1 >::size_type n, itkPointD1 x)"""
        return _itkPointRTKPython.vectoritkPointD1_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vectoritkPointD1 self, std::vector< itkPointD1 >::size_type new_size)
        resize(vectoritkPointD1 self, std::vector< itkPointD1 >::size_type new_size, itkPointD1 x)
        """
        return _itkPointRTKPython.vectoritkPointD1_resize(self, *args)


    def insert(self, *args):
        """
        insert(vectoritkPointD1 self, std::vector< itkPointD1 >::iterator pos, itkPointD1 x) -> std::vector< itkPointD1 >::iterator
        insert(vectoritkPointD1 self, std::vector< itkPointD1 >::iterator pos, std::vector< itkPointD1 >::size_type n, itkPointD1 x)
        """
        return _itkPointRTKPython.vectoritkPointD1_insert(self, *args)


    def reserve(self, n):
        """reserve(vectoritkPointD1 self, std::vector< itkPointD1 >::size_type n)"""
        return _itkPointRTKPython.vectoritkPointD1_reserve(self, n)


    def capacity(self):
        """capacity(vectoritkPointD1 self) -> std::vector< itkPointD1 >::size_type"""
        return _itkPointRTKPython.vectoritkPointD1_capacity(self)

    __swig_destroy__ = _itkPointRTKPython.delete_vectoritkPointD1
vectoritkPointD1.iterator = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_iterator, None, vectoritkPointD1)
vectoritkPointD1.__nonzero__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___nonzero__, None, vectoritkPointD1)
vectoritkPointD1.__bool__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___bool__, None, vectoritkPointD1)
vectoritkPointD1.__len__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___len__, None, vectoritkPointD1)
vectoritkPointD1.__getslice__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___getslice__, None, vectoritkPointD1)
vectoritkPointD1.__setslice__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___setslice__, None, vectoritkPointD1)
vectoritkPointD1.__delslice__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___delslice__, None, vectoritkPointD1)
vectoritkPointD1.__delitem__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___delitem__, None, vectoritkPointD1)
vectoritkPointD1.__getitem__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___getitem__, None, vectoritkPointD1)
vectoritkPointD1.__setitem__ = new_instancemethod(_itkPointRTKPython.vectoritkPointD1___setitem__, None, vectoritkPointD1)
vectoritkPointD1.pop = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_pop, None, vectoritkPointD1)
vectoritkPointD1.append = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_append, None, vectoritkPointD1)
vectoritkPointD1.empty = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_empty, None, vectoritkPointD1)
vectoritkPointD1.size = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_size, None, vectoritkPointD1)
vectoritkPointD1.swap = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_swap, None, vectoritkPointD1)
vectoritkPointD1.begin = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_begin, None, vectoritkPointD1)
vectoritkPointD1.end = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_end, None, vectoritkPointD1)
vectoritkPointD1.rbegin = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_rbegin, None, vectoritkPointD1)
vectoritkPointD1.rend = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_rend, None, vectoritkPointD1)
vectoritkPointD1.clear = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_clear, None, vectoritkPointD1)
vectoritkPointD1.get_allocator = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_get_allocator, None, vectoritkPointD1)
vectoritkPointD1.pop_back = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_pop_back, None, vectoritkPointD1)
vectoritkPointD1.erase = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_erase, None, vectoritkPointD1)
vectoritkPointD1.push_back = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_push_back, None, vectoritkPointD1)
vectoritkPointD1.front = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_front, None, vectoritkPointD1)
vectoritkPointD1.back = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_back, None, vectoritkPointD1)
vectoritkPointD1.assign = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_assign, None, vectoritkPointD1)
vectoritkPointD1.resize = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_resize, None, vectoritkPointD1)
vectoritkPointD1.insert = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_insert, None, vectoritkPointD1)
vectoritkPointD1.reserve = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_reserve, None, vectoritkPointD1)
vectoritkPointD1.capacity = new_instancemethod(_itkPointRTKPython.vectoritkPointD1_capacity, None, vectoritkPointD1)
vectoritkPointD1_swigregister = _itkPointRTKPython.vectoritkPointD1_swigregister
vectoritkPointD1_swigregister(vectoritkPointD1)

class itkPointD1(itkFixedArrayPython.itkFixedArrayD1):
    """Proxy of C++ itkPointD1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetPointDimension():
        """GetPointDimension() -> unsigned int"""
        return _itkPointRTKPython.itkPointD1_GetPointDimension()

    GetPointDimension = staticmethod(GetPointDimension)
    __swig_destroy__ = _itkPointRTKPython.delete_itkPointD1

    def __init__(self, *args):
        """
        __init__(itkPointD1 self) -> itkPointD1
        __init__(itkPointD1 self, itkPointD1 arg0) -> itkPointD1
        __init__(itkPointD1 self, double const * r) -> itkPointD1
        __init__(itkPointD1 self, double const & v) -> itkPointD1
        __init__(itkPointD1 self, std::array< double,1 > const & stdArray) -> itkPointD1
        """
        _itkPointRTKPython.itkPointD1_swiginit(self, _itkPointRTKPython.new_itkPointD1(*args))

    def __eq__(self, pt):
        """__eq__(itkPointD1 self, itkPointD1 pt) -> bool"""
        return _itkPointRTKPython.itkPointD1___eq__(self, pt)


    def __ne__(self, pt):
        """__ne__(itkPointD1 self, itkPointD1 pt) -> bool"""
        return _itkPointRTKPython.itkPointD1___ne__(self, pt)


    def __iadd__(self, vec):
        """__iadd__(itkPointD1 self, itkVectorD1 vec) -> itkPointD1"""
        return _itkPointRTKPython.itkPointD1___iadd__(self, vec)


    def __isub__(self, vec):
        """__isub__(itkPointD1 self, itkVectorD1 vec) -> itkPointD1"""
        return _itkPointRTKPython.itkPointD1___isub__(self, vec)


    def __add__(self, vec):
        """__add__(itkPointD1 self, itkVectorD1 vec) -> itkPointD1"""
        return _itkPointRTKPython.itkPointD1___add__(self, vec)


    def __sub__(self, *args):
        """
        __sub__(itkPointD1 self, itkPointD1 pnt) -> itkVectorD1
        __sub__(itkPointD1 self, itkVectorD1 vec) -> itkPointD1
        """
        return _itkPointRTKPython.itkPointD1___sub__(self, *args)


    def GetVectorFromOrigin(self):
        """GetVectorFromOrigin(itkPointD1 self) -> itkVectorD1"""
        return _itkPointRTKPython.itkPointD1_GetVectorFromOrigin(self)


    def GetVnlVector(self, *args):
        """
        GetVnlVector(itkPointD1 self) -> vnl_vector_refD
        GetVnlVector(itkPointD1 self) -> vnl_vectorD
        """
        return _itkPointRTKPython.itkPointD1_GetVnlVector(self, *args)


    def SetToMidPoint(self, arg0, arg1):
        """SetToMidPoint(itkPointD1 self, itkPointD1 arg0, itkPointD1 arg1)"""
        return _itkPointRTKPython.itkPointD1_SetToMidPoint(self, arg0, arg1)


    def SetToBarycentricCombination(self, *args):
        """
        SetToBarycentricCombination(itkPointD1 self, itkPointD1 A, itkPointD1 B, double alpha)
        SetToBarycentricCombination(itkPointD1 self, itkPointD1 A, itkPointD1 B, itkPointD1 C, double weightA, double weightB)
        SetToBarycentricCombination(itkPointD1 self, itkPointD1 P, double const * weights, unsigned int N)
        """
        return _itkPointRTKPython.itkPointD1_SetToBarycentricCombination(self, *args)


    def __getitem__(self, d):
        """__getitem__(itkPointD1 self, unsigned long d) -> double"""
        return _itkPointRTKPython.itkPointD1___getitem__(self, d)


    def __setitem__(self, d, v):
        """__setitem__(itkPointD1 self, unsigned long d, double v)"""
        return _itkPointRTKPython.itkPointD1___setitem__(self, d, v)


    def __len__():
        """__len__() -> unsigned int"""
        return _itkPointRTKPython.itkPointD1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self):
        """__repr__(itkPointD1 self) -> std::string"""
        return _itkPointRTKPython.itkPointD1___repr__(self)

itkPointD1.__eq__ = new_instancemethod(_itkPointRTKPython.itkPointD1___eq__, None, itkPointD1)
itkPointD1.__ne__ = new_instancemethod(_itkPointRTKPython.itkPointD1___ne__, None, itkPointD1)
itkPointD1.__iadd__ = new_instancemethod(_itkPointRTKPython.itkPointD1___iadd__, None, itkPointD1)
itkPointD1.__isub__ = new_instancemethod(_itkPointRTKPython.itkPointD1___isub__, None, itkPointD1)
itkPointD1.__add__ = new_instancemethod(_itkPointRTKPython.itkPointD1___add__, None, itkPointD1)
itkPointD1.__sub__ = new_instancemethod(_itkPointRTKPython.itkPointD1___sub__, None, itkPointD1)
itkPointD1.GetVectorFromOrigin = new_instancemethod(_itkPointRTKPython.itkPointD1_GetVectorFromOrigin, None, itkPointD1)
itkPointD1.GetVnlVector = new_instancemethod(_itkPointRTKPython.itkPointD1_GetVnlVector, None, itkPointD1)
itkPointD1.SetToMidPoint = new_instancemethod(_itkPointRTKPython.itkPointD1_SetToMidPoint, None, itkPointD1)
itkPointD1.SetToBarycentricCombination = new_instancemethod(_itkPointRTKPython.itkPointD1_SetToBarycentricCombination, None, itkPointD1)
itkPointD1.__getitem__ = new_instancemethod(_itkPointRTKPython.itkPointD1___getitem__, None, itkPointD1)
itkPointD1.__setitem__ = new_instancemethod(_itkPointRTKPython.itkPointD1___setitem__, None, itkPointD1)
itkPointD1.__repr__ = new_instancemethod(_itkPointRTKPython.itkPointD1___repr__, None, itkPointD1)
itkPointD1_swigregister = _itkPointRTKPython.itkPointD1_swigregister
itkPointD1_swigregister(itkPointD1)

def itkPointD1_GetPointDimension():
    """itkPointD1_GetPointDimension() -> unsigned int"""
    return _itkPointRTKPython.itkPointD1_GetPointDimension()

def itkPointD1___len__():
    """itkPointD1___len__() -> unsigned int"""
    return _itkPointRTKPython.itkPointD1___len__()



