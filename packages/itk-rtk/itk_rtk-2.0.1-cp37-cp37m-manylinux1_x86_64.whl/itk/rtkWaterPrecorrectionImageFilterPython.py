# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkWaterPrecorrectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkWaterPrecorrectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkWaterPrecorrectionImageFilterPython
            return _rtkWaterPrecorrectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkWaterPrecorrectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkWaterPrecorrectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkWaterPrecorrectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython

def rtkWaterPrecorrectionImageFilterIF3IF3_New():
  return rtkWaterPrecorrectionImageFilterIF3IF3.New()

class rtkWaterPrecorrectionImageFilterIF3IF3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ rtkWaterPrecorrectionImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkWaterPrecorrectionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> rtkWaterPrecorrectionImageFilterIF3IF3_Pointer"""
        return _rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkWaterPrecorrectionImageFilterIF3IF3_Pointer":
        """Clone(rtkWaterPrecorrectionImageFilterIF3IF3 self) -> rtkWaterPrecorrectionImageFilterIF3IF3_Pointer"""
        return _rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_Clone(self)


    def GetCoefficients(self) -> "std::vector< double,std::allocator< double > >":
        """GetCoefficients(rtkWaterPrecorrectionImageFilterIF3IF3 self) -> vectorD"""
        return _rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_GetCoefficients(self)


    def SetCoefficients(self, _arg: 'vectorD') -> "void":
        """SetCoefficients(rtkWaterPrecorrectionImageFilterIF3IF3 self, vectorD _arg)"""
        return _rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_SetCoefficients(self, _arg)

    __swig_destroy__ = _rtkWaterPrecorrectionImageFilterPython.delete_rtkWaterPrecorrectionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "rtkWaterPrecorrectionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> rtkWaterPrecorrectionImageFilterIF3IF3"""
        return _rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkWaterPrecorrectionImageFilterIF3IF3

        Create a new object of the class rtkWaterPrecorrectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkWaterPrecorrectionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkWaterPrecorrectionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkWaterPrecorrectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkWaterPrecorrectionImageFilterIF3IF3.Clone = new_instancemethod(_rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_Clone, None, rtkWaterPrecorrectionImageFilterIF3IF3)
rtkWaterPrecorrectionImageFilterIF3IF3.GetCoefficients = new_instancemethod(_rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_GetCoefficients, None, rtkWaterPrecorrectionImageFilterIF3IF3)
rtkWaterPrecorrectionImageFilterIF3IF3.SetCoefficients = new_instancemethod(_rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_SetCoefficients, None, rtkWaterPrecorrectionImageFilterIF3IF3)
rtkWaterPrecorrectionImageFilterIF3IF3_swigregister = _rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_swigregister
rtkWaterPrecorrectionImageFilterIF3IF3_swigregister(rtkWaterPrecorrectionImageFilterIF3IF3)

def rtkWaterPrecorrectionImageFilterIF3IF3___New_orig__() -> "rtkWaterPrecorrectionImageFilterIF3IF3_Pointer":
    """rtkWaterPrecorrectionImageFilterIF3IF3___New_orig__() -> rtkWaterPrecorrectionImageFilterIF3IF3_Pointer"""
    return _rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3___New_orig__()

def rtkWaterPrecorrectionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "rtkWaterPrecorrectionImageFilterIF3IF3 *":
    """rtkWaterPrecorrectionImageFilterIF3IF3_cast(itkLightObject obj) -> rtkWaterPrecorrectionImageFilterIF3IF3"""
    return _rtkWaterPrecorrectionImageFilterPython.rtkWaterPrecorrectionImageFilterIF3IF3_cast(obj)


def water_precorrection_image_filter(*args, **kwargs):
    """Procedural interface for WaterPrecorrectionImageFilter"""
    import itk
    instance = itk.WaterPrecorrectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def water_precorrection_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.WaterPrecorrectionImageFilter, itkTemplate.itkTemplate):
        water_precorrection_image_filter.__doc__ = itk.WaterPrecorrectionImageFilter.values()[0].__doc__
    else:
        water_precorrection_image_filter.__doc__ = itk.WaterPrecorrectionImageFilter.__doc__




