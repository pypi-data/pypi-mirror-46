# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkAmsterdamShroudImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkAmsterdamShroudImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkAmsterdamShroudImageFilterPython
            return _rtkAmsterdamShroudImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkAmsterdamShroudImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkAmsterdamShroudImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkAmsterdamShroudImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterRTKPython
import itkImageRTKPython
import itkCovariantVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import vnl_matrix_fixedPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkIndexPython
import itkImageRegionPython
import itkRGBPixelPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkPointRTKPython
import itkCovariantVectorRTKPython
import itkImageRegionRTKPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageSourceRTKPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython

def rtkAmsterdamShroudImageFilterIF3_New():
  return rtkAmsterdamShroudImageFilterIF3.New()

class rtkAmsterdamShroudImageFilterIF3(itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2):
    """Proxy of C++ rtkAmsterdamShroudImageFilterIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkAmsterdamShroudImageFilterIF3_Pointer":
        """__New_orig__() -> rtkAmsterdamShroudImageFilterIF3_Pointer"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkAmsterdamShroudImageFilterIF3_Pointer":
        """Clone(rtkAmsterdamShroudImageFilterIF3 self) -> rtkAmsterdamShroudImageFilterIF3_Pointer"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_Clone(self)


    def GetUnsharpMaskSize(self) -> "unsigned int":
        """GetUnsharpMaskSize(rtkAmsterdamShroudImageFilterIF3 self) -> unsigned int"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetUnsharpMaskSize(self)


    def SetUnsharpMaskSize(self, _arg: 'unsigned int const') -> "void":
        """SetUnsharpMaskSize(rtkAmsterdamShroudImageFilterIF3 self, unsigned int const _arg)"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_SetUnsharpMaskSize(self, _arg)


    def GetModifiableGeometry(self) -> "rtkThreeDCircularProjectionGeometry *":
        """GetModifiableGeometry(rtkAmsterdamShroudImageFilterIF3 self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetModifiableGeometry(self)


    def GetGeometry(self, *args) -> "rtkThreeDCircularProjectionGeometry *":
        """
        GetGeometry(rtkAmsterdamShroudImageFilterIF3 self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(rtkAmsterdamShroudImageFilterIF3 self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetGeometry(self, *args)


    def SetGeometry(self, _arg: 'rtkThreeDCircularProjectionGeometry') -> "void":
        """SetGeometry(rtkAmsterdamShroudImageFilterIF3 self, rtkThreeDCircularProjectionGeometry _arg)"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_SetGeometry(self, _arg)


    def GetCorner1(self) -> "itkPointD3":
        """GetCorner1(rtkAmsterdamShroudImageFilterIF3 self) -> itkPointD3"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetCorner1(self)


    def SetCorner1(self, _arg: 'itkPointD3') -> "void":
        """SetCorner1(rtkAmsterdamShroudImageFilterIF3 self, itkPointD3 _arg)"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_SetCorner1(self, _arg)


    def GetCorner2(self) -> "itkPointD3":
        """GetCorner2(rtkAmsterdamShroudImageFilterIF3 self) -> itkPointD3"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetCorner2(self)


    def SetCorner2(self, _arg: 'itkPointD3') -> "void":
        """SetCorner2(rtkAmsterdamShroudImageFilterIF3 self, itkPointD3 _arg)"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_SetCorner2(self, _arg)

    __swig_destroy__ = _rtkAmsterdamShroudImageFilterPython.delete_rtkAmsterdamShroudImageFilterIF3

    def cast(obj: 'itkLightObject') -> "rtkAmsterdamShroudImageFilterIF3 *":
        """cast(itkLightObject obj) -> rtkAmsterdamShroudImageFilterIF3"""
        return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkAmsterdamShroudImageFilterIF3

        Create a new object of the class rtkAmsterdamShroudImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkAmsterdamShroudImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkAmsterdamShroudImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkAmsterdamShroudImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkAmsterdamShroudImageFilterIF3.Clone = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_Clone, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.GetUnsharpMaskSize = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetUnsharpMaskSize, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.SetUnsharpMaskSize = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_SetUnsharpMaskSize, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.GetModifiableGeometry = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetModifiableGeometry, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.GetGeometry = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetGeometry, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.SetGeometry = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_SetGeometry, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.GetCorner1 = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetCorner1, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.SetCorner1 = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_SetCorner1, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.GetCorner2 = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_GetCorner2, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3.SetCorner2 = new_instancemethod(_rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_SetCorner2, None, rtkAmsterdamShroudImageFilterIF3)
rtkAmsterdamShroudImageFilterIF3_swigregister = _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_swigregister
rtkAmsterdamShroudImageFilterIF3_swigregister(rtkAmsterdamShroudImageFilterIF3)

def rtkAmsterdamShroudImageFilterIF3___New_orig__() -> "rtkAmsterdamShroudImageFilterIF3_Pointer":
    """rtkAmsterdamShroudImageFilterIF3___New_orig__() -> rtkAmsterdamShroudImageFilterIF3_Pointer"""
    return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3___New_orig__()

def rtkAmsterdamShroudImageFilterIF3_cast(obj: 'itkLightObject') -> "rtkAmsterdamShroudImageFilterIF3 *":
    """rtkAmsterdamShroudImageFilterIF3_cast(itkLightObject obj) -> rtkAmsterdamShroudImageFilterIF3"""
    return _rtkAmsterdamShroudImageFilterPython.rtkAmsterdamShroudImageFilterIF3_cast(obj)


def amsterdam_shroud_image_filter(*args, **kwargs):
    """Procedural interface for AmsterdamShroudImageFilter"""
    import itk
    instance = itk.AmsterdamShroudImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def amsterdam_shroud_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.AmsterdamShroudImageFilter, itkTemplate.itkTemplate):
        amsterdam_shroud_image_filter.__doc__ = itk.AmsterdamShroudImageFilter.values()[0].__doc__
    else:
        amsterdam_shroud_image_filter.__doc__ = itk.AmsterdamShroudImageFilter.__doc__




