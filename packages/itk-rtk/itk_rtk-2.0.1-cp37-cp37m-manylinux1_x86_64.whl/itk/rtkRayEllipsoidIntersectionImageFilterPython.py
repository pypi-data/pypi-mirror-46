# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkRayEllipsoidIntersectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkRayEllipsoidIntersectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkRayEllipsoidIntersectionImageFilterPython
            return _rtkRayEllipsoidIntersectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkRayEllipsoidIntersectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkRayEllipsoidIntersectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkRayEllipsoidIntersectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import rtkRayConvexIntersectionImageFilterPython
import rtkConvexShapePython
import itkVectorPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkMatrixPython
import itkPointPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython

def rtkRayEllipsoidIntersectionImageFilterIF3IF3_New():
  return rtkRayEllipsoidIntersectionImageFilterIF3IF3.New()

class rtkRayEllipsoidIntersectionImageFilterIF3IF3(rtkRayConvexIntersectionImageFilterPython.rtkRayConvexIntersectionImageFilterIF3IF3):
    """Proxy of C++ rtkRayEllipsoidIntersectionImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkRayEllipsoidIntersectionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> rtkRayEllipsoidIntersectionImageFilterIF3IF3_Pointer"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkRayEllipsoidIntersectionImageFilterIF3IF3_Pointer":
        """Clone(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self) -> rtkRayEllipsoidIntersectionImageFilterIF3IF3_Pointer"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_Clone(self)


    def GetDensity(self) -> "double":
        """GetDensity(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self) -> double"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetDensity(self)


    def SetDensity(self, _arg: 'double const') -> "void":
        """SetDensity(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self, double const _arg)"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_SetDensity(self, _arg)


    def GetPlaneDirections(self) -> "std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &":
        """GetPlaneDirections(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetPlaneDirections(self)


    def GetPlanePositions(self) -> "std::vector< double,std::allocator< double > > const &":
        """GetPlanePositions(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self) -> vectorD"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetPlanePositions(self)


    def AddClipPlane(self, dir: 'itkVectorD3', pos: 'double const &') -> "void":
        """AddClipPlane(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self, itkVectorD3 dir, double const & pos)"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_AddClipPlane(self, dir, pos)


    def GetCenter(self) -> "itkVectorD3":
        """GetCenter(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self) -> itkVectorD3"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetCenter(self)


    def SetCenter(self, _arg: 'itkVectorD3') -> "void":
        """SetCenter(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self, itkVectorD3 _arg)"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_SetCenter(self, _arg)


    def GetAxis(self) -> "itkVectorD3":
        """GetAxis(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self) -> itkVectorD3"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetAxis(self)


    def SetAxis(self, _arg: 'itkVectorD3') -> "void":
        """SetAxis(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self, itkVectorD3 _arg)"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_SetAxis(self, _arg)


    def GetAngle(self) -> "double":
        """GetAngle(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self) -> double"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetAngle(self)


    def SetAngle(self, _arg: 'double const') -> "void":
        """SetAngle(rtkRayEllipsoidIntersectionImageFilterIF3IF3 self, double const _arg)"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_SetAngle(self, _arg)

    __swig_destroy__ = _rtkRayEllipsoidIntersectionImageFilterPython.delete_rtkRayEllipsoidIntersectionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "rtkRayEllipsoidIntersectionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> rtkRayEllipsoidIntersectionImageFilterIF3IF3"""
        return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkRayEllipsoidIntersectionImageFilterIF3IF3

        Create a new object of the class rtkRayEllipsoidIntersectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkRayEllipsoidIntersectionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkRayEllipsoidIntersectionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkRayEllipsoidIntersectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkRayEllipsoidIntersectionImageFilterIF3IF3.Clone = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_Clone, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.GetDensity = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetDensity, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.SetDensity = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_SetDensity, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.GetPlaneDirections = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetPlaneDirections, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.GetPlanePositions = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetPlanePositions, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.AddClipPlane = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_AddClipPlane, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.GetCenter = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetCenter, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.SetCenter = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_SetCenter, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.GetAxis = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetAxis, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.SetAxis = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_SetAxis, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.GetAngle = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_GetAngle, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3.SetAngle = new_instancemethod(_rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_SetAngle, None, rtkRayEllipsoidIntersectionImageFilterIF3IF3)
rtkRayEllipsoidIntersectionImageFilterIF3IF3_swigregister = _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_swigregister
rtkRayEllipsoidIntersectionImageFilterIF3IF3_swigregister(rtkRayEllipsoidIntersectionImageFilterIF3IF3)

def rtkRayEllipsoidIntersectionImageFilterIF3IF3___New_orig__() -> "rtkRayEllipsoidIntersectionImageFilterIF3IF3_Pointer":
    """rtkRayEllipsoidIntersectionImageFilterIF3IF3___New_orig__() -> rtkRayEllipsoidIntersectionImageFilterIF3IF3_Pointer"""
    return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3___New_orig__()

def rtkRayEllipsoidIntersectionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "rtkRayEllipsoidIntersectionImageFilterIF3IF3 *":
    """rtkRayEllipsoidIntersectionImageFilterIF3IF3_cast(itkLightObject obj) -> rtkRayEllipsoidIntersectionImageFilterIF3IF3"""
    return _rtkRayEllipsoidIntersectionImageFilterPython.rtkRayEllipsoidIntersectionImageFilterIF3IF3_cast(obj)


def ray_ellipsoid_intersection_image_filter(*args, **kwargs):
    """Procedural interface for RayEllipsoidIntersectionImageFilter"""
    import itk
    instance = itk.RayEllipsoidIntersectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def ray_ellipsoid_intersection_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.RayEllipsoidIntersectionImageFilter, itkTemplate.itkTemplate):
        ray_ellipsoid_intersection_image_filter.__doc__ = itk.RayEllipsoidIntersectionImageFilter.values()[0].__doc__
    else:
        ray_ellipsoid_intersection_image_filter.__doc__ = itk.RayEllipsoidIntersectionImageFilter.__doc__




