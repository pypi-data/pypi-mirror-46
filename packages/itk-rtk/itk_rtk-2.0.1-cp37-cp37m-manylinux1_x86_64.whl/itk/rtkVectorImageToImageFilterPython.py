# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkVectorImageToImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkVectorImageToImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkVectorImageToImageFilterPython
            return _rtkVectorImageToImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkVectorImageToImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkVectorImageToImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkVectorImageToImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterRTKPython
import itkImageRTKPython
import itkCovariantVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import vnl_matrix_fixedPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkIndexPython
import itkImageRegionPython
import itkRGBPixelPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkPointRTKPython
import itkCovariantVectorRTKPython
import itkImageRegionRTKPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageSourceRTKPython
import itkImageToImageFilterBPython

def rtkVectorImageToImageFilterVIF3IF4_New():
  return rtkVectorImageToImageFilterVIF3IF4.New()


def rtkVectorImageToImageFilterVIF3IF3_New():
  return rtkVectorImageToImageFilterVIF3IF3.New()


def rtkVectorImageToImageFilterVIF2IF3_New():
  return rtkVectorImageToImageFilterVIF2IF3.New()


def rtkVectorImageToImageFilterVIF2IF2_New():
  return rtkVectorImageToImageFilterVIF2IF2.New()

class rtkVectorImageToImageFilterVIF2IF2(itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2):
    """Proxy of C++ rtkVectorImageToImageFilterVIF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkVectorImageToImageFilterVIF2IF2_Pointer":
        """__New_orig__() -> rtkVectorImageToImageFilterVIF2IF2_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkVectorImageToImageFilterVIF2IF2_Pointer":
        """Clone(rtkVectorImageToImageFilterVIF2IF2 self) -> rtkVectorImageToImageFilterVIF2IF2_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2_Clone(self)

    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVIF2IF2

    def cast(obj: 'itkLightObject') -> "rtkVectorImageToImageFilterVIF2IF2 *":
        """cast(itkLightObject obj) -> rtkVectorImageToImageFilterVIF2IF2"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVIF2IF2

        Create a new object of the class rtkVectorImageToImageFilterVIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkVectorImageToImageFilterVIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkVectorImageToImageFilterVIF2IF2.Clone = new_instancemethod(_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2_Clone, None, rtkVectorImageToImageFilterVIF2IF2)
rtkVectorImageToImageFilterVIF2IF2_swigregister = _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2_swigregister
rtkVectorImageToImageFilterVIF2IF2_swigregister(rtkVectorImageToImageFilterVIF2IF2)

def rtkVectorImageToImageFilterVIF2IF2___New_orig__() -> "rtkVectorImageToImageFilterVIF2IF2_Pointer":
    """rtkVectorImageToImageFilterVIF2IF2___New_orig__() -> rtkVectorImageToImageFilterVIF2IF2_Pointer"""
    return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2___New_orig__()

def rtkVectorImageToImageFilterVIF2IF2_cast(obj: 'itkLightObject') -> "rtkVectorImageToImageFilterVIF2IF2 *":
    """rtkVectorImageToImageFilterVIF2IF2_cast(itkLightObject obj) -> rtkVectorImageToImageFilterVIF2IF2"""
    return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2_cast(obj)

class rtkVectorImageToImageFilterVIF2IF3(itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3):
    """Proxy of C++ rtkVectorImageToImageFilterVIF2IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkVectorImageToImageFilterVIF2IF3_Pointer":
        """__New_orig__() -> rtkVectorImageToImageFilterVIF2IF3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkVectorImageToImageFilterVIF2IF3_Pointer":
        """Clone(rtkVectorImageToImageFilterVIF2IF3 self) -> rtkVectorImageToImageFilterVIF2IF3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3_Clone(self)

    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVIF2IF3

    def cast(obj: 'itkLightObject') -> "rtkVectorImageToImageFilterVIF2IF3 *":
        """cast(itkLightObject obj) -> rtkVectorImageToImageFilterVIF2IF3"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVIF2IF3

        Create a new object of the class rtkVectorImageToImageFilterVIF2IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVIF2IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVIF2IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkVectorImageToImageFilterVIF2IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkVectorImageToImageFilterVIF2IF3.Clone = new_instancemethod(_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3_Clone, None, rtkVectorImageToImageFilterVIF2IF3)
rtkVectorImageToImageFilterVIF2IF3_swigregister = _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3_swigregister
rtkVectorImageToImageFilterVIF2IF3_swigregister(rtkVectorImageToImageFilterVIF2IF3)

def rtkVectorImageToImageFilterVIF2IF3___New_orig__() -> "rtkVectorImageToImageFilterVIF2IF3_Pointer":
    """rtkVectorImageToImageFilterVIF2IF3___New_orig__() -> rtkVectorImageToImageFilterVIF2IF3_Pointer"""
    return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3___New_orig__()

def rtkVectorImageToImageFilterVIF2IF3_cast(obj: 'itkLightObject') -> "rtkVectorImageToImageFilterVIF2IF3 *":
    """rtkVectorImageToImageFilterVIF2IF3_cast(itkLightObject obj) -> rtkVectorImageToImageFilterVIF2IF3"""
    return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3_cast(obj)

class rtkVectorImageToImageFilterVIF3IF3(itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3):
    """Proxy of C++ rtkVectorImageToImageFilterVIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkVectorImageToImageFilterVIF3IF3_Pointer":
        """__New_orig__() -> rtkVectorImageToImageFilterVIF3IF3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkVectorImageToImageFilterVIF3IF3_Pointer":
        """Clone(rtkVectorImageToImageFilterVIF3IF3 self) -> rtkVectorImageToImageFilterVIF3IF3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3_Clone(self)

    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVIF3IF3

    def cast(obj: 'itkLightObject') -> "rtkVectorImageToImageFilterVIF3IF3 *":
        """cast(itkLightObject obj) -> rtkVectorImageToImageFilterVIF3IF3"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVIF3IF3

        Create a new object of the class rtkVectorImageToImageFilterVIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkVectorImageToImageFilterVIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkVectorImageToImageFilterVIF3IF3.Clone = new_instancemethod(_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3_Clone, None, rtkVectorImageToImageFilterVIF3IF3)
rtkVectorImageToImageFilterVIF3IF3_swigregister = _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3_swigregister
rtkVectorImageToImageFilterVIF3IF3_swigregister(rtkVectorImageToImageFilterVIF3IF3)

def rtkVectorImageToImageFilterVIF3IF3___New_orig__() -> "rtkVectorImageToImageFilterVIF3IF3_Pointer":
    """rtkVectorImageToImageFilterVIF3IF3___New_orig__() -> rtkVectorImageToImageFilterVIF3IF3_Pointer"""
    return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3___New_orig__()

def rtkVectorImageToImageFilterVIF3IF3_cast(obj: 'itkLightObject') -> "rtkVectorImageToImageFilterVIF3IF3 *":
    """rtkVectorImageToImageFilterVIF3IF3_cast(itkLightObject obj) -> rtkVectorImageToImageFilterVIF3IF3"""
    return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3_cast(obj)

class rtkVectorImageToImageFilterVIF3IF4(itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4):
    """Proxy of C++ rtkVectorImageToImageFilterVIF3IF4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkVectorImageToImageFilterVIF3IF4_Pointer":
        """__New_orig__() -> rtkVectorImageToImageFilterVIF3IF4_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkVectorImageToImageFilterVIF3IF4_Pointer":
        """Clone(rtkVectorImageToImageFilterVIF3IF4 self) -> rtkVectorImageToImageFilterVIF3IF4_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4_Clone(self)

    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVIF3IF4

    def cast(obj: 'itkLightObject') -> "rtkVectorImageToImageFilterVIF3IF4 *":
        """cast(itkLightObject obj) -> rtkVectorImageToImageFilterVIF3IF4"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVIF3IF4

        Create a new object of the class rtkVectorImageToImageFilterVIF3IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVIF3IF4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVIF3IF4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkVectorImageToImageFilterVIF3IF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkVectorImageToImageFilterVIF3IF4.Clone = new_instancemethod(_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4_Clone, None, rtkVectorImageToImageFilterVIF3IF4)
rtkVectorImageToImageFilterVIF3IF4_swigregister = _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4_swigregister
rtkVectorImageToImageFilterVIF3IF4_swigregister(rtkVectorImageToImageFilterVIF3IF4)

def rtkVectorImageToImageFilterVIF3IF4___New_orig__() -> "rtkVectorImageToImageFilterVIF3IF4_Pointer":
    """rtkVectorImageToImageFilterVIF3IF4___New_orig__() -> rtkVectorImageToImageFilterVIF3IF4_Pointer"""
    return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4___New_orig__()

def rtkVectorImageToImageFilterVIF3IF4_cast(obj: 'itkLightObject') -> "rtkVectorImageToImageFilterVIF3IF4 *":
    """rtkVectorImageToImageFilterVIF3IF4_cast(itkLightObject obj) -> rtkVectorImageToImageFilterVIF3IF4"""
    return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4_cast(obj)


def vector_image_to_image_filter(*args, **kwargs):
    """Procedural interface for VectorImageToImageFilter"""
    import itk
    instance = itk.VectorImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vector_image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.VectorImageToImageFilter, itkTemplate.itkTemplate):
        vector_image_to_image_filter.__doc__ = itk.VectorImageToImageFilter.values()[0].__doc__
    else:
        vector_image_to_image_filter.__doc__ = itk.VectorImageToImageFilter.__doc__




