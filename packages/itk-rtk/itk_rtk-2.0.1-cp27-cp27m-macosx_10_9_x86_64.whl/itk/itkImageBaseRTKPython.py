# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageBaseRTKPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageBaseRTKPython', [dirname(__file__)])
        except ImportError:
            import _itkImageBaseRTKPython
            return _itkImageBaseRTKPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageBaseRTKPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageBaseRTKPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageBaseRTKPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython
import itkImageRegionRTKPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython

def itkImageBase1_New():
  return itkImageBase1.New()

class itkContinuousIndexD1(itkPointRTKPython.itkPointD1):
    """Proxy of C++ itkContinuousIndexD1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __swig_destroy__ = _itkImageBaseRTKPython.delete_itkContinuousIndexD1

    def __init__(self, *args):
        """
        __init__(itkContinuousIndexD1 self) -> itkContinuousIndexD1
        __init__(itkContinuousIndexD1 self, itkContinuousIndexD1 arg0) -> itkContinuousIndexD1
        __init__(itkContinuousIndexD1 self, double const * r) -> itkContinuousIndexD1
        __init__(itkContinuousIndexD1 self, itkIndex1 index) -> itkContinuousIndexD1
        """
        _itkImageBaseRTKPython.itkContinuousIndexD1_swiginit(self, _itkImageBaseRTKPython.new_itkContinuousIndexD1(*args))

    def __getitem__(self, d):
        """__getitem__(itkContinuousIndexD1 self, unsigned long d) -> double"""
        return _itkImageBaseRTKPython.itkContinuousIndexD1___getitem__(self, d)


    def __setitem__(self, d, v):
        """__setitem__(itkContinuousIndexD1 self, unsigned long d, double v)"""
        return _itkImageBaseRTKPython.itkContinuousIndexD1___setitem__(self, d, v)


    def __len__():
        """__len__() -> unsigned int"""
        return _itkImageBaseRTKPython.itkContinuousIndexD1___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self):
        """__repr__(itkContinuousIndexD1 self) -> std::string"""
        return _itkImageBaseRTKPython.itkContinuousIndexD1___repr__(self)

itkContinuousIndexD1.__getitem__ = new_instancemethod(_itkImageBaseRTKPython.itkContinuousIndexD1___getitem__, None, itkContinuousIndexD1)
itkContinuousIndexD1.__setitem__ = new_instancemethod(_itkImageBaseRTKPython.itkContinuousIndexD1___setitem__, None, itkContinuousIndexD1)
itkContinuousIndexD1.__repr__ = new_instancemethod(_itkImageBaseRTKPython.itkContinuousIndexD1___repr__, None, itkContinuousIndexD1)
itkContinuousIndexD1_swigregister = _itkImageBaseRTKPython.itkContinuousIndexD1_swigregister
itkContinuousIndexD1_swigregister(itkContinuousIndexD1)

def itkContinuousIndexD1___len__():
    """itkContinuousIndexD1___len__() -> unsigned int"""
    return _itkImageBaseRTKPython.itkContinuousIndexD1___len__()

class itkImageBase1(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkImageBase1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageBase1_Pointer"""
        return _itkImageBaseRTKPython.itkImageBase1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageBase1 self) -> itkImageBase1_Pointer"""
        return _itkImageBaseRTKPython.itkImageBase1_Clone(self)


    def GetImageDimension():
        """GetImageDimension() -> unsigned int"""
        return _itkImageBaseRTKPython.itkImageBase1_GetImageDimension()

    GetImageDimension = staticmethod(GetImageDimension)

    def SetOrigin(self, *args):
        """
        SetOrigin(itkImageBase1 self, itkPointD1 _arg)
        SetOrigin(itkImageBase1 self, double const * origin)
        SetOrigin(itkImageBase1 self, float const * origin)
        """
        return _itkImageBaseRTKPython.itkImageBase1_SetOrigin(self, *args)


    def SetDirection(self, direction):
        """SetDirection(itkImageBase1 self, itkMatrixD11 direction)"""
        return _itkImageBaseRTKPython.itkImageBase1_SetDirection(self, direction)


    def GetDirection(self):
        """GetDirection(itkImageBase1 self) -> itkMatrixD11"""
        return _itkImageBaseRTKPython.itkImageBase1_GetDirection(self)


    def GetInverseDirection(self):
        """GetInverseDirection(itkImageBase1 self) -> itkMatrixD11"""
        return _itkImageBaseRTKPython.itkImageBase1_GetInverseDirection(self)


    def GetSpacing(self):
        """GetSpacing(itkImageBase1 self) -> itkVectorD1"""
        return _itkImageBaseRTKPython.itkImageBase1_GetSpacing(self)


    def GetOrigin(self):
        """GetOrigin(itkImageBase1 self) -> itkPointD1"""
        return _itkImageBaseRTKPython.itkImageBase1_GetOrigin(self)


    def Allocate(self, initialize=False):
        """
        Allocate(itkImageBase1 self, bool initialize=False)
        Allocate(itkImageBase1 self)
        """
        return _itkImageBaseRTKPython.itkImageBase1_Allocate(self, initialize)


    def SetLargestPossibleRegion(self, region):
        """SetLargestPossibleRegion(itkImageBase1 self, itkImageRegion1 region)"""
        return _itkImageBaseRTKPython.itkImageBase1_SetLargestPossibleRegion(self, region)


    def GetLargestPossibleRegion(self):
        """GetLargestPossibleRegion(itkImageBase1 self) -> itkImageRegion1"""
        return _itkImageBaseRTKPython.itkImageBase1_GetLargestPossibleRegion(self)


    def SetBufferedRegion(self, region):
        """SetBufferedRegion(itkImageBase1 self, itkImageRegion1 region)"""
        return _itkImageBaseRTKPython.itkImageBase1_SetBufferedRegion(self, region)


    def GetBufferedRegion(self):
        """GetBufferedRegion(itkImageBase1 self) -> itkImageRegion1"""
        return _itkImageBaseRTKPython.itkImageBase1_GetBufferedRegion(self)


    def SetRequestedRegion(self, *args):
        """
        SetRequestedRegion(itkImageBase1 self, itkImageRegion1 region)
        SetRequestedRegion(itkImageBase1 self, itkDataObject data)
        """
        return _itkImageBaseRTKPython.itkImageBase1_SetRequestedRegion(self, *args)


    def GetRequestedRegion(self):
        """GetRequestedRegion(itkImageBase1 self) -> itkImageRegion1"""
        return _itkImageBaseRTKPython.itkImageBase1_GetRequestedRegion(self)


    def SetRegions(self, *args):
        """
        SetRegions(itkImageBase1 self, itkImageRegion1 region)
        SetRegions(itkImageBase1 self, itkSize1 size)
        """
        return _itkImageBaseRTKPython.itkImageBase1_SetRegions(self, *args)


    def GetOffsetTable(self):
        """GetOffsetTable(itkImageBase1 self) -> long const *"""
        return _itkImageBaseRTKPython.itkImageBase1_GetOffsetTable(self)


    def ComputeOffset(self, ind):
        """ComputeOffset(itkImageBase1 self, itkIndex1 ind) -> long"""
        return _itkImageBaseRTKPython.itkImageBase1_ComputeOffset(self, ind)


    def ComputeIndex(self, offset):
        """ComputeIndex(itkImageBase1 self, long offset) -> itkIndex1"""
        return _itkImageBaseRTKPython.itkImageBase1_ComputeIndex(self, offset)


    def SetSpacing(self, *args):
        """
        SetSpacing(itkImageBase1 self, itkVectorD1 spacing)
        SetSpacing(itkImageBase1 self, double const * spacing)
        SetSpacing(itkImageBase1 self, float const * spacing)
        """
        return _itkImageBaseRTKPython.itkImageBase1_SetSpacing(self, *args)


    def Graft(self, data):
        """Graft(itkImageBase1 self, itkImageBase1 data)"""
        return _itkImageBaseRTKPython.itkImageBase1_Graft(self, data)


    def GetNumberOfComponentsPerPixel(self):
        """GetNumberOfComponentsPerPixel(itkImageBase1 self) -> unsigned int"""
        return _itkImageBaseRTKPython.itkImageBase1_GetNumberOfComponentsPerPixel(self)


    def SetNumberOfComponentsPerPixel(self, arg0):
        """SetNumberOfComponentsPerPixel(itkImageBase1 self, unsigned int arg0)"""
        return _itkImageBaseRTKPython.itkImageBase1_SetNumberOfComponentsPerPixel(self, arg0)

    __swig_destroy__ = _itkImageBaseRTKPython.delete_itkImageBase1

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageBase1"""
        return _itkImageBaseRTKPython.itkImageBase1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageBase1

        Create a new object of the class itkImageBase1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageBase1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageBase1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def TransformPhysicalPointToIndex(self, point):
        """TransformPhysicalPointToIndex(itkImageBase1 self, itkPointD1 point) -> itkIndex1"""
        return _itkImageBaseRTKPython.itkImageBase1_TransformPhysicalPointToIndex(self, point)


    def TransformPhysicalPointToContinuousIndex(self, point):
        """TransformPhysicalPointToContinuousIndex(itkImageBase1 self, itkPointD1 point) -> itkContinuousIndexD1"""
        return _itkImageBaseRTKPython.itkImageBase1_TransformPhysicalPointToContinuousIndex(self, point)


    def TransformContinuousIndexToPhysicalPoint(self, idx):
        """TransformContinuousIndexToPhysicalPoint(itkImageBase1 self, itkContinuousIndexD1 idx) -> itkPointD1"""
        return _itkImageBaseRTKPython.itkImageBase1_TransformContinuousIndexToPhysicalPoint(self, idx)


    def TransformIndexToPhysicalPoint(self, idx):
        """TransformIndexToPhysicalPoint(itkImageBase1 self, itkIndex1 idx) -> itkPointD1"""
        return _itkImageBaseRTKPython.itkImageBase1_TransformIndexToPhysicalPoint(self, idx)

itkImageBase1.Clone = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_Clone, None, itkImageBase1)
itkImageBase1.SetOrigin = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_SetOrigin, None, itkImageBase1)
itkImageBase1.SetDirection = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_SetDirection, None, itkImageBase1)
itkImageBase1.GetDirection = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetDirection, None, itkImageBase1)
itkImageBase1.GetInverseDirection = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetInverseDirection, None, itkImageBase1)
itkImageBase1.GetSpacing = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetSpacing, None, itkImageBase1)
itkImageBase1.GetOrigin = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetOrigin, None, itkImageBase1)
itkImageBase1.Allocate = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_Allocate, None, itkImageBase1)
itkImageBase1.SetLargestPossibleRegion = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_SetLargestPossibleRegion, None, itkImageBase1)
itkImageBase1.GetLargestPossibleRegion = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetLargestPossibleRegion, None, itkImageBase1)
itkImageBase1.SetBufferedRegion = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_SetBufferedRegion, None, itkImageBase1)
itkImageBase1.GetBufferedRegion = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetBufferedRegion, None, itkImageBase1)
itkImageBase1.SetRequestedRegion = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_SetRequestedRegion, None, itkImageBase1)
itkImageBase1.GetRequestedRegion = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetRequestedRegion, None, itkImageBase1)
itkImageBase1.SetRegions = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_SetRegions, None, itkImageBase1)
itkImageBase1.GetOffsetTable = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetOffsetTable, None, itkImageBase1)
itkImageBase1.ComputeOffset = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_ComputeOffset, None, itkImageBase1)
itkImageBase1.ComputeIndex = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_ComputeIndex, None, itkImageBase1)
itkImageBase1.SetSpacing = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_SetSpacing, None, itkImageBase1)
itkImageBase1.Graft = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_Graft, None, itkImageBase1)
itkImageBase1.GetNumberOfComponentsPerPixel = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_GetNumberOfComponentsPerPixel, None, itkImageBase1)
itkImageBase1.SetNumberOfComponentsPerPixel = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_SetNumberOfComponentsPerPixel, None, itkImageBase1)
itkImageBase1.TransformPhysicalPointToIndex = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_TransformPhysicalPointToIndex, None, itkImageBase1)
itkImageBase1.TransformPhysicalPointToContinuousIndex = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_TransformPhysicalPointToContinuousIndex, None, itkImageBase1)
itkImageBase1.TransformContinuousIndexToPhysicalPoint = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_TransformContinuousIndexToPhysicalPoint, None, itkImageBase1)
itkImageBase1.TransformIndexToPhysicalPoint = new_instancemethod(_itkImageBaseRTKPython.itkImageBase1_TransformIndexToPhysicalPoint, None, itkImageBase1)
itkImageBase1_swigregister = _itkImageBaseRTKPython.itkImageBase1_swigregister
itkImageBase1_swigregister(itkImageBase1)

def itkImageBase1___New_orig__():
    """itkImageBase1___New_orig__() -> itkImageBase1_Pointer"""
    return _itkImageBaseRTKPython.itkImageBase1___New_orig__()

def itkImageBase1_GetImageDimension():
    """itkImageBase1_GetImageDimension() -> unsigned int"""
    return _itkImageBaseRTKPython.itkImageBase1_GetImageDimension()

def itkImageBase1_cast(obj):
    """itkImageBase1_cast(itkLightObject obj) -> itkImageBase1"""
    return _itkImageBaseRTKPython.itkImageBase1_cast(obj)



