# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkImageToVectorImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkImageToVectorImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkImageToVectorImageFilterPython
            return _rtkImageToVectorImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkImageToVectorImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkImageToVectorImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkImageToVectorImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkImageToImageFilterRTKPython
import itkImageRTKPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkImagePython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython
import itkImageRegionRTKPython
import itkImageSourceRTKPython
import itkImageSourceCommonPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython

def rtkImageToVectorImageFilterIF3VIF2_New():
  return rtkImageToVectorImageFilterIF3VIF2.New()


def rtkImageToVectorImageFilterIF2VIF2_New():
  return rtkImageToVectorImageFilterIF2VIF2.New()

class rtkImageToVectorImageFilterIF2VIF2(itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2):
    """Proxy of C++ rtkImageToVectorImageFilterIF2VIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> rtkImageToVectorImageFilterIF2VIF2_Pointer"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(rtkImageToVectorImageFilterIF2VIF2 self) -> rtkImageToVectorImageFilterIF2VIF2_Pointer"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_Clone(self)


    def SetNumberOfChannels(self, _arg):
        """SetNumberOfChannels(rtkImageToVectorImageFilterIF2VIF2 self, unsigned int const _arg)"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_SetNumberOfChannels(self, _arg)


    def GetNumberOfChannels(self):
        """GetNumberOfChannels(rtkImageToVectorImageFilterIF2VIF2 self) -> unsigned int"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_GetNumberOfChannels(self)

    __swig_destroy__ = _rtkImageToVectorImageFilterPython.delete_rtkImageToVectorImageFilterIF2VIF2

    def cast(obj):
        """cast(itkLightObject obj) -> rtkImageToVectorImageFilterIF2VIF2"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkImageToVectorImageFilterIF2VIF2

        Create a new object of the class rtkImageToVectorImageFilterIF2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkImageToVectorImageFilterIF2VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkImageToVectorImageFilterIF2VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkImageToVectorImageFilterIF2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkImageToVectorImageFilterIF2VIF2.Clone = new_instancemethod(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_Clone, None, rtkImageToVectorImageFilterIF2VIF2)
rtkImageToVectorImageFilterIF2VIF2.SetNumberOfChannels = new_instancemethod(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_SetNumberOfChannels, None, rtkImageToVectorImageFilterIF2VIF2)
rtkImageToVectorImageFilterIF2VIF2.GetNumberOfChannels = new_instancemethod(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_GetNumberOfChannels, None, rtkImageToVectorImageFilterIF2VIF2)
rtkImageToVectorImageFilterIF2VIF2_swigregister = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_swigregister
rtkImageToVectorImageFilterIF2VIF2_swigregister(rtkImageToVectorImageFilterIF2VIF2)

def rtkImageToVectorImageFilterIF2VIF2___New_orig__():
    """rtkImageToVectorImageFilterIF2VIF2___New_orig__() -> rtkImageToVectorImageFilterIF2VIF2_Pointer"""
    return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2___New_orig__()

def rtkImageToVectorImageFilterIF2VIF2_cast(obj):
    """rtkImageToVectorImageFilterIF2VIF2_cast(itkLightObject obj) -> rtkImageToVectorImageFilterIF2VIF2"""
    return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF2VIF2_cast(obj)

class rtkImageToVectorImageFilterIF3VIF2(itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2):
    """Proxy of C++ rtkImageToVectorImageFilterIF3VIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> rtkImageToVectorImageFilterIF3VIF2_Pointer"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(rtkImageToVectorImageFilterIF3VIF2 self) -> rtkImageToVectorImageFilterIF3VIF2_Pointer"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_Clone(self)


    def SetNumberOfChannels(self, _arg):
        """SetNumberOfChannels(rtkImageToVectorImageFilterIF3VIF2 self, unsigned int const _arg)"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_SetNumberOfChannels(self, _arg)


    def GetNumberOfChannels(self):
        """GetNumberOfChannels(rtkImageToVectorImageFilterIF3VIF2 self) -> unsigned int"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_GetNumberOfChannels(self)

    __swig_destroy__ = _rtkImageToVectorImageFilterPython.delete_rtkImageToVectorImageFilterIF3VIF2

    def cast(obj):
        """cast(itkLightObject obj) -> rtkImageToVectorImageFilterIF3VIF2"""
        return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkImageToVectorImageFilterIF3VIF2

        Create a new object of the class rtkImageToVectorImageFilterIF3VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkImageToVectorImageFilterIF3VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkImageToVectorImageFilterIF3VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkImageToVectorImageFilterIF3VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkImageToVectorImageFilterIF3VIF2.Clone = new_instancemethod(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_Clone, None, rtkImageToVectorImageFilterIF3VIF2)
rtkImageToVectorImageFilterIF3VIF2.SetNumberOfChannels = new_instancemethod(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_SetNumberOfChannels, None, rtkImageToVectorImageFilterIF3VIF2)
rtkImageToVectorImageFilterIF3VIF2.GetNumberOfChannels = new_instancemethod(_rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_GetNumberOfChannels, None, rtkImageToVectorImageFilterIF3VIF2)
rtkImageToVectorImageFilterIF3VIF2_swigregister = _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_swigregister
rtkImageToVectorImageFilterIF3VIF2_swigregister(rtkImageToVectorImageFilterIF3VIF2)

def rtkImageToVectorImageFilterIF3VIF2___New_orig__():
    """rtkImageToVectorImageFilterIF3VIF2___New_orig__() -> rtkImageToVectorImageFilterIF3VIF2_Pointer"""
    return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2___New_orig__()

def rtkImageToVectorImageFilterIF3VIF2_cast(obj):
    """rtkImageToVectorImageFilterIF3VIF2_cast(itkLightObject obj) -> rtkImageToVectorImageFilterIF3VIF2"""
    return _rtkImageToVectorImageFilterPython.rtkImageToVectorImageFilterIF3VIF2_cast(obj)


def image_to_vector_image_filter(*args, **kwargs):
    """Procedural interface for ImageToVectorImageFilter"""
    import itk
    instance = itk.ImageToVectorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_vector_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageToVectorImageFilter, itkTemplate.itkTemplate):
        image_to_vector_image_filter.__doc__ = itk.ImageToVectorImageFilter.values()[0].__doc__
    else:
        image_to_vector_image_filter.__doc__ = itk.ImageToVectorImageFilter.__doc__




