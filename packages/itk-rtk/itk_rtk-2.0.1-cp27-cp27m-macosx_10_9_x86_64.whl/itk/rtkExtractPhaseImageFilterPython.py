# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkExtractPhaseImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkExtractPhaseImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkExtractPhaseImageFilterPython
            return _rtkExtractPhaseImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkExtractPhaseImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkExtractPhaseImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkExtractPhaseImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkInPlaceImageFilterRTKPython
import itkImageToImageFilterRTKPython
import itkImageRTKPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkImagePython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython
import itkImageRegionRTKPython
import itkImageSourceRTKPython
import itkImageSourceCommonPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython

def rtkExtractPhaseImageFilterID1_New():
  return rtkExtractPhaseImageFilterID1.New()


def rtkExtractPhaseImageFilterIF1_New():
  return rtkExtractPhaseImageFilterIF1.New()

class rtkExtractPhaseImageFilterID1(itkInPlaceImageFilterRTKPython.itkInPlaceImageFilterID1ID1):
    """Proxy of C++ rtkExtractPhaseImageFilterID1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LOCAL_PHASE = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_LOCAL_PHASE
    LINEAR_BETWEEN_MINIMA = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_LINEAR_BETWEEN_MINIMA
    LINEAR_BETWEEN_MAXIMA = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_LINEAR_BETWEEN_MAXIMA

    def __New_orig__():
        """__New_orig__() -> rtkExtractPhaseImageFilterID1_Pointer"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(rtkExtractPhaseImageFilterID1 self) -> rtkExtractPhaseImageFilterID1_Pointer"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_Clone(self)


    def SetMovingAverageSize(self, _arg):
        """SetMovingAverageSize(rtkExtractPhaseImageFilterID1 self, unsigned long const _arg)"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetMovingAverageSize(self, _arg)


    def GetMovingAverageSize(self):
        """GetMovingAverageSize(rtkExtractPhaseImageFilterID1 self) -> unsigned long"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMovingAverageSize(self)


    def SetUnsharpMaskSize(self, _arg):
        """SetUnsharpMaskSize(rtkExtractPhaseImageFilterID1 self, unsigned long const _arg)"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetUnsharpMaskSize(self, _arg)


    def GetUnsharpMaskSize(self):
        """GetUnsharpMaskSize(rtkExtractPhaseImageFilterID1 self) -> unsigned long"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetUnsharpMaskSize(self)


    def GetMinimaPositions(self):
        """GetMinimaPositions(rtkExtractPhaseImageFilterID1 self) -> vectorI"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMinimaPositions(self)


    def GetMaximaPositions(self):
        """GetMaximaPositions(rtkExtractPhaseImageFilterID1 self) -> vectorI"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMaximaPositions(self)


    def SetModel(self, _arg):
        """SetModel(rtkExtractPhaseImageFilterID1 self, rtkExtractPhaseImageFilterID1::ModelType const _arg)"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetModel(self, _arg)


    def GetModel(self):
        """GetModel(rtkExtractPhaseImageFilterID1 self) -> rtkExtractPhaseImageFilterID1::ModelType"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetModel(self)

    __swig_destroy__ = _rtkExtractPhaseImageFilterPython.delete_rtkExtractPhaseImageFilterID1

    def cast(obj):
        """cast(itkLightObject obj) -> rtkExtractPhaseImageFilterID1"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkExtractPhaseImageFilterID1

        Create a new object of the class rtkExtractPhaseImageFilterID1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkExtractPhaseImageFilterID1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkExtractPhaseImageFilterID1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkExtractPhaseImageFilterID1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkExtractPhaseImageFilterID1.Clone = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_Clone, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1.SetMovingAverageSize = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetMovingAverageSize, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1.GetMovingAverageSize = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMovingAverageSize, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1.SetUnsharpMaskSize = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetUnsharpMaskSize, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1.GetUnsharpMaskSize = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetUnsharpMaskSize, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1.GetMinimaPositions = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMinimaPositions, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1.GetMaximaPositions = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMaximaPositions, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1.SetModel = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetModel, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1.GetModel = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetModel, None, rtkExtractPhaseImageFilterID1)
rtkExtractPhaseImageFilterID1_swigregister = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_swigregister
rtkExtractPhaseImageFilterID1_swigregister(rtkExtractPhaseImageFilterID1)

def rtkExtractPhaseImageFilterID1___New_orig__():
    """rtkExtractPhaseImageFilterID1___New_orig__() -> rtkExtractPhaseImageFilterID1_Pointer"""
    return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1___New_orig__()

def rtkExtractPhaseImageFilterID1_cast(obj):
    """rtkExtractPhaseImageFilterID1_cast(itkLightObject obj) -> rtkExtractPhaseImageFilterID1"""
    return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_cast(obj)

class rtkExtractPhaseImageFilterIF1(itkInPlaceImageFilterRTKPython.itkInPlaceImageFilterIF1IF1):
    """Proxy of C++ rtkExtractPhaseImageFilterIF1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LOCAL_PHASE = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_LOCAL_PHASE
    LINEAR_BETWEEN_MINIMA = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_LINEAR_BETWEEN_MINIMA
    LINEAR_BETWEEN_MAXIMA = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_LINEAR_BETWEEN_MAXIMA

    def __New_orig__():
        """__New_orig__() -> rtkExtractPhaseImageFilterIF1_Pointer"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(rtkExtractPhaseImageFilterIF1 self) -> rtkExtractPhaseImageFilterIF1_Pointer"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_Clone(self)


    def SetMovingAverageSize(self, _arg):
        """SetMovingAverageSize(rtkExtractPhaseImageFilterIF1 self, unsigned long const _arg)"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetMovingAverageSize(self, _arg)


    def GetMovingAverageSize(self):
        """GetMovingAverageSize(rtkExtractPhaseImageFilterIF1 self) -> unsigned long"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMovingAverageSize(self)


    def SetUnsharpMaskSize(self, _arg):
        """SetUnsharpMaskSize(rtkExtractPhaseImageFilterIF1 self, unsigned long const _arg)"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetUnsharpMaskSize(self, _arg)


    def GetUnsharpMaskSize(self):
        """GetUnsharpMaskSize(rtkExtractPhaseImageFilterIF1 self) -> unsigned long"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetUnsharpMaskSize(self)


    def GetMinimaPositions(self):
        """GetMinimaPositions(rtkExtractPhaseImageFilterIF1 self) -> vectorI"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMinimaPositions(self)


    def GetMaximaPositions(self):
        """GetMaximaPositions(rtkExtractPhaseImageFilterIF1 self) -> vectorI"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMaximaPositions(self)


    def SetModel(self, _arg):
        """SetModel(rtkExtractPhaseImageFilterIF1 self, rtkExtractPhaseImageFilterIF1::ModelType const _arg)"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetModel(self, _arg)


    def GetModel(self):
        """GetModel(rtkExtractPhaseImageFilterIF1 self) -> rtkExtractPhaseImageFilterIF1::ModelType"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetModel(self)

    __swig_destroy__ = _rtkExtractPhaseImageFilterPython.delete_rtkExtractPhaseImageFilterIF1

    def cast(obj):
        """cast(itkLightObject obj) -> rtkExtractPhaseImageFilterIF1"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkExtractPhaseImageFilterIF1

        Create a new object of the class rtkExtractPhaseImageFilterIF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkExtractPhaseImageFilterIF1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkExtractPhaseImageFilterIF1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkExtractPhaseImageFilterIF1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkExtractPhaseImageFilterIF1.Clone = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_Clone, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1.SetMovingAverageSize = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetMovingAverageSize, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1.GetMovingAverageSize = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMovingAverageSize, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1.SetUnsharpMaskSize = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetUnsharpMaskSize, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1.GetUnsharpMaskSize = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetUnsharpMaskSize, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1.GetMinimaPositions = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMinimaPositions, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1.GetMaximaPositions = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMaximaPositions, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1.SetModel = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetModel, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1.GetModel = new_instancemethod(_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetModel, None, rtkExtractPhaseImageFilterIF1)
rtkExtractPhaseImageFilterIF1_swigregister = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_swigregister
rtkExtractPhaseImageFilterIF1_swigregister(rtkExtractPhaseImageFilterIF1)

def rtkExtractPhaseImageFilterIF1___New_orig__():
    """rtkExtractPhaseImageFilterIF1___New_orig__() -> rtkExtractPhaseImageFilterIF1_Pointer"""
    return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1___New_orig__()

def rtkExtractPhaseImageFilterIF1_cast(obj):
    """rtkExtractPhaseImageFilterIF1_cast(itkLightObject obj) -> rtkExtractPhaseImageFilterIF1"""
    return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_cast(obj)


def extract_phase_image_filter(*args, **kwargs):
    """Procedural interface for ExtractPhaseImageFilter"""
    import itk
    instance = itk.ExtractPhaseImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def extract_phase_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ExtractPhaseImageFilter, itkTemplate.itkTemplate):
        extract_phase_image_filter.__doc__ = itk.ExtractPhaseImageFilter.values()[0].__doc__
    else:
        extract_phase_image_filter.__doc__ = itk.ExtractPhaseImageFilter.__doc__




