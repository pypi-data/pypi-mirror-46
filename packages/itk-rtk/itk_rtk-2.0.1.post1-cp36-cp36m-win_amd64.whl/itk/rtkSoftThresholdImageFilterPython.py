# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkSoftThresholdImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkSoftThresholdImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkSoftThresholdImageFilterPython
            return _rtkSoftThresholdImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkSoftThresholdImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkSoftThresholdImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkSoftThresholdImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkVectorImagePython
import stdcomplexPython
import itkImagePython
import itkCovariantVectorPython
import itkFixedArrayPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkPointPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBPixelPython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterBPython

def rtkSoftThresholdImageFilterIF3IF3_New():
  return rtkSoftThresholdImageFilterIF3IF3.New()


def itkUnaryFunctorImageFilterIF3IF3STFF_New():
  return itkUnaryFunctorImageFilterIF3IF3STFF.New()

class itkUnaryFunctorImageFilterIF3IF3STFF(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ itkUnaryFunctorImageFilterIF3IF3STFF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkUnaryFunctorImageFilterIF3IF3STFF_Pointer":
        """__New_orig__() -> itkUnaryFunctorImageFilterIF3IF3STFF_Pointer"""
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkUnaryFunctorImageFilterIF3IF3STFF_Pointer":
        """Clone(itkUnaryFunctorImageFilterIF3IF3STFF self) -> itkUnaryFunctorImageFilterIF3IF3STFF_Pointer"""
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_Clone(self)


    def GetFunctor(self, *args) -> "rtkFunctorSoftThresholdFF const &":
        """
        GetFunctor(itkUnaryFunctorImageFilterIF3IF3STFF self) -> rtkFunctorSoftThresholdFF
        GetFunctor(itkUnaryFunctorImageFilterIF3IF3STFF self) -> rtkFunctorSoftThresholdFF
        """
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_GetFunctor(self, *args)


    def SetFunctor(self, functor: 'rtkFunctorSoftThresholdFF') -> "void":
        """SetFunctor(itkUnaryFunctorImageFilterIF3IF3STFF self, rtkFunctorSoftThresholdFF functor)"""
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_SetFunctor(self, functor)

    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_itkUnaryFunctorImageFilterIF3IF3STFF

    def cast(obj: 'itkLightObject') -> "itkUnaryFunctorImageFilterIF3IF3STFF *":
        """cast(itkLightObject obj) -> itkUnaryFunctorImageFilterIF3IF3STFF"""
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkUnaryFunctorImageFilterIF3IF3STFF

        Create a new object of the class itkUnaryFunctorImageFilterIF3IF3STFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryFunctorImageFilterIF3IF3STFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkUnaryFunctorImageFilterIF3IF3STFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkUnaryFunctorImageFilterIF3IF3STFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkUnaryFunctorImageFilterIF3IF3STFF.Clone = new_instancemethod(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_Clone, None, itkUnaryFunctorImageFilterIF3IF3STFF)
itkUnaryFunctorImageFilterIF3IF3STFF.GetFunctor = new_instancemethod(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_GetFunctor, None, itkUnaryFunctorImageFilterIF3IF3STFF)
itkUnaryFunctorImageFilterIF3IF3STFF.SetFunctor = new_instancemethod(_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_SetFunctor, None, itkUnaryFunctorImageFilterIF3IF3STFF)
itkUnaryFunctorImageFilterIF3IF3STFF_swigregister = _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_swigregister
itkUnaryFunctorImageFilterIF3IF3STFF_swigregister(itkUnaryFunctorImageFilterIF3IF3STFF)

def itkUnaryFunctorImageFilterIF3IF3STFF___New_orig__() -> "itkUnaryFunctorImageFilterIF3IF3STFF_Pointer":
    """itkUnaryFunctorImageFilterIF3IF3STFF___New_orig__() -> itkUnaryFunctorImageFilterIF3IF3STFF_Pointer"""
    return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF___New_orig__()

def itkUnaryFunctorImageFilterIF3IF3STFF_cast(obj: 'itkLightObject') -> "itkUnaryFunctorImageFilterIF3IF3STFF *":
    """itkUnaryFunctorImageFilterIF3IF3STFF_cast(itkLightObject obj) -> itkUnaryFunctorImageFilterIF3IF3STFF"""
    return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_cast(obj)

class rtkFunctorSoftThresholdFF(object):
    """Proxy of C++ rtkFunctorSoftThresholdFF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkFunctorSoftThresholdFF

    def SetThreshold(self, thresh: 'float const &') -> "void":
        """SetThreshold(rtkFunctorSoftThresholdFF self, float const & thresh)"""
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_SetThreshold(self, thresh)


    def __ne__(self, other: 'rtkFunctorSoftThresholdFF') -> "bool":
        """__ne__(rtkFunctorSoftThresholdFF self, rtkFunctorSoftThresholdFF other) -> bool"""
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___ne__(self, other)


    def __eq__(self, other: 'rtkFunctorSoftThresholdFF') -> "bool":
        """__eq__(rtkFunctorSoftThresholdFF self, rtkFunctorSoftThresholdFF other) -> bool"""
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___eq__(self, other)


    def __call__(self, A: 'float const &') -> "float":
        """__call__(rtkFunctorSoftThresholdFF self, float const & A) -> float"""
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___call__(self, A)


    def __init__(self, *args):
        """
        __init__(rtkFunctorSoftThresholdFF self) -> rtkFunctorSoftThresholdFF
        __init__(rtkFunctorSoftThresholdFF self, rtkFunctorSoftThresholdFF arg0) -> rtkFunctorSoftThresholdFF
        """
        _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_swiginit(self, _rtkSoftThresholdImageFilterPython.new_rtkFunctorSoftThresholdFF(*args))
rtkFunctorSoftThresholdFF.SetThreshold = new_instancemethod(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_SetThreshold, None, rtkFunctorSoftThresholdFF)
rtkFunctorSoftThresholdFF.__ne__ = new_instancemethod(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___ne__, None, rtkFunctorSoftThresholdFF)
rtkFunctorSoftThresholdFF.__eq__ = new_instancemethod(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___eq__, None, rtkFunctorSoftThresholdFF)
rtkFunctorSoftThresholdFF.__call__ = new_instancemethod(_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___call__, None, rtkFunctorSoftThresholdFF)
rtkFunctorSoftThresholdFF_swigregister = _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_swigregister
rtkFunctorSoftThresholdFF_swigregister(rtkFunctorSoftThresholdFF)

class rtkSoftThresholdImageFilterIF3IF3(itkUnaryFunctorImageFilterIF3IF3STFF):
    """Proxy of C++ rtkSoftThresholdImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkSoftThresholdImageFilterIF3IF3_Pointer":
        """__New_orig__() -> rtkSoftThresholdImageFilterIF3IF3_Pointer"""
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkSoftThresholdImageFilterIF3IF3_Pointer":
        """Clone(rtkSoftThresholdImageFilterIF3IF3 self) -> rtkSoftThresholdImageFilterIF3IF3_Pointer"""
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_Clone(self)


    def SetThreshold(self, threshold: 'float const') -> "void":
        """SetThreshold(rtkSoftThresholdImageFilterIF3IF3 self, float const threshold)"""
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_SetThreshold(self, threshold)

    OutputEqualityComparableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_OutputEqualityComparableCheck
    InputPixelTypeComparable = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_InputPixelTypeComparable
    InputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_InputOStreamWritableCheck
    OutputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_OutputOStreamWritableCheck
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkSoftThresholdImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "rtkSoftThresholdImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> rtkSoftThresholdImageFilterIF3IF3"""
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkSoftThresholdImageFilterIF3IF3

        Create a new object of the class rtkSoftThresholdImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSoftThresholdImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkSoftThresholdImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkSoftThresholdImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkSoftThresholdImageFilterIF3IF3.Clone = new_instancemethod(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_Clone, None, rtkSoftThresholdImageFilterIF3IF3)
rtkSoftThresholdImageFilterIF3IF3.SetThreshold = new_instancemethod(_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_SetThreshold, None, rtkSoftThresholdImageFilterIF3IF3)
rtkSoftThresholdImageFilterIF3IF3_swigregister = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_swigregister
rtkSoftThresholdImageFilterIF3IF3_swigregister(rtkSoftThresholdImageFilterIF3IF3)

def rtkSoftThresholdImageFilterIF3IF3___New_orig__() -> "rtkSoftThresholdImageFilterIF3IF3_Pointer":
    """rtkSoftThresholdImageFilterIF3IF3___New_orig__() -> rtkSoftThresholdImageFilterIF3IF3_Pointer"""
    return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3___New_orig__()

def rtkSoftThresholdImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "rtkSoftThresholdImageFilterIF3IF3 *":
    """rtkSoftThresholdImageFilterIF3IF3_cast(itkLightObject obj) -> rtkSoftThresholdImageFilterIF3IF3"""
    return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_cast(obj)


def soft_threshold_image_filter(*args, **kwargs):
    """Procedural interface for SoftThresholdImageFilter"""
    import itk
    instance = itk.SoftThresholdImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def soft_threshold_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.SoftThresholdImageFilter, itkTemplate.itkTemplate):
        soft_threshold_image_filter.__doc__ = itk.SoftThresholdImageFilter.values()[0].__doc__
    else:
        soft_threshold_image_filter.__doc__ = itk.SoftThresholdImageFilter.__doc__

def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ = itk.UnaryFunctorImageFilter.values()[0].__doc__
    else:
        unary_functor_image_filter.__doc__ = itk.UnaryFunctorImageFilter.__doc__




