# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkFourDToProjectionStackImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkFourDToProjectionStackImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkFourDToProjectionStackImageFilterPython
            return _rtkFourDToProjectionStackImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkFourDToProjectionStackImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkFourDToProjectionStackImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkFourDToProjectionStackImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkPointPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vector_refPython
import ITKCommonBasePython
import itkSizePython
import itkCovariantVectorPython
import itkIndexPython
import itkOffsetPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkArray2DPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import rtkThreeDCircularProjectionGeometryPython
import rtkProjectionGeometryPython
import rtkForwardProjectionImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImageRTKPython
import itkImageBaseRTKPython
import itkPointRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkImageRegionRTKPython

def rtkFourDToProjectionStackImageFilterIF3IF4_New():
  return rtkFourDToProjectionStackImageFilterIF3IF4.New()

class rtkFourDToProjectionStackImageFilterIF3IF4(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ rtkFourDToProjectionStackImageFilterIF3IF4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkFourDToProjectionStackImageFilterIF3IF4_Pointer":
        """__New_orig__() -> rtkFourDToProjectionStackImageFilterIF3IF4_Pointer"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkFourDToProjectionStackImageFilterIF3IF4_Pointer":
        """Clone(rtkFourDToProjectionStackImageFilterIF3IF4 self) -> rtkFourDToProjectionStackImageFilterIF3IF4_Pointer"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_Clone(self)


    def SetInputVolumeSeries(self, VolumeSeries: 'itkImageF4') -> "void":
        """SetInputVolumeSeries(rtkFourDToProjectionStackImageFilterIF3IF4 self, itkImageF4 VolumeSeries)"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetInputVolumeSeries(self, VolumeSeries)


    def SetInputProjectionStack(self, Projection: 'itkImageF3') -> "void":
        """SetInputProjectionStack(rtkFourDToProjectionStackImageFilterIF3IF4 self, itkImageF3 Projection)"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetInputProjectionStack(self, Projection)


    def SetForwardProjectionFilter(self, _arg: 'rtkForwardProjectionImageFilterIF3IF3_Pointer const') -> "void":
        """SetForwardProjectionFilter(rtkFourDToProjectionStackImageFilterIF3IF4 self, rtkForwardProjectionImageFilterIF3IF3_Pointer const _arg)"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetForwardProjectionFilter(self, _arg)


    def SetGeometry(self, _arg: 'rtkThreeDCircularProjectionGeometry_Pointer') -> "void":
        """SetGeometry(rtkFourDToProjectionStackImageFilterIF3IF4 self, rtkThreeDCircularProjectionGeometry_Pointer _arg)"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetGeometry(self, _arg)


    def SetWeights(self, _arg: 'itkArray2DF') -> "void":
        """SetWeights(rtkFourDToProjectionStackImageFilterIF3IF4 self, itkArray2DF _arg)"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetWeights(self, _arg)


    def InitializeConstantVolumeSource(self) -> "void":
        """InitializeConstantVolumeSource(rtkFourDToProjectionStackImageFilterIF3IF4 self)"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_InitializeConstantVolumeSource(self)


    def SetSignal(self, signal: 'vectorD') -> "void":
        """SetSignal(rtkFourDToProjectionStackImageFilterIF3IF4 self, vectorD signal)"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetSignal(self, signal)

    __swig_destroy__ = _rtkFourDToProjectionStackImageFilterPython.delete_rtkFourDToProjectionStackImageFilterIF3IF4

    def cast(obj: 'itkLightObject') -> "rtkFourDToProjectionStackImageFilterIF3IF4 *":
        """cast(itkLightObject obj) -> rtkFourDToProjectionStackImageFilterIF3IF4"""
        return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkFourDToProjectionStackImageFilterIF3IF4

        Create a new object of the class rtkFourDToProjectionStackImageFilterIF3IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFourDToProjectionStackImageFilterIF3IF4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkFourDToProjectionStackImageFilterIF3IF4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkFourDToProjectionStackImageFilterIF3IF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkFourDToProjectionStackImageFilterIF3IF4.Clone = new_instancemethod(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_Clone, None, rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4.SetInputVolumeSeries = new_instancemethod(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetInputVolumeSeries, None, rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4.SetInputProjectionStack = new_instancemethod(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetInputProjectionStack, None, rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4.SetForwardProjectionFilter = new_instancemethod(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetForwardProjectionFilter, None, rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4.SetGeometry = new_instancemethod(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetGeometry, None, rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4.SetWeights = new_instancemethod(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetWeights, None, rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4.InitializeConstantVolumeSource = new_instancemethod(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_InitializeConstantVolumeSource, None, rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4.SetSignal = new_instancemethod(_rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_SetSignal, None, rtkFourDToProjectionStackImageFilterIF3IF4)
rtkFourDToProjectionStackImageFilterIF3IF4_swigregister = _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_swigregister
rtkFourDToProjectionStackImageFilterIF3IF4_swigregister(rtkFourDToProjectionStackImageFilterIF3IF4)

def rtkFourDToProjectionStackImageFilterIF3IF4___New_orig__() -> "rtkFourDToProjectionStackImageFilterIF3IF4_Pointer":
    """rtkFourDToProjectionStackImageFilterIF3IF4___New_orig__() -> rtkFourDToProjectionStackImageFilterIF3IF4_Pointer"""
    return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4___New_orig__()

def rtkFourDToProjectionStackImageFilterIF3IF4_cast(obj: 'itkLightObject') -> "rtkFourDToProjectionStackImageFilterIF3IF4 *":
    """rtkFourDToProjectionStackImageFilterIF3IF4_cast(itkLightObject obj) -> rtkFourDToProjectionStackImageFilterIF3IF4"""
    return _rtkFourDToProjectionStackImageFilterPython.rtkFourDToProjectionStackImageFilterIF3IF4_cast(obj)


def four_d_to_projection_stack_image_filter(*args, **kwargs):
    """Procedural interface for FourDToProjectionStackImageFilter"""
    import itk
    instance = itk.FourDToProjectionStackImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def four_d_to_projection_stack_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.FourDToProjectionStackImageFilter, itkTemplate.itkTemplate):
        four_d_to_projection_stack_image_filter.__doc__ = itk.FourDToProjectionStackImageFilter.values()[0].__doc__
    else:
        four_d_to_projection_stack_image_filter.__doc__ = itk.FourDToProjectionStackImageFilter.__doc__




