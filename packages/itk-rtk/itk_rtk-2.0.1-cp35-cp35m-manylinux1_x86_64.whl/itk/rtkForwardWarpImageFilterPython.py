# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkForwardWarpImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkForwardWarpImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkForwardWarpImageFilterPython
            return _rtkForwardWarpImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkForwardWarpImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkForwardWarpImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkForwardWarpImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vector_refPython
import ITKCommonBasePython
import itkWarpImageFilterRTKPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkInterpolateImageFunctionPython
import itkSizePython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkArrayPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython

def rtkForwardWarpImageFilterIF3IF3ICVF33_New():
  return rtkForwardWarpImageFilterIF3IF3ICVF33.New()


def rtkForwardWarpImageFilterIF2IF2ICVF22_New():
  return rtkForwardWarpImageFilterIF2IF2ICVF22.New()

class rtkForwardWarpImageFilterIF2IF2ICVF22(itkWarpImageFilterRTKPython.itkWarpImageFilterIF2IF2ICVF22):
    """Proxy of C++ rtkForwardWarpImageFilterIF2IF2ICVF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkForwardWarpImageFilterIF2IF2ICVF22_Pointer":
        """__New_orig__() -> rtkForwardWarpImageFilterIF2IF2ICVF22_Pointer"""
        return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkForwardWarpImageFilterIF2IF2ICVF22_Pointer":
        """Clone(rtkForwardWarpImageFilterIF2IF2ICVF22 self) -> rtkForwardWarpImageFilterIF2IF2ICVF22_Pointer"""
        return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_Clone(self)

    __swig_destroy__ = _rtkForwardWarpImageFilterPython.delete_rtkForwardWarpImageFilterIF2IF2ICVF22

    def cast(obj: 'itkLightObject') -> "rtkForwardWarpImageFilterIF2IF2ICVF22 *":
        """cast(itkLightObject obj) -> rtkForwardWarpImageFilterIF2IF2ICVF22"""
        return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkForwardWarpImageFilterIF2IF2ICVF22

        Create a new object of the class rtkForwardWarpImageFilterIF2IF2ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkForwardWarpImageFilterIF2IF2ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkForwardWarpImageFilterIF2IF2ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkForwardWarpImageFilterIF2IF2ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkForwardWarpImageFilterIF2IF2ICVF22.Clone = new_instancemethod(_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_Clone, None, rtkForwardWarpImageFilterIF2IF2ICVF22)
rtkForwardWarpImageFilterIF2IF2ICVF22_swigregister = _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_swigregister
rtkForwardWarpImageFilterIF2IF2ICVF22_swigregister(rtkForwardWarpImageFilterIF2IF2ICVF22)

def rtkForwardWarpImageFilterIF2IF2ICVF22___New_orig__() -> "rtkForwardWarpImageFilterIF2IF2ICVF22_Pointer":
    """rtkForwardWarpImageFilterIF2IF2ICVF22___New_orig__() -> rtkForwardWarpImageFilterIF2IF2ICVF22_Pointer"""
    return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22___New_orig__()

def rtkForwardWarpImageFilterIF2IF2ICVF22_cast(obj: 'itkLightObject') -> "rtkForwardWarpImageFilterIF2IF2ICVF22 *":
    """rtkForwardWarpImageFilterIF2IF2ICVF22_cast(itkLightObject obj) -> rtkForwardWarpImageFilterIF2IF2ICVF22"""
    return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF2IF2ICVF22_cast(obj)

class rtkForwardWarpImageFilterIF3IF3ICVF33(itkWarpImageFilterRTKPython.itkWarpImageFilterIF3IF3ICVF33):
    """Proxy of C++ rtkForwardWarpImageFilterIF3IF3ICVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "rtkForwardWarpImageFilterIF3IF3ICVF33_Pointer":
        """__New_orig__() -> rtkForwardWarpImageFilterIF3IF3ICVF33_Pointer"""
        return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "rtkForwardWarpImageFilterIF3IF3ICVF33_Pointer":
        """Clone(rtkForwardWarpImageFilterIF3IF3ICVF33 self) -> rtkForwardWarpImageFilterIF3IF3ICVF33_Pointer"""
        return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_Clone(self)

    __swig_destroy__ = _rtkForwardWarpImageFilterPython.delete_rtkForwardWarpImageFilterIF3IF3ICVF33

    def cast(obj: 'itkLightObject') -> "rtkForwardWarpImageFilterIF3IF3ICVF33 *":
        """cast(itkLightObject obj) -> rtkForwardWarpImageFilterIF3IF3ICVF33"""
        return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkForwardWarpImageFilterIF3IF3ICVF33

        Create a new object of the class rtkForwardWarpImageFilterIF3IF3ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkForwardWarpImageFilterIF3IF3ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkForwardWarpImageFilterIF3IF3ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkForwardWarpImageFilterIF3IF3ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkForwardWarpImageFilterIF3IF3ICVF33.Clone = new_instancemethod(_rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_Clone, None, rtkForwardWarpImageFilterIF3IF3ICVF33)
rtkForwardWarpImageFilterIF3IF3ICVF33_swigregister = _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_swigregister
rtkForwardWarpImageFilterIF3IF3ICVF33_swigregister(rtkForwardWarpImageFilterIF3IF3ICVF33)

def rtkForwardWarpImageFilterIF3IF3ICVF33___New_orig__() -> "rtkForwardWarpImageFilterIF3IF3ICVF33_Pointer":
    """rtkForwardWarpImageFilterIF3IF3ICVF33___New_orig__() -> rtkForwardWarpImageFilterIF3IF3ICVF33_Pointer"""
    return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33___New_orig__()

def rtkForwardWarpImageFilterIF3IF3ICVF33_cast(obj: 'itkLightObject') -> "rtkForwardWarpImageFilterIF3IF3ICVF33 *":
    """rtkForwardWarpImageFilterIF3IF3ICVF33_cast(itkLightObject obj) -> rtkForwardWarpImageFilterIF3IF3ICVF33"""
    return _rtkForwardWarpImageFilterPython.rtkForwardWarpImageFilterIF3IF3ICVF33_cast(obj)


def forward_warp_image_filter(*args, **kwargs):
    """Procedural interface for ForwardWarpImageFilter"""
    import itk
    instance = itk.ForwardWarpImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def forward_warp_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ForwardWarpImageFilter, itkTemplate.itkTemplate):
        forward_warp_image_filter.__doc__ = itk.ForwardWarpImageFilter.values()[0].__doc__
    else:
        forward_warp_image_filter.__doc__ = itk.ForwardWarpImageFilter.__doc__




