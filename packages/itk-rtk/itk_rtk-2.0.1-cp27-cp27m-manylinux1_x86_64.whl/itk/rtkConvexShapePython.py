# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkConvexShapePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkConvexShapePython', [dirname(__file__)])
        except ImportError:
            import _rtkConvexShapePython
            return _rtkConvexShapePython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkConvexShapePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkConvexShapePython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkConvexShapePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkPointPython
import ITKCommonBasePython

def rtkConvexShape_New():
  return rtkConvexShape.New()

class rtkConvexShape(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ rtkConvexShape class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> rtkConvexShape_Pointer"""
        return _rtkConvexShapePython.rtkConvexShape___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(rtkConvexShape self) -> rtkConvexShape_Pointer"""
        return _rtkConvexShapePython.rtkConvexShape_Clone(self)


    def IsInside(self, point):
        """IsInside(rtkConvexShape self, itkVectorD3 point) -> bool"""
        return _rtkConvexShapePython.rtkConvexShape_IsInside(self, point)


    def IsIntersectedByRay(self, rayOrigin, rayDirection, nearDist, farDist):
        """IsIntersectedByRay(rtkConvexShape self, itkVectorD3 rayOrigin, itkVectorD3 rayDirection, double & nearDist, double & farDist) -> bool"""
        return _rtkConvexShapePython.rtkConvexShape_IsIntersectedByRay(self, rayOrigin, rayDirection, nearDist, farDist)


    def Rescale(self, r):
        """Rescale(rtkConvexShape self, itkVectorD3 r)"""
        return _rtkConvexShapePython.rtkConvexShape_Rescale(self, r)


    def Translate(self, t):
        """Translate(rtkConvexShape self, itkVectorD3 t)"""
        return _rtkConvexShapePython.rtkConvexShape_Translate(self, t)


    def Rotate(self, r):
        """Rotate(rtkConvexShape self, itkMatrixD33 r)"""
        return _rtkConvexShapePython.rtkConvexShape_Rotate(self, r)


    def AddClipPlane(self, dir, pos):
        """AddClipPlane(rtkConvexShape self, itkVectorD3 dir, double const & pos)"""
        return _rtkConvexShapePython.rtkConvexShape_AddClipPlane(self, dir, pos)


    def SetClipPlanes(self, dir, pos):
        """SetClipPlanes(rtkConvexShape self, std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const & dir, vectorD pos)"""
        return _rtkConvexShapePython.rtkConvexShape_SetClipPlanes(self, dir, pos)


    def SetDensity(self, _arg):
        """SetDensity(rtkConvexShape self, double const _arg)"""
        return _rtkConvexShapePython.rtkConvexShape_SetDensity(self, _arg)


    def GetDensity(self, *args):
        """
        GetDensity(rtkConvexShape self) -> double
        GetDensity(rtkConvexShape self) -> double
        """
        return _rtkConvexShapePython.rtkConvexShape_GetDensity(self, *args)


    def GetPlaneDirections(self):
        """GetPlaneDirections(rtkConvexShape self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &"""
        return _rtkConvexShapePython.rtkConvexShape_GetPlaneDirections(self)


    def GetPlanePositions(self):
        """GetPlanePositions(rtkConvexShape self) -> vectorD"""
        return _rtkConvexShapePython.rtkConvexShape_GetPlanePositions(self)

    __swig_destroy__ = _rtkConvexShapePython.delete_rtkConvexShape

    def cast(obj):
        """cast(itkLightObject obj) -> rtkConvexShape"""
        return _rtkConvexShapePython.rtkConvexShape_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkConvexShape

        Create a new object of the class rtkConvexShape and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConvexShape.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkConvexShape.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkConvexShape.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkConvexShape.Clone = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_Clone, None, rtkConvexShape)
rtkConvexShape.IsInside = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_IsInside, None, rtkConvexShape)
rtkConvexShape.IsIntersectedByRay = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_IsIntersectedByRay, None, rtkConvexShape)
rtkConvexShape.Rescale = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_Rescale, None, rtkConvexShape)
rtkConvexShape.Translate = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_Translate, None, rtkConvexShape)
rtkConvexShape.Rotate = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_Rotate, None, rtkConvexShape)
rtkConvexShape.AddClipPlane = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_AddClipPlane, None, rtkConvexShape)
rtkConvexShape.SetClipPlanes = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_SetClipPlanes, None, rtkConvexShape)
rtkConvexShape.SetDensity = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_SetDensity, None, rtkConvexShape)
rtkConvexShape.GetDensity = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_GetDensity, None, rtkConvexShape)
rtkConvexShape.GetPlaneDirections = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_GetPlaneDirections, None, rtkConvexShape)
rtkConvexShape.GetPlanePositions = new_instancemethod(_rtkConvexShapePython.rtkConvexShape_GetPlanePositions, None, rtkConvexShape)
rtkConvexShape_swigregister = _rtkConvexShapePython.rtkConvexShape_swigregister
rtkConvexShape_swigregister(rtkConvexShape)

def rtkConvexShape___New_orig__():
    """rtkConvexShape___New_orig__() -> rtkConvexShape_Pointer"""
    return _rtkConvexShapePython.rtkConvexShape___New_orig__()

def rtkConvexShape_cast(obj):
    """rtkConvexShape_cast(itkLightObject obj) -> rtkConvexShape"""
    return _rtkConvexShapePython.rtkConvexShape_cast(obj)



