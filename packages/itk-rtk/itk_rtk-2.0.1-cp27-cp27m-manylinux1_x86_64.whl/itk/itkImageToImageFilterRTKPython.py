# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageToImageFilterRTKPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageToImageFilterRTKPython', [dirname(__file__)])
        except ImportError:
            import _itkImageToImageFilterRTKPython
            return _itkImageToImageFilterRTKPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImageToImageFilterRTKPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImageToImageFilterRTKPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageToImageFilterRTKPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRTKPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkImagePython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython
import itkImageRegionRTKPython
import itkImageSourceRTKPython
import itkImageSourceCommonPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkImageToImageFilterVIF3IF4_New():
  return itkImageToImageFilterVIF3IF4.New()


def itkImageToImageFilterVIF2IF3_New():
  return itkImageToImageFilterVIF2IF3.New()


def itkImageToImageFilterIF3VIF2_New():
  return itkImageToImageFilterIF3VIF2.New()


def itkImageToImageFilterIF2IF1_New():
  return itkImageToImageFilterIF2IF1.New()


def itkImageToImageFilterIVF33_New():
  return itkImageToImageFilterIVF33.New()


def itkImageToImageFilterIF4IF4_New():
  return itkImageToImageFilterIF4IF4.New()


def itkImageToImageFilterIF4IF3_New():
  return itkImageToImageFilterIF4IF3.New()


def itkImageToImageFilterIF1IF1_New():
  return itkImageToImageFilterIF1IF1.New()


def itkImageToImageFilterIF3ID2_New():
  return itkImageToImageFilterIF3ID2.New()


def itkImageToImageFilterICVD33ICVD33_New():
  return itkImageToImageFilterICVD33ICVD33.New()


def itkImageToImageFilterID3ID2_New():
  return itkImageToImageFilterID3ID2.New()


def itkImageToImageFilterID1ID1_New():
  return itkImageToImageFilterID1ID1.New()

class itkImageToImageFilterICVD33ICVD33(itkImageSourcePython.itkImageSourceICVD33):
    """Proxy of C++ itkImageToImageFilterICVD33ICVD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterICVD33ICVD33 self, itkImageCVD33 image)
        SetInput(itkImageToImageFilterICVD33ICVD33 self, unsigned int arg0, itkImageCVD33 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterICVD33ICVD33 self) -> itkImageCVD33
        GetInput(itkImageToImageFilterICVD33ICVD33 self, unsigned int idx) -> itkImageCVD33
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterICVD33ICVD33 self, itkImageCVD33 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterICVD33ICVD33 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterICVD33ICVD33 self, itkImageCVD33 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterICVD33ICVD33 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterICVD33ICVD33 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterICVD33ICVD33 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterICVD33ICVD33 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterICVD33ICVD33 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterICVD33ICVD33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterICVD33ICVD33"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICVD33ICVD33

        Create a new object of the class itkImageToImageFilterICVD33ICVD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICVD33ICVD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICVD33ICVD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICVD33ICVD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterICVD33ICVD33.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetInput, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetInput, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PushBackInput, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PopBackInput, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PushFrontInput, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PopFrontInput, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetCoordinateTolerance, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetCoordinateTolerance, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetDirectionTolerance, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetDirectionTolerance, None, itkImageToImageFilterICVD33ICVD33)
itkImageToImageFilterICVD33ICVD33_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_swigregister
itkImageToImageFilterICVD33ICVD33_swigregister(itkImageToImageFilterICVD33ICVD33)

def itkImageToImageFilterICVD33ICVD33_cast(obj):
    """itkImageToImageFilterICVD33ICVD33_cast(itkLightObject obj) -> itkImageToImageFilterICVD33ICVD33"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_cast(obj)

class itkImageToImageFilterID1ID1(itkImageSourceRTKPython.itkImageSourceID1):
    """Proxy of C++ itkImageToImageFilterID1ID1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterID1ID1 self, itkImageD1 image)
        SetInput(itkImageToImageFilterID1ID1 self, unsigned int arg0, itkImageD1 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterID1ID1 self) -> itkImageD1
        GetInput(itkImageToImageFilterID1ID1 self, unsigned int idx) -> itkImageD1
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterID1ID1 self, itkImageD1 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterID1ID1 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterID1ID1 self, itkImageD1 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterID1ID1 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterID1ID1 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterID1ID1 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterID1ID1 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterID1ID1 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterID1ID1

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterID1ID1"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID1ID1

        Create a new object of the class itkImageToImageFilterID1ID1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID1ID1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID1ID1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID1ID1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterID1ID1.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetInput, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetInput, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PushBackInput, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PopBackInput, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PushFrontInput, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PopFrontInput, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetCoordinateTolerance, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetCoordinateTolerance, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetDirectionTolerance, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetDirectionTolerance, None, itkImageToImageFilterID1ID1)
itkImageToImageFilterID1ID1_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_swigregister
itkImageToImageFilterID1ID1_swigregister(itkImageToImageFilterID1ID1)

def itkImageToImageFilterID1ID1_cast(obj):
    """itkImageToImageFilterID1ID1_cast(itkLightObject obj) -> itkImageToImageFilterID1ID1"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_cast(obj)

class itkImageToImageFilterID3ID2(itkImageSourceRTKPython.itkImageSourceID2):
    """Proxy of C++ itkImageToImageFilterID3ID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterID3ID2 self, itkImageD3 image)
        SetInput(itkImageToImageFilterID3ID2 self, unsigned int arg0, itkImageD3 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterID3ID2 self) -> itkImageD3
        GetInput(itkImageToImageFilterID3ID2 self, unsigned int idx) -> itkImageD3
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterID3ID2 self, itkImageD3 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterID3ID2 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterID3ID2 self, itkImageD3 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterID3ID2 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterID3ID2 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterID3ID2 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterID3ID2 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterID3ID2 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterID3ID2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterID3ID2"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3ID2

        Create a new object of the class itkImageToImageFilterID3ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterID3ID2.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_SetInput, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_GetInput, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_PushBackInput, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_PopBackInput, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_PushFrontInput, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_PopFrontInput, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_SetCoordinateTolerance, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_GetCoordinateTolerance, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_SetDirectionTolerance, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_GetDirectionTolerance, None, itkImageToImageFilterID3ID2)
itkImageToImageFilterID3ID2_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_swigregister
itkImageToImageFilterID3ID2_swigregister(itkImageToImageFilterID3ID2)

def itkImageToImageFilterID3ID2_cast(obj):
    """itkImageToImageFilterID3ID2_cast(itkLightObject obj) -> itkImageToImageFilterID3ID2"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3ID2_cast(obj)

class itkImageToImageFilterIF1IF1(itkImageSourceRTKPython.itkImageSourceIF1):
    """Proxy of C++ itkImageToImageFilterIF1IF1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterIF1IF1 self, itkImageF1 image)
        SetInput(itkImageToImageFilterIF1IF1 self, unsigned int arg0, itkImageF1 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterIF1IF1 self) -> itkImageF1
        GetInput(itkImageToImageFilterIF1IF1 self, unsigned int idx) -> itkImageF1
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterIF1IF1 self, itkImageF1 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterIF1IF1 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterIF1IF1 self, itkImageF1 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterIF1IF1 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterIF1IF1 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterIF1IF1 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterIF1IF1 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterIF1IF1 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF1IF1

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterIF1IF1"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF1IF1

        Create a new object of the class itkImageToImageFilterIF1IF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF1IF1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF1IF1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF1IF1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF1IF1.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetInput, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetInput, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PushBackInput, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PopBackInput, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PushFrontInput, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PopFrontInput, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetCoordinateTolerance, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetCoordinateTolerance, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetDirectionTolerance, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetDirectionTolerance, None, itkImageToImageFilterIF1IF1)
itkImageToImageFilterIF1IF1_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_swigregister
itkImageToImageFilterIF1IF1_swigregister(itkImageToImageFilterIF1IF1)

def itkImageToImageFilterIF1IF1_cast(obj):
    """itkImageToImageFilterIF1IF1_cast(itkLightObject obj) -> itkImageToImageFilterIF1IF1"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_cast(obj)

class itkImageToImageFilterIF2IF1(itkImageSourceRTKPython.itkImageSourceIF1):
    """Proxy of C++ itkImageToImageFilterIF2IF1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterIF2IF1 self, itkImageF2 image)
        SetInput(itkImageToImageFilterIF2IF1 self, unsigned int arg0, itkImageF2 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterIF2IF1 self) -> itkImageF2
        GetInput(itkImageToImageFilterIF2IF1 self, unsigned int idx) -> itkImageF2
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterIF2IF1 self, itkImageF2 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterIF2IF1 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterIF2IF1 self, itkImageF2 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterIF2IF1 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterIF2IF1 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterIF2IF1 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterIF2IF1 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterIF2IF1 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF2IF1

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterIF2IF1"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2IF1

        Create a new object of the class itkImageToImageFilterIF2IF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2IF1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2IF1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2IF1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF2IF1.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetInput, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetInput, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PushBackInput, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PopBackInput, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PushFrontInput, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PopFrontInput, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetCoordinateTolerance, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetCoordinateTolerance, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetDirectionTolerance, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetDirectionTolerance, None, itkImageToImageFilterIF2IF1)
itkImageToImageFilterIF2IF1_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_swigregister
itkImageToImageFilterIF2IF1_swigregister(itkImageToImageFilterIF2IF1)

def itkImageToImageFilterIF2IF1_cast(obj):
    """itkImageToImageFilterIF2IF1_cast(itkLightObject obj) -> itkImageToImageFilterIF2IF1"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_cast(obj)

class itkImageToImageFilterIF3ID2(itkImageSourceRTKPython.itkImageSourceID2):
    """Proxy of C++ itkImageToImageFilterIF3ID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterIF3ID2 self, itkImageF3 image)
        SetInput(itkImageToImageFilterIF3ID2 self, unsigned int arg0, itkImageF3 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterIF3ID2 self) -> itkImageF3
        GetInput(itkImageToImageFilterIF3ID2 self, unsigned int idx) -> itkImageF3
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterIF3ID2 self, itkImageF3 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterIF3ID2 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterIF3ID2 self, itkImageF3 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterIF3ID2 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterIF3ID2 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterIF3ID2 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterIF3ID2 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterIF3ID2 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF3ID2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterIF3ID2"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3ID2

        Create a new object of the class itkImageToImageFilterIF3ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF3ID2.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetInput, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetInput, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PushBackInput, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PopBackInput, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PushFrontInput, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PopFrontInput, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetCoordinateTolerance, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetCoordinateTolerance, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetDirectionTolerance, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetDirectionTolerance, None, itkImageToImageFilterIF3ID2)
itkImageToImageFilterIF3ID2_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_swigregister
itkImageToImageFilterIF3ID2_swigregister(itkImageToImageFilterIF3ID2)

def itkImageToImageFilterIF3ID2_cast(obj):
    """itkImageToImageFilterIF3ID2_cast(itkLightObject obj) -> itkImageToImageFilterIF3ID2"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_cast(obj)

class itkImageToImageFilterIF3VIF2(itkImageSourcePython.itkImageSourceVIF2):
    """Proxy of C++ itkImageToImageFilterIF3VIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterIF3VIF2 self, itkImageF3 image)
        SetInput(itkImageToImageFilterIF3VIF2 self, unsigned int arg0, itkImageF3 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterIF3VIF2 self) -> itkImageF3
        GetInput(itkImageToImageFilterIF3VIF2 self, unsigned int idx) -> itkImageF3
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterIF3VIF2 self, itkImageF3 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterIF3VIF2 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterIF3VIF2 self, itkImageF3 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterIF3VIF2 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterIF3VIF2 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterIF3VIF2 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterIF3VIF2 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterIF3VIF2 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF3VIF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterIF3VIF2"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3VIF2

        Create a new object of the class itkImageToImageFilterIF3VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF3VIF2.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetInput, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetInput, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PushBackInput, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PopBackInput, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PushFrontInput, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PopFrontInput, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetCoordinateTolerance, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetCoordinateTolerance, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetDirectionTolerance, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetDirectionTolerance, None, itkImageToImageFilterIF3VIF2)
itkImageToImageFilterIF3VIF2_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_swigregister
itkImageToImageFilterIF3VIF2_swigregister(itkImageToImageFilterIF3VIF2)

def itkImageToImageFilterIF3VIF2_cast(obj):
    """itkImageToImageFilterIF3VIF2_cast(itkLightObject obj) -> itkImageToImageFilterIF3VIF2"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_cast(obj)

class itkImageToImageFilterIF4IF3(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkImageToImageFilterIF4IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterIF4IF3 self, itkImageF4 image)
        SetInput(itkImageToImageFilterIF4IF3 self, unsigned int arg0, itkImageF4 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterIF4IF3 self) -> itkImageF4
        GetInput(itkImageToImageFilterIF4IF3 self, unsigned int idx) -> itkImageF4
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterIF4IF3 self, itkImageF4 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterIF4IF3 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterIF4IF3 self, itkImageF4 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterIF4IF3 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterIF4IF3 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterIF4IF3 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterIF4IF3 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterIF4IF3 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF4IF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterIF4IF3"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF4IF3

        Create a new object of the class itkImageToImageFilterIF4IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF4IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF4IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF4IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF4IF3.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_SetInput, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_GetInput, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_PushBackInput, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_PopBackInput, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_PushFrontInput, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_PopFrontInput, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_SetCoordinateTolerance, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_GetCoordinateTolerance, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_SetDirectionTolerance, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_GetDirectionTolerance, None, itkImageToImageFilterIF4IF3)
itkImageToImageFilterIF4IF3_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_swigregister
itkImageToImageFilterIF4IF3_swigregister(itkImageToImageFilterIF4IF3)

def itkImageToImageFilterIF4IF3_cast(obj):
    """itkImageToImageFilterIF4IF3_cast(itkLightObject obj) -> itkImageToImageFilterIF4IF3"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF3_cast(obj)

class itkImageToImageFilterIF4IF4(itkImageSourceRTKPython.itkImageSourceIF4):
    """Proxy of C++ itkImageToImageFilterIF4IF4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterIF4IF4 self, itkImageF4 image)
        SetInput(itkImageToImageFilterIF4IF4 self, unsigned int arg0, itkImageF4 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterIF4IF4 self) -> itkImageF4
        GetInput(itkImageToImageFilterIF4IF4 self, unsigned int idx) -> itkImageF4
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterIF4IF4 self, itkImageF4 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterIF4IF4 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterIF4IF4 self, itkImageF4 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterIF4IF4 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterIF4IF4 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterIF4IF4 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterIF4IF4 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterIF4IF4 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF4IF4

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterIF4IF4"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF4IF4

        Create a new object of the class itkImageToImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF4IF4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF4IF4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF4IF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIF4IF4.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_SetInput, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_GetInput, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_PushBackInput, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_PopBackInput, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_PushFrontInput, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_PopFrontInput, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_SetCoordinateTolerance, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_GetCoordinateTolerance, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_SetDirectionTolerance, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_GetDirectionTolerance, None, itkImageToImageFilterIF4IF4)
itkImageToImageFilterIF4IF4_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_swigregister
itkImageToImageFilterIF4IF4_swigregister(itkImageToImageFilterIF4IF4)

def itkImageToImageFilterIF4IF4_cast(obj):
    """itkImageToImageFilterIF4IF4_cast(itkLightObject obj) -> itkImageToImageFilterIF4IF4"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF4IF4_cast(obj)

class itkImageToImageFilterIVF33(itkImageSourcePython.itkImageSourceIVF33):
    """Proxy of C++ itkImageToImageFilterIVF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterIVF33 self, itkImageVF34 image)
        SetInput(itkImageToImageFilterIVF33 self, unsigned int arg0, itkImageVF34 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterIVF33 self) -> itkImageVF34
        GetInput(itkImageToImageFilterIVF33 self, unsigned int idx) -> itkImageVF34
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterIVF33 self, itkImageVF34 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterIVF33 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterIVF33 self, itkImageVF34 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterIVF33 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterIVF33 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterIVF33 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterIVF33 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterIVF33 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIVF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterIVF33"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF33

        Create a new object of the class itkImageToImageFilterIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIVF33.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_SetInput, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_GetInput, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_PushBackInput, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_PopBackInput, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_PushFrontInput, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_PopFrontInput, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_SetCoordinateTolerance, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_GetCoordinateTolerance, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_SetDirectionTolerance, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_GetDirectionTolerance, None, itkImageToImageFilterIVF33)
itkImageToImageFilterIVF33_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_swigregister
itkImageToImageFilterIVF33_swigregister(itkImageToImageFilterIVF33)

def itkImageToImageFilterIVF33_cast(obj):
    """itkImageToImageFilterIVF33_cast(itkLightObject obj) -> itkImageToImageFilterIVF33"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF33_cast(obj)

class itkImageToImageFilterVIF2IF3(itkImageSourcePython.itkImageSourceIF3):
    """Proxy of C++ itkImageToImageFilterVIF2IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterVIF2IF3 self, itkVectorImageF2 image)
        SetInput(itkImageToImageFilterVIF2IF3 self, unsigned int arg0, itkVectorImageF2 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterVIF2IF3 self) -> itkVectorImageF2
        GetInput(itkImageToImageFilterVIF2IF3 self, unsigned int idx) -> itkVectorImageF2
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterVIF2IF3 self, itkVectorImageF2 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterVIF2IF3 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterVIF2IF3 self, itkVectorImageF2 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterVIF2IF3 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterVIF2IF3 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterVIF2IF3 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterVIF2IF3 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterVIF2IF3 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterVIF2IF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterVIF2IF3"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF2IF3

        Create a new object of the class itkImageToImageFilterVIF2IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF2IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF2IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF2IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterVIF2IF3.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetInput, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetInput, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PushBackInput, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PopBackInput, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PushFrontInput, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PopFrontInput, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetCoordinateTolerance, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetCoordinateTolerance, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetDirectionTolerance, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetDirectionTolerance, None, itkImageToImageFilterVIF2IF3)
itkImageToImageFilterVIF2IF3_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_swigregister
itkImageToImageFilterVIF2IF3_swigregister(itkImageToImageFilterVIF2IF3)

def itkImageToImageFilterVIF2IF3_cast(obj):
    """itkImageToImageFilterVIF2IF3_cast(itkLightObject obj) -> itkImageToImageFilterVIF2IF3"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_cast(obj)

class itkImageToImageFilterVIF3IF4(itkImageSourceRTKPython.itkImageSourceIF4):
    """Proxy of C++ itkImageToImageFilterVIF3IF4 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterVIF3IF4 self, itkVectorImageF3 image)
        SetInput(itkImageToImageFilterVIF3IF4 self, unsigned int arg0, itkVectorImageF3 image)
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterVIF3IF4 self) -> itkVectorImageF3
        GetInput(itkImageToImageFilterVIF3IF4 self, unsigned int idx) -> itkVectorImageF3
        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterVIF3IF4 self, itkVectorImageF3 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterVIF3IF4 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterVIF3IF4 self, itkVectorImageF3 image)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterVIF3IF4 self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterVIF3IF4 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterVIF3IF4 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterVIF3IF4 self, double const _arg)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterVIF3IF4 self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetDirectionTolerance(self)

    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterVIF3IF4

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterVIF3IF4"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterVIF3IF4

        Create a new object of the class itkImageToImageFilterVIF3IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterVIF3IF4.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterVIF3IF4.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterVIF3IF4.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterVIF3IF4.SetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetInput, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.GetInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetInput, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.PushBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PushBackInput, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.PopBackInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PopBackInput, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.PushFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PushFrontInput, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.PopFrontInput = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PopFrontInput, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.SetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetCoordinateTolerance, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.GetCoordinateTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetCoordinateTolerance, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.SetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetDirectionTolerance, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4.GetDirectionTolerance = new_instancemethod(_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetDirectionTolerance, None, itkImageToImageFilterVIF3IF4)
itkImageToImageFilterVIF3IF4_swigregister = _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_swigregister
itkImageToImageFilterVIF3IF4_swigregister(itkImageToImageFilterVIF3IF4)

def itkImageToImageFilterVIF3IF4_cast(obj):
    """itkImageToImageFilterVIF3IF4_cast(itkLightObject obj) -> itkImageToImageFilterVIF3IF4"""
    return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_cast(obj)


def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.values()[0].__doc__
    else:
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.__doc__




