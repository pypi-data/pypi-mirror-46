# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkVectorImageRTKPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVectorImageRTKPython', [dirname(__file__)])
        except ImportError:
            import _itkVectorImageRTKPython
            return _itkVectorImageRTKPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkVectorImageRTKPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkVectorImageRTKPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVectorImageRTKPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorImagePython
import itkImagePython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkVariableLengthVectorPython
class itkVectorImageF2_ConstPointer(object):
    """Proxy of C++ itkVectorImageF2_ConstPointer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkVectorImageF2_ConstPointer self) -> itkVectorImageF2_ConstPointer
        __init__(itkVectorImageF2_ConstPointer self, itkVectorImageF2_ConstPointer p) -> itkVectorImageF2_ConstPointer
        __init__(itkVectorImageF2_ConstPointer self, itkVectorImageF2 p) -> itkVectorImageF2_ConstPointer
        """
        _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_swiginit(self, _itkVectorImageRTKPython.new_itkVectorImageF2_ConstPointer(*args))
    __swig_destroy__ = _itkVectorImageRTKPython.delete_itkVectorImageF2_ConstPointer

    def __deref__(self):
        """__deref__(itkVectorImageF2_ConstPointer self) -> itkVectorImageF2"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer___deref__(self)


    def __ref__(self):
        """__ref__(itkVectorImageF2_ConstPointer self) -> itkVectorImageF2"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer___ref__(self)


    def IsNotNull(self):
        """IsNotNull(itkVectorImageF2_ConstPointer self) -> bool"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_IsNotNull(self)


    def IsNull(self):
        """IsNull(itkVectorImageF2_ConstPointer self) -> bool"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_IsNull(self)


    def GetPointer(self):
        """GetPointer(itkVectorImageF2_ConstPointer self) -> itkVectorImageF2"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetPointer(self)


    def Print(self, os):
        """Print(itkVectorImageF2_ConstPointer self, ostream os) -> itkVectorImageF2"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_Print(self, os)


    def swap(self, other):
        """swap(itkVectorImageF2_ConstPointer self, itkVectorImageF2_ConstPointer other)"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_swap(self, other)


    def Swap(self, other):
        """Swap(itkVectorImageF2_ConstPointer self, itkVectorImageF2_ConstPointer other)"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_Swap(self, other)


    def Clone(self):
        """Clone(itkVectorImageF2_ConstPointer self) -> itkVectorImageF2_Pointer"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_Clone(self)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkVectorImageF2_ConstPointer self) -> float
        GetBufferPointer(itkVectorImageF2_ConstPointer self) -> float const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkVectorImageF2_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkVectorImageF2_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float > const *

        Return a pointer
        to the container. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetPixelContainer(self, *args)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkVectorImageF2_ConstPointer self) -> itk::DefaultVectorPixelAccessor< float >
        GetPixelAccessor(itkVectorImageF2_ConstPointer self) -> itk::DefaultVectorPixelAccessor< float > const

        Return the Pixel
        Accesor object 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkVectorImageF2_ConstPointer self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float,2 > >
        GetNeighborhoodAccessor(itkVectorImageF2_ConstPointer self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetNeighborhoodAccessor(self, *args)


    def GetVectorLength(self):
        """GetVectorLength(itkVectorImageF2_ConstPointer self) -> unsigned int const &"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetVectorLength(self)


    def GetDirection(self):
        """
        GetDirection(itkVectorImageF2_ConstPointer self) -> itkMatrixD22

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetDirection(self)


    def GetInverseDirection(self):
        """
        GetInverseDirection(itkVectorImageF2_ConstPointer self) -> itkMatrixD22

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetInverseDirection(self)


    def GetSpacing(self):
        """
        GetSpacing(itkVectorImageF2_ConstPointer self) -> itkVectorD2

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetSpacing(self)


    def GetOrigin(self):
        """
        GetOrigin(itkVectorImageF2_ConstPointer self) -> itkPointD2

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetOrigin(self)


    def GetLargestPossibleRegion(self):
        """
        GetLargestPossibleRegion(itkVectorImageF2_ConstPointer self) -> itkImageRegion2

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetLargestPossibleRegion(self)


    def GetBufferedRegion(self):
        """
        GetBufferedRegion(itkVectorImageF2_ConstPointer self) -> itkImageRegion2

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetBufferedRegion(self)


    def GetRequestedRegion(self):
        """
        GetRequestedRegion(itkVectorImageF2_ConstPointer self) -> itkImageRegion2

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetRequestedRegion(self)


    def GetOffsetTable(self):
        """
        GetOffsetTable(itkVectorImageF2_ConstPointer self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetOffsetTable(self)


    def ComputeOffset(self, ind):
        """
        ComputeOffset(itkVectorImageF2_ConstPointer self, itkIndex2 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_ComputeOffset(self, ind)


    def ComputeIndex(self, offset):
        """
        ComputeIndex(itkVectorImageF2_ConstPointer self, long offset) -> itkIndex2

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_ComputeIndex(self, offset)


    def GetNumberOfComponentsPerPixel(self):
        """
        GetNumberOfComponentsPerPixel(itkVectorImageF2_ConstPointer self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetNumberOfComponentsPerPixel(self)


    def GetSource(self):
        """GetSource(itkVectorImageF2_ConstPointer self) -> itkProcessObject_Pointer"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetSource(self)


    def GetSourceOutputName(self):
        """GetSourceOutputName(itkVectorImageF2_ConstPointer self) -> std::string const &"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetSourceOutputName(self)


    def GetSourceOutputIndex(self):
        """GetSourceOutputIndex(itkVectorImageF2_ConstPointer self) -> unsigned long"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetSourceOutputIndex(self)


    def GetReleaseDataFlag(self):
        """GetReleaseDataFlag(itkVectorImageF2_ConstPointer self) -> bool const &"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetReleaseDataFlag(self)


    def ShouldIReleaseData(self):
        """ShouldIReleaseData(itkVectorImageF2_ConstPointer self) -> bool"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_ShouldIReleaseData(self)


    def GetDataReleased(self):
        """GetDataReleased(itkVectorImageF2_ConstPointer self) -> bool"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetDataReleased(self)


    def GetPipelineMTime(self):
        """GetPipelineMTime(itkVectorImageF2_ConstPointer self) -> unsigned long const &"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetPipelineMTime(self)


    def GetUpdateMTime(self):
        """GetUpdateMTime(itkVectorImageF2_ConstPointer self) -> unsigned long"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetUpdateMTime(self)


    def GetRealTimeStamp(self):
        """GetRealTimeStamp(itkVectorImageF2_ConstPointer self) -> itkRealTimeStamp"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetRealTimeStamp(self)


    def DebugOn(self):
        """
        DebugOn(itkVectorImageF2_ConstPointer self)

        Turn debugging output on.

        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_DebugOn(self)


    def DebugOff(self):
        """
        DebugOff(itkVectorImageF2_ConstPointer self)

        Turn debugging output off.

        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_DebugOff(self)


    def GetDebug(self):
        """
        GetDebug(itkVectorImageF2_ConstPointer self) -> bool

        Get the value of the debug
        flag. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetDebug(self)


    def SetDebug(self, debugFlag):
        """
        SetDebug(itkVectorImageF2_ConstPointer self, bool debugFlag)

        Set the value of the debug
        flag. A non-zero value turns debugging on. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_SetDebug(self, debugFlag)


    def GetMTime(self):
        """
        GetMTime(itkVectorImageF2_ConstPointer self) -> unsigned long

        Return this object's
        modified time. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetMTime(self)


    def GetTimeStamp(self):
        """
        GetTimeStamp(itkVectorImageF2_ConstPointer self) -> itkTimeStamp

        Return this object's
        time stamp. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetTimeStamp(self)


    def Modified(self):
        """
        Modified(itkVectorImageF2_ConstPointer self)

        Update the modification
        time for this object. Many filters rely on the modification time to
        determine if they need to recompute their data. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_Modified(self)


    def AddObserver(self, *args):
        """
        AddObserver(itkVectorImageF2_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkVectorImageF2_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long

        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        """
        InvokeEvent(itkVectorImageF2_ConstPointer self, itkEventObject arg0)
        InvokeEvent(itkVectorImageF2_ConstPointer self, itkEventObject arg0)

        Call Execute on all the
        Commands observing this event id. The actions triggered by this call
        doesn't modify this object. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_InvokeEvent(self, *args)


    def HasObserver(self, event):
        """
        HasObserver(itkVectorImageF2_ConstPointer self, itkEventObject event) -> bool

        Return true if an
        observer is registered for this event. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_HasObserver(self, event)


    def GetMetaDataDictionary(self, *args):
        """
        GetMetaDataDictionary(itkVectorImageF2_ConstPointer self) -> itkMetaDataDictionary
        GetMetaDataDictionary(itkVectorImageF2_ConstPointer self) -> itkMetaDataDictionary



        A constant reference to this objects MetaDataDictionary. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetMetaDataDictionary(self, *args)


    def GetObjectName(self):
        """GetObjectName(itkVectorImageF2_ConstPointer self) -> std::string const &"""
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetObjectName(self)


    def CreateAnother(self):
        """
        CreateAnother(itkVectorImageF2_ConstPointer self) -> itkLightObject_Pointer

        Create an object from
        an instance, potentially deferring to a factory. This method allows
        you to create an instance of an object that is exactly the same type
        as the referring object. This is useful in cases where an object has
        been cast back to a base class. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_CreateAnother(self)


    def GetNameOfClass(self):
        """
        GetNameOfClass(itkVectorImageF2_ConstPointer self) -> char const *

        Return the name of
        this class as a string. Used by the object factory (implemented in
        New()) to instantiate objects of a named type. Also used for debugging
        and other output information. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetNameOfClass(self)


    def GetReferenceCount(self):
        """
        GetReferenceCount(itkVectorImageF2_ConstPointer self) -> int

        Gets the
        reference count on this object. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetReferenceCount(self)

itkVectorImageF2_ConstPointer.__deref__ = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer___deref__, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.__ref__ = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer___ref__, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.IsNotNull = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_IsNotNull, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.IsNull = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_IsNull, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetPointer = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetPointer, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.Print = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_Print, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.swap = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_swap, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.Swap = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_Swap, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.Clone = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_Clone, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetBufferPointer = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetBufferPointer, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetPixelContainer = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetPixelContainer, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetPixelAccessor = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetPixelAccessor, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetNeighborhoodAccessor = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetNeighborhoodAccessor, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetVectorLength = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetVectorLength, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetDirection = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetDirection, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetInverseDirection = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetInverseDirection, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetSpacing = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetSpacing, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetOrigin = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetOrigin, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetLargestPossibleRegion = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetLargestPossibleRegion, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetBufferedRegion = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetBufferedRegion, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetRequestedRegion = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetRequestedRegion, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetOffsetTable = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetOffsetTable, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.ComputeOffset = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_ComputeOffset, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.ComputeIndex = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_ComputeIndex, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetNumberOfComponentsPerPixel = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetNumberOfComponentsPerPixel, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetSource = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetSource, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetSourceOutputName = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetSourceOutputName, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetSourceOutputIndex = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetSourceOutputIndex, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetReleaseDataFlag = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetReleaseDataFlag, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.ShouldIReleaseData = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_ShouldIReleaseData, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetDataReleased = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetDataReleased, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetPipelineMTime = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetPipelineMTime, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetUpdateMTime = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetUpdateMTime, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetRealTimeStamp = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetRealTimeStamp, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.DebugOn = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_DebugOn, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.DebugOff = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_DebugOff, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetDebug = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetDebug, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.SetDebug = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_SetDebug, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetMTime = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetMTime, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetTimeStamp = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetTimeStamp, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.Modified = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_Modified, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.InvokeEvent = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_InvokeEvent, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.HasObserver = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_HasObserver, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetMetaDataDictionary = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetMetaDataDictionary, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetObjectName = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetObjectName, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.CreateAnother = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_CreateAnother, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetNameOfClass = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetNameOfClass, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer.GetReferenceCount = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_GetReferenceCount, None, itkVectorImageF2_ConstPointer)
itkVectorImageF2_ConstPointer_swigregister = _itkVectorImageRTKPython.itkVectorImageF2_ConstPointer_swigregister
itkVectorImageF2_ConstPointer_swigregister(itkVectorImageF2_ConstPointer)

class itkVectorImageF3_ConstPointer(object):
    """Proxy of C++ itkVectorImageF3_ConstPointer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkVectorImageF3_ConstPointer self) -> itkVectorImageF3_ConstPointer
        __init__(itkVectorImageF3_ConstPointer self, itkVectorImageF3_ConstPointer p) -> itkVectorImageF3_ConstPointer
        __init__(itkVectorImageF3_ConstPointer self, itkVectorImageF3 p) -> itkVectorImageF3_ConstPointer
        """
        _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_swiginit(self, _itkVectorImageRTKPython.new_itkVectorImageF3_ConstPointer(*args))
    __swig_destroy__ = _itkVectorImageRTKPython.delete_itkVectorImageF3_ConstPointer

    def __deref__(self):
        """__deref__(itkVectorImageF3_ConstPointer self) -> itkVectorImageF3"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer___deref__(self)


    def __ref__(self):
        """__ref__(itkVectorImageF3_ConstPointer self) -> itkVectorImageF3"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer___ref__(self)


    def IsNotNull(self):
        """IsNotNull(itkVectorImageF3_ConstPointer self) -> bool"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_IsNotNull(self)


    def IsNull(self):
        """IsNull(itkVectorImageF3_ConstPointer self) -> bool"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_IsNull(self)


    def GetPointer(self):
        """GetPointer(itkVectorImageF3_ConstPointer self) -> itkVectorImageF3"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetPointer(self)


    def Print(self, os):
        """Print(itkVectorImageF3_ConstPointer self, ostream os) -> itkVectorImageF3"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_Print(self, os)


    def swap(self, other):
        """swap(itkVectorImageF3_ConstPointer self, itkVectorImageF3_ConstPointer other)"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_swap(self, other)


    def Swap(self, other):
        """Swap(itkVectorImageF3_ConstPointer self, itkVectorImageF3_ConstPointer other)"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_Swap(self, other)


    def Clone(self):
        """Clone(itkVectorImageF3_ConstPointer self) -> itkVectorImageF3_Pointer"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_Clone(self)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkVectorImageF3_ConstPointer self) -> float
        GetBufferPointer(itkVectorImageF3_ConstPointer self) -> float const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkVectorImageF3_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(itkVectorImageF3_ConstPointer self) -> itk::ImportImageContainer< unsigned long,float > const *

        Return a pointer
        to the container. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetPixelContainer(self, *args)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkVectorImageF3_ConstPointer self) -> itk::DefaultVectorPixelAccessor< float >
        GetPixelAccessor(itkVectorImageF3_ConstPointer self) -> itk::DefaultVectorPixelAccessor< float > const

        Return the Pixel
        Accesor object 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkVectorImageF3_ConstPointer self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float,3 > >
        GetNeighborhoodAccessor(itkVectorImageF3_ConstPointer self) -> itk::VectorImageNeighborhoodAccessorFunctor< itk::VectorImage< float,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetNeighborhoodAccessor(self, *args)


    def GetVectorLength(self):
        """GetVectorLength(itkVectorImageF3_ConstPointer self) -> unsigned int const &"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetVectorLength(self)


    def GetDirection(self):
        """
        GetDirection(itkVectorImageF3_ConstPointer self) -> itkMatrixD33

        Get the direction
        cosines of the image. The direction cosines are vectors that point
        from one pixel to the next. For ImageBase and Image, the default
        direction is identity. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetDirection(self)


    def GetInverseDirection(self):
        """
        GetInverseDirection(itkVectorImageF3_ConstPointer self) -> itkMatrixD33

        Get the inverse
        direction cosines of the image. These are calculated automatically in
        SetDirection, thus there is no Set accessor. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetInverseDirection(self)


    def GetSpacing(self):
        """
        GetSpacing(itkVectorImageF3_ConstPointer self) -> itkVectorD3

        Get the spacing (size of
        a pixel) `of the image. The spacing is the geometric distance between
        image samples along each dimension. The value returned is a
        Vector<double, VImageDimension>. For ImageBase and Image, the default
        data spacing is unity. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetSpacing(self)


    def GetOrigin(self):
        """
        GetOrigin(itkVectorImageF3_ConstPointer self) -> itkPointD3

        Get the origin of the
        image. The origin is the geometric coordinates of the index (0,0). The
        value returned is a Point<double, VImageDimension>. For ImageBase and
        Image, the default origin is 0. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetOrigin(self)


    def GetLargestPossibleRegion(self):
        """
        GetLargestPossibleRegion(itkVectorImageF3_ConstPointer self) -> itkImageRegion3

        Get the
        region object that defines the size and starting index for the largest
        possible region this image could represent. This is used in
        determining how much memory would be needed to load an entire dataset.
        It is also used to determine boundary true conditions. See:
        ImageRegion, GetBufferedRegion(), GetRequestedRegion() 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetLargestPossibleRegion(self)


    def GetBufferedRegion(self):
        """
        GetBufferedRegion(itkVectorImageF3_ConstPointer self) -> itkImageRegion3

        Get the region
        object that defines the size and starting index of the region of the
        image currently loaded in memory. See:   ImageRegion,
        SetLargestPossibleRegion(), SetRequestedRegion() 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetBufferedRegion(self)


    def GetRequestedRegion(self):
        """
        GetRequestedRegion(itkVectorImageF3_ConstPointer self) -> itkImageRegion3

        Get the region
        object that defines the size and starting index for the region of the
        image requested (i.e., the region of the image to be operated on by a
        filter). See:   ImageRegion, SetLargestPossibleRegion(),
        SetBufferedRegion() 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetRequestedRegion(self)


    def GetOffsetTable(self):
        """
        GetOffsetTable(itkVectorImageF3_ConstPointer self) -> long const *

        Get the offset
        table. The offset table gives increments for moving from one pixel to
        next in the current row, column, slice, etc.. This table if of size
        [VImageDimension+1], because its values are computed progressively as:
        {1, N1, N1*N2, N1*N2*N3,...,(N1*...*Nn)} Where the values {N1,...,Nn}
        are the elements of the BufferedRegion::Size array. The last element
        of the OffsetTable is equivalent to the BufferSize. Having a
        [VImageDimension+1] size array, simplifies the implementation of some
        data accessing algorithms. The entries in the offset table are only
        valid after the BufferedRegion is set. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetOffsetTable(self)


    def ComputeOffset(self, ind):
        """
        ComputeOffset(itkVectorImageF3_ConstPointer self, itkIndex3 ind) -> long

        Compute an offset
        from the beginning of the buffer for a pixel at the specified index.
        The index is not checked as to whether it is inside the current
        buffer, so the computed offset could conceivably be outside the
        buffer. If bounds checking is needed, one can call
        ImageRegion::IsInside(ind) on the BufferedRegion prior to calling
        ComputeOffset. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_ComputeOffset(self, ind)


    def ComputeIndex(self, offset):
        """
        ComputeIndex(itkVectorImageF3_ConstPointer self, long offset) -> itkIndex3

        Compute the index of
        the pixel at a specified offset from the beginning of the buffered
        region. Bounds checking is not performed. Thus, the computed index
        could be outside the BufferedRegion. To ensure a valid index, the
        parameter "offset" should be between 0 and the number of pixels in
        the BufferedRegion (the latter can be found using
        ImageRegion::GetNumberOfPixels()). 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_ComputeIndex(self, offset)


    def GetNumberOfComponentsPerPixel(self):
        """
        GetNumberOfComponentsPerPixel(itkVectorImageF3_ConstPointer self) -> unsigned int

        INTERNAL This method is used internally by filters to copy meta-data
        from the output to the input. Users should not have a need to use this
        method.

        Filters that override the ProcessObject's GenerateOutputInformation()
        should generally have the following line if they want to propagate
        meta- data for both Image and VectorImage

        See:   ImageBase, VectorImage  Returns/Sets the number of components
        in the image. Note that in the ImageBase implementation, this always
        returns 1. Image returns thereturned from NumericTraits for the pixel
        type, and VectorImage

        returns the vector length set by the user. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetNumberOfComponentsPerPixel(self)


    def GetSource(self):
        """GetSource(itkVectorImageF3_ConstPointer self) -> itkProcessObject_Pointer"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetSource(self)


    def GetSourceOutputName(self):
        """GetSourceOutputName(itkVectorImageF3_ConstPointer self) -> std::string const &"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetSourceOutputName(self)


    def GetSourceOutputIndex(self):
        """GetSourceOutputIndex(itkVectorImageF3_ConstPointer self) -> unsigned long"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetSourceOutputIndex(self)


    def GetReleaseDataFlag(self):
        """GetReleaseDataFlag(itkVectorImageF3_ConstPointer self) -> bool const &"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetReleaseDataFlag(self)


    def ShouldIReleaseData(self):
        """ShouldIReleaseData(itkVectorImageF3_ConstPointer self) -> bool"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_ShouldIReleaseData(self)


    def GetDataReleased(self):
        """GetDataReleased(itkVectorImageF3_ConstPointer self) -> bool"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetDataReleased(self)


    def GetPipelineMTime(self):
        """GetPipelineMTime(itkVectorImageF3_ConstPointer self) -> unsigned long const &"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetPipelineMTime(self)


    def GetUpdateMTime(self):
        """GetUpdateMTime(itkVectorImageF3_ConstPointer self) -> unsigned long"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetUpdateMTime(self)


    def GetRealTimeStamp(self):
        """GetRealTimeStamp(itkVectorImageF3_ConstPointer self) -> itkRealTimeStamp"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetRealTimeStamp(self)


    def DebugOn(self):
        """
        DebugOn(itkVectorImageF3_ConstPointer self)

        Turn debugging output on.

        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_DebugOn(self)


    def DebugOff(self):
        """
        DebugOff(itkVectorImageF3_ConstPointer self)

        Turn debugging output off.

        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_DebugOff(self)


    def GetDebug(self):
        """
        GetDebug(itkVectorImageF3_ConstPointer self) -> bool

        Get the value of the debug
        flag. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetDebug(self)


    def SetDebug(self, debugFlag):
        """
        SetDebug(itkVectorImageF3_ConstPointer self, bool debugFlag)

        Set the value of the debug
        flag. A non-zero value turns debugging on. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_SetDebug(self, debugFlag)


    def GetMTime(self):
        """
        GetMTime(itkVectorImageF3_ConstPointer self) -> unsigned long

        Return this object's
        modified time. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetMTime(self)


    def GetTimeStamp(self):
        """
        GetTimeStamp(itkVectorImageF3_ConstPointer self) -> itkTimeStamp

        Return this object's
        time stamp. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetTimeStamp(self)


    def Modified(self):
        """
        Modified(itkVectorImageF3_ConstPointer self)

        Update the modification
        time for this object. Many filters rely on the modification time to
        determine if they need to recompute their data. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_Modified(self)


    def AddObserver(self, *args):
        """
        AddObserver(itkVectorImageF3_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(itkVectorImageF3_ConstPointer self, itkEventObject event, itkCommand arg1) -> unsigned long

        Allow people to
        add/remove/invoke observers (callbacks) to any ITK object. This is an
        implementation of the subject/observer design pattern. An observer is
        added by specifying an event to respond to and an itk::Command to
        execute. It returns an unsigned long tag which can be used later to
        remove the event or retrieve the command. The memory for the Command
        becomes the responsibility of this object, so don't pass the same
        instance of a command to two different objects 
        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        """
        InvokeEvent(itkVectorImageF3_ConstPointer self, itkEventObject arg0)
        InvokeEvent(itkVectorImageF3_ConstPointer self, itkEventObject arg0)

        Call Execute on all the
        Commands observing this event id. The actions triggered by this call
        doesn't modify this object. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_InvokeEvent(self, *args)


    def HasObserver(self, event):
        """
        HasObserver(itkVectorImageF3_ConstPointer self, itkEventObject event) -> bool

        Return true if an
        observer is registered for this event. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_HasObserver(self, event)


    def GetMetaDataDictionary(self, *args):
        """
        GetMetaDataDictionary(itkVectorImageF3_ConstPointer self) -> itkMetaDataDictionary
        GetMetaDataDictionary(itkVectorImageF3_ConstPointer self) -> itkMetaDataDictionary



        A constant reference to this objects MetaDataDictionary. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetMetaDataDictionary(self, *args)


    def GetObjectName(self):
        """GetObjectName(itkVectorImageF3_ConstPointer self) -> std::string const &"""
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetObjectName(self)


    def CreateAnother(self):
        """
        CreateAnother(itkVectorImageF3_ConstPointer self) -> itkLightObject_Pointer

        Create an object from
        an instance, potentially deferring to a factory. This method allows
        you to create an instance of an object that is exactly the same type
        as the referring object. This is useful in cases where an object has
        been cast back to a base class. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_CreateAnother(self)


    def GetNameOfClass(self):
        """
        GetNameOfClass(itkVectorImageF3_ConstPointer self) -> char const *

        Return the name of
        this class as a string. Used by the object factory (implemented in
        New()) to instantiate objects of a named type. Also used for debugging
        and other output information. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetNameOfClass(self)


    def GetReferenceCount(self):
        """
        GetReferenceCount(itkVectorImageF3_ConstPointer self) -> int

        Gets the
        reference count on this object. 
        """
        return _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetReferenceCount(self)

itkVectorImageF3_ConstPointer.__deref__ = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer___deref__, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.__ref__ = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer___ref__, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.IsNotNull = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_IsNotNull, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.IsNull = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_IsNull, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetPointer = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetPointer, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.Print = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_Print, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.swap = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_swap, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.Swap = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_Swap, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.Clone = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_Clone, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetBufferPointer = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetBufferPointer, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetPixelContainer = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetPixelContainer, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetPixelAccessor = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetPixelAccessor, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetNeighborhoodAccessor = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetNeighborhoodAccessor, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetVectorLength = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetVectorLength, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetDirection = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetDirection, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetInverseDirection = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetInverseDirection, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetSpacing = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetSpacing, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetOrigin = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetOrigin, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetLargestPossibleRegion = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetLargestPossibleRegion, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetBufferedRegion = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetBufferedRegion, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetRequestedRegion = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetRequestedRegion, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetOffsetTable = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetOffsetTable, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.ComputeOffset = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_ComputeOffset, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.ComputeIndex = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_ComputeIndex, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetNumberOfComponentsPerPixel = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetNumberOfComponentsPerPixel, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetSource = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetSource, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetSourceOutputName = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetSourceOutputName, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetSourceOutputIndex = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetSourceOutputIndex, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetReleaseDataFlag = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetReleaseDataFlag, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.ShouldIReleaseData = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_ShouldIReleaseData, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetDataReleased = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetDataReleased, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetPipelineMTime = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetPipelineMTime, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetUpdateMTime = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetUpdateMTime, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetRealTimeStamp = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetRealTimeStamp, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.DebugOn = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_DebugOn, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.DebugOff = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_DebugOff, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetDebug = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetDebug, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.SetDebug = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_SetDebug, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetMTime = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetMTime, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetTimeStamp = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetTimeStamp, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.Modified = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_Modified, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.InvokeEvent = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_InvokeEvent, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.HasObserver = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_HasObserver, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetMetaDataDictionary = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetMetaDataDictionary, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetObjectName = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetObjectName, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.CreateAnother = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_CreateAnother, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetNameOfClass = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetNameOfClass, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer.GetReferenceCount = new_instancemethod(_itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_GetReferenceCount, None, itkVectorImageF3_ConstPointer)
itkVectorImageF3_ConstPointer_swigregister = _itkVectorImageRTKPython.itkVectorImageF3_ConstPointer_swigregister
itkVectorImageF3_ConstPointer_swigregister(itkVectorImageF3_ConstPointer)



