# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkVectorRTKPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVectorRTKPython', [dirname(__file__)])
        except ImportError:
            import _itkVectorRTKPython
            return _itkVectorRTKPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkVectorRTKPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkVectorRTKPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVectorRTKPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayRTKPython
import vnl_vector_refPython
class itkVectori2(itkFixedArrayRTKPython.itkFixedArrayi2):
    """Proxy of C++ itkVectori2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def GetVectorDimension():
        """GetVectorDimension() -> unsigned int"""
        return _itkVectorRTKPython.itkVectori2_GetVectorDimension()

    GetVectorDimension = staticmethod(GetVectorDimension)

    def SetVnlVector(self, arg0):
        """SetVnlVector(itkVectori2 self, vnl_vectorSI arg0)"""
        return _itkVectorRTKPython.itkVectori2_SetVnlVector(self, arg0)


    def GetVnlVector(self, *args):
        """
        GetVnlVector(itkVectori2 self) -> vnl_vector_refSI
        GetVnlVector(itkVectori2 self) -> vnl_vectorSI
        """
        return _itkVectorRTKPython.itkVectori2_GetVnlVector(self, *args)

    __swig_destroy__ = _itkVectorRTKPython.delete_itkVectori2

    def __init__(self, *args):
        """
        __init__(itkVectori2 self) -> itkVectori2
        __init__(itkVectori2 self, itkVectori2 arg0) -> itkVectori2
        __init__(itkVectori2 self, int const & r) -> itkVectori2
        __init__(itkVectori2 self, int const * r) -> itkVectori2
        """
        _itkVectorRTKPython.itkVectori2_swiginit(self, _itkVectorRTKPython.new_itkVectori2(*args))

    def __iadd__(self, vec):
        """__iadd__(itkVectori2 self, itkVectori2 vec) -> itkVectori2"""
        return _itkVectorRTKPython.itkVectori2___iadd__(self, vec)


    def __isub__(self, vec):
        """__isub__(itkVectori2 self, itkVectori2 vec) -> itkVectori2"""
        return _itkVectorRTKPython.itkVectori2___isub__(self, vec)


    def __neg__(self):
        """__neg__(itkVectori2 self) -> itkVectori2"""
        return _itkVectorRTKPython.itkVectori2___neg__(self)


    def __add__(self, vec):
        """__add__(itkVectori2 self, itkVectori2 vec) -> itkVectori2"""
        return _itkVectorRTKPython.itkVectori2___add__(self, vec)


    def __sub__(self, vec):
        """__sub__(itkVectori2 self, itkVectori2 vec) -> itkVectori2"""
        return _itkVectorRTKPython.itkVectori2___sub__(self, vec)


    def __mul__(self, *args):
        """
        __mul__(itkVectori2 self, itkVectori2 vec) -> int
        __mul__(itkVectori2 self, int const & value) -> itkVectori2
        """
        return _itkVectorRTKPython.itkVectori2___mul__(self, *args)


    def __eq__(self, v):
        """__eq__(itkVectori2 self, itkVectori2 v) -> bool"""
        return _itkVectorRTKPython.itkVectori2___eq__(self, v)


    def __ne__(self, v):
        """__ne__(itkVectori2 self, itkVectori2 v) -> bool"""
        return _itkVectorRTKPython.itkVectori2___ne__(self, v)


    def GetNorm(self):
        """GetNorm(itkVectori2 self) -> double"""
        return _itkVectorRTKPython.itkVectori2_GetNorm(self)


    def GetSquaredNorm(self):
        """GetSquaredNorm(itkVectori2 self) -> double"""
        return _itkVectorRTKPython.itkVectori2_GetSquaredNorm(self)


    def GetNumberOfComponents():
        """GetNumberOfComponents() -> unsigned int"""
        return _itkVectorRTKPython.itkVectori2_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)

    def Normalize(self):
        """Normalize(itkVectori2 self) -> double"""
        return _itkVectorRTKPython.itkVectori2_Normalize(self)


    def SetNthComponent(self, c, v):
        """SetNthComponent(itkVectori2 self, int c, int const & v)"""
        return _itkVectorRTKPython.itkVectori2_SetNthComponent(self, c, v)


    def __getitem__(self, d):
        """__getitem__(itkVectori2 self, unsigned long d) -> int"""
        return _itkVectorRTKPython.itkVectori2___getitem__(self, d)


    def __setitem__(self, d, v):
        """__setitem__(itkVectori2 self, unsigned long d, int v)"""
        return _itkVectorRTKPython.itkVectori2___setitem__(self, d, v)


    def __len__():
        """__len__() -> unsigned int"""
        return _itkVectorRTKPython.itkVectori2___len__()

    __len__ = staticmethod(__len__)

    def __repr__(self):
        """__repr__(itkVectori2 self) -> std::string"""
        return _itkVectorRTKPython.itkVectori2___repr__(self)

itkVectori2.SetVnlVector = new_instancemethod(_itkVectorRTKPython.itkVectori2_SetVnlVector, None, itkVectori2)
itkVectori2.GetVnlVector = new_instancemethod(_itkVectorRTKPython.itkVectori2_GetVnlVector, None, itkVectori2)
itkVectori2.__iadd__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___iadd__, None, itkVectori2)
itkVectori2.__isub__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___isub__, None, itkVectori2)
itkVectori2.__neg__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___neg__, None, itkVectori2)
itkVectori2.__add__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___add__, None, itkVectori2)
itkVectori2.__sub__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___sub__, None, itkVectori2)
itkVectori2.__mul__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___mul__, None, itkVectori2)
itkVectori2.__eq__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___eq__, None, itkVectori2)
itkVectori2.__ne__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___ne__, None, itkVectori2)
itkVectori2.GetNorm = new_instancemethod(_itkVectorRTKPython.itkVectori2_GetNorm, None, itkVectori2)
itkVectori2.GetSquaredNorm = new_instancemethod(_itkVectorRTKPython.itkVectori2_GetSquaredNorm, None, itkVectori2)
itkVectori2.Normalize = new_instancemethod(_itkVectorRTKPython.itkVectori2_Normalize, None, itkVectori2)
itkVectori2.SetNthComponent = new_instancemethod(_itkVectorRTKPython.itkVectori2_SetNthComponent, None, itkVectori2)
itkVectori2.__getitem__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___getitem__, None, itkVectori2)
itkVectori2.__setitem__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___setitem__, None, itkVectori2)
itkVectori2.__repr__ = new_instancemethod(_itkVectorRTKPython.itkVectori2___repr__, None, itkVectori2)
itkVectori2_swigregister = _itkVectorRTKPython.itkVectori2_swigregister
itkVectori2_swigregister(itkVectori2)

def itkVectori2_GetVectorDimension():
    """itkVectori2_GetVectorDimension() -> unsigned int"""
    return _itkVectorRTKPython.itkVectori2_GetVectorDimension()

def itkVectori2_GetNumberOfComponents():
    """itkVectori2_GetNumberOfComponents() -> unsigned int"""
    return _itkVectorRTKPython.itkVectori2_GetNumberOfComponents()

def itkVectori2___len__():
    """itkVectori2___len__() -> unsigned int"""
    return _itkVectorRTKPython.itkVectori2___len__()



