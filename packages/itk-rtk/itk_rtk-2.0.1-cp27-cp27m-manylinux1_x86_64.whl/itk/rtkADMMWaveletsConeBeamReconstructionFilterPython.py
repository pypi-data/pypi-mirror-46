# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _rtkADMMWaveletsConeBeamReconstructionFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkADMMWaveletsConeBeamReconstructionFilterPython', [dirname(__file__)])
        except ImportError:
            import _rtkADMMWaveletsConeBeamReconstructionFilterPython
            return _rtkADMMWaveletsConeBeamReconstructionFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkADMMWaveletsConeBeamReconstructionFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkADMMWaveletsConeBeamReconstructionFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _rtkADMMWaveletsConeBeamReconstructionFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import rtkIterativeConeBeamReconstructionFilterPython
import rtkForwardProjectionImageFilterPython
import rtkThreeDCircularProjectionGeometryPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkPointPython
import rtkProjectionGeometryPython
import ITKCommonBasePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImagePython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import itkImageToImageFilterRTKPython
import itkImageRTKPython
import itkImageBaseRTKPython
import itkMatrixRTKPython
import itkCovariantVectorRTKPython
import itkPointRTKPython
import itkImageRegionRTKPython
import itkImageSourceRTKPython
import rtkBackProjectionImageFilterPython

def rtkADMMWaveletsConeBeamReconstructionFilterIF3_New():
  return rtkADMMWaveletsConeBeamReconstructionFilterIF3.New()

class rtkADMMWaveletsConeBeamReconstructionFilterIF3(rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3):
    """Proxy of C++ rtkADMMWaveletsConeBeamReconstructionFilterIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> rtkADMMWaveletsConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self) -> rtkADMMWaveletsConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_Clone(self)


    def SetGeometry(self, _arg):
        """SetGeometry(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self, rtkThreeDCircularProjectionGeometry _arg)"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetGeometry(self, _arg)


    def SetAlpha(self, _arg):
        """SetAlpha(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self, float const _arg)"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetAlpha(self, _arg)


    def GetAlpha(self):
        """GetAlpha(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetAlpha(self)


    def SetBeta(self, _arg):
        """SetBeta(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self, float const _arg)"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetBeta(self, _arg)


    def GetBeta(self):
        """GetBeta(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetBeta(self)


    def SetAL_iterations(self, _arg):
        """SetAL_iterations(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self, float const _arg)"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetAL_iterations(self, _arg)


    def GetAL_iterations(self):
        """GetAL_iterations(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetAL_iterations(self)


    def SetCG_iterations(self, _arg):
        """SetCG_iterations(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self, float const _arg)"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetCG_iterations(self, _arg)


    def GetCG_iterations(self):
        """GetCG_iterations(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetCG_iterations(self)


    def SetOrder(self, _arg):
        """SetOrder(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self, unsigned int const _arg)"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetOrder(self, _arg)


    def GetOrder(self):
        """GetOrder(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self) -> unsigned int"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetOrder(self)


    def SetNumberOfLevels(self, _arg):
        """SetNumberOfLevels(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self, unsigned int const _arg)"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetNumberOfLevels(self, _arg)


    def GetNumberOfLevels(self):
        """GetNumberOfLevels(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self) -> unsigned int"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetNumberOfLevels(self)


    def SetDisableDisplacedDetectorFilter(self, _arg):
        """SetDisableDisplacedDetectorFilter(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self, bool const _arg)"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetDisableDisplacedDetectorFilter(self, _arg)


    def GetDisableDisplacedDetectorFilter(self):
        """GetDisableDisplacedDetectorFilter(rtkADMMWaveletsConeBeamReconstructionFilterIF3 self) -> bool"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetDisableDisplacedDetectorFilter(self)

    __swig_destroy__ = _rtkADMMWaveletsConeBeamReconstructionFilterPython.delete_rtkADMMWaveletsConeBeamReconstructionFilterIF3

    def cast(obj):
        """cast(itkLightObject obj) -> rtkADMMWaveletsConeBeamReconstructionFilterIF3"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> rtkADMMWaveletsConeBeamReconstructionFilterIF3

        Create a new object of the class rtkADMMWaveletsConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkADMMWaveletsConeBeamReconstructionFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = rtkADMMWaveletsConeBeamReconstructionFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = rtkADMMWaveletsConeBeamReconstructionFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

rtkADMMWaveletsConeBeamReconstructionFilterIF3.Clone = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_Clone, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.SetGeometry = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetGeometry, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.SetAlpha = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetAlpha, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.GetAlpha = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetAlpha, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.SetBeta = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetBeta, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.GetBeta = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetBeta, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.SetAL_iterations = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetAL_iterations, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.GetAL_iterations = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetAL_iterations, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.SetCG_iterations = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetCG_iterations, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.GetCG_iterations = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetCG_iterations, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.SetOrder = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetOrder, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.GetOrder = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetOrder, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.SetNumberOfLevels = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetNumberOfLevels, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.GetNumberOfLevels = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetNumberOfLevels, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.SetDisableDisplacedDetectorFilter = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetDisableDisplacedDetectorFilter, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3.GetDisableDisplacedDetectorFilter = new_instancemethod(_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetDisableDisplacedDetectorFilter, None, rtkADMMWaveletsConeBeamReconstructionFilterIF3)
rtkADMMWaveletsConeBeamReconstructionFilterIF3_swigregister = _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_swigregister
rtkADMMWaveletsConeBeamReconstructionFilterIF3_swigregister(rtkADMMWaveletsConeBeamReconstructionFilterIF3)

def rtkADMMWaveletsConeBeamReconstructionFilterIF3___New_orig__():
    """rtkADMMWaveletsConeBeamReconstructionFilterIF3___New_orig__() -> rtkADMMWaveletsConeBeamReconstructionFilterIF3_Pointer"""
    return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3___New_orig__()

def rtkADMMWaveletsConeBeamReconstructionFilterIF3_cast(obj):
    """rtkADMMWaveletsConeBeamReconstructionFilterIF3_cast(itkLightObject obj) -> rtkADMMWaveletsConeBeamReconstructionFilterIF3"""
    return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_cast(obj)


def admm_wavelets_cone_beam_reconstruction_filter(*args, **kwargs):
    """Procedural interface for ADMMWaveletsConeBeamReconstructionFilter"""
    import itk
    instance = itk.ADMMWaveletsConeBeamReconstructionFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def admm_wavelets_cone_beam_reconstruction_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ADMMWaveletsConeBeamReconstructionFilter, itkTemplate.itkTemplate):
        admm_wavelets_cone_beam_reconstruction_filter.__doc__ = itk.ADMMWaveletsConeBeamReconstructionFilter.values()[0].__doc__
    else:
        admm_wavelets_cone_beam_reconstruction_filter.__doc__ = itk.ADMMWaveletsConeBeamReconstructionFilter.__doc__




