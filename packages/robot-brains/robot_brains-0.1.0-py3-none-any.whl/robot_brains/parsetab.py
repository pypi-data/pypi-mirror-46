
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "filenonassocNOTnonassocEQNEQnonassoc<LEQLAEQ>GEQGAEQAEQNAEQleft+-right/left*%INTEGER_DIVIDErightUMINUSABSright^left.ABS AEQ AS AUTONOMOUS BOOLEAN BOOLEAN_LIT CONTINUE DIM DLT_DELIMITER DLT_MAP DLT_MASK DONE EQ FLOAT FLOAT_LIT FROM FUNCTION GAEQ GEQ GOT GOTO IDENT INTEGER INTEGER_DIVIDE INTEGER_LIT IS KEYWORD LABEL LAEQ LEQ MODULE NAEQ NATIVE_STRING_LIT NEQ NEWLINE NOT OPEQ OPMODE OPT_KEYWORD RETURN RETURNING RETURNING_TO RETURN_LABEL SET STRING STRING_LIT SUBROUTINE TAKING TELEOP TO TYPE USE VAR WITH\n    pos_arguments :\n    kw_arguments :\n    parameter_types_list :\n    steps :\n    statements :\n    action_statements :\n    dotted_prefix :\n    \n    const_expr : STRING_LIT\n               | FLOAT_LIT\n               | INTEGER_LIT\n               | BOOLEAN_LIT\n    expr : primary\n    primary : simple_primary\n    native_element : primary\n                   | NATIVE_STRING_LIT\n    type : simple_type\n    statement : simple_statement newlines\n              | dlt\n    actions : action\n    parameter_types_list : parameter_types_list1\n    opmode_type : AUTONOMOUS\n                | TELEOP\n    \n    simple_primary : '(' expr ')'\n    simple_type : '(' type ')'\n    const_expr : '(' const_expr ')'\n    returning_opt : RETURNING parameter_types\n    taking_opt : TAKING parameter_types\n    from_opt : FROM primary\n    label_decl : FUNCTION fn_name parameters set_returning_opt newlines\n               | SUBROUTINE sub_name parameters newlines\n               | LABEL label_name parameters newlines\n    \n    newlines_opt :\n    newlines_opt : newlines_opt NEWLINE\n    newlines : NEWLINE\n    newlines : newlines NEWLINE\n    opmode : opmode_type OPMODE make_opmode newlines uses typedefs\n    typedefs :\n             | typedefs typedef\n    vartypes :\n             | vartypes vartype\n    parameters : pos_parameters kw_parameters\n    pos_parameters : required_parameters\n    pos_parameters : required_parameters '?' optional_parameters\n    required_parameters :\n    required_parameters : required_parameters required_parameter\n    optional_parameters : optional_parameter\n    optional_parameters : optional_parameters optional_parameter\n    kw_parameters :\n                  | kw_parameters keyword pos_parameters\n    returning_opt :\n    uses :\n         | uses use\n    taking_opt :\n    from_opt :\n    \n    conditions : condition\n    parameter_types_list1 : simple_type\n    kw_parameter_types : kw_parameter_type\n    dimensions : dimension\n    subscripts : expr\n    native_elements : NATIVE_STRING_LIT\n    \n    kw_arguments : kw_arguments kw_argument\n    statements : statements statement\n    conditions : conditions condition\n    pos_arguments : pos_arguments primary\n    kw_parameter_types : kw_parameter_types kw_parameter_type\n    parameter_types_list1 : parameter_types_list1 simple_type\n    action_statements : action_statements simple_statement newlines\n    action_statements : action_statements continue newlines\n    native_elements : native_elements native_element\n    dotted_prefix : dotted_prefix IDENT '.'\n    \n    dimensions : dimensions ',' dimension\n    subscripts : subscripts ',' expr\n    actions : actions action\n    step : label_decl typedefs vartypes statements\n    \n    steps : steps step\n    \n    arguments : pos_arguments kw_arguments\n    kw_argument : KEYWORD pos_arguments\n    parameter_types : pos_parameter_types kw_parameter_types\n    \n    kw_parameter_type : KEYWORD pos_parameter_types\n    kw_parameter_type : OPT_KEYWORD pos_parameter_types\n    \n    module : MODULE make_module parameters newlines              uses typedefs vartypes steps\n    \n    type : SUBROUTINE taking_opt\n         | LABEL taking_opt\n    \n    type : FUNCTION taking_opt returning_opt\n    \n    simple_type : INTEGER\n                | FLOAT\n                | BOOLEAN\n                | STRING\n                | MODULE\n                | TYPE\n    simple_type : dotted_prefix IDENT\n    dimension : const_expr\n    \n    primary : STRING_LIT\n            | FLOAT_LIT\n            | INTEGER_LIT\n            | BOOLEAN_LIT\n    \n    simple_primary : RETURN_LABEL\n    \n    simple_primary : simple_primary '.' RETURN_LABEL\n    \n    simple_primary : IDENT\n    lvalue : IDENT\n    \n    simple_primary : simple_primary '.' IDENT\n    lvalue : simple_primary '.' IDENT\n    \n    simple_primary : simple_primary '[' subscripts ']'\n    lvalue : simple_primary '[' subscripts ']'\n    primary : GOT KEYWORDprimary : GOT IDENT '.' KEYWORDprimary : GOT MODULE '.' KEYWORDprimary : GOT IDENTprimary : GOT IDENT '.' IDENTprimary : GOT MODULE '.' IDENT\n    expr : ABS expr\n         | NOT expr\n         | '-' expr               %prec UMINUS\n    \n    expr : expr '^' expr\n         | expr '*' expr\n         | expr '/' expr\n         | expr INTEGER_DIVIDE expr\n         | expr '%' expr\n         | expr '+' expr\n         | expr '-' expr\n         | expr '<' expr\n         | expr LEQ expr\n         | expr LAEQ expr\n         | expr '>' expr\n         | expr GEQ expr\n         | expr GAEQ expr\n         | expr EQ expr\n         | expr AEQ expr\n         | expr NEQ expr\n         | expr NAEQ expr\n    \n    expr : native_elements\n    \n    parameter_types : pos_parameter_types1\n    pos_parameter_types1 : parameter_types_list1\n    pos_parameter_types : parameter_types_list\n    \n    pos_parameter_types1 : parameter_types_list '?' parameter_types_list1\n    pos_parameter_types : parameter_types_list '?' parameter_types_list1\n    \n    const_expr : '-' const_expr               %prec UMINUS\n    \n    const_expr : const_expr '^' const_expr\n               | const_expr '*' const_expr\n               | const_expr '/' const_expr\n               | const_expr '%' const_expr\n               | const_expr '+' const_expr\n               | const_expr '-' const_expr\n    \n    const_expr : NOT const_expr\n    \n    continue : CONTINUE\n    \n    simple_statement : SET extended_kws lvalue TO normal_kws primary\n    \n    simple_statement : GOTO primary arguments\n    \n    simple_statement : extended_kws RETURN arguments from_opt normal_kws\n    \n    simple_statement : extended_kws RETURN arguments from_opt TO primary                        normal_kws\n    extended_kws : normal_kws : \n    simple_statement : primary arguments\n    \n    simple_statement : primary arguments RETURNING_TO primary\n    \n    simple_statement : lvalue OPEQ primary\n    \n    simple_statement : extended_kws DONE normal_kws\n    \n    simple_statement : extended_kws DONE WITH IDENT normal_kws\n    \n    simple_statement : native_elements\n    \n    file : newlines_opt opmode\n         | newlines_opt module\n    \n    simple_primary : '{' primary arguments '}'\n    make_opmode :make_module :\n    required_parameter : IDENT\n    \n    optional_parameter : IDENT\n    keyword : KEYWORDkeyword : OPT_KEYWORD\n    use : USE IDENT arguments newlines\n    \n    use : USE IDENT AS IDENT arguments newlines\n    \n    typedef : TYPE IDENT IS type newlines\n    set_returning_opt : returning_opt\n    vartype : VAR IDENT IS type newlines\n    \n    vartype : DIM IDENT '[' dimensions ']' newlines\n    fn_name : IDENTsub_name : IDENTlabel_name : IDENT\n    dlt : DLT_DELIMITER NEWLINE           dlt_conditions           DLT_DELIMITER NEWLINE           dlt_actions           DLT_DELIMITER newlines\n    \n    condition : DLT_MASK expr newlines\n    \n    action : DLT_MAP action_statements\n    \n    action : DLT_MAP newlines action_statements\n    dlt_conditions : conditionsdlt_actions : actions"
    
_lr_action_items = {'NEWLINE':([0,2,5,7,10,11,12,13,14,15,16,17,18,19,21,22,24,26,27,28,29,30,31,36,37,40,43,45,51,52,53,54,55,56,57,58,59,61,63,72,73,74,75,76,77,79,80,81,82,83,85,86,87,90,91,94,98,99,102,103,104,105,106,107,110,111,113,114,116,117,118,119,120,125,143,144,145,146,147,148,151,152,153,154,165,167,169,170,171,173,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,200,201,202,203,204,205,216,217,218,219,221,222,225,230,232,233,234,235,236,237,246,247,248,249,250,251,252,254,255,257,258,265,266,268,270,275,277,279,281,282,283,285,286,288,290,291,293,294,295,299,300,301,304,305,306,307,308,310,311,],[-32,5,-33,-162,-161,-44,17,17,-48,-42,24,-34,24,-41,-45,-163,-35,-44,-165,-166,-43,-46,-164,-49,-47,-1,17,-2,24,-1,-76,-64,-13,-93,-94,-95,-96,-99,-97,-90,17,-16,-53,-53,-53,-85,-86,-87,-88,-89,17,-61,-1,-105,-108,-12,-131,-60,-44,-173,-44,-174,-44,-175,24,-82,-83,-50,-91,24,-77,-98,-101,-23,-111,-112,-113,-69,-14,-15,-50,17,17,17,-27,-132,-133,-56,-84,-24,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-160,17,-170,24,24,24,17,-78,-57,-3,-3,-66,-26,17,-1,-99,-157,259,-13,24,24,-65,-79,-134,-20,-80,-135,24,-1,-151,-152,-1,-54,-155,-154,-147,-101,-136,-151,-151,-153,292,17,-103,-148,-28,-156,24,-146,-151,17,-149,17,24,24,17,17,-145,24,24,]),'MODULE':([0,2,5,50,60,72,78,79,80,81,82,83,108,112,116,169,170,172,173,218,219,220,221,249,251,262,277,],[-32,7,-33,83,92,-90,83,-85,-86,-87,-88,-89,83,83,-91,83,-56,83,-24,83,83,83,-66,83,83,83,83,]),'AUTONOMOUS':([0,2,5,],[-32,8,-33,]),'TELEOP':([0,2,5,],[-32,9,-33,]),'$end':([1,3,4,16,17,18,23,24,25,32,33,35,38,41,46,47,51,65,66,101,110,117,150,199,202,203,204,224,226,236,237,252,305,],[0,-158,-159,-51,-34,-51,-37,-35,-37,-36,-52,-39,-38,-4,-81,-40,-167,-75,-37,-39,-169,-168,-5,-74,-30,-31,-171,-62,-18,-29,-172,-17,-176,]),'OPMODE':([6,8,9,],[10,-21,-22,]),'KEYWORD':([7,11,14,15,19,21,22,26,27,28,29,30,31,36,37,40,45,52,53,54,55,56,57,58,59,60,61,63,72,79,80,81,82,83,86,87,90,91,100,102,103,104,105,106,107,112,116,118,119,120,123,124,125,166,168,169,170,172,173,175,177,178,179,180,198,216,217,218,219,221,230,232,235,246,247,248,249,250,251,254,258,275,277,286,],[-162,-44,-48,-42,27,-45,-163,-44,-165,-166,-43,-46,-164,-49,-47,-1,-2,-1,87,-64,-13,-93,-94,-95,-96,90,-99,-97,-90,-85,-86,-87,-88,-89,-61,-1,-105,-108,-1,-44,-173,-44,-174,-44,-175,-3,-91,-77,-98,-101,178,179,-23,218,-134,-20,-56,-3,-24,-103,-109,-106,-107,-110,-160,218,-57,-3,-3,-66,-1,-99,-13,-65,-79,-134,-20,-80,-136,-1,-1,-101,-136,-103,]),'OPT_KEYWORD':([7,11,14,15,19,21,22,26,27,28,29,30,31,36,37,72,79,80,81,82,83,102,103,104,105,106,107,112,116,166,168,169,170,172,173,216,217,218,219,221,246,247,248,249,250,251,277,],[-162,-44,-48,-42,28,-45,-163,-44,-165,-166,-43,-46,-164,-49,-47,-90,-85,-86,-87,-88,-89,-44,-173,-44,-174,-44,-175,-3,-91,219,-134,-20,-56,-3,-24,219,-57,-3,-3,-66,-65,-79,-134,-20,-80,-136,-136,]),'?':([7,11,15,21,22,26,27,28,72,79,80,81,82,83,102,103,104,105,106,107,112,116,168,169,170,172,173,218,219,221,248,249,],[-162,-44,20,-45,-163,-44,-165,-166,-90,-85,-86,-87,-88,-89,-44,-173,-44,-174,-44,-175,-3,-91,220,-20,-56,-3,-24,-3,-3,-66,262,-20,]),'IDENT':([7,11,15,17,20,21,22,24,26,27,28,29,30,31,34,37,38,39,40,44,45,47,48,49,50,52,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,72,78,79,80,81,82,83,84,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,112,116,118,119,120,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,169,170,172,173,174,175,176,177,178,179,180,198,199,202,203,204,218,219,220,221,224,226,227,230,231,232,233,235,236,237,249,251,252,253,254,256,258,260,261,262,267,269,274,275,277,278,280,286,287,289,299,303,304,305,309,310,311,],[-162,-44,22,-34,31,-45,-163,-35,-44,-165,-166,31,-46,-164,40,-47,-38,42,-1,52,61,-40,70,71,-7,-1,-64,-13,-93,-94,-95,-96,91,-99,61,-97,61,-37,103,105,107,-90,-7,-85,-86,-87,-88,-89,116,-1,120,61,-105,-108,61,61,61,61,-60,-1,-39,-44,-173,-44,-174,-44,-175,-7,-169,-7,-91,61,-98,-101,177,180,-23,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-69,-14,-15,-5,-7,-56,-7,-24,-70,-103,61,-109,-106,-107,-110,-160,232,-30,-31,-171,-7,-7,-7,-66,-62,-18,-150,-1,61,-99,61,-13,-29,-172,-7,-7,-17,232,-1,61,-1,275,61,-7,281,61,61,-101,-7,-151,61,-103,61,61,-6,232,-6,-176,232,-67,-68,]),'RETURNING':([14,15,19,21,22,26,27,28,29,30,31,36,37,72,77,79,80,81,82,83,102,103,114,116,151,165,167,169,170,173,216,217,218,219,221,246,247,248,249,250,251,277,],[-48,-42,-41,-45,-163,-44,-165,-166,-43,-46,-164,-49,-47,-90,-53,-85,-86,-87,-88,-89,-44,-173,172,-91,172,-27,-132,-133,-56,-24,-78,-57,-3,-3,-66,-65,-79,-134,-20,-80,-135,-136,]),'USE':([16,17,18,23,24,25,33,51,117,],[-51,-34,-51,34,-35,34,-52,-167,-168,]),'TYPE':([16,17,18,23,24,25,32,33,35,38,50,51,66,72,78,79,80,81,82,83,101,108,110,112,116,117,169,170,172,173,202,203,218,219,220,221,236,249,251,262,277,],[-51,-34,-51,-37,-35,-37,39,-52,39,-38,72,-167,-37,-90,72,-85,-86,-87,-88,-89,39,72,-169,72,-91,-168,72,-56,72,-24,-30,-31,72,72,72,-66,-29,72,72,72,72,]),'VAR':([17,18,24,25,33,35,38,41,47,51,66,101,110,117,150,202,203,204,236,237,],[-34,-51,-35,-37,-52,-39,-38,48,-40,-167,-37,-39,-169,-168,48,-30,-31,-171,-29,-172,]),'DIM':([17,18,24,25,33,35,38,41,47,51,66,101,110,117,150,202,203,204,236,237,],[-34,-51,-35,-37,-52,-39,-38,49,-40,-167,-37,-39,-169,-168,49,-30,-31,-171,-29,-172,]),'FUNCTION':([17,18,24,25,33,35,38,41,46,47,50,51,65,66,78,101,108,110,117,150,199,202,203,204,224,226,236,237,252,305,],[-34,-51,-35,-37,-52,-39,-38,-4,67,-40,77,-167,-75,-37,77,-39,77,-169,-168,-5,-74,-30,-31,-171,-62,-18,-29,-172,-17,-176,]),'SUBROUTINE':([17,18,24,25,33,35,38,41,46,47,50,51,65,66,78,101,108,110,117,150,199,202,203,204,224,226,236,237,252,305,],[-34,-51,-35,-37,-52,-39,-38,-4,68,-40,75,-167,-75,-37,75,-39,75,-169,-168,-5,-74,-30,-31,-171,-62,-18,-29,-172,-17,-176,]),'LABEL':([17,18,24,25,33,35,38,41,46,47,50,51,65,66,78,101,108,110,117,150,199,202,203,204,224,226,236,237,252,305,],[-34,-51,-35,-37,-52,-39,-38,-4,69,-40,76,-167,-75,-37,76,-39,76,-169,-168,-5,-74,-30,-31,-171,-62,-18,-29,-172,-17,-176,]),'SET':([17,24,38,47,66,101,110,150,199,202,203,204,224,226,236,237,252,299,303,304,305,309,310,311,],[-34,-35,-38,-40,-37,-39,-169,-5,227,-30,-31,-171,-62,-18,-29,-172,-17,-6,227,-6,-176,227,-67,-68,]),'GOTO':([17,24,38,47,66,101,110,150,199,202,203,204,224,226,236,237,252,299,303,304,305,309,310,311,],[-34,-35,-38,-40,-37,-39,-169,-5,231,-30,-31,-171,-62,-18,-29,-172,-17,-6,231,-6,-176,231,-67,-68,]),'DLT_DELIMITER':([17,24,38,47,66,101,110,150,199,202,203,204,224,226,236,237,252,271,272,273,284,293,296,297,298,299,302,303,304,305,309,310,311,],[-34,-35,-38,-40,-37,-39,-169,-5,234,-30,-31,-171,-62,-18,-29,-172,-17,283,-180,-55,-63,-177,301,-181,-19,-6,-73,-178,-6,-176,-179,-67,-68,]),'STRING_LIT':([17,24,38,40,45,47,52,54,55,56,57,58,59,61,62,63,64,66,87,89,90,91,95,96,97,98,99,100,101,109,110,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,162,163,164,175,176,177,178,179,180,198,199,202,203,204,206,207,208,209,210,211,212,224,226,230,231,232,233,235,236,237,252,254,256,258,261,269,274,275,278,280,286,287,289,299,303,304,305,309,310,311,],[-34,-35,-38,-1,56,-40,-1,-64,-13,-93,-94,-95,-96,-99,56,-97,56,-37,-1,56,-105,-108,56,56,56,56,-60,-1,-39,158,-169,56,-98,-101,-23,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-69,-14,-15,-5,158,158,158,-103,56,-109,-106,-107,-110,-160,56,-30,-31,-171,158,158,158,158,158,158,158,-62,-18,-1,56,-99,56,-13,-29,-172,-17,-1,56,-1,56,56,56,-101,-151,56,-103,56,56,-6,56,-6,-176,56,-67,-68,]),'FLOAT_LIT':([17,24,38,40,45,47,52,54,55,56,57,58,59,61,62,63,64,66,87,89,90,91,95,96,97,98,99,100,101,109,110,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,162,163,164,175,176,177,178,179,180,198,199,202,203,204,206,207,208,209,210,211,212,224,226,230,231,232,233,235,236,237,252,254,256,258,261,269,274,275,278,280,286,287,289,299,303,304,305,309,310,311,],[-34,-35,-38,-1,57,-40,-1,-64,-13,-93,-94,-95,-96,-99,57,-97,57,-37,-1,57,-105,-108,57,57,57,57,-60,-1,-39,159,-169,57,-98,-101,-23,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-69,-14,-15,-5,159,159,159,-103,57,-109,-106,-107,-110,-160,57,-30,-31,-171,159,159,159,159,159,159,159,-62,-18,-1,57,-99,57,-13,-29,-172,-17,-1,57,-1,57,57,57,-101,-151,57,-103,57,57,-6,57,-6,-176,57,-67,-68,]),'INTEGER_LIT':([17,24,38,40,45,47,52,54,55,56,57,58,59,61,62,63,64,66,87,89,90,91,95,96,97,98,99,100,101,109,110,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,162,163,164,175,176,177,178,179,180,198,199,202,203,204,206,207,208,209,210,211,212,224,226,230,231,232,233,235,236,237,252,254,256,258,261,269,274,275,278,280,286,287,289,299,303,304,305,309,310,311,],[-34,-35,-38,-1,58,-40,-1,-64,-13,-93,-94,-95,-96,-99,58,-97,58,-37,-1,58,-105,-108,58,58,58,58,-60,-1,-39,160,-169,58,-98,-101,-23,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-69,-14,-15,-5,160,160,160,-103,58,-109,-106,-107,-110,-160,58,-30,-31,-171,160,160,160,160,160,160,160,-62,-18,-1,58,-99,58,-13,-29,-172,-17,-1,58,-1,58,58,58,-101,-151,58,-103,58,58,-6,58,-6,-176,58,-67,-68,]),'BOOLEAN_LIT':([17,24,38,40,45,47,52,54,55,56,57,58,59,61,62,63,64,66,87,89,90,91,95,96,97,98,99,100,101,109,110,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,162,163,164,175,176,177,178,179,180,198,199,202,203,204,206,207,208,209,210,211,212,224,226,230,231,232,233,235,236,237,252,254,256,258,261,269,274,275,278,280,286,287,289,299,303,304,305,309,310,311,],[-34,-35,-38,-1,59,-40,-1,-64,-13,-93,-94,-95,-96,-99,59,-97,59,-37,-1,59,-105,-108,59,59,59,59,-60,-1,-39,161,-169,59,-98,-101,-23,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-69,-14,-15,-5,161,161,161,-103,59,-109,-106,-107,-110,-160,59,-30,-31,-171,161,161,161,161,161,161,161,-62,-18,-1,59,-99,59,-13,-29,-172,-17,-1,59,-1,59,59,59,-101,-151,59,-103,59,59,-6,59,-6,-176,59,-67,-68,]),'GOT':([17,24,38,40,45,47,52,54,55,56,57,58,59,61,62,63,64,66,87,89,90,91,95,96,97,98,99,100,101,110,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,175,176,177,178,179,180,198,199,202,203,204,224,226,230,231,232,233,235,236,237,252,254,256,258,261,269,274,275,278,280,286,287,289,299,303,304,305,309,310,311,],[-34,-35,-38,-1,60,-40,-1,-64,-13,-93,-94,-95,-96,-99,60,-97,60,-37,-1,60,-105,-108,60,60,60,60,-60,-1,-39,-169,60,-98,-101,-23,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-69,-14,-15,-5,-103,60,-109,-106,-107,-110,-160,60,-30,-31,-171,-62,-18,-1,60,-99,60,-13,-29,-172,-17,-1,60,-1,60,60,60,-101,-151,60,-103,60,60,-6,60,-6,-176,60,-67,-68,]),'NATIVE_STRING_LIT':([17,24,38,47,55,56,57,58,59,61,62,63,66,89,90,91,95,96,97,98,99,101,110,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,175,176,177,178,179,180,198,199,202,203,204,224,226,233,236,237,252,261,274,299,303,304,305,309,310,311,],[-34,-35,-38,-40,-13,-93,-94,-95,-96,-99,99,-97,-37,99,-105,-108,99,99,99,148,-60,-39,-169,-98,-101,-23,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-69,-14,-15,-5,-103,99,-109,-106,-107,-110,-160,99,-30,-31,-171,-62,-18,148,-29,-172,-17,99,99,-6,99,-6,-176,99,-67,-68,]),'(':([17,24,38,40,45,47,50,52,54,55,56,57,58,59,61,62,63,64,66,72,78,79,80,81,82,83,87,89,90,91,95,96,97,98,99,100,101,108,109,110,112,116,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,162,163,164,169,170,172,173,175,176,177,178,179,180,198,199,202,203,204,206,207,208,209,210,211,212,218,219,220,221,224,226,227,230,231,232,233,235,236,237,249,251,252,253,254,256,258,261,262,269,274,275,277,278,280,286,287,289,299,303,304,305,309,310,311,],[-34,-35,-38,-1,62,-40,78,-1,-64,-13,-93,-94,-95,-96,-99,62,-97,62,-37,-90,78,-85,-86,-87,-88,-89,-1,62,-105,-108,62,62,62,62,-60,-1,-39,78,162,-169,78,-91,62,-98,-101,-23,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-69,-14,-15,-5,162,162,162,78,-56,78,-24,-103,62,-109,-106,-107,-110,-160,62,-30,-31,-171,162,162,162,162,162,162,162,78,78,78,-66,-62,-18,-150,-1,62,-99,62,-13,-29,-172,78,78,-17,62,-1,62,-1,62,78,62,62,-101,78,-151,62,-103,62,62,-6,62,-6,-176,62,-67,-68,]),'RETURN_LABEL':([17,24,38,40,45,47,52,54,55,56,57,58,59,61,62,63,64,66,87,88,89,90,91,95,96,97,98,99,100,101,110,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,175,176,177,178,179,180,198,199,202,203,204,224,226,227,230,231,232,233,235,236,237,252,253,254,256,258,260,261,269,274,275,278,280,286,287,289,299,303,304,305,309,310,311,],[-34,-35,-38,-1,63,-40,-1,-64,-13,-93,-94,-95,-96,-99,63,-97,63,-37,-1,119,63,-105,-108,63,63,63,63,-60,-1,-39,-169,63,-98,-101,-23,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-69,-14,-15,-5,-103,63,-109,-106,-107,-110,-160,63,-30,-31,-171,-62,-18,-150,-1,63,-99,63,-13,-29,-172,-17,63,-1,63,-1,119,63,63,63,-101,-151,63,-103,63,63,-6,63,-6,-176,63,-67,-68,]),'{':([17,24,38,40,45,47,52,54,55,56,57,58,59,61,62,63,64,66,87,89,90,91,95,96,97,98,99,100,101,110,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,150,175,176,177,178,179,180,198,199,202,203,204,224,226,227,230,231,232,233,235,236,237,252,253,254,256,258,261,269,274,275,278,280,286,287,289,299,303,304,305,309,310,311,],[-34,-35,-38,-1,64,-40,-1,-64,-13,-93,-94,-95,-96,-99,64,-97,64,-37,-1,64,-105,-108,64,64,64,64,-60,-1,-39,-169,64,-98,-101,-23,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-69,-14,-15,-5,-103,64,-109,-106,-107,-110,-160,64,-30,-31,-171,-62,-18,-150,-1,64,-99,64,-13,-29,-172,-17,64,-1,64,-1,64,64,64,-101,-151,64,-103,64,64,-6,64,-6,-176,64,-67,-68,]),'RETURN':([17,24,38,47,66,101,110,150,199,202,203,204,224,226,228,236,237,252,299,303,304,305,309,310,311,],[-34,-35,-38,-40,-37,-39,-169,-5,-150,-30,-31,-171,-62,-18,254,-29,-172,-17,-6,-150,-6,-176,-150,-67,-68,]),'DONE':([17,24,38,47,66,101,110,150,199,202,203,204,224,226,228,236,237,252,299,303,304,305,309,310,311,],[-34,-35,-38,-40,-37,-39,-169,-5,-150,-30,-31,-171,-62,-18,255,-29,-172,-17,-6,-150,-6,-176,-150,-67,-68,]),'DLT_MASK':([17,24,259,272,273,284,293,],[-34,-35,274,274,-55,-63,-177,]),'CONTINUE':([17,24,299,303,304,309,310,311,],[-34,-35,-6,308,-6,308,-67,-68,]),'DLT_MAP':([17,24,292,297,298,299,302,303,304,309,310,311,],[-34,-35,299,299,-19,-6,-73,-178,-6,-179,-67,-68,]),'AS':([40,],[44,]),'IS':([42,70,],[50,108,]),'}':([45,53,54,55,56,57,58,59,61,63,86,87,90,91,100,118,119,120,125,149,175,177,178,179,180,198,],[-2,-76,-64,-13,-93,-94,-95,-96,-99,-97,-61,-1,-105,-108,-1,-77,-98,-101,-23,198,-103,-109,-106,-107,-110,-160,]),'RETURNING_TO':([45,53,54,55,56,57,58,59,61,63,86,87,90,91,118,119,120,125,175,177,178,179,180,198,230,232,235,257,275,286,],[-2,-76,-64,-13,-93,-94,-95,-96,-99,-97,-61,-1,-105,-108,-77,-98,-101,-23,-103,-109,-106,-107,-110,-160,-1,-99,-13,269,-101,-103,]),'FROM':([45,53,54,55,56,57,58,59,61,63,86,87,90,91,118,119,120,125,175,177,178,179,180,198,254,265,],[-2,-76,-64,-13,-93,-94,-95,-96,-99,-97,-61,-1,-105,-108,-77,-98,-101,-23,-103,-109,-106,-107,-110,-160,-1,280,]),'TO':([45,53,54,55,56,57,58,59,61,63,86,87,90,91,118,119,120,125,175,177,178,179,180,198,232,254,263,265,275,279,286,290,],[-2,-76,-64,-13,-93,-94,-95,-96,-99,-97,-61,-1,-105,-108,-77,-98,-101,-23,-103,-109,-106,-107,-110,-160,-100,-1,278,-54,-102,289,-104,-28,]),'INTEGER':([50,72,78,79,80,81,82,83,108,112,116,169,170,172,173,218,219,220,221,249,251,262,277,],[79,-90,79,-85,-86,-87,-88,-89,79,79,-91,79,-56,79,-24,79,79,79,-66,79,79,79,79,]),'FLOAT':([50,72,78,79,80,81,82,83,108,112,116,169,170,172,173,218,219,220,221,249,251,262,277,],[80,-90,80,-85,-86,-87,-88,-89,80,80,-91,80,-56,80,-24,80,80,80,-66,80,80,80,80,]),'BOOLEAN':([50,72,78,79,80,81,82,83,108,112,116,169,170,172,173,218,219,220,221,249,251,262,277,],[81,-90,81,-85,-86,-87,-88,-89,81,81,-91,81,-56,81,-24,81,81,81,-66,81,81,81,81,]),'STRING':([50,72,78,79,80,81,82,83,108,112,116,169,170,172,173,218,219,220,221,249,251,262,277,],[82,-90,82,-85,-86,-87,-88,-89,82,82,-91,82,-56,82,-24,82,82,82,-66,82,82,82,82,]),')':([55,56,57,58,59,61,63,72,74,75,76,77,79,80,81,82,83,90,91,93,94,98,99,111,113,114,115,116,119,120,125,143,144,145,146,147,148,158,159,160,161,165,167,169,170,171,173,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,213,214,215,216,217,218,219,221,222,239,240,241,242,243,244,245,246,247,248,249,250,251,277,],[-13,-93,-94,-95,-96,-99,-97,-90,-16,-53,-53,-53,-85,-86,-87,-88,-89,-105,-108,125,-12,-131,-60,-82,-83,-50,173,-91,-98,-101,-23,-111,-112,-113,-69,-14,-15,-8,-9,-10,-11,-27,-132,-133,-56,-84,-24,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-160,245,-137,-144,-78,-57,-3,-3,-66,-26,-138,-139,-140,-141,-142,-143,-25,-65,-79,-134,-20,-80,-135,-136,]),'^':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,157,158,159,160,161,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,213,214,215,223,239,240,241,242,243,244,245,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,126,-12,-131,-60,-98,-101,126,-23,126,126,126,-69,-14,-15,207,-8,-9,-10,-11,-103,-109,-106,-107,-110,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,-160,207,207,207,126,207,207,207,207,207,207,-25,126,]),'*':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,157,158,159,160,161,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,213,214,215,223,239,240,241,242,243,244,245,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,127,-12,-131,-60,-98,-101,127,-23,-111,127,-113,-69,-14,-15,208,-8,-9,-10,-11,-103,-109,-106,-107,-110,-114,-115,127,-117,-118,127,127,127,127,127,127,127,127,127,127,127,127,-160,208,-137,208,127,-138,-139,208,-141,208,208,-25,127,]),'/':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,157,158,159,160,161,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,213,214,215,223,239,240,241,242,243,244,245,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,128,-12,-131,-60,-98,-101,128,-23,-111,128,-113,-69,-14,-15,209,-8,-9,-10,-11,-103,-109,-106,-107,-110,-114,-115,128,-117,-118,128,128,128,128,128,128,128,128,128,128,128,128,-160,209,-137,209,128,-138,-139,209,-141,209,209,-25,128,]),'INTEGER_DIVIDE':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,129,-12,-131,-60,-98,-101,129,-23,-111,129,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,129,-117,-118,129,129,129,129,129,129,129,129,129,129,129,129,-160,129,129,]),'%':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,157,158,159,160,161,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,213,214,215,223,239,240,241,242,243,244,245,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,130,-12,-131,-60,-98,-101,130,-23,-111,130,-113,-69,-14,-15,210,-8,-9,-10,-11,-103,-109,-106,-107,-110,-114,-115,130,-117,-118,130,130,130,130,130,130,130,130,130,130,130,130,-160,210,-137,210,130,-138,-139,210,-141,210,210,-25,130,]),'+':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,157,158,159,160,161,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,213,214,215,223,239,240,241,242,243,244,245,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,131,-12,-131,-60,-98,-101,131,-23,-111,131,-113,-69,-14,-15,211,-8,-9,-10,-11,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,131,131,131,131,131,131,131,131,131,131,-160,211,-137,211,131,-138,-139,-140,-141,-142,-143,-25,131,]),'-':([55,56,57,58,59,61,62,63,89,90,91,93,94,95,96,97,98,99,109,119,120,122,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,157,158,159,160,161,162,163,164,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,206,207,208,209,210,211,212,213,214,215,223,239,240,241,242,243,244,245,261,274,285,],[-13,-93,-94,-95,-96,-99,97,-97,97,-105,-108,132,-12,97,97,97,-131,-60,163,-98,-101,132,-23,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-111,132,-113,-69,-14,-15,212,-8,-9,-10,-11,163,163,163,-103,97,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,132,132,132,132,132,132,132,132,132,132,-160,163,163,163,163,163,163,163,212,-137,212,132,-138,-139,-140,-141,-142,-143,-25,97,97,132,]),'<':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,133,-12,-131,-60,-98,-101,133,-23,-111,133,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,None,None,None,None,None,None,133,None,133,None,-160,133,133,]),'LEQ':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,134,-12,-131,-60,-98,-101,134,-23,-111,134,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,None,None,None,None,None,None,134,None,134,None,-160,134,134,]),'LAEQ':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,135,-12,-131,-60,-98,-101,135,-23,-111,135,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,None,None,None,None,None,None,135,None,135,None,-160,135,135,]),'>':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,136,-12,-131,-60,-98,-101,136,-23,-111,136,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,None,None,None,None,None,None,136,None,136,None,-160,136,136,]),'GEQ':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,137,-12,-131,-60,-98,-101,137,-23,-111,137,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,None,None,None,None,None,None,137,None,137,None,-160,137,137,]),'GAEQ':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,138,-12,-131,-60,-98,-101,138,-23,-111,138,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,None,None,None,None,None,None,138,None,138,None,-160,138,138,]),'EQ':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,139,-12,-131,-60,-98,-101,139,-23,-111,139,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,None,-128,None,-130,-160,139,139,]),'AEQ':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,140,-12,-131,-60,-98,-101,140,-23,-111,140,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,None,None,None,None,None,None,140,None,140,None,-160,140,140,]),'NEQ':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,141,-12,-131,-60,-98,-101,141,-23,-111,141,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,None,-128,None,-130,-160,141,141,]),'NAEQ':([55,56,57,58,59,61,63,90,91,93,94,98,99,119,120,122,125,143,144,145,146,147,148,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,223,285,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,142,-12,-131,-60,-98,-101,142,-23,-111,142,-113,-69,-14,-15,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,None,None,None,None,None,None,142,None,142,None,-160,142,142,]),']':([55,56,57,58,59,61,63,90,91,94,98,99,119,120,121,122,125,143,144,145,146,147,148,155,156,157,158,159,160,161,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,214,215,223,238,239,240,241,242,243,244,245,276,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,-12,-131,-60,-98,-101,175,-59,-23,-111,-112,-113,-69,-14,-15,205,-58,-92,-8,-9,-10,-11,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-160,-137,-144,-72,-71,-138,-139,-140,-141,-142,-143,-25,286,]),',':([55,56,57,58,59,61,63,90,91,94,98,99,119,120,121,122,125,143,144,145,146,147,148,155,156,157,158,159,160,161,175,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,214,215,223,238,239,240,241,242,243,244,245,276,],[-13,-93,-94,-95,-96,-99,-97,-105,-108,-12,-131,-60,-98,-101,176,-59,-23,-111,-112,-113,-69,-14,-15,206,-58,-92,-8,-9,-10,-11,-103,-109,-106,-107,-110,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-160,-137,-144,-72,-71,-138,-139,-140,-141,-142,-143,-25,176,]),'.':([55,61,63,91,92,116,119,120,125,175,198,232,235,264,275,286,],[88,-99,-97,123,124,174,-98,-101,-23,-103,-160,-99,260,260,-101,-103,]),'[':([55,61,63,71,119,120,125,175,198,232,235,264,275,286,],[89,-99,-97,109,-98,-101,-23,-103,-160,-99,261,261,-101,-103,]),'ABS':([62,89,95,96,97,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,176,261,274,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'NOT':([62,89,95,96,97,109,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,162,163,164,176,206,207,208,209,210,211,212,261,274,],[96,96,96,96,96,164,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,164,164,164,96,164,164,164,164,164,164,164,96,96,]),'TAKING':([75,76,77,],[112,112,112,]),'OPEQ':([229,232,275,286,],[256,-100,-102,-104,]),'WITH':([255,],[267,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'newlines_opt':([0,],[2,]),'opmode':([2,],[3,]),'module':([2,],[4,]),'opmode_type':([2,],[6,]),'make_module':([7,],[11,]),'make_opmode':([10,],[12,]),'parameters':([11,102,104,106,],[13,151,152,153,]),'pos_parameters':([11,26,102,104,106,],[14,36,14,14,14,]),'required_parameters':([11,26,102,104,106,],[15,15,15,15,15,]),'newlines':([12,13,43,73,85,152,153,154,200,205,225,285,299,301,306,307,],[16,18,51,110,117,202,203,204,236,237,252,293,304,305,310,311,]),'kw_parameters':([14,],[19,]),'required_parameter':([15,],[21,]),'uses':([16,18,],[23,25,]),'keyword':([19,],[26,]),'optional_parameters':([20,],[29,]),'optional_parameter':([20,29,],[30,37,]),'typedefs':([23,25,66,],[32,35,101,]),'use':([23,25,],[33,33,]),'typedef':([32,35,101,],[38,38,38,]),'vartypes':([35,101,],[41,150,]),'arguments':([40,52,100,230,254,258,],[43,85,149,257,265,270,]),'pos_arguments':([40,52,87,100,230,254,258,],[45,45,118,45,45,45,45,]),'steps':([41,],[46,]),'vartype':([41,150,],[47,47,]),'kw_arguments':([45,],[53,]),'primary':([45,62,64,89,95,96,97,98,118,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,176,199,231,233,256,261,269,274,280,287,289,303,309,],[54,94,100,94,94,94,94,147,54,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,230,258,147,268,94,282,94,290,294,295,230,230,]),'simple_primary':([45,62,64,89,95,96,97,98,118,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,176,199,231,233,253,256,261,269,274,280,287,289,303,309,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,235,55,55,264,55,55,55,55,55,55,55,235,235,]),'step':([46,],[65,]),'label_decl':([46,],[66,]),'type':([50,78,108,],[73,115,154,]),'simple_type':([50,78,108,112,169,172,218,219,220,249,251,262,277,],[74,74,74,170,221,170,170,170,170,221,221,170,221,]),'dotted_prefix':([50,78,108,112,169,172,218,219,220,249,251,262,277,],[84,84,84,84,84,84,84,84,84,84,84,84,84,]),'kw_argument':([53,],[86,]),'expr':([62,89,95,96,97,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,176,261,274,],[93,122,143,144,145,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,223,122,285,]),'native_elements':([62,89,95,96,97,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,176,199,261,274,303,309,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,233,98,98,233,233,]),'fn_name':([67,],[102,]),'sub_name':([68,],[104,]),'label_name':([69,],[106,]),'taking_opt':([75,76,77,],[111,113,114,]),'subscripts':([89,261,],[121,276,]),'native_element':([98,233,],[146,146,]),'dimensions':([109,],[155,]),'dimension':([109,206,],[156,238,]),'const_expr':([109,162,163,164,206,207,208,209,210,211,212,],[157,213,214,215,157,239,240,241,242,243,244,]),'parameter_types':([112,172,],[165,222,]),'pos_parameter_types':([112,172,218,219,],[166,166,247,250,]),'pos_parameter_types1':([112,172,],[167,167,]),'parameter_types_list':([112,172,218,219,],[168,168,248,248,]),'parameter_types_list1':([112,172,218,219,220,262,],[169,169,249,249,251,277,]),'returning_opt':([114,151,],[171,201,]),'statements':([150,],[199,]),'set_returning_opt':([151,],[200,]),'kw_parameter_types':([166,],[216,]),'kw_parameter_type':([166,216,],[217,246,]),'statement':([199,],[224,]),'simple_statement':([199,303,309,],[225,306,306,]),'dlt':([199,],[226,]),'extended_kws':([199,227,303,309,],[228,253,228,228,]),'lvalue':([199,253,303,309,],[229,263,229,229,]),'normal_kws':([255,278,279,281,295,],[266,287,288,291,300,]),'dlt_conditions':([259,],[271,]),'conditions':([259,],[272,]),'condition':([259,272,],[273,284,]),'from_opt':([265,],[279,]),'dlt_actions':([292,],[296,]),'actions':([292,],[297,]),'action':([292,297,],[298,302,]),'action_statements':([299,304,],[303,309,]),'continue':([303,309,],[307,307,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('pos_arguments -> <empty>','pos_arguments',0,'p_empty_tuple','parser.py',43),
  ('kw_arguments -> <empty>','kw_arguments',0,'p_empty_tuple','parser.py',44),
  ('parameter_types_list -> <empty>','parameter_types_list',0,'p_empty_tuple','parser.py',45),
  ('steps -> <empty>','steps',0,'p_empty_tuple','parser.py',46),
  ('statements -> <empty>','statements',0,'p_empty_tuple','parser.py',47),
  ('action_statements -> <empty>','action_statements',0,'p_empty_tuple','parser.py',48),
  ('dotted_prefix -> <empty>','dotted_prefix',0,'p_empty_tuple','parser.py',49),
  ('const_expr -> STRING_LIT','const_expr',1,'p_first','parser.py',56),
  ('const_expr -> FLOAT_LIT','const_expr',1,'p_first','parser.py',57),
  ('const_expr -> INTEGER_LIT','const_expr',1,'p_first','parser.py',58),
  ('const_expr -> BOOLEAN_LIT','const_expr',1,'p_first','parser.py',59),
  ('expr -> primary','expr',1,'p_first','parser.py',60),
  ('primary -> simple_primary','primary',1,'p_first','parser.py',61),
  ('native_element -> primary','native_element',1,'p_first','parser.py',62),
  ('native_element -> NATIVE_STRING_LIT','native_element',1,'p_first','parser.py',63),
  ('type -> simple_type','type',1,'p_first','parser.py',64),
  ('statement -> simple_statement newlines','statement',2,'p_first','parser.py',65),
  ('statement -> dlt','statement',1,'p_first','parser.py',66),
  ('actions -> action','actions',1,'p_first','parser.py',67),
  ('parameter_types_list -> parameter_types_list1','parameter_types_list',1,'p_first','parser.py',68),
  ('opmode_type -> AUTONOMOUS','opmode_type',1,'p_first','parser.py',69),
  ('opmode_type -> TELEOP','opmode_type',1,'p_first','parser.py',70),
  ('simple_primary -> ( expr )','simple_primary',3,'p_second','parser.py',77),
  ('simple_type -> ( type )','simple_type',3,'p_second','parser.py',78),
  ('const_expr -> ( const_expr )','const_expr',3,'p_second','parser.py',79),
  ('returning_opt -> RETURNING parameter_types','returning_opt',2,'p_second','parser.py',80),
  ('taking_opt -> TAKING parameter_types','taking_opt',2,'p_second','parser.py',81),
  ('from_opt -> FROM primary','from_opt',2,'p_second','parser.py',82),
  ('label_decl -> FUNCTION fn_name parameters set_returning_opt newlines','label_decl',5,'p_second','parser.py',83),
  ('label_decl -> SUBROUTINE sub_name parameters newlines','label_decl',4,'p_second','parser.py',84),
  ('label_decl -> LABEL label_name parameters newlines','label_decl',4,'p_second','parser.py',85),
  ('newlines_opt -> <empty>','newlines_opt',0,'p_none','parser.py',92),
  ('newlines_opt -> newlines_opt NEWLINE','newlines_opt',2,'p_none','parser.py',93),
  ('newlines -> NEWLINE','newlines',1,'p_none','parser.py',94),
  ('newlines -> newlines NEWLINE','newlines',2,'p_none','parser.py',95),
  ('opmode -> opmode_type OPMODE make_opmode newlines uses typedefs','opmode',6,'p_none','parser.py',96),
  ('typedefs -> <empty>','typedefs',0,'p_none','parser.py',97),
  ('typedefs -> typedefs typedef','typedefs',2,'p_none','parser.py',98),
  ('vartypes -> <empty>','vartypes',0,'p_none','parser.py',99),
  ('vartypes -> vartypes vartype','vartypes',2,'p_none','parser.py',100),
  ('parameters -> pos_parameters kw_parameters','parameters',2,'p_none','parser.py',101),
  ('pos_parameters -> required_parameters','pos_parameters',1,'p_none','parser.py',102),
  ('pos_parameters -> required_parameters ? optional_parameters','pos_parameters',3,'p_none','parser.py',103),
  ('required_parameters -> <empty>','required_parameters',0,'p_none','parser.py',104),
  ('required_parameters -> required_parameters required_parameter','required_parameters',2,'p_none','parser.py',105),
  ('optional_parameters -> optional_parameter','optional_parameters',1,'p_none','parser.py',106),
  ('optional_parameters -> optional_parameters optional_parameter','optional_parameters',2,'p_none','parser.py',107),
  ('kw_parameters -> <empty>','kw_parameters',0,'p_none','parser.py',108),
  ('kw_parameters -> kw_parameters keyword pos_parameters','kw_parameters',3,'p_none','parser.py',109),
  ('returning_opt -> <empty>','returning_opt',0,'p_none','parser.py',110),
  ('uses -> <empty>','uses',0,'p_none','parser.py',111),
  ('uses -> uses use','uses',2,'p_none','parser.py',112),
  ('taking_opt -> <empty>','taking_opt',0,'p_none','parser.py',113),
  ('from_opt -> <empty>','from_opt',0,'p_none','parser.py',114),
  ('conditions -> condition','conditions',1,'p_1tuple','parser.py',121),
  ('parameter_types_list1 -> simple_type','parameter_types_list1',1,'p_1tuple','parser.py',122),
  ('kw_parameter_types -> kw_parameter_type','kw_parameter_types',1,'p_1tuple','parser.py',123),
  ('dimensions -> dimension','dimensions',1,'p_1tuple','parser.py',124),
  ('subscripts -> expr','subscripts',1,'p_1tuple','parser.py',125),
  ('native_elements -> NATIVE_STRING_LIT','native_elements',1,'p_1tuple','parser.py',126),
  ('kw_arguments -> kw_arguments kw_argument','kw_arguments',2,'p_append','parser.py',133),
  ('statements -> statements statement','statements',2,'p_append','parser.py',134),
  ('conditions -> conditions condition','conditions',2,'p_append','parser.py',135),
  ('pos_arguments -> pos_arguments primary','pos_arguments',2,'p_append','parser.py',136),
  ('kw_parameter_types -> kw_parameter_types kw_parameter_type','kw_parameter_types',2,'p_append','parser.py',137),
  ('parameter_types_list1 -> parameter_types_list1 simple_type','parameter_types_list1',2,'p_append','parser.py',138),
  ('action_statements -> action_statements simple_statement newlines','action_statements',3,'p_append','parser.py',139),
  ('action_statements -> action_statements continue newlines','action_statements',3,'p_append','parser.py',140),
  ('native_elements -> native_elements native_element','native_elements',2,'p_append','parser.py',141),
  ('dotted_prefix -> dotted_prefix IDENT .','dotted_prefix',3,'p_append','parser.py',142),
  ('dimensions -> dimensions , dimension','dimensions',3,'p_dimensions','parser.py',149),
  ('subscripts -> subscripts , expr','subscripts',3,'p_dimensions','parser.py',150),
  ('actions -> actions action','actions',2,'p_actions','parser.py',156),
  ('step -> label_decl typedefs vartypes statements','step',4,'p_step1','parser.py',162),
  ('steps -> steps step','steps',2,'p_paste','parser.py',169),
  ('arguments -> pos_arguments kw_arguments','arguments',2,'p_all','parser.py',176),
  ('kw_argument -> KEYWORD pos_arguments','kw_argument',2,'p_all','parser.py',177),
  ('parameter_types -> pos_parameter_types kw_parameter_types','parameter_types',2,'p_all','parser.py',178),
  ('kw_parameter_type -> KEYWORD pos_parameter_types','kw_parameter_type',2,'p_kw_parameter_type','parser.py',185),
  ('kw_parameter_type -> OPT_KEYWORD pos_parameter_types','kw_parameter_type',2,'p_kw_parameter_type','parser.py',186),
  ('module -> MODULE make_module parameters newlines uses typedefs vartypes steps','module',8,'p_module','parser.py',193),
  ('type -> SUBROUTINE taking_opt','type',2,'p_label_type1','parser.py',201),
  ('type -> LABEL taking_opt','type',2,'p_label_type1','parser.py',202),
  ('type -> FUNCTION taking_opt returning_opt','type',3,'p_label_type2','parser.py',209),
  ('simple_type -> INTEGER','simple_type',1,'p_builtin_type','parser.py',216),
  ('simple_type -> FLOAT','simple_type',1,'p_builtin_type','parser.py',217),
  ('simple_type -> BOOLEAN','simple_type',1,'p_builtin_type','parser.py',218),
  ('simple_type -> STRING','simple_type',1,'p_builtin_type','parser.py',219),
  ('simple_type -> MODULE','simple_type',1,'p_builtin_type','parser.py',220),
  ('simple_type -> TYPE','simple_type',1,'p_builtin_type','parser.py',221),
  ('simple_type -> dotted_prefix IDENT','simple_type',2,'p_typename','parser.py',227),
  ('dimension -> const_expr','dimension',1,'p_dimension','parser.py',233),
  ('primary -> STRING_LIT','primary',1,'p_primary_literal','parser.py',242),
  ('primary -> FLOAT_LIT','primary',1,'p_primary_literal','parser.py',243),
  ('primary -> INTEGER_LIT','primary',1,'p_primary_literal','parser.py',244),
  ('primary -> BOOLEAN_LIT','primary',1,'p_primary_literal','parser.py',245),
  ('simple_primary -> RETURN_LABEL','simple_primary',1,'p_return_label1','parser.py',252),
  ('simple_primary -> simple_primary . RETURN_LABEL','simple_primary',3,'p_return_label2','parser.py',259),
  ('simple_primary -> IDENT','simple_primary',1,'p_primary_ident','parser.py',266),
  ('lvalue -> IDENT','lvalue',1,'p_primary_ident','parser.py',267),
  ('simple_primary -> simple_primary . IDENT','simple_primary',3,'p_primary_dot','parser.py',274),
  ('lvalue -> simple_primary . IDENT','lvalue',3,'p_primary_dot','parser.py',275),
  ('simple_primary -> simple_primary [ subscripts ]','simple_primary',4,'p_primary_subscript','parser.py',282),
  ('lvalue -> simple_primary [ subscripts ]','lvalue',4,'p_primary_subscript','parser.py',283),
  ('primary -> GOT KEYWORD','primary',2,'p_primary_got_keyword1','parser.py',289),
  ('primary -> GOT IDENT . KEYWORD','primary',4,'p_primary_got_keyword2','parser.py',294),
  ('primary -> GOT MODULE . KEYWORD','primary',4,'p_primary_got_keyword3','parser.py',299),
  ('primary -> GOT IDENT','primary',2,'p_primary_got_param1','parser.py',304),
  ('primary -> GOT IDENT . IDENT','primary',4,'p_primary_got_param2','parser.py',309),
  ('primary -> GOT MODULE . IDENT','primary',4,'p_primary_got_param3','parser.py',314),
  ('expr -> ABS expr','expr',2,'p_unary_expr','parser.py',320),
  ('expr -> NOT expr','expr',2,'p_unary_expr','parser.py',321),
  ('expr -> - expr','expr',2,'p_unary_expr','parser.py',322),
  ('expr -> expr ^ expr','expr',3,'p_binary_expr','parser.py',329),
  ('expr -> expr * expr','expr',3,'p_binary_expr','parser.py',330),
  ('expr -> expr / expr','expr',3,'p_binary_expr','parser.py',331),
  ('expr -> expr INTEGER_DIVIDE expr','expr',3,'p_binary_expr','parser.py',332),
  ('expr -> expr % expr','expr',3,'p_binary_expr','parser.py',333),
  ('expr -> expr + expr','expr',3,'p_binary_expr','parser.py',334),
  ('expr -> expr - expr','expr',3,'p_binary_expr','parser.py',335),
  ('expr -> expr < expr','expr',3,'p_binary_expr','parser.py',336),
  ('expr -> expr LEQ expr','expr',3,'p_binary_expr','parser.py',337),
  ('expr -> expr LAEQ expr','expr',3,'p_binary_expr','parser.py',338),
  ('expr -> expr > expr','expr',3,'p_binary_expr','parser.py',339),
  ('expr -> expr GEQ expr','expr',3,'p_binary_expr','parser.py',340),
  ('expr -> expr GAEQ expr','expr',3,'p_binary_expr','parser.py',341),
  ('expr -> expr EQ expr','expr',3,'p_binary_expr','parser.py',342),
  ('expr -> expr AEQ expr','expr',3,'p_binary_expr','parser.py',343),
  ('expr -> expr NEQ expr','expr',3,'p_binary_expr','parser.py',344),
  ('expr -> expr NAEQ expr','expr',3,'p_binary_expr','parser.py',345),
  ('expr -> native_elements','expr',1,'p_native_expr','parser.py',352),
  ('parameter_types -> pos_parameter_types1','parameter_types',1,'p_pos_parameter_types1','parser.py',359),
  ('pos_parameter_types1 -> parameter_types_list1','pos_parameter_types1',1,'p_pos_parameter_types1','parser.py',360),
  ('pos_parameter_types -> parameter_types_list','pos_parameter_types',1,'p_pos_parameter_types1','parser.py',361),
  ('pos_parameter_types1 -> parameter_types_list ? parameter_types_list1','pos_parameter_types1',3,'p_pos_parameter_types2','parser.py',368),
  ('pos_parameter_types -> parameter_types_list ? parameter_types_list1','pos_parameter_types',3,'p_pos_parameter_types2','parser.py',369),
  ('const_expr -> - const_expr','const_expr',2,'p_const_numeric_expr_uminus','parser.py',376),
  ('const_expr -> const_expr ^ const_expr','const_expr',3,'p_const_numeric_expr_binary','parser.py',386),
  ('const_expr -> const_expr * const_expr','const_expr',3,'p_const_numeric_expr_binary','parser.py',387),
  ('const_expr -> const_expr / const_expr','const_expr',3,'p_const_numeric_expr_binary','parser.py',388),
  ('const_expr -> const_expr % const_expr','const_expr',3,'p_const_numeric_expr_binary','parser.py',389),
  ('const_expr -> const_expr + const_expr','const_expr',3,'p_const_numeric_expr_binary','parser.py',390),
  ('const_expr -> const_expr - const_expr','const_expr',3,'p_const_numeric_expr_binary','parser.py',391),
  ('const_expr -> NOT const_expr','const_expr',2,'p_const_bool_expr_uminus','parser.py',413),
  ('continue -> CONTINUE','continue',1,'p_simple_statement1','parser.py',423),
  ('simple_statement -> SET extended_kws lvalue TO normal_kws primary','simple_statement',6,'p_simple_statement2','parser.py',430),
  ('simple_statement -> GOTO primary arguments','simple_statement',3,'p_simple_statement3','parser.py',437),
  ('simple_statement -> extended_kws RETURN arguments from_opt normal_kws','simple_statement',5,'p_simple_statement4','parser.py',444),
  ('simple_statement -> extended_kws RETURN arguments from_opt TO primary normal_kws','simple_statement',7,'p_simple_statement5','parser.py',451),
  ('extended_kws -> <empty>','extended_kws',0,'p_extended_kws','parser.py',458),
  ('normal_kws -> <empty>','normal_kws',0,'p_normal_kws','parser.py',463),
  ('simple_statement -> primary arguments','simple_statement',2,'p_simple_statement6','parser.py',469),
  ('simple_statement -> primary arguments RETURNING_TO primary','simple_statement',4,'p_simple_statement7','parser.py',476),
  ('simple_statement -> lvalue OPEQ primary','simple_statement',3,'p_simple_statement8','parser.py',483),
  ('simple_statement -> extended_kws DONE normal_kws','simple_statement',3,'p_simple_statement9','parser.py',490),
  ('simple_statement -> extended_kws DONE WITH IDENT normal_kws','simple_statement',5,'p_simple_statement10','parser.py',497),
  ('simple_statement -> native_elements','simple_statement',1,'p_simple_statement11','parser.py',504),
  ('file -> newlines_opt opmode','file',2,'p_file','parser.py',511),
  ('file -> newlines_opt module','file',2,'p_file','parser.py',512),
  ('simple_primary -> { primary arguments }','simple_primary',4,'p_primary','parser.py',519),
  ('make_opmode -> <empty>','make_opmode',0,'p_make_opmode','parser.py',525),
  ('make_module -> <empty>','make_module',0,'p_make_module','parser.py',530),
  ('required_parameter -> IDENT','required_parameter',1,'p_required_parameter','parser.py',540),
  ('optional_parameter -> IDENT','optional_parameter',1,'p_optional_parameter','parser.py',547),
  ('keyword -> KEYWORD','keyword',1,'p_keyword','parser.py',553),
  ('keyword -> OPT_KEYWORD','keyword',1,'p_opt_keyword','parser.py',558),
  ('use -> USE IDENT arguments newlines','use',4,'p_use1','parser.py',564),
  ('use -> USE IDENT AS IDENT arguments newlines','use',6,'p_use2','parser.py',575),
  ('typedef -> TYPE IDENT IS type newlines','typedef',5,'p_typedef','parser.py',586),
  ('set_returning_opt -> returning_opt','set_returning_opt',1,'p_set_returning_opt','parser.py',592),
  ('vartype -> VAR IDENT IS type newlines','vartype',5,'p_vartype','parser.py',599),
  ('vartype -> DIM IDENT [ dimensions ] newlines','vartype',6,'p_dim','parser.py',611),
  ('fn_name -> IDENT','fn_name',1,'p_fn_name','parser.py',621),
  ('sub_name -> IDENT','sub_name',1,'p_sub_name','parser.py',626),
  ('label_name -> IDENT','label_name',1,'p_label_name','parser.py',631),
  ('dlt -> DLT_DELIMITER NEWLINE dlt_conditions DLT_DELIMITER NEWLINE dlt_actions DLT_DELIMITER newlines','dlt',8,'p_dlt','parser.py',637),
  ('condition -> DLT_MASK expr newlines','condition',3,'p_condition','parser.py',648),
  ('action -> DLT_MAP action_statements','action',2,'p_action1','parser.py',655),
  ('action -> DLT_MAP newlines action_statements','action',3,'p_action2','parser.py',662),
  ('dlt_conditions -> conditions','dlt_conditions',1,'p_dlt_conditions','parser.py',668),
  ('dlt_actions -> actions','dlt_actions',1,'p_dlt_actions','parser.py',673),
]
