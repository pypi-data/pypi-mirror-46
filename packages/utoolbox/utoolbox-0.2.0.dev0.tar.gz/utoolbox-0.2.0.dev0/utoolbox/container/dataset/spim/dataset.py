import glob
import logging
import os
import re

import imageio

from utoolbox.container import ImageDatastore
from ..base import MultiChannelDataset
from .error import MultipleSettingsError, SettingsNotFoundError
from .settings import Settings

logger = logging.getLogger(__name__)


class SPIMDataset(MultiChannelDataset):
    """
    Representation of an acquisition result from LatticeScope, containing
    software setup and collected data.
    """

    SETTINGS_PATTERN = r"(?P<ds_name>.+)_Settings.txt$"

    def __init__(self, root, refactor=True):
        """
        :param str root: source directory of the dataset
        :param bool refactor: refactor filenames
        """
        if not os.path.exists(root):
            raise FileNotFoundError("invalid dataset root")
        super().__init__(root)

    @property
    def read_func(self):
        return imageio.volread

    def _find_settings_file(self, extension="txt"):
        """
        Find settings file generated by Lattice Scope.

        :param str extension: settings file extension, default is 'txt'
        """
        # settings are .txt files
        search_pattern = os.path.join(self.root, "*.txt")
        filenames = glob.glob(search_pattern)

        ds_names = []
        for filename in filenames:
            basename = os.path.basename(filename)
            matches = re.match(SPIMDataset.SETTINGS_PATTERN, basename)
            if matches is None:
                continue
            ds_names.append((matches.group("ds_name"), filename))

        if not ds_names:
            raise SettingsNotFoundError("no known settings file")
        elif len(ds_names) > 1:
            logger.warning("diverged dataset, attempting to resolve it")

            # sort by name of dataset instead of actual path
            ds_names.sort(key=lambda t: t[0])

            # use the longest common prefix to resolve it
            ds_names_tr = list(zip(*ds_names))
            prefix = os.path.commonprefix(ds_names_tr[0])
            try:
                index = ds_names_tr[0].index(prefix)
            except ValueError:
                raise MultipleSettingsError(
                    "unable to determine which settings file to use"
                )
            return ds_names[index][1]
        else:
            return ds_names[0][1]

    def _load_metadata(self):
        settings_file = self._find_settings_file()
        logger.debug('settings file "{}"'.format(settings_file))
        # NOTE some files have corrupted timestamp causing utf-8 decode error
        with open(settings_file, "r", errors="ignore") as fd:
            lines = fd.read()
        return Settings(lines)

    def _find_channels(self):
        return [ch.wavelength for ch in self.metadata.waveform.channels]

    def _load_channel(self, channel):
        return ImageDatastore(
            self.root,
            read_func=self.read_func,
            sub_dir=False,
            pattern="*_{}nm_*".format(channel),
        )
