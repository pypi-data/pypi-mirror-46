# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tvlnvvl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_tvlnvvl')
    _tvlnvvl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tvlnvvl', [dirname(__file__)])
        except ImportError:
            import _tvlnvvl
            return _tvlnvvl
        try:
            _mod = imp.load_module('_tvlnvvl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _tvlnvvl = swig_import_helper()
    del swig_import_helper
else:
    import _tvlnvvl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


ScaleMethod_Nearest = _tvlnvvl.ScaleMethod_Nearest
ScaleMethod_Linear = _tvlnvvl.ScaleMethod_Linear
ChromaUpMethod_Linear = _tvlnvvl.ChromaUpMethod_Linear
ColorSpace_RGB = _tvlnvvl.ColorSpace_RGB
ColorSpace_YCbCr = _tvlnvvl.ColorSpace_YCbCr
PDT_NONE = _tvlnvvl.PDT_NONE
PDT_BYTE = _tvlnvvl.PDT_BYTE
PDT_HALF = _tvlnvvl.PDT_HALF
PDT_FLOAT = _tvlnvvl.PDT_FLOAT
class NVVL_Strides(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVVL_Strides, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVVL_Strides, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _tvlnvvl.NVVL_Strides_x_set
    __swig_getmethods__["x"] = _tvlnvvl.NVVL_Strides_x_get
    if _newclass:
        x = _swig_property(_tvlnvvl.NVVL_Strides_x_get, _tvlnvvl.NVVL_Strides_x_set)
    __swig_setmethods__["y"] = _tvlnvvl.NVVL_Strides_y_set
    __swig_getmethods__["y"] = _tvlnvvl.NVVL_Strides_y_get
    if _newclass:
        y = _swig_property(_tvlnvvl.NVVL_Strides_y_get, _tvlnvvl.NVVL_Strides_y_set)
    __swig_setmethods__["c"] = _tvlnvvl.NVVL_Strides_c_set
    __swig_getmethods__["c"] = _tvlnvvl.NVVL_Strides_c_get
    if _newclass:
        c = _swig_property(_tvlnvvl.NVVL_Strides_c_get, _tvlnvvl.NVVL_Strides_c_set)
    __swig_setmethods__["n"] = _tvlnvvl.NVVL_Strides_n_set
    __swig_getmethods__["n"] = _tvlnvvl.NVVL_Strides_n_get
    if _newclass:
        n = _swig_property(_tvlnvvl.NVVL_Strides_n_get, _tvlnvvl.NVVL_Strides_n_set)

    def __init__(self):
        this = _tvlnvvl.new_NVVL_Strides()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnvvl.delete_NVVL_Strides
    __del__ = lambda self: None
NVVL_Strides_swigregister = _tvlnvvl.NVVL_Strides_swigregister
NVVL_Strides_swigregister(NVVL_Strides)

class NVVL_LayerDesc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVVL_LayerDesc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVVL_LayerDesc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _tvlnvvl.NVVL_LayerDesc_count_set
    __swig_getmethods__["count"] = _tvlnvvl.NVVL_LayerDesc_count_get
    if _newclass:
        count = _swig_property(_tvlnvvl.NVVL_LayerDesc_count_get, _tvlnvvl.NVVL_LayerDesc_count_set)
    __swig_setmethods__["channels"] = _tvlnvvl.NVVL_LayerDesc_channels_set
    __swig_getmethods__["channels"] = _tvlnvvl.NVVL_LayerDesc_channels_get
    if _newclass:
        channels = _swig_property(_tvlnvvl.NVVL_LayerDesc_channels_get, _tvlnvvl.NVVL_LayerDesc_channels_set)
    __swig_setmethods__["width"] = _tvlnvvl.NVVL_LayerDesc_width_set
    __swig_getmethods__["width"] = _tvlnvvl.NVVL_LayerDesc_width_get
    if _newclass:
        width = _swig_property(_tvlnvvl.NVVL_LayerDesc_width_get, _tvlnvvl.NVVL_LayerDesc_width_set)
    __swig_setmethods__["height"] = _tvlnvvl.NVVL_LayerDesc_height_set
    __swig_getmethods__["height"] = _tvlnvvl.NVVL_LayerDesc_height_get
    if _newclass:
        height = _swig_property(_tvlnvvl.NVVL_LayerDesc_height_get, _tvlnvvl.NVVL_LayerDesc_height_set)
    __swig_setmethods__["crop_x"] = _tvlnvvl.NVVL_LayerDesc_crop_x_set
    __swig_getmethods__["crop_x"] = _tvlnvvl.NVVL_LayerDesc_crop_x_get
    if _newclass:
        crop_x = _swig_property(_tvlnvvl.NVVL_LayerDesc_crop_x_get, _tvlnvvl.NVVL_LayerDesc_crop_x_set)
    __swig_setmethods__["crop_y"] = _tvlnvvl.NVVL_LayerDesc_crop_y_set
    __swig_getmethods__["crop_y"] = _tvlnvvl.NVVL_LayerDesc_crop_y_get
    if _newclass:
        crop_y = _swig_property(_tvlnvvl.NVVL_LayerDesc_crop_y_get, _tvlnvvl.NVVL_LayerDesc_crop_y_set)
    __swig_setmethods__["scale_width"] = _tvlnvvl.NVVL_LayerDesc_scale_width_set
    __swig_getmethods__["scale_width"] = _tvlnvvl.NVVL_LayerDesc_scale_width_get
    if _newclass:
        scale_width = _swig_property(_tvlnvvl.NVVL_LayerDesc_scale_width_get, _tvlnvvl.NVVL_LayerDesc_scale_width_set)
    __swig_setmethods__["scale_height"] = _tvlnvvl.NVVL_LayerDesc_scale_height_set
    __swig_getmethods__["scale_height"] = _tvlnvvl.NVVL_LayerDesc_scale_height_get
    if _newclass:
        scale_height = _swig_property(_tvlnvvl.NVVL_LayerDesc_scale_height_get, _tvlnvvl.NVVL_LayerDesc_scale_height_set)
    __swig_setmethods__["horiz_flip"] = _tvlnvvl.NVVL_LayerDesc_horiz_flip_set
    __swig_getmethods__["horiz_flip"] = _tvlnvvl.NVVL_LayerDesc_horiz_flip_get
    if _newclass:
        horiz_flip = _swig_property(_tvlnvvl.NVVL_LayerDesc_horiz_flip_get, _tvlnvvl.NVVL_LayerDesc_horiz_flip_set)
    __swig_setmethods__["normalized"] = _tvlnvvl.NVVL_LayerDesc_normalized_set
    __swig_getmethods__["normalized"] = _tvlnvvl.NVVL_LayerDesc_normalized_get
    if _newclass:
        normalized = _swig_property(_tvlnvvl.NVVL_LayerDesc_normalized_get, _tvlnvvl.NVVL_LayerDesc_normalized_set)
    __swig_setmethods__["color_space"] = _tvlnvvl.NVVL_LayerDesc_color_space_set
    __swig_getmethods__["color_space"] = _tvlnvvl.NVVL_LayerDesc_color_space_get
    if _newclass:
        color_space = _swig_property(_tvlnvvl.NVVL_LayerDesc_color_space_get, _tvlnvvl.NVVL_LayerDesc_color_space_set)
    __swig_setmethods__["chroma_up_method"] = _tvlnvvl.NVVL_LayerDesc_chroma_up_method_set
    __swig_getmethods__["chroma_up_method"] = _tvlnvvl.NVVL_LayerDesc_chroma_up_method_get
    if _newclass:
        chroma_up_method = _swig_property(_tvlnvvl.NVVL_LayerDesc_chroma_up_method_get, _tvlnvvl.NVVL_LayerDesc_chroma_up_method_set)
    __swig_setmethods__["scale_method"] = _tvlnvvl.NVVL_LayerDesc_scale_method_set
    __swig_getmethods__["scale_method"] = _tvlnvvl.NVVL_LayerDesc_scale_method_get
    if _newclass:
        scale_method = _swig_property(_tvlnvvl.NVVL_LayerDesc_scale_method_get, _tvlnvvl.NVVL_LayerDesc_scale_method_set)
    __swig_setmethods__["stride"] = _tvlnvvl.NVVL_LayerDesc_stride_set
    __swig_getmethods__["stride"] = _tvlnvvl.NVVL_LayerDesc_stride_get
    if _newclass:
        stride = _swig_property(_tvlnvvl.NVVL_LayerDesc_stride_get, _tvlnvvl.NVVL_LayerDesc_stride_set)

    def __init__(self):
        this = _tvlnvvl.new_NVVL_LayerDesc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnvvl.delete_NVVL_LayerDesc
    __del__ = lambda self: None
NVVL_LayerDesc_swigregister = _tvlnvvl.NVVL_LayerDesc_swigregister
NVVL_LayerDesc_swigregister(NVVL_LayerDesc)

class NVVL_PicLayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NVVL_PicLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NVVL_PicLayer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _tvlnvvl.NVVL_PicLayer_type_set
    __swig_getmethods__["type"] = _tvlnvvl.NVVL_PicLayer_type_get
    if _newclass:
        type = _swig_property(_tvlnvvl.NVVL_PicLayer_type_get, _tvlnvvl.NVVL_PicLayer_type_set)
    __swig_setmethods__["desc"] = _tvlnvvl.NVVL_PicLayer_desc_set
    __swig_getmethods__["desc"] = _tvlnvvl.NVVL_PicLayer_desc_get
    if _newclass:
        desc = _swig_property(_tvlnvvl.NVVL_PicLayer_desc_get, _tvlnvvl.NVVL_PicLayer_desc_set)
    __swig_setmethods__["index_map"] = _tvlnvvl.NVVL_PicLayer_index_map_set
    __swig_getmethods__["index_map"] = _tvlnvvl.NVVL_PicLayer_index_map_get
    if _newclass:
        index_map = _swig_property(_tvlnvvl.NVVL_PicLayer_index_map_get, _tvlnvvl.NVVL_PicLayer_index_map_set)
    __swig_setmethods__["index_map_length"] = _tvlnvvl.NVVL_PicLayer_index_map_length_set
    __swig_getmethods__["index_map_length"] = _tvlnvvl.NVVL_PicLayer_index_map_length_get
    if _newclass:
        index_map_length = _swig_property(_tvlnvvl.NVVL_PicLayer_index_map_length_get, _tvlnvvl.NVVL_PicLayer_index_map_length_set)
    __swig_setmethods__["data"] = _tvlnvvl.NVVL_PicLayer_data_set
    __swig_getmethods__["data"] = _tvlnvvl.NVVL_PicLayer_data_get
    if _newclass:
        data = _swig_property(_tvlnvvl.NVVL_PicLayer_data_get, _tvlnvvl.NVVL_PicLayer_data_set)

    def __init__(self):
        this = _tvlnvvl.new_NVVL_PicLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnvvl.delete_NVVL_PicLayer
    __del__ = lambda self: None
NVVL_PicLayer_swigregister = _tvlnvvl.NVVL_PicLayer_swigregister
NVVL_PicLayer_swigregister(NVVL_PicLayer)

PMT_INT = _tvlnvvl.PMT_INT
PMT_STRING = _tvlnvvl.PMT_STRING

def nvvl_create_sequence(count):
    return _tvlnvvl.nvvl_create_sequence(count)
nvvl_create_sequence = _tvlnvvl.nvvl_create_sequence

def nvvl_create_sequence_device(count, device_id):
    return _tvlnvvl.nvvl_create_sequence_device(count, device_id)
nvvl_create_sequence_device = _tvlnvvl.nvvl_create_sequence_device

def nvvl_set_layer(sequence, layer, name):
    return _tvlnvvl.nvvl_set_layer(sequence, layer, name)
nvvl_set_layer = _tvlnvvl.nvvl_set_layer

def nvvl_get_or_add_meta_array(sequence, type, name):
    return _tvlnvvl.nvvl_get_or_add_meta_array(sequence, type, name)
nvvl_get_or_add_meta_array = _tvlnvvl.nvvl_get_or_add_meta_array

def nvvl_get_meta_array(sequence, type, name):
    return _tvlnvvl.nvvl_get_meta_array(sequence, type, name)
nvvl_get_meta_array = _tvlnvvl.nvvl_get_meta_array

def nvvl_get_meta_str(sequence, name, index):
    return _tvlnvvl.nvvl_get_meta_str(sequence, name, index)
nvvl_get_meta_str = _tvlnvvl.nvvl_get_meta_str

def nvvl_get_sequence_count(sequence):
    return _tvlnvvl.nvvl_get_sequence_count(sequence)
nvvl_get_sequence_count = _tvlnvvl.nvvl_get_sequence_count

def nvvl_get_layer(sequence, type, name):
    return _tvlnvvl.nvvl_get_layer(sequence, type, name)
nvvl_get_layer = _tvlnvvl.nvvl_get_layer

def nvvl_get_layer_indexed(sequence, type, name, index):
    return _tvlnvvl.nvvl_get_layer_indexed(sequence, type, name, index)
nvvl_get_layer_indexed = _tvlnvvl.nvvl_get_layer_indexed

def nvvl_sequence_wait(sequence):
    return _tvlnvvl.nvvl_sequence_wait(sequence)
nvvl_sequence_wait = _tvlnvvl.nvvl_sequence_wait

def nvvl_sequence_stream_wait(sequence, stream):
    return _tvlnvvl.nvvl_sequence_stream_wait(sequence, stream)
nvvl_sequence_stream_wait = _tvlnvvl.nvvl_sequence_stream_wait

def nvvl_free_sequence(sequence):
    return _tvlnvvl.nvvl_free_sequence(sequence)
nvvl_free_sequence = _tvlnvvl.nvvl_free_sequence
class PictureSequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PictureSequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PictureSequence, name)
    __repr__ = _swig_repr

    def has_layer(self, name):
        return _tvlnvvl.PictureSequence_has_layer(self, name)

    def has_meta(self, name):
        return _tvlnvvl.PictureSequence_has_meta(self, name)

    def count(self):
        return _tvlnvvl.PictureSequence_count(self)

    def set_count(self, count):
        return _tvlnvvl.PictureSequence_set_count(self, count)

    def wait(self, *args):
        return _tvlnvvl.PictureSequence_wait(self, *args)
    __swig_destroy__ = _tvlnvvl.delete_PictureSequence
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _tvlnvvl.new_PictureSequence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
PictureSequence_swigregister = _tvlnvvl.PictureSequence_swigregister
PictureSequence_swigregister(PictureSequence)

class Size(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Size, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Size, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _tvlnvvl.Size_width_set
    __swig_getmethods__["width"] = _tvlnvvl.Size_width_get
    if _newclass:
        width = _swig_property(_tvlnvvl.Size_width_get, _tvlnvvl.Size_width_set)
    __swig_setmethods__["height"] = _tvlnvvl.Size_height_set
    __swig_getmethods__["height"] = _tvlnvvl.Size_height_get
    if _newclass:
        height = _swig_property(_tvlnvvl.Size_height_get, _tvlnvvl.Size_height_set)

    def __init__(self):
        this = _tvlnvvl.new_Size()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnvvl.delete_Size
    __del__ = lambda self: None
Size_swigregister = _tvlnvvl.Size_swigregister
Size_swigregister(Size)

class VideoLoaderStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoLoaderStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoLoaderStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes_read"] = _tvlnvvl.VideoLoaderStats_bytes_read_set
    __swig_getmethods__["bytes_read"] = _tvlnvvl.VideoLoaderStats_bytes_read_get
    if _newclass:
        bytes_read = _swig_property(_tvlnvvl.VideoLoaderStats_bytes_read_get, _tvlnvvl.VideoLoaderStats_bytes_read_set)
    __swig_setmethods__["packets_read"] = _tvlnvvl.VideoLoaderStats_packets_read_set
    __swig_getmethods__["packets_read"] = _tvlnvvl.VideoLoaderStats_packets_read_get
    if _newclass:
        packets_read = _swig_property(_tvlnvvl.VideoLoaderStats_packets_read_get, _tvlnvvl.VideoLoaderStats_packets_read_set)
    __swig_setmethods__["bytes_decoded"] = _tvlnvvl.VideoLoaderStats_bytes_decoded_set
    __swig_getmethods__["bytes_decoded"] = _tvlnvvl.VideoLoaderStats_bytes_decoded_get
    if _newclass:
        bytes_decoded = _swig_property(_tvlnvvl.VideoLoaderStats_bytes_decoded_get, _tvlnvvl.VideoLoaderStats_bytes_decoded_set)
    __swig_setmethods__["packets_decoded"] = _tvlnvvl.VideoLoaderStats_packets_decoded_set
    __swig_getmethods__["packets_decoded"] = _tvlnvvl.VideoLoaderStats_packets_decoded_get
    if _newclass:
        packets_decoded = _swig_property(_tvlnvvl.VideoLoaderStats_packets_decoded_get, _tvlnvvl.VideoLoaderStats_packets_decoded_set)
    __swig_setmethods__["frames_used"] = _tvlnvvl.VideoLoaderStats_frames_used_set
    __swig_getmethods__["frames_used"] = _tvlnvvl.VideoLoaderStats_frames_used_get
    if _newclass:
        frames_used = _swig_property(_tvlnvvl.VideoLoaderStats_frames_used_get, _tvlnvvl.VideoLoaderStats_frames_used_set)

    def __init__(self):
        this = _tvlnvvl.new_VideoLoaderStats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnvvl.delete_VideoLoaderStats
    __del__ = lambda self: None
VideoLoaderStats_swigregister = _tvlnvvl.VideoLoaderStats_swigregister
VideoLoaderStats_swigregister(VideoLoaderStats)

LogLevel_Debug = _tvlnvvl.LogLevel_Debug
LogLevel_Info = _tvlnvvl.LogLevel_Info
LogLevel_Warn = _tvlnvvl.LogLevel_Warn
LogLevel_Error = _tvlnvvl.LogLevel_Error
LogLevel_None = _tvlnvvl.LogLevel_None

def nvvl_create_video_loader(device_id):
    return _tvlnvvl.nvvl_create_video_loader(device_id)
nvvl_create_video_loader = _tvlnvvl.nvvl_create_video_loader

def nvvl_create_video_loader_with_log(device_id, log_level):
    return _tvlnvvl.nvvl_create_video_loader_with_log(device_id, log_level)
nvvl_create_video_loader_with_log = _tvlnvvl.nvvl_create_video_loader_with_log

def nvvl_destroy_video_loader(loader):
    return _tvlnvvl.nvvl_destroy_video_loader(loader)
nvvl_destroy_video_loader = _tvlnvvl.nvvl_destroy_video_loader

def nvvl_video_size_from_file(filename):
    return _tvlnvvl.nvvl_video_size_from_file(filename)
nvvl_video_size_from_file = _tvlnvvl.nvvl_video_size_from_file

def nvvl_video_size(loader):
    return _tvlnvvl.nvvl_video_size(loader)
nvvl_video_size = _tvlnvvl.nvvl_video_size

def nvvl_frame_count(loader, filename):
    return _tvlnvvl.nvvl_frame_count(loader, filename)
nvvl_frame_count = _tvlnvvl.nvvl_frame_count

def nvvl_read_sequence(loader, filename, frame, count):
    return _tvlnvvl.nvvl_read_sequence(loader, filename, frame, count)
nvvl_read_sequence = _tvlnvvl.nvvl_read_sequence

def nvvl_receive_frames(loader, sequence):
    return _tvlnvvl.nvvl_receive_frames(loader, sequence)
nvvl_receive_frames = _tvlnvvl.nvvl_receive_frames

def nvvl_receive_frames_sync(loader, sequence):
    return _tvlnvvl.nvvl_receive_frames_sync(loader, sequence)
nvvl_receive_frames_sync = _tvlnvvl.nvvl_receive_frames_sync

def nvvl_get_stats(loader):
    return _tvlnvvl.nvvl_get_stats(loader)
nvvl_get_stats = _tvlnvvl.nvvl_get_stats

def nvvl_reset_stats(loader):
    return _tvlnvvl.nvvl_reset_stats(loader)
nvvl_reset_stats = _tvlnvvl.nvvl_reset_stats

def nvvl_set_log_level(loader, level):
    return _tvlnvvl.nvvl_set_log_level(loader, level)
nvvl_set_log_level = _tvlnvvl.nvvl_set_log_level
class VideoLoader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoLoader, name)
    __repr__ = _swig_repr

    def frame_count(self, filename):
        return _tvlnvvl.VideoLoader_frame_count(self, filename)

    def size(self):
        return _tvlnvvl.VideoLoader_size(self)

    def read_sequence(self, filename, frame, count=1):
        return _tvlnvvl.VideoLoader_read_sequence(self, filename, frame, count)

    def receive_frames(self, sequence):
        return _tvlnvvl.VideoLoader_receive_frames(self, sequence)

    def receive_frames_sync(self, sequence):
        return _tvlnvvl.VideoLoader_receive_frames_sync(self, sequence)

    def get_stats(self):
        return _tvlnvvl.VideoLoader_get_stats(self)

    def reset_stats(self):
        return _tvlnvvl.VideoLoader_reset_stats(self)

    def set_log_level(self, level):
        return _tvlnvvl.VideoLoader_set_log_level(self, level)
    __swig_destroy__ = _tvlnvvl.delete_VideoLoader
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _tvlnvvl.new_VideoLoader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
VideoLoader_swigregister = _tvlnvvl.VideoLoader_swigregister
VideoLoader_swigregister(VideoLoader)

class VideoInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoInfo, name)
    __repr__ = _swig_repr

    def __init__(self, filename):
        this = _tvlnvvl.new_VideoInfo(filename)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_filename(self):
        return _tvlnvvl.VideoInfo_get_filename(self)

    def get_width(self):
        return _tvlnvvl.VideoInfo_get_width(self)

    def get_height(self):
        return _tvlnvvl.VideoInfo_get_height(self)

    def get_duration(self):
        return _tvlnvvl.VideoInfo_get_duration(self)

    def get_frame_rate(self):
        return _tvlnvvl.VideoInfo_get_frame_rate(self)

    def get_number_of_frames(self):
        return _tvlnvvl.VideoInfo_get_number_of_frames(self)
    __swig_destroy__ = _tvlnvvl.delete_VideoInfo
    __del__ = lambda self: None
VideoInfo_swigregister = _tvlnvvl.VideoInfo_swigregister
VideoInfo_swigregister(VideoInfo)

# This file is compatible with both classic and new-style classes.


