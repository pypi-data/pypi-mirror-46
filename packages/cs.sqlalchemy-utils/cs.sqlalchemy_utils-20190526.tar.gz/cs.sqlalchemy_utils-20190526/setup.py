#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.sqlalchemy_utils',
  description = 'Assorted utility functions to support working with SQLAlchemy.',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20190526',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Topic :: Database', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'],
  include_package_data = True,
  install_requires = ['icontract', 'sqlalchemy', 'cs.deco', 'cs.py.func'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 (GPLv3)',
  long_description = "Assorted utility functions to support working with SQLAlchemy.\n\n## Function `auto_session(func)`\n\nDecorator to run a function in a session is not presupplied.\n\n## Function `find_json_field(column_value, field_name, *, infill=False)`\n\nDescend a JSONable Python object `column_value`\nto `field_name`.\nReturn `column_value` (possibly infilled), `final_field`, `final_field_name`.\n\nThis supports database row columns which are JSON columns.\n\nParameters:\n* `column_value`: the original value of the column\n* `field_name`: the field within the column to locate\n* `infill`: optional keyword parameter, default `False`.\n  If true,\n  `column_value` and its innards will be filled in as `dict`s\n  to allow deferencing the `field_name`.\n\nThe `field_name` is a `str`\nconsisting of a period (`'.'`) separated sequence of field parts.\nEach field part becomes a key to index the column mapping.\nThese keys are split into the leading field parts\nand the final field part,\nwhich is returned as `final_field_name` above.\n\nThe `final_field` return value above\nis the mapping within which `final_field_value` may lie\nand where `final_field_value` may be set.\nNote: it may not be present.\n\nIf a leading key is missing and `infill` is true\nthe corresponding part of the `column_value` is set to an empty dictionary\nin order to allow deferencing the leading key.\nThis includes the case when `column_value` itself is `None`,\nwhich is why the `column_value` is part of the return.\n\nIf a leading key is missing and `infill` is false\nthis function will raise a `KeyError`\nfor the portion of the `field_name` which failed.\n\nExamples:\n\n    >>> find_json_field({'a':{'b':{}}},'a.b')\n    ({'a': {'b': {}}}, {'b': {}}, 'b')\n    >>> find_json_field({'a':{}},'a.b')\n    ({'a': {}}, {}, 'b')\n    >>> find_json_field({'a':{'b':{}}},'a.b.c.d')\n    Traceback (most recent call last):\n        ...\n    KeyError: 'a.b.c'\n    >>> find_json_field({'a':{'b':{}}},'a.b.c.d', infill=True)\n    ({'a': {'b': {'c': {}}}}, {}, 'd')\n    >>> find_json_field(None, 'a.b.c.d')\n    Traceback (most recent call last):\n        ...\n    KeyError: 'a'\n    >>> find_json_field(None,'a.b.c.d', infill=True)\n    ({'a': {'b': {'c': {}}}}, {}, 'd')\n\n## Function `get_json_field(column_value, field_name, *, default=None)`\n\nReturn the value of `field_name` from `column_value`\nor a defaault if the field is not present.\n\nParameters:\n* `column_value`: the original value of the column\n* `field_name`: the field within the column to locate\n* `default`: default value to return if the field is not present,\n  default: `None`\n\nExamples:\n\n    >>> get_json_field({'a': 1}, 'a')\n    1\n    >>> get_json_field({'b': 1}, 'a')\n    >>> get_json_field({'a': {}}, 'a.b')\n    >>> get_json_field({'a': {'b': 2}}, 'a.b')\n    2\n\n## Class `ORM`\n\nA convenience base class for an ORM class.\n\nThis defines a `.Base` attribute which is a new `DeclarativeBase`\nand provides various Session related convenience methods.\n\nSubclasses must define their own `.Session` factory in\ntheir own `__init__`, for example:\n\n    self.Session = sessionmaker(bind=engine)\n\n## Function `orm_auto_session(method)`\n\nDecorator to run a method in a session derived from `self.orm`\nif a session is not presupplied.\nIntended to assist classes with a `.orm` attribute.\n\n## Function `set_json_field(column_value, field_name, value, *, infill=False)`\n\nSet a new `value` for `field_name` of `column_value`.\nReturn the new `column_value`.\n\nParameters:\n* `column_value`: the original value of the column\n* `field_name`: the field within the column to locate\n* `value`: the value to store as `field_name`\n* `infill`: optional keyword parameter, default `False`.\n  If true,\n  `column_value` and its innards will be filled in as `dict`s\n  to allow deferencing the `field_name`.\n\nAs with `find_json_field`,\na true `infill` may modify `column_value` to provide `field_name`\nwhich is why this function returns the new `column_value`.\n\nExamples:\n\n    >>> set_json_field({'a': 2}, 'a', 3)\n    {'a': 3}\n    >>> set_json_field({'a': 2, 'b': {'c': 5}}, 'b.c', 4)\n    {'a': 2, 'b': {'c': 4}}\n    >>> set_json_field({'a': 2}, 'b.c', 4)\n    Traceback (most recent call last):\n        ...\n    KeyError: 'b'\n    >>> set_json_field({'a': 2}, 'b.c', 4, infill=True)\n    {'a': 2, 'b': {'c': 4}}\n    >>> set_json_field(None, 'b.c', 4, infill=True)\n    {'b': {'c': 4}}\n\n## Function `with_session(func, *a, orm=None, session=None, **kw)`\n\nCall `func(*a,session=session,**kw)`, creating a session if required.\n\nThis is the inner mechanism of `@auto_session` and\n`ORM.auto_session_method`.\n\nParameters:\n* `func`: the function to call\n* `a`: the positional parameters\n* `orm`: optional ORM class with a `.session()` context manager method\n* `session`: optional existing ORM session\n\nOne of `orm` or `session` must be not `None`; if `session`\nis `None` then one is made from `orm.session()` and used as\na context manager. The `session` is also passed to `func` as\nthe keyword parameter `session` to support nested calls.",
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.sqlalchemy_utils'],
)
