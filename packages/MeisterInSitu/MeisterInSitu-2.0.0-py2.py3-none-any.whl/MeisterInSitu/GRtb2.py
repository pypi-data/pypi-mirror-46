#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.2 on Tue May  7 14:54:17 2019
#

import wx
import numpy as np
from matplotlib import pyplot as plt

import G

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1100, 720))
        self.panel = wx.Panel(self, wx.ID_ANY)
        self.Panel1 = wx.Panel(self.panel, wx.ID_ANY)
        figure1 = self.matplotlib_figure = Figure()
        self.matplotlib_axes1 = figure1.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure1 = FigureCanvas(self.Panel1, wx.ID_ANY, figure1)
        self.Panel2 = wx.Panel(self.panel, wx.ID_ANY)
        figure2 = self.matplotlib_figure = Figure()
        self.matplotlib_axes2 = figure2.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure2 = FigureCanvas(self.Panel2, wx.ID_ANY, figure2)
        self.EpidermisRatio = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel3 = wx.Panel(self.panel, wx.ID_ANY)
        figure3 = self.matplotlib_figure = Figure()
        self.matplotlib_axes3 = figure3.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure3 = FigureCanvas(self.Panel3, wx.ID_ANY, figure3)
        self.VascularBundleRatio = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel6 = wx.Panel(self.panel, wx.ID_ANY)
        figure6 = self.matplotlib_figure = Figure()
        self.matplotlib_axes6 = figure6.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure6 = FigureCanvas(self.Panel6, wx.ID_ANY, figure6)
        self.Panel7 = wx.Panel(self.panel, wx.ID_ANY)
        figure7 = self.matplotlib_figure = Figure()
        self.matplotlib_axes7 = figure7.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure7 = FigureCanvas(self.Panel7, wx.ID_ANY, figure7)
        self.SclerenchymaRatio = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel8 = wx.Panel(self.panel, wx.ID_ANY)
        figure8 = self.matplotlib_figure = Figure()
        self.matplotlib_axes8 = figure8.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure8 = FigureCanvas(self.Panel8, wx.ID_ANY, figure8)
        self.ParenchymaRatio = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.Text = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, "")
        self.PlotBtn = wx.Button(self.notebook_1_pane_2, wx.ID_ANY, "Plot")
        self.notebook_3 = wx.Notebook(self, wx.ID_ANY)
        self.notebook_3_pane_2 = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.figCheck = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, ".fig")
        self.matCheck = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, ".mat")
        self.SaveBtn = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Save")
        self.BackBtn = wx.Button(self, wx.ID_ANY, "Back")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.PlotEve, self.PlotBtn)
        self.Bind(wx.EVT_BUTTON, self.SaveEve, self.SaveBtn)
        self.Bind(wx.EVT_BUTTON, self.BackEve, self.BackBtn)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame")
        self.Figure1.SetMinSize((200, 300))
        self.Panel1.SetMinSize((200, 300))
        self.Figure2.SetMinSize((200, 300))
        self.Panel2.SetMinSize((200, 300))
        self.Figure3.SetMinSize((200, 300))
        self.Panel3.SetMinSize((200, 300))
        self.Figure6.SetMinSize((200, 300))
        self.Panel6.SetMinSize((200, 300))
        self.Figure7.SetMinSize((200, 300))
        self.Panel7.SetMinSize((200, 300))
        self.Figure8.SetMinSize((200, 300))
        self.Panel8.SetMinSize((200, 300))
        self.panel.SetMinSize((840, 688))
        self.PlotBtn.SetMinSize((200, 30))
        self.notebook_1.SetMinSize((250, 200))
        self.figCheck.SetMinSize((-1, 20))
        self.figCheck.SetValue(1)
        self.matCheck.SetMinSize((-1, 20))
        self.matCheck.SetValue(1)
        self.SaveBtn.SetMinSize((-1, 25))
        self.notebook_3_pane_2.SetMinSize((150, 300))
        self.notebook_3.SetMinSize((200, 200))
        self.BackBtn.SetMinSize((200, 30))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_77 = wx.BoxSizer(wx.VERTICAL)
        sizer_78 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_79 = wx.BoxSizer(wx.VERTICAL)
        sizer_80 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_6 = wx.GridSizer(2, 3, 0, 0)
        sizer_128 = wx.BoxSizer(wx.VERTICAL)
        sizer_130 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_129 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_125 = wx.BoxSizer(wx.VERTICAL)
        sizer_127 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_126 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_123 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_124 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_114 = wx.BoxSizer(wx.VERTICAL)
        sizer_116 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_115 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_111 = wx.BoxSizer(wx.VERTICAL)
        sizer_113 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_112 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_109 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_110 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_78.Add((20, 20), 1, 0, 0)
        sizer_110.Add(self.Figure1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel1.SetSizer(sizer_110)
        sizer_109.Add(self.Panel1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        label_1 = wx.StaticText(self.panel, wx.ID_ANY, "Visible Image", style=wx.ALIGN_CENTER)
        sizer_1.Add(label_1, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_109.Add(sizer_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_109, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_112.Add(self.Figure2, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel2.SetSizer(sizer_112)
        sizer_111.Add(self.Panel2, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_5 = wx.StaticText(self.panel, wx.ID_ANY, "Epidermis", style=wx.ALIGN_CENTER)
        sizer_113.Add(label_5, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_113.Add(self.EpidermisRatio, 0, wx.ALL, 5)
        sizer_111.Add(sizer_113, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_111, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_115.Add(self.Figure3, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel3.SetSizer(sizer_115)
        sizer_114.Add(self.Panel3, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_16 = wx.StaticText(self.panel, wx.ID_ANY, "Vascular Bundle", style=wx.ALIGN_CENTER | wx.ALIGN_LEFT)
        sizer_116.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_116.Add(self.VascularBundleRatio, 0, wx.ALL, 5)
        sizer_114.Add(sizer_116, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_114, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_124.Add(self.Figure6, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel6.SetSizer(sizer_124)
        sizer_123.Add(self.Panel6, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_2 = wx.StaticText(self.panel, wx.ID_ANY, "Hyper Image")
        sizer_2.Add(label_2, 0, wx.ALL, 5)
        sizer_123.Add(sizer_2, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_123, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_126.Add(self.Figure7, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel7.SetSizer(sizer_126)
        sizer_125.Add(self.Panel7, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_19 = wx.StaticText(self.panel, wx.ID_ANY, "Sclerenchyma")
        sizer_127.Add(label_19, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_127.Add(self.SclerenchymaRatio, 0, wx.ALL, 5)
        sizer_125.Add(sizer_127, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_125, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_129.Add(self.Figure8, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel8.SetSizer(sizer_129)
        sizer_128.Add(self.Panel8, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_20 = wx.StaticText(self.panel, wx.ID_ANY, "Parenchyma")
        sizer_130.Add(label_20, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_130.Add(self.ParenchymaRatio, 0, wx.ALL, 5)
        sizer_128.Add(sizer_130, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_128, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.panel.SetSizer(grid_sizer_6)
        sizer_78.Add(self.panel, 1, wx.EXPAND, 0)
        sizer_78.Add((20, 20), 1, 0, 0)
        sizer_79.Add((200, 20), 1, 0, 0)
        sizer_3.Add((20, 20), 0, 0, 0)
        self.CompanyLabel = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, "Company")
        sizer_3.Add(self.CompanyLabel, 0, wx.ALL, 5)
        sizer_4.Add(self.Text, 0, wx.ALL, 5)
        self.TextUnit = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, "TextUnit")
        sizer_4.Add(self.TextUnit, 0, wx.ALL, 5)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_3.Add(self.PlotBtn, 0, wx.ALL, 5)
        self.notebook_1_pane_2.SetSizer(sizer_3)
        self.notebook_1.AddPage(self.notebook_1_pane_2, "PlotShow")
        sizer_79.Add(self.notebook_1, 0, wx.EXPAND, 0)
        sizer_79.Add((200, 10), 1, 0, 0)
        sizer_80.Add((20, 30), 0, 0, 0)
        sizer_80.Add(self.figCheck, 0, wx.ALL, 5)
        sizer_80.Add(self.matCheck, 0, wx.ALL, 5)
        sizer_80.Add((20, 20), 0, 0, 0)
        sizer_80.Add(self.SaveBtn, 0, wx.ALL, 5)
        self.notebook_3_pane_2.SetSizer(sizer_80)
        self.notebook_3.AddPage(self.notebook_3_pane_2, "DataSave")
        sizer_79.Add(self.notebook_3, 0, wx.EXPAND, 0)
        sizer_79.Add((200, 20), 1, 0, 0)
        sizer_79.Add(self.BackBtn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 5)
        sizer_79.Add((200, 20), 1, 0, 0)
        sizer_78.Add(sizer_79, 0, wx.EXPAND, 0)
        sizer_77.Add(sizer_78, 1, wx.EXPAND, 0)
        sizer_77.Add((20, 20), 1, wx.ALL | wx.EXPAND, 0)
        self.SetSizer(sizer_77)
        self.Layout()
        # end wxGlade

    def setParent(self, parent):
        print(parent)
        self.parent = parent

    def setCompany(self, company):
        #print(parent)
        self.company = company

    def PlotEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'PlotEve' not implemented!")
        #event.Skip()

        global fig2, fig3, fig7, fig8
        global fig2R, fig3R, fig7R, fig8R

        if self.CompanyLabel.Label == 'Characteristic Band:':
            if G.WaveN.min() <= int(self.Text.GetValue()) and int(self.Text.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Text.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index2 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index2 = index
                col = [index2-1, index2+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)

                fig = WaveA.reshape(G.m, G.n)

        elif self.CompanyLabel.Label == 'Component:':
            if 1 <= int(self.Text.GetValue()) and int(self.Text.GetValue()) <= 6:  # 数据范围
                indexC = int(self.Text.GetValue())
                fig = G.fnnlsR[:, indexC - 1].reshape(G.m, G.n)

        else:
            pass

        global Fmin, Fmax
        Fmin = np.min(fig)
        Fmax = np.max(fig)

        try:
            fig2 = np.multiply(fig, G.Epidermis)
            self.matplotlib_axes2.imshow(fig2, cmap='jet')#,vmin=Fmin, Vmax=Fmax)
            self.matplotlib_axes2.set_xticks([])
            self.matplotlib_axes2.set_yticks([])
            self.Figure2.draw()
            fig2R = round(sum(sum(fig2))/sum(sum(G.Epidermis)),4)
            self.EpidermisRatio.SetValue(str(fig2R))
        except:
            pass

        try:
            fig3 = np.multiply(fig, G.VascularBundle)
            self.matplotlib_axes3.imshow(fig3, cmap='jet')#,vmin=Fmin, Vmax=Fmax)
            self.matplotlib_axes3.set_xticks([])
            self.matplotlib_axes3.set_yticks([])
            self.Figure3.draw()
            fig3R = round(sum(sum(fig3)) / sum(sum(G.VascularBundle)), 4)
            self.VascularBundleRatio.SetValue(str(fig3R))
        except:
            pass

        try:
            fig7 = np.multiply(fig, G.Sclerenchyma)
            self.matplotlib_axes7.imshow(fig7, cmap='jet')#,vmin=Fmin, Vmax=Fmax)
            self.matplotlib_axes7.set_xticks([])
            self.matplotlib_axes7.set_yticks([])
            self.Figure7.draw()
            fig7R = round(sum(sum(fig7)) / sum(sum(G.Sclerenchyma)), 4)
            self.SclerenchymaRatio.SetValue(str(fig7R))
        except:
            pass

        try:
            fig8 = np.multiply(fig, G.Parenchyma)
            self.matplotlib_axes8.imshow(fig8, cmap='jet')#,vmin=Fmin, Vmax=Fmax)
            self.matplotlib_axes8.set_xticks([])
            self.matplotlib_axes8.set_yticks([])
            self.Figure8.draw()
            fig8R = round(sum(sum(fig8)) / sum(sum(G.Parenchyma)), 4)
            self.ParenchymaRatio.SetValue(str(fig8R))
        except:
            pass


    def SaveEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'SaveEve' not implemented!")
        #event.Skip()

        global fig2, fig3, fig7, fig8
        global fig2R, fig3R, fig7R, fig8R
        list1 = []
        list2 = []
        list3 = []

        global Fmin, Fmax

        try:
            fig2
            list1.append(fig2)
            list2.append('Epidermis')
            list3.append(fig2R)
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="Epidermis.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig2, cmap='jet')#,vmin=Fmin, Vmax=Fmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig3
            list1.append(fig3)
            list2.append('VascularBundle')
            list3.append(fig3R)
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="VascularBundle.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig3, cmap='jet')#,vmin=Fmin, Vmax=Fmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig7
            list1.append(fig7)
            list2.append('Sclerenchyma')
            list3.append(fig7R)
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="Sclerenchyma.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig7, cmap='jet')#,vmin=Fmin, Vmax=Fmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig8
            list1.append(fig8)
            list2.append('Parenchyma')
            list3.append(fig8R)
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="Parenchyma.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig8, cmap='jet')#,vmin=Fmin, Vmax=Fmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            list1[1]
            dlg = wx.FileDialog(
                self, message="Save DataS as ...", defaultDir="",
                defaultFile="TBdataS.npz", wildcard=G.wildcard_npz, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                np.savez(path, dataList=list1, dataName=list2, dataRatio=list3)
            dlg.Destroy()
        except:
            pass

    def BackEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'BackEve' not implemented!")
        #event.Skip()
        self.Destroy()
        self.parent.Show()

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
