#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.2 on Fri Apr 12 13:47:53 2019
#

import wx
import numpy as np
from matplotlib import pyplot as plt


import G

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1300, 720))
        self.panel = wx.Panel(self, wx.ID_ANY)
        self.Panel1 = wx.Panel(self.panel, wx.ID_ANY)
        figure1 = self.matplotlib_figure = Figure()
        self.matplotlib_axes1 = figure1.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure1 = FigureCanvas(self.Panel1, wx.ID_ANY, figure1)
        self.Panel2 = wx.Panel(self.panel, wx.ID_ANY)
        figure2 = self.matplotlib_figure = Figure()
        self.matplotlib_axes2 = figure2.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure2 = FigureCanvas(self.Panel2, wx.ID_ANY, figure2)
        self.Wave2 = wx.TextCtrl(self.panel, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.Panel3 = wx.Panel(self.panel, wx.ID_ANY)
        figure3 = self.matplotlib_figure = Figure()
        self.matplotlib_axes3 = figure3.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure3 = FigureCanvas(self.Panel3, wx.ID_ANY, figure3)
        self.Wave3 = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel4 = wx.Panel(self.panel, wx.ID_ANY)
        figure4 = self.matplotlib_figure = Figure()
        self.matplotlib_axes4 = figure4.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure4 = FigureCanvas(self.Panel4, wx.ID_ANY, figure4)
        self.Wave4 = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel5 = wx.Panel(self.panel, wx.ID_ANY)
        figure5 = self.matplotlib_figure = Figure()
        self.matplotlib_axes5 = figure5.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure5 = FigureCanvas(self.Panel5, wx.ID_ANY, figure5)
        self.Wave5 = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel6 = wx.Panel(self.panel, wx.ID_ANY)
        figure6 = self.matplotlib_figure = Figure()
        self.matplotlib_axes6 = figure6.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure6 = FigureCanvas(self.Panel6, wx.ID_ANY, figure6)
        self.Panel7 = wx.Panel(self.panel, wx.ID_ANY)
        figure7 = self.matplotlib_figure = Figure()
        self.matplotlib_axes7 = figure7.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure7 = FigureCanvas(self.Panel7, wx.ID_ANY, figure7)
        self.Wave7 = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel8 = wx.Panel(self.panel, wx.ID_ANY)
        figure8 = self.matplotlib_figure = Figure()
        self.matplotlib_axes8 = figure8.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure8 = FigureCanvas(self.Panel8, wx.ID_ANY, figure8)
        self.Wave8 = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel9 = wx.Panel(self.panel, wx.ID_ANY)
        figure9 = self.matplotlib_figure = Figure()
        self.matplotlib_axes9 = figure9.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure9 = FigureCanvas(self.Panel9, wx.ID_ANY, figure9)
        self.Wave9 = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.Panel10 = wx.Panel(self.panel, wx.ID_ANY)
        figure10 = self.matplotlib_figure = Figure()
        self.matplotlib_axes10 = figure10.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure10 = FigureCanvas(self.Panel10, wx.ID_ANY, figure10)
        self.Wave10 = wx.TextCtrl(self.panel, wx.ID_ANY, "")
        self.PlotBtn = wx.Button(self, wx.ID_ANY, "Plot")
        self.notebook_3 = wx.Notebook(self, wx.ID_ANY)
        self.notebook_3_pane_2 = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.figCheck = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, ".fig")
        self.matCheck = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, ".mat")
        self.SaveBtn = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Save")
        self.BackBtn = wx.Button(self, wx.ID_ANY, "Back")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.PlotEve, self.PlotBtn)
        self.Bind(wx.EVT_BUTTON, self.SaveEve, self.SaveBtn)
        self.Bind(wx.EVT_BUTTON, self.BackEve, self.BackBtn)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Characteristic Band Imaging")
        self.Figure1.SetMinSize((200, 300))
        self.Panel1.SetMinSize((200, 300))
        self.Figure2.SetMinSize((200, 300))
        self.Panel2.SetMinSize((200, 300))
        self.Wave2.SetMinSize((-1, 20))
        self.Figure3.SetMinSize((200, 300))
        self.Panel3.SetMinSize((200, 300))
        self.Wave3.SetMinSize((-1, 20))
        self.Figure4.SetMinSize((200, 300))
        self.Panel4.SetMinSize((200, 300))
        self.Wave4.SetMinSize((-1, 20))
        self.Figure5.SetMinSize((200, 300))
        self.Panel5.SetMinSize((200, 300))
        self.Wave5.SetMinSize((-1, 20))
        self.Figure6.SetMinSize((200, 300))
        self.Panel6.SetMinSize((200, 300))
        self.Figure7.SetMinSize((200, 300))
        self.Panel7.SetMinSize((200, 300))
        self.Wave7.SetMinSize((-1, 20))
        self.Figure8.SetMinSize((200, 300))
        self.Panel8.SetMinSize((200, 300))
        self.Wave8.SetMinSize((-1, 20))
        self.Figure9.SetMinSize((200, 300))
        self.Panel9.SetMinSize((200, 300))
        self.Wave9.SetMinSize((-1, 20))
        self.Figure10.SetMinSize((200, 300))
        self.Panel10.SetMinSize((200, 300))
        self.Wave10.SetMinSize((-1, 20))
        self.panel.SetMinSize((1100, 688))
        self.PlotBtn.SetMinSize((200, 30))
        self.figCheck.SetMinSize((-1, 20))
        self.figCheck.SetValue(1)
        self.matCheck.SetMinSize((-1, 20))
        self.matCheck.SetValue(1)
        self.SaveBtn.SetMinSize((-1, 25))
        self.notebook_3_pane_2.SetMinSize((150, 300))
        self.notebook_3.SetMinSize((150, 300))
        self.BackBtn.SetMinSize((200, 30))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_77 = wx.BoxSizer(wx.VERTICAL)
        sizer_78 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_79 = wx.BoxSizer(wx.VERTICAL)
        sizer_80 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_6 = wx.GridSizer(2, 5, 0, 0)
        sizer_134 = wx.BoxSizer(wx.VERTICAL)
        sizer_136 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_135 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_131 = wx.BoxSizer(wx.VERTICAL)
        sizer_133 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_132 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_128 = wx.BoxSizer(wx.VERTICAL)
        sizer_130 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_129 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_125 = wx.BoxSizer(wx.VERTICAL)
        sizer_127 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_126 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_123 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_124 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_120 = wx.BoxSizer(wx.VERTICAL)
        sizer_122 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_121 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_117 = wx.BoxSizer(wx.VERTICAL)
        sizer_119 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_118 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_114 = wx.BoxSizer(wx.VERTICAL)
        sizer_116 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_115 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_111 = wx.BoxSizer(wx.VERTICAL)
        sizer_113 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_112 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_109 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_110 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_78.Add((20, 20), 0, 0, 0)
        sizer_110.Add(self.Figure1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel1.SetSizer(sizer_110)
        sizer_109.Add(self.Panel1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        label_1 = wx.StaticText(self.panel, wx.ID_ANY, "Visible Image", style=wx.ALIGN_CENTER)
        sizer_1.Add(label_1, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_109.Add(sizer_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_109, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_112.Add(self.Figure2, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel2.SetSizer(sizer_112)
        sizer_111.Add(self.Panel2, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_113.Add(self.Wave2, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        label_15 = wx.StaticText(self.panel, wx.ID_ANY, "cm-1", style=wx.ALIGN_CENTER | wx.ALIGN_LEFT)
        label_15.SetMinSize((-1, 30))
        sizer_113.Add(label_15, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_111.Add(sizer_113, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_111, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_115.Add(self.Figure3, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel3.SetSizer(sizer_115)
        sizer_114.Add(self.Panel3, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_116.Add(self.Wave3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        label_16 = wx.StaticText(self.panel, wx.ID_ANY, "cm-1", style=wx.ALIGN_CENTER | wx.ALIGN_LEFT)
        sizer_116.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_114.Add(sizer_116, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_114, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_118.Add(self.Figure4, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel4.SetSizer(sizer_118)
        sizer_117.Add(self.Panel4, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_119.Add(self.Wave4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        label_17 = wx.StaticText(self.panel, wx.ID_ANY, "cm-1")
        sizer_119.Add(label_17, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_117.Add(sizer_119, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_117, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_121.Add(self.Figure5, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel5.SetSizer(sizer_121)
        sizer_120.Add(self.Panel5, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_122.Add(self.Wave5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        label_18 = wx.StaticText(self.panel, wx.ID_ANY, "cm-1")
        sizer_122.Add(label_18, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_120.Add(sizer_122, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_120, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_124.Add(self.Figure6, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel6.SetSizer(sizer_124)
        sizer_123.Add(self.Panel6, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_2 = wx.StaticText(self.panel, wx.ID_ANY, "Hyper Image")
        sizer_2.Add(label_2, 0, wx.ALL, 5)
        sizer_123.Add(sizer_2, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_123, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_126.Add(self.Figure7, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel7.SetSizer(sizer_126)
        sizer_125.Add(self.Panel7, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_127.Add(self.Wave7, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        label_19 = wx.StaticText(self.panel, wx.ID_ANY, "cm-1")
        sizer_127.Add(label_19, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_125.Add(sizer_127, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_125, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_129.Add(self.Figure8, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel8.SetSizer(sizer_129)
        sizer_128.Add(self.Panel8, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_130.Add(self.Wave8, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        label_20 = wx.StaticText(self.panel, wx.ID_ANY, "cm-1")
        sizer_130.Add(label_20, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_128.Add(sizer_130, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_128, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_132.Add(self.Figure9, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel9.SetSizer(sizer_132)
        sizer_131.Add(self.Panel9, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_133.Add(self.Wave9, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        label_21 = wx.StaticText(self.panel, wx.ID_ANY, "cm-1")
        sizer_133.Add(label_21, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_131.Add(sizer_133, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_131, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_135.Add(self.Figure10, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel10.SetSizer(sizer_135)
        sizer_134.Add(self.Panel10, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_136.Add(self.Wave10, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        label_22 = wx.StaticText(self.panel, wx.ID_ANY, "cm-1")
        sizer_136.Add(label_22, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        sizer_134.Add(sizer_136, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        grid_sizer_6.Add(sizer_134, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.panel.SetSizer(grid_sizer_6)
        sizer_78.Add(self.panel, 1, wx.EXPAND, 0)
        sizer_78.Add((20, 20), 0, 0, 0)
        sizer_79.Add((200, 100), 0, 0, 0)
        sizer_79.Add(self.PlotBtn, 0, wx.ALL, 5)
        sizer_79.Add((200, 50), 0, 0, 0)
        sizer_80.Add((20, 30), 0, 0, 0)
        sizer_80.Add(self.figCheck, 0, wx.ALL, 5)
        sizer_80.Add(self.matCheck, 0, wx.ALL, 5)
        sizer_80.Add((20, 20), 0, 0, 0)
        sizer_80.Add(self.SaveBtn, 0, wx.ALL, 5)
        self.notebook_3_pane_2.SetSizer(sizer_80)
        self.notebook_3.AddPage(self.notebook_3_pane_2, "DataSave")
        sizer_79.Add(self.notebook_3, 1, wx.EXPAND, 0)
        sizer_79.Add((200, 50), 0, 0, 0)
        sizer_79.Add(self.BackBtn, 0, wx.ALL, 5)
        sizer_79.Add((200, 200), 0, 0, 0)
        sizer_78.Add(sizer_79, 0, wx.EXPAND, 0)
        sizer_77.Add(sizer_78, 1, wx.EXPAND, 0)
        sizer_77.Add((20, 20), 0, wx.ALL | wx.EXPAND, 0)
        self.SetSizer(sizer_77)
        self.Layout()
        # end wxGlade

    def setParent(self, parent):
        print(parent)
        self.parent = parent

    def setCompany(self, company):
        #print(parent)
        self.company = company

    def PlotEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'PlotEve' not implemented!")
        #event.Skip()

        global fig2, fig3, fig4, fig5, fig7, fig8, fig9, fig10

        try:   # 可能没有数据
            if G.WaveN.min() <= int(self.Wave2.GetValue()) and int(self.Wave2.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Wave2.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index2 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index2 = index
                col = [index2-1, index2+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)
                fig2 = WaveA.reshape(G.m, G.n)

                self.matplotlib_axes2.imshow(fig2, cmap='jet')
                self.matplotlib_axes2.set_xticks([])
                self.matplotlib_axes2.set_yticks([])
                self.Figure2.draw()
            else:
                pass  #应当报错
        except:
            pass

        try:   # 可能没有数据
            if G.WaveN.min() <= int(self.Wave3.GetValue()) and int(self.Wave3.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Wave3.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index3 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index3 = index
                col = [index3-1, index3+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)
                fig3 = WaveA.reshape(G.m, G.n)

                self.matplotlib_axes3.imshow(fig3, cmap='jet')
                self.matplotlib_axes3.set_xticks([])
                self.matplotlib_axes3.set_yticks([])
                self.Figure3.draw()
            else:
                pass  #应当报错
        except:
            pass

        try:   # 可能没有数据
            if G.WaveN.min() <= int(self.Wave4.GetValue()) and int(self.Wave4.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Wave4.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index4 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index4 = index
                col = [index4-1, index4+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)
                fig4 = WaveA.reshape(G.m, G.n)

                self.matplotlib_axes4.imshow(fig4, cmap='jet')
                self.matplotlib_axes4.set_xticks([])
                self.matplotlib_axes4.set_yticks([])
                self.Figure4.draw()
            else:
                pass  #应当报错
        except:
            pass

        try:   # 可能没有数据
            if G.WaveN.min() <= int(self.Wave5.GetValue()) and int(self.Wave5.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Wave5.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index5 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index5 = index
                col = [index5-1, index5+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)
                fig5 = WaveA.reshape(G.m, G.n)

                self.matplotlib_axes5.imshow(fig5, cmap='jet')
                self.matplotlib_axes5.set_xticks([])
                self.matplotlib_axes5.set_yticks([])
                self.Figure5.draw()
            else:
                pass  #应当报错
        except:
            pass

        try:   # 可能没有数据
            if G.WaveN.min() <= int(self.Wave7.GetValue()) and int(self.Wave7.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Wave7.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index7 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index7 = index
                col = [index7-1, index7+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)
                fig7 = WaveA.reshape(G.m, G.n)

                self.matplotlib_axes7.imshow(fig7, cmap='jet')
                self.matplotlib_axes7.set_xticks([])
                self.matplotlib_axes7.set_yticks([])
                self.Figure7.draw()
            else:
                pass  #应当报错
        except:
            pass

        try:   # 可能没有数据
            if G.WaveN.min() <= int(self.Wave8.GetValue()) and int(self.Wave8.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Wave8.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index8 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index8 = index
                col = [index8-1, index8+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)
                fig8 = WaveA.reshape(G.m, G.n)

                self.matplotlib_axes8.imshow(fig8, cmap='jet')
                self.matplotlib_axes8.set_xticks([])
                self.matplotlib_axes8.set_yticks([])
                self.Figure8.draw()
            else:
                pass  #应当报错
        except:
            pass

        try:   # 可能没有数据
            if G.WaveN.min() <= int(self.Wave9.GetValue()) and int(self.Wave9.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Wave9.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index9 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index9 = index
                col = [index9-1, index9+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)
                fig9 = WaveA.reshape(G.m, G.n)

                self.matplotlib_axes9.imshow(fig9, cmap='jet')
                self.matplotlib_axes9.set_xticks([])
                self.matplotlib_axes9.set_yticks([])
                self.Figure9.draw()
            else:
                pass  #应当报错
        except:
            pass

        try:   # 可能没有数据
            if G.WaveN.min() <= int(self.Wave10.GetValue()) and int(self.Wave10.GetValue()) <= G.WaveN.max():    # 数据范围
                wave = int(self.Wave10.GetValue())
                try:   # 轴上有该波数
                    index = np.argwhere(G.WaveN == wave)
                    print(G.WaveN[:, index[0][1]])   # 正常情况下获取两个数，0及相应位置
                    index10 = index[0][1]
                except:  # 轴上没有该波数，则寻找临近值
                    dis = abs(G.WaveN - wave)
                    index = dis.argmin()    # 正常情况下获取一个数
                    print(index)
                    index10 = index
                col = [index10-1, index10+1]
                WaveA = np.mean(G.HyperDataN[:, col], axis=1)
                fig10 = WaveA.reshape(G.m, G.n)

                self.matplotlib_axes10.imshow(fig10, cmap='jet')
                self.matplotlib_axes10.set_xticks([])
                self.matplotlib_axes10.set_yticks([])
                self.Figure10.draw()
            else:
                pass  #应当报错
        except:
            pass


    def SaveEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'SaveEve' not implemented!")
        #event.Skip()

        global fig2, fig3, fig4, fig5, fig7, fig8, fig9, fig10
        list1 = []
        list2 = []

        try:
            fig2
            list1.append(fig2)
            list2.append('fig2')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig2.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig2, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig3
            list1.append(fig3)
            list2.append('fig3')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig3.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig3, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig4
            list1.append(fig4)
            list2.append('fig4')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig4.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig4, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig5
            list1.append(fig5)
            list2.append('fig5')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig5.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig5, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig7
            list1.append(fig7)
            list2.append('fig7')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig7.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig7, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig8
            list1.append(fig8)
            list2.append('fig8')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig8.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig8, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig9
            list1.append(fig9)
            list2.append('fig9')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig9.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig9, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig10
            list1.append(fig10)
            list2.append('fig10')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig10.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig10, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            list1[1]
            dlg = wx.FileDialog(
                self, message="Save DataS as ...", defaultDir="",
                defaultFile="CBdataS.npz", wildcard=G.wildcard_npz, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                np.savez(path, dataList=list1, dataName=list2)
            dlg.Destroy()
        except:
            pass


    def BackEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'BackEve' not implemented!")
        #event.Skip()
        self.Destroy()
        self.parent.Show()

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
