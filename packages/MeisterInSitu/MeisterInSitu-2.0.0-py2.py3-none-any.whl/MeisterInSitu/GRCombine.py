#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.2 on Fri Apr 12 17:22:57 2019
#

import wx
import numpy as np

import G
import GRCluster

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
# end wxGlade

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1100, 750))
        self.Panel1 = wx.Panel(self, wx.ID_ANY)
        figure1 = self.matplotlib_figure = Figure()
        self.matplotlib_axes1 = figure1.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure1 = FigureCanvas(self.Panel1, wx.ID_ANY, figure1)
        self.Check1 = wx.CheckBox(self, wx.ID_ANY, "Visible Image")
        self.Panel111 = wx.Panel(self, wx.ID_ANY)
        figure111 = self.matplotlib_figure = Figure()
        self.matplotlib_axes111 = figure111.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure111 = FigureCanvas(self.Panel111, wx.ID_ANY, figure111)
        self.Check111 = wx.CheckBox(self, wx.ID_ANY, "RGB-R")
        self.Panel112 = wx.Panel(self, wx.ID_ANY)
        figure112 = self.matplotlib_figure = Figure()
        self.matplotlib_axes112 = figure112.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure112 = FigureCanvas(self.Panel112, wx.ID_ANY, figure112)
        self.Check112 = wx.CheckBox(self, wx.ID_ANY, "RGB-G")
        self.panel_8 = wx.Panel(self, wx.ID_ANY)
        self.Panel113 = wx.Panel(self, wx.ID_ANY)
        figure113 = self.matplotlib_figure = Figure()
        self.matplotlib_axes113 = figure113.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure113 = FigureCanvas(self.Panel113, wx.ID_ANY, figure113)
        self.Check113 = wx.CheckBox(self, wx.ID_ANY, "RGB-B")
        self.Panel121 = wx.Panel(self, wx.ID_ANY)
        figure121 = self.matplotlib_figure = Figure()
        self.matplotlib_axes121 = figure121.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure121 = FigureCanvas(self.Panel121, wx.ID_ANY, figure121)
        self.Check121 = wx.CheckBox(self, wx.ID_ANY, "HSV-H")
        self.Panel122 = wx.Panel(self, wx.ID_ANY)
        figure122 = self.matplotlib_figure = Figure()
        self.matplotlib_axes122 = figure122.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure122 = FigureCanvas(self.Panel122, wx.ID_ANY, figure122)
        self.Check122 = wx.CheckBox(self, wx.ID_ANY, "HSV-S")
        self.panel_11 = wx.Panel(self, wx.ID_ANY)
        self.Panel123 = wx.Panel(self, wx.ID_ANY)
        figure123 = self.matplotlib_figure = Figure()
        self.matplotlib_axes123 = figure123.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure123 = FigureCanvas(self.Panel123, wx.ID_ANY, figure123)
        self.Check123 = wx.CheckBox(self, wx.ID_ANY, "HSV-V")
        self.Panel131 = wx.Panel(self, wx.ID_ANY)
        figure131 = self.matplotlib_figure = Figure()
        self.matplotlib_axes131 = figure131.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure131 = FigureCanvas(self.Panel131, wx.ID_ANY, figure131)
        self.Check131 = wx.CheckBox(self, wx.ID_ANY, "LAB-L")
        self.Panel132 = wx.Panel(self, wx.ID_ANY)
        figure132 = self.matplotlib_figure = Figure()
        self.matplotlib_axes132 = figure132.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure132 = FigureCanvas(self.Panel132, wx.ID_ANY, figure132)
        self.Check132 = wx.CheckBox(self, wx.ID_ANY, "LAB-A")
        self.panel_14 = wx.Panel(self, wx.ID_ANY)
        self.Panel133 = wx.Panel(self, wx.ID_ANY)
        figure133 = self.matplotlib_figure = Figure()
        self.matplotlib_axes133 = figure133.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure133 = FigureCanvas(self.Panel133, wx.ID_ANY, figure133)
        self.Check133 = wx.CheckBox(self, wx.ID_ANY, "LAB-B")
        self.Panel2 = wx.Panel(self, wx.ID_ANY)
        figure2 = self.matplotlib_figure = Figure()
        self.matplotlib_axes2 = figure2.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure2 = FigureCanvas(self.Panel2, wx.ID_ANY, figure2)
        self.CombineBtn = wx.Button(self, wx.ID_ANY, "Multi-Combine")
        self.ComfirmBtn = wx.Button(self, wx.ID_ANY, "Comfirm")
        self.Panel3 = wx.Panel(self, wx.ID_ANY)
        figure3 = self.matplotlib_figure = Figure()
        self.matplotlib_axes3 = figure3.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure3 = FigureCanvas(self.Panel3, wx.ID_ANY, figure3)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.CombineEve, self.CombineBtn)
        self.Bind(wx.EVT_BUTTON, self.ComfirmEve, self.ComfirmBtn)
        # end wxGlade

    def setParent(self, parent):
        print(parent)
        self.parent = parent

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Tissue Extract -- Multi Combine")
        self.Figure1.SetMinSize((200, 300))
        self.Panel1.SetMinSize((200, 300))
        self.Figure111.SetMinSize((100, 150))
        self.Panel111.SetMinSize((100, 150))
        self.Figure112.SetMinSize((100, 150))
        self.Panel112.SetMinSize((100, 150))
        self.panel_8.SetMinSize((100, 150))
        self.Figure113.SetMinSize((100, 150))
        self.Panel113.SetMinSize((100, 150))
        self.Figure121.SetMinSize((100, 150))
        self.Panel121.SetMinSize((100, 150))
        self.Figure122.SetMinSize((100, 150))
        self.Panel122.SetMinSize((100, 150))
        self.panel_11.SetMinSize((100, 150))
        self.Figure123.SetMinSize((100, 150))
        self.Panel123.SetMinSize((100, 150))
        self.Figure131.SetMinSize((100, 150))
        self.Panel131.SetMinSize((100, 150))
        self.Figure132.SetMinSize((100, 150))
        self.Panel132.SetMinSize((100, 150))
        self.panel_14.SetMinSize((100, 150))
        self.Figure133.SetMinSize((100, 150))
        self.Panel133.SetMinSize((100, 150))
        self.Figure2.SetMinSize((200, 300))
        self.Panel2.SetMinSize((200, 300))
        self.CombineBtn.SetMinSize((150, 30))
        self.ComfirmBtn.SetMinSize((150, 30))
        self.Figure3.SetMinSize((200, 300))
        self.Panel3.SetMinSize((200, 300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_52 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_50 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        grid_sizer_4 = wx.GridSizer(2, 2, 0, 0)
        sizer_42 = wx.BoxSizer(wx.VERTICAL)
        sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_41 = wx.BoxSizer(wx.VERTICAL)
        sizer_33 = wx.BoxSizer(wx.VERTICAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_31 = wx.BoxSizer(wx.VERTICAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_3 = wx.GridSizer(2, 2, 0, 0)
        sizer_39 = wx.BoxSizer(wx.VERTICAL)
        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_36 = wx.BoxSizer(wx.VERTICAL)
        sizer_29 = wx.BoxSizer(wx.VERTICAL)
        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27 = wx.BoxSizer(wx.VERTICAL)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(2, 2, 0, 0)
        sizer_37 = wx.BoxSizer(wx.VERTICAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.VERTICAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_21 = wx.BoxSizer(wx.VERTICAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24.Add(self.Figure1, 1, wx.EXPAND, 0)
        self.Panel1.SetSizer(sizer_24)
        sizer_21.Add(self.Panel1, 0, wx.EXPAND, 0)
        sizer_21.Add(self.Check1, 0, wx.ALL, 5)
        grid_sizer_1.Add(sizer_21, 1, wx.EXPAND, 0)
        sizer_23.Add(self.Figure111, 1, wx.EXPAND, 0)
        self.Panel111.SetSizer(sizer_23)
        sizer_22.Add(self.Panel111, 1, wx.EXPAND, 0)
        sizer_22.Add(self.Check111, 0, wx.ALL, 5)
        grid_sizer_2.Add(sizer_22, 1, wx.EXPAND, 0)
        sizer_26.Add(self.Figure112, 1, wx.EXPAND, 0)
        self.Panel112.SetSizer(sizer_26)
        sizer_25.Add(self.Panel112, 1, wx.EXPAND, 0)
        sizer_25.Add(self.Check112, 0, wx.ALL, 5)
        grid_sizer_2.Add(sizer_25, 1, wx.EXPAND, 0)
        sizer_35.Add(self.panel_8, 1, wx.EXPAND, 0)
        sizer_35.Add((0, 0), 0, 0, 0)
        grid_sizer_2.Add(sizer_35, 1, wx.EXPAND, 0)
        sizer_38.Add(self.Figure113, 1, wx.EXPAND, 0)
        self.Panel113.SetSizer(sizer_38)
        sizer_37.Add(self.Panel113, 1, wx.EXPAND, 0)
        sizer_37.Add(self.Check113, 0, wx.ALL, 5)
        grid_sizer_2.Add(sizer_37, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_28.Add(self.Figure121, 1, wx.EXPAND, 0)
        self.Panel121.SetSizer(sizer_28)
        sizer_27.Add(self.Panel121, 1, wx.EXPAND, 0)
        sizer_27.Add(self.Check121, 0, wx.ALL, 5)
        grid_sizer_3.Add(sizer_27, 1, wx.EXPAND, 0)
        sizer_30.Add(self.Figure122, 1, wx.EXPAND, 0)
        self.Panel122.SetSizer(sizer_30)
        sizer_29.Add(self.Panel122, 1, wx.EXPAND, 0)
        sizer_29.Add(self.Check122, 0, wx.ALL, 5)
        grid_sizer_3.Add(sizer_29, 1, wx.EXPAND, 0)
        sizer_36.Add(self.panel_11, 1, wx.EXPAND, 0)
        sizer_36.Add((0, 0), 0, 0, 0)
        grid_sizer_3.Add(sizer_36, 1, wx.EXPAND, 0)
        sizer_40.Add(self.Figure123, 1, wx.EXPAND, 0)
        self.Panel123.SetSizer(sizer_40)
        sizer_39.Add(self.Panel123, 1, wx.EXPAND, 0)
        sizer_39.Add(self.Check123, 0, wx.ALL, 5)
        grid_sizer_3.Add(sizer_39, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        sizer_32.Add(self.Figure131, 1, wx.EXPAND, 0)
        self.Panel131.SetSizer(sizer_32)
        sizer_31.Add(self.Panel131, 1, wx.EXPAND, 0)
        sizer_31.Add(self.Check131, 0, wx.ALL, 5)
        grid_sizer_4.Add(sizer_31, 1, wx.EXPAND, 0)
        sizer_34.Add(self.Figure132, 1, wx.EXPAND, 0)
        self.Panel132.SetSizer(sizer_34)
        sizer_33.Add(self.Panel132, 1, wx.EXPAND, 0)
        sizer_33.Add(self.Check132, 0, wx.ALL, 5)
        grid_sizer_4.Add(sizer_33, 1, wx.EXPAND, 0)
        sizer_41.Add(self.panel_14, 1, wx.EXPAND, 0)
        sizer_41.Add((0, 0), 0, 0, 0)
        grid_sizer_4.Add(sizer_41, 1, wx.EXPAND, 0)
        sizer_43.Add(self.Figure133, 1, wx.EXPAND, 0)
        self.Panel133.SetSizer(sizer_43)
        sizer_42.Add(self.Panel133, 1, wx.EXPAND, 0)
        sizer_42.Add(self.Check133, 0, wx.ALL, 5)
        grid_sizer_4.Add(sizer_42, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        sizer_16.Add(grid_sizer_1, 2, wx.EXPAND, 0)
        sizer_16.Add((20, 20), 0, 0, 0)
        sizer_50.Add(self.Figure2, 1, wx.EXPAND, 0)
        self.Panel2.SetSizer(sizer_50)
        sizer_2.Add(self.Panel2, 0, wx.EXPAND, 0)
        label_1 = wx.StaticText(self, wx.ID_ANY, "Hyper Image")
        sizer_2.Add(label_1, 0, wx.ALL, 5)
        sizer_1.Add(self.CombineBtn, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_1.Add(self.ComfirmBtn, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_2.Add(sizer_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_52.Add(self.Figure3, 1, wx.EXPAND, 0)
        self.Panel3.SetSizer(sizer_52)
        sizer_2.Add(self.Panel3, 0, wx.EXPAND, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, "Combined Image")
        sizer_2.Add(label_2, 0, wx.ALL, 5)
        sizer_16.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_15.Add(sizer_16, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_15)
        self.Layout()
        # end wxGlade

    def CombineEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'CombineEve' not implemented!")
        #event.Skip()
        count = 0
        # Combine初始化为光谱预处理后数据均值
        Combine = np.mean(G.HyperDatap, 1).reshape(-1, 1)
        Combine = G.mapminmax_(Combine, 0, 1)
        print(Combine.shape)
        if self.Check1.GetValue():
            Combine = np.hstack((Combine, np.mean(G.RGB, 2).reshape(-1, 1)))
            count = count + 1
        if self.Check111.GetValue():
            Combine = np.hstack((Combine, G.RGB[:,:,0].reshape(-1, 1)))
            count = count + 1
        if self.Check112.GetValue():
            Combine = np.hstack((Combine, G.RGB[:, :, 1].reshape(-1, 1)))
            count = count + 1
        if self.Check113.GetValue():
            Combine = np.hstack((Combine, G.RGB [:, :, 2].reshape(-1, 1)))
            count = count + 1
        if self.Check121.GetValue():
            Combine = np.hstack((Combine, G.hsv[:, :, 0].reshape(-1, 1)))
            count = count + 1
        if self.Check122.GetValue():
            Combine = np.hstack((Combine, G.hsv[:, :, 1].reshape(-1, 1)))
            count = count + 1
        if self.Check123.GetValue():
            Combine = np.hstack((Combine, G.hsv[:, :, 2].reshape(-1, 1)))
            count = count + 1
        if self.Check131.GetValue():
            Combine = np.hstack((Combine, G.Lab[:, :, 0].reshape(-1, 1)))
            count = count + 1
        if self.Check132.GetValue():
            Combine = np.hstack((Combine, G.Lab[:, :, 1].reshape(-1, 1)))
            count = count + 1
        if self.Check133.GetValue():
            Combine = np.hstack((Combine, G.Lab[:, :, 2].reshape(-1, 1)))
            count = count + 1

        print(Combine.shape)

        fore = G.fore.reshape(G.m*G.n, 1)
        foret = np.tile(fore, (1, count+1))
        G.Combine2D = np.multiply(Combine, foret)

        G.Combine2DAve = np.mean(G.Combine2D, 1).reshape(G.m, G.n)
        self.matplotlib_axes3.imshow(G.Combine2DAve, cmap='jet')
        self.matplotlib_axes3.set_xticks([])
        self.matplotlib_axes3.set_yticks([])
        self.Figure3.draw()

    def ComfirmEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'ComfirmEve' not implemented!")
        #event.Skip()
        self.frame = GRCluster.MyFrame(None, wx.ID_ANY, "")
        self.frame.setParent(self.parent)
        self.frame.setCompany(self)
        self.frame.Show()
        self.Hide()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1366, 568))
        self.frame.SetSize((1366, 720))

        self.frame.matplotlib_axes11.imshow(G.Visimage, cmap='jet')
        self.frame.matplotlib_axes11.set_xticks([])
        self.frame.matplotlib_axes11.set_yticks([])
        self.frame.Figure11.draw()

        self.frame.matplotlib_axes12.imshow(G.Combine2DAve, cmap='jet')
        self.frame.matplotlib_axes12.set_xticks([])
        self.frame.matplotlib_axes12.set_yticks([])
        self.frame.Figure12.draw()


# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
