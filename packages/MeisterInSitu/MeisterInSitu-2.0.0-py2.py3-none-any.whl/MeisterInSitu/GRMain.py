#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.2 on Wed Apr 10 16:25:24 2019
#

import wx
import numpy as np
from scipy.io import loadmat
import skimage

import GRfgE
import GRPurge
import GRPretreat
import G
import GRCombine
import GRfnnls
import GRcb
import GRtb2


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: GRMain.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1000, 650))
        self.Panel = wx.Panel(self, wx.ID_ANY)
        self.panel1 = wx.Panel(self.Panel, wx.ID_ANY)
        figure1 = self.matplotlib_figure = Figure()
        self.matplotlib_axes1 = figure1.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure1 = FigureCanvas(self.panel1, wx.ID_ANY, figure1)
        self.VisBtn = wx.Button(self.Panel, wx.ID_ANY, "Visible Image Import")
        self.panel2 = wx.Panel(self.Panel, wx.ID_ANY)
        figure2 = self.matplotlib_figure = Figure()
        self.matplotlib_axes2 = figure2.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure2 = FigureCanvas(self.panel2, wx.ID_ANY, figure2)
        self.HyperBtn = wx.Button(self.Panel, wx.ID_ANY, "HyperData Import")
        self.panel3 = wx.Panel(self.Panel, wx.ID_ANY)
        figure3 = self.matplotlib_figure = Figure()
        self.matplotlib_axes3 = figure3.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure3 = FigureCanvas(self.panel3, wx.ID_ANY, figure3)
        self.fgBtn = wx.Button(self.Panel, wx.ID_ANY, "Foreground Extract")
        self.nrBtn = wx.Button(self.Panel, wx.ID_ANY, "Noise Remove")
        self.pretreatBtn = wx.Button(self.Panel, wx.ID_ANY, "Spectrum Pretreat")
        self.cbBtn = wx.Button(self.Panel, wx.ID_ANY, "Characteristic Band Imaging")
        self.btBtn = wx.Button(self.Panel, wx.ID_ANY, "Characteristic Band - Tissue")
        self.teBtn = wx.Button(self.Panel, wx.ID_ANY, "Tissue Extract")
        self.fnnlsBtn = wx.Button(self.Panel, wx.ID_ANY, "Fnnls Fitting Imaging")
        self.fnnlstBtn = wx.Button(self.Panel, wx.ID_ANY, "Fnnls Fitting - Tissue")
        self.BackBtn = wx.Button(self.Panel, wx.ID_ANY, "Back")
        self.exitBtn = wx.Button(self.Panel, wx.ID_ANY, "Exit")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.VisImport, self.VisBtn)
        self.Bind(wx.EVT_BUTTON, self.HyperImport, self.HyperBtn)
        self.Bind(wx.EVT_BUTTON, self.fgExtract, self.fgBtn)
        self.Bind(wx.EVT_BUTTON, self.NoiseRemove, self.nrBtn)
        self.Bind(wx.EVT_BUTTON, self.SpTreatEve, self.pretreatBtn)
        self.Bind(wx.EVT_BUTTON, self.CharacteristicBandEve, self.cbBtn)
        self.Bind(wx.EVT_BUTTON, self.CBTeve, self.btBtn)
        self.Bind(wx.EVT_BUTTON, self.TissueExtractEve, self.teBtn)
        self.Bind(wx.EVT_BUTTON, self.fnnlsFitEve, self.fnnlsBtn)
        self.Bind(wx.EVT_BUTTON, self.FBTeve, self.fnnlstBtn)
        self.Bind(wx.EVT_BUTTON, self.BackEve, self.BackBtn)
        self.Bind(wx.EVT_BUTTON, self.GRMainExit, self.exitBtn)
        # end wxGlade

    def setParent(self, parent):
        print(parent)
        self.parent = parent

    def __set_properties(self):
        # begin wxGlade: GRMain.__set_properties
        self.SetTitle("Main")
        self.Figure1.SetMinSize((200, 300))
        self.panel1.SetMinSize((200, 300))
        self.VisBtn.SetMinSize((200, 70))
        self.Figure2.SetMinSize((200, 300))
        self.panel2.SetMinSize((200, 300))
        self.HyperBtn.SetMinSize((200, 70))
        self.Figure3.SetMinSize((200, 300))
        self.panel3.SetMinSize((200, 300))
        self.fgBtn.SetMinSize((200, 30))
        self.nrBtn.SetMinSize((200, 30))
        self.pretreatBtn.SetMinSize((400, 30))
        self.cbBtn.SetMinSize((200, 30))
        self.btBtn.SetMinSize((200, 30))
        self.teBtn.SetMinSize((200, 70))
        self.fnnlsBtn.SetMinSize((200, 30))
        self.fnnlstBtn.SetMinSize((200, 30))
        self.BackBtn.SetMinSize((200, 30))
        self.exitBtn.SetMinSize((200, 30))
        self.Panel.SetMinSize((1300, 720))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: GRMain.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11.Add(self.Figure1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        self.panel1.SetSizer(sizer_11)
        sizer_4.Add(self.panel1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_4.Add(self.VisBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_3.Add(sizer_4, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 0)
        sizer_12.Add(self.Figure2, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        self.panel2.SetSizer(sizer_12)
        sizer_5.Add(self.panel2, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_5.Add(self.HyperBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_3.Add(sizer_5, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        sizer_13.Add(self.Figure3, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        self.panel3.SetSizer(sizer_13)
        sizer_6.Add(self.panel3, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_6.Add(self.fgBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_6.Add(self.nrBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_3.Add(sizer_6, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 5)
        static_line_1 = wx.StaticLine(self.Panel, wx.ID_ANY)
        static_line_1.SetMinSize((-1, 10))
        sizer_2.Add(static_line_1, 1, wx.EXPAND, 0)
        sizer_2.Add(self.pretreatBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)
        static_line_2 = wx.StaticLine(self.Panel, wx.ID_ANY)
        static_line_2.SetMinSize((-1, 10))
        sizer_2.Add(static_line_2, 1, wx.EXPAND, 0)
        sizer_7.Add((20, 20), 1, wx.ALIGN_CENTER, 0)
        sizer_8.Add(self.cbBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_8.Add(self.btBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_7.Add(sizer_8, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_7.Add(self.teBtn, 1, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_9.Add(self.fnnlsBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_9.Add(self.fnnlstBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_7.Add(sizer_9, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_7.Add((20, 20), 1, wx.ALIGN_CENTER, 0)
        sizer_2.Add(sizer_7, 1, wx.ALL | wx.EXPAND, 5)
        static_line_3 = wx.StaticLine(self.Panel, wx.ID_ANY)
        static_line_3.SetMinSize((-1, 10))
        sizer_2.Add(static_line_3, 1, wx.EXPAND, 0)
        sizer_10.Add((100, 20), 1, wx.ALIGN_CENTER, 0)
        sizer_10.Add(self.BackBtn, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_10.Add((400, 20), 1, wx.ALIGN_CENTER, 0)
        sizer_10.Add(self.exitBtn, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_10.Add((80, 20), 1, wx.ALIGN_CENTER, 0)
        sizer_2.Add(sizer_10, 1, wx.ALL | wx.EXPAND, 5)
        self.Panel.SetSizer(sizer_2)
        sizer_1.Add(self.Panel, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def VisImport(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'VisImport' not implemented!")
        #event.Skip()

        wildcard = "JPEG files (*.jpg)|*.jpg|" \
                   "PNG files (*.png)|*.png|" \
                   "TIFF file (*.tiff)|*.tiff|" \
                   "All files (*.*)|*.*"

        # 读取可见光图像
        dlg = wx.FileDialog(self, message = "Import Visible Image",
                            defaultDir = '', defaultFile = '',
                            wildcard = wildcard, style = wx.DD_DEFAULT_STYLE)
        if dlg.ShowModal() == wx.ID_OK:
            file = dlg.GetPath()
            dlg.Destroy()
            del wildcard

            Visimage = skimage.io.imread(file)
            G.Visimage = np.copy(Visimage[:,:,0:3])
            #K = G.Visimage

            del file

            self.matplotlib_axes1.imshow(G.Visimage, cmap='jet')
            self.matplotlib_axes1.set_xticks([])
            self.matplotlib_axes1.set_yticks([])
            #matplotlib.colors.Colormap('gray')
            self.Figure1.draw()

        else:
            dlg.Destroy()
            del wildcard
            dlg = wx.MessageDialog(self, 'No file loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()

    def HyperImport(self, event):  # wxGlade: GRMain.<event_handler>
        wildcard = "MAT files (*.mat)|*.mat|" \
                   "All files (*.*)|*.*"
                   # "FSM files (*.fsm)|*.fsm|" \

        # 读取HyperData
        dlg = wx.FileDialog(self, message="Import HyperData",
                           defaultDir='', defaultFile='',
                           wildcard=wildcard, style=wx.DD_DEFAULT_STYLE)
        if dlg.ShowModal() == wx.ID_OK:
            file = dlg.GetPath()
            dlg.Destroy()
            Hyper = loadmat(file)
            del file
            #b = len(Hyper[list(Hyper.keys())[3]].shape)

            if len(Hyper[list(Hyper.keys())[3]].shape) != 3:
                dlg = wx.MessageDialog(self, '1^st import, 3D(SpatialX-SpatialY-WaveNumbers) data wanted',
                                       'A Message Box',
                                       wx.OK | wx.ICON_INFORMATION
                                       # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                       )
                dlg.ShowModal()
                dlg.Destroy()

            else:
                # 读取waveNumber
                dlg = wx.FileDialog(self, message="Import WaveNumber of the HyperData",
                                    defaultDir='', defaultFile='',
                                    wildcard=wildcard, style=wx.DD_DEFAULT_STYLE)
                if dlg.ShowModal() == wx.ID_OK:
                    file = dlg.GetPath()
                    dlg.Destroy()
                    Wave = loadmat(file)
                    del file
                    #c = len(Wave[list(Wave.keys())[3]].shape)

                    if len(Wave[list(Wave.keys())[3]].shape) !=2:
                        dlg = wx.MessageDialog(self, '2nd improt, 1D(Vector for wavenumbers) data wanted',
                                               'A Message Box',
                                               wx.OK | wx.ICON_INFORMATION
                                               # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                               )
                        dlg.ShowModal()
                        dlg.Destroy()

                    else:
                        # 进度条
                        progressMax = 4
                        homodlg = wx.ProgressDialog("The Progress (HyperData Import)", "Time remaining", progressMax,
                                            style=wx.PD_CAN_ABORT | wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME)
                        keepGoing = True
                        count = 0

                        # HyperData处理
                        #HyperData = Hyper['IRImageData']
                        HyperData = Hyper[list(Hyper.keys())[3]]        # 自动读取， 第4个key
                        del Hyper

                        count = count + 1
                        if keepGoing and count < progressMax:
                            keepGoing = homodlg.Update(count)

                        # 原始3D数据尺寸
                        [G.m, G.n, G.p] = np.shape(HyperData)

                        # T% to A
                        a = 2-np.log10(HyperData)
                        #print(a.shape)
                        del HyperData

                        count = count + 1
                        if keepGoing and count < progressMax:
                            keepGoing = homodlg.Update(count)

                        # Unfold
                        G.HyperData2D = np.reshape(a, (G.m*G.n, G.p))
                        G.HyperData2D = np.real(G.HyperData2D)    # 防止虚数
                        del a

                        count = count + 1
                        if keepGoing and count < progressMax:
                            keepGoing = homodlg.Update(count)

                        # 平均吸光度
                        G.HyperDataAve = np.reshape(np.mean(G.HyperData2D, 1), (G.m, G.n))

                        count = count + 1
                        if keepGoing and count < progressMax:
                            keepGoing = homodlg.Update(count)

                        homodlg.Destroy()

                        #self.matplotlib_axes2.imshow(G.HyperDataAve)
                        self.matplotlib_axes2.imshow(G.HyperDataAve, cmap='jet')
                        self.matplotlib_axes2.set_xticks([])
                        self.matplotlib_axes2.set_yticks([])
                        #matplotlib.colors.Colormap('gray')
                        self.Figure2.draw()

                        # WaveNumber处理
                        G.WaveNumber = Wave[list(Wave.keys())[3]]  # 自动读取, 第4个key
                        del Wave

                        #resize可见光图像
                        print(G.Visimage.shape, G.Visimage.shape)
                        G.Visimage = skimage.transform.resize(G.Visimage, (G.m, G.n))
                        print(G.Visimage.shape)

                else:
                    dlg.Destroy()
                    del wildcard
                    dlg = wx.MessageDialog(self, 'No Wavenumber Data loaded',
                                         'A Message Box',
                                        wx.OK | wx.ICON_INFORMATION
                                        # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                        )
                    dlg.ShowModal()
                    dlg.Destroy()

        else:
            dlg.Destroy()
            del wildcard
            dlg = wx.MessageDialog(self, 'No Hyper-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()

    def GRMainExit(self, event):  # wxGlade: GRMain.<event_handler>
        self.Destroy()
        self.parent.Destroy()

    def BackEve(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'BackEve' not implemented!")
        #event.Skip()
        self.Destroy()
        self.parent.Show()

    def fgExtract(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'fgExtract' not implemented!")
        #event.Skip()
        #print(G.HyperData.size)
        if G.HyperData2D.size == 0:
            dlg = wx.MessageDialog(self, 'No Hyper-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()

        else:
            self.frame = GRfgE.MyFrame(None, wx.ID_ANY, "")
            GRfgE.MyFrame.Parent = self      # Parent是类GRfgE的“全局变量”
            self.Hide()
            self.frame.Show()
            self.frame.Center()
            # 进行一次缩放，各控件(尤其是Canvas)完整显示
            self.frame.SetSize((1366, 768))
            self.frame.SetSize((1000, 700))

    def NoiseRemove(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'NoiseRemove' not implemented!")
        #event.Skip()
        if G.fore.size == 0:
            dlg = wx.MessageDialog(self, 'Not extrated foreground yet',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
            # setParent是GRPurge的方法之一
            # setParent(self, parent, parentName, data, figure, axes)
            self.frame.setParent(self, 'GRMain', G.fore, self.Figure3, self.matplotlib_axes3)

            self.frame.Show()
            self.Hide()
            self.frame.Center()
            # 进行一次缩放，各控件(尤其是Canvas)完整显示
            self.frame.SetSize((1366, 768))
            self.frame.SetSize((750, 750))

            # 初始化绘图
            self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='jet')
            self.frame.matplotlib_axes.set_xticks([])
            self.frame.matplotlib_axes.set_yticks([])
            self.frame.Figure.draw()

    def SpTreatEve(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'SpTreatEve' not implemented!")
        #event.Skip()
        if G.HyperData2D.size == 0:
            dlg = wx.MessageDialog(self, 'No Hyper-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.fore.size == 0:
            dlg = wx.MessageDialog(self, 'Not extrated foreground yet',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            self.frame = GRPretreat.MyFrame(None, wx.ID_ANY, "")
            self.frame.setParent(self)
            self.frame.Show()
            self.Hide()
            self.frame.Center()
            # 进行一次缩放，各控件(尤其是Canvas)完整显示
            self.frame.SetSize((1366, 768))
            self.frame.SetSize((1300, 500))

    def TissueExtractEve(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'TissueExtractEve' not implemented!")
        #event.Skip()
        if G.Visimage.size == 0:
            dlg = wx.MessageDialog(self, 'No Visible-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.HyperData2D.size == 0:
            dlg = wx.MessageDialog(self, 'No Hyper-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            self.frame = GRCombine.MyFrame(None, wx.ID_ANY, "")
            self.frame.setParent(self)
            self.frame.Show()
            self.Hide()
            self.frame.Center()
            # 进行一次缩放，各控件(尤其是Canvas)完整显示
            self.frame.SetSize((1366, 768))
            self.frame.SetSize((1100, 750))

            # 初始化绘图
            self.frame.matplotlib_axes1.imshow(G.Visimage, cmap='jet')
            self.frame.matplotlib_axes1.set_xticks([])
            self.frame.matplotlib_axes1.set_yticks([])
            self.frame.Figure1.draw()

            self.frame.matplotlib_axes2.imshow(G.HyperDatapAve, cmap='jet')
            self.frame.matplotlib_axes2.set_xticks([])
            self.frame.matplotlib_axes2.set_yticks([])
            self.frame.Figure2.draw()


            # 三个通道为相同的矩阵大小，而后将三者按照通道顺序排列重叠后构成了RGB彩色图片
            # 当然顺序有可能不是RBG，例如opencv转换后为BGR
            G.RGB = G.mapminmax_(G.Visimage, 0, 1)

            self.frame.matplotlib_axes111.imshow(G.RGB[:,:,0], cmap='jet')
            self.frame.matplotlib_axes111.set_xticks([])
            self.frame.matplotlib_axes111.set_yticks([])
            self.frame.Figure111.draw()

            self.frame.matplotlib_axes112.imshow(G.RGB[:,:,1], cmap='jet')
            self.frame.matplotlib_axes112.set_xticks([])
            self.frame.matplotlib_axes112.set_yticks([])
            self.frame.Figure112.draw()

            self.frame.matplotlib_axes113.imshow(G.RGB[:,:,2], cmap='jet')
            self.frame.matplotlib_axes113.set_xticks([])
            self.frame.matplotlib_axes113.set_yticks([])
            self.frame.Figure113.draw()

            G.hsv = skimage.color.convert_colorspace(G.RGB, 'RGB', 'HSV')
            G.hsv = G.mapminmax_(G.hsv, 0, 1)
            self.frame.matplotlib_axes121.imshow(G.hsv[:, :, 0], cmap='jet')
            self.frame.matplotlib_axes121.set_xticks([])
            self.frame.matplotlib_axes121.set_yticks([])
            self.frame.Figure121.draw()

            self.frame.matplotlib_axes122.imshow(G.hsv[:, :, 1], cmap='jet')
            self.frame.matplotlib_axes122.set_xticks([])
            self.frame.matplotlib_axes122.set_yticks([])
            self.frame.Figure122.draw()

            self.frame.matplotlib_axes123.imshow(G.hsv[:, :, 2], cmap='jet')
            self.frame.matplotlib_axes123.set_xticks([])
            self.frame.matplotlib_axes123.set_yticks([])
            self.frame.Figure123.draw()

            #G.Lab = skimage.color.convert_colorspace(G.RGB, 'RGB', 'Lab')
            G.xyz = skimage.color.rgb2xyz(G.RGB)
            G.Lab = skimage.color.xyz2lab(G.RGB)
            G.Lab = G.mapminmax_(G.Lab, 0, 1)
            self.frame.matplotlib_axes131.imshow(G.Lab[:, :, 0], cmap='jet')
            self.frame.matplotlib_axes131.set_xticks([])
            self.frame.matplotlib_axes131.set_yticks([])
            self.frame.Figure131.draw()

            self.frame.matplotlib_axes132.imshow(G.Lab[:, :, 1], cmap='jet')
            self.frame.matplotlib_axes132.set_xticks([])
            self.frame.matplotlib_axes132.set_yticks([])
            self.frame.Figure132.draw()

            self.frame.matplotlib_axes133.imshow(G.Lab[:, :, 2], cmap='jet')
            self.frame.matplotlib_axes133.set_xticks([])
            self.frame.matplotlib_axes133.set_yticks([])
            self.frame.Figure133.draw()

    def fnnlsFitEve(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'fnnlsFitEve' not implemented!")
        #event.Skip()
        if G.HyperData2D.size == 0:
            dlg = wx.MessageDialog(self, 'No Hyper-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.refp.size == 0:
            if G.refN.size == 0:
                dlg = wx.MessageDialog(self, 'No Ref.Spectrum loaded',
                                       'A Message Box',
                                       wx.OK | wx.ICON_INFORMATION
                                       # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                       )
                dlg.ShowModal()
                dlg.Destroy()
            else:
                dlg = wx.MessageDialog(self, 'Spectrum have not been pretreated yet',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
                dlg.ShowModal()
                dlg.Destroy()
        else:
            self.frame = GRfnnls.MyFrame(None, wx.ID_ANY, "")
            self.frame.setParent(self)
            self.frame.Show()
            self.Hide()
            self.frame.Center()
            # 进行一次缩放，各控件(尤其是Canvas)完整显示
            self.frame.SetSize((1366, 768))
            self.frame.SetSize((1366, 450))

    def CharacteristicBandEve(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'CharacteristicBandEve' not implemented!")
        #event.Skip()
        if G.HyperData2D.size == 0:
            dlg = wx.MessageDialog(self, 'No Hyper-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.WaveNumber.size == 0:
            dlg = wx.MessageDialog(self, 'No Wavenumber loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.HyperDatap.size == 0:
            dlg = wx.MessageDialog(self, 'Spectrum have not been pretreated yet',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            self.frame = GRcb.MyFrame(None, wx.ID_ANY, "")
            self.frame.setParent(self)

            # 若出错应给予提示
            self.frame.setCompany(G.WaveN)

            self.frame.Show()
            self.Hide()
            self.frame.Center()
            # 进行一次缩放，各控件(尤其是Canvas)完整显示
            self.frame.SetSize((1366, 768))
            self.frame.SetSize((1366, 720))

            self.frame.matplotlib_axes1.imshow(G.Visimage, cmap='jet')
            self.frame.matplotlib_axes1.set_xticks([])
            self.frame.matplotlib_axes1.set_yticks([])
            self.frame.Figure1.draw()

            self.frame.matplotlib_axes6.imshow(G.HyperDataAve, cmap='jet')
            self.frame.matplotlib_axes6.set_xticks([])
            self.frame.matplotlib_axes6.set_yticks([])
            self.frame.Figure6.draw()

    def CBTeve(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'CBTeve' not implemented!")
        #event.Skip()
        if G.HyperData2D.size == 0:
            dlg = wx.MessageDialog(self, 'No Hyper-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.WaveNumber.size == 0:
            dlg = wx.MessageDialog(self, 'No Wavenumber loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.HyperDatap.size == 0:
            dlg = wx.MessageDialog(self, 'Spectrum have not been pretreated yet',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            self.frame = GRtb2.MyFrame(None, wx.ID_ANY, "")
            self.frame.setParent(self)

            #self.frame.setCompany(G.HyperDatap)

            self.frame.Show()
            self.Hide()
            self.frame.Center()
            # 进行一次缩放，各控件(尤其是Canvas)完整显示
            self.frame.SetSize((1366, 768))
            self.frame.SetSize((1000, 700))

            self.frame.SetTitle("Characteristic Band - Tissue")
            self.frame.CompanyLabel.SetLabel('Characteristic Band:')
            self.frame.TextUnit.SetLabel('cm-1')

            self.frame.matplotlib_axes1.imshow(G.Visimage, cmap='jet')
            self.frame.matplotlib_axes1.set_xticks([])
            self.frame.matplotlib_axes1.set_yticks([])
            self.frame.Figure1.draw()

            self.frame.matplotlib_axes6.imshow(G.HyperDataAve, cmap='jet')
            self.frame.matplotlib_axes6.set_xticks([])
            self.frame.matplotlib_axes6.set_yticks([])
            self.frame.Figure6.draw()

    def FBTeve(self, event):  # wxGlade: GRMain.<event_handler>
        #print("Event handler 'FBTeve' not implemented!")
        #event.Skip()
        if G.HyperData2D.size == 0:
            dlg = wx.MessageDialog(self, 'No Hyper-image loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.WaveNumber.size == 0:
            dlg = wx.MessageDialog(self, 'No Wavenumber loaded',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.HyperDatap.size == 0:
            dlg = wx.MessageDialog(self, 'Spectrum have not been pretreated yet',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        elif G.fnnlsR.size == 0:
            dlg = wx.MessageDialog(self, 'Done Fnnls fitting first',
                                   'A Message Box',
                                   wx.OK | wx.ICON_INFORMATION
                                   # wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            self.frame = GRtb2.MyFrame(None, wx.ID_ANY, "")
            self.frame.setParent(self)

            # 若fnnls未计算，则报错
            self.frame.setCompany(G.fnnlsR[0][1])

            self.frame.Show()
            self.Hide()
            self.frame.Center()
            # 进行一次缩放，各控件(尤其是Canvas)完整显示
            self.frame.SetSize((1366, 768))
            self.frame.SetSize((1000, 700))

            self.frame.SetTitle("Fnnls Fitting - Tissue")
            self.frame.CompanyLabel.SetLabel('Component:')
            self.frame.TextUnit.SetLabel('')

            self.frame.matplotlib_axes1.imshow(G.Visimage, cmap='jet')
            self.frame.matplotlib_axes1.set_xticks([])
            self.frame.matplotlib_axes1.set_yticks([])
            self.frame.Figure1.draw()

            self.frame.matplotlib_axes6.imshow(G.HyperDataAve, cmap='jet')
            self.frame.matplotlib_axes6.set_xticks([])
            self.frame.matplotlib_axes6.set_yticks([])
            self.frame.Figure6.draw()

# end of class GRMain

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
