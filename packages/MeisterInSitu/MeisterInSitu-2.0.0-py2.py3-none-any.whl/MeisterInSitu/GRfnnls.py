#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.2 on Sun Apr 14 10:04:49 2019
#

import G

import wx
from matplotlib import pyplot as plt
import numpy as np

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1300, 420))
        self.notebook_4 = wx.Notebook(self, wx.ID_ANY)
        self.notebook_4_pane_2 = wx.Panel(self.notebook_4, wx.ID_ANY)
        self.Panel1 = wx.Panel(self.notebook_4_pane_2, wx.ID_ANY)
        figure1 = self.matplotlib_figure = Figure()
        self.matplotlib_axes1 = figure1.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure1 = FigureCanvas(self.Panel1, wx.ID_ANY, figure1)
        self.Panel2 = wx.Panel(self.notebook_4_pane_2, wx.ID_ANY)
        figure2 = self.matplotlib_figure = Figure()
        self.matplotlib_axes2 = figure2.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure2 = FigureCanvas(self.Panel2, wx.ID_ANY, figure2)
        self.Panel3 = wx.Panel(self.notebook_4_pane_2, wx.ID_ANY)
        figure3 = self.matplotlib_figure = Figure()
        self.matplotlib_axes3 = figure3.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure3 = FigureCanvas(self.Panel3, wx.ID_ANY, figure3)
        self.Panel4 = wx.Panel(self.notebook_4_pane_2, wx.ID_ANY)
        figure4 = self.matplotlib_figure = Figure()
        self.matplotlib_axes4 = figure4.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure4 = FigureCanvas(self.Panel4, wx.ID_ANY, figure4)
        self.Panel5 = wx.Panel(self.notebook_4_pane_2, wx.ID_ANY)
        figure5 = self.matplotlib_figure = Figure()
        self.matplotlib_axes5 = figure5.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure5 = FigureCanvas(self.Panel5, wx.ID_ANY, figure5)
        self.Panel6 = wx.Panel(self.notebook_4_pane_2, wx.ID_ANY)
        figure6 = self.matplotlib_figure = Figure()
        self.matplotlib_axes6 = figure6.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure6 = FigureCanvas(self.Panel6, wx.ID_ANY, figure6)
        self.panel_1 = wx.Panel(self.notebook_4_pane_2, wx.ID_ANY)
        self.CalculateBtn = wx.Button(self.panel_1, wx.ID_ANY, "Calculate")
        self.SaveBtn = wx.Button(self.panel_1, wx.ID_ANY, "Save")
        self.BackBtn = wx.Button(self.panel_1, wx.ID_ANY, "Back")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.CalculateEve, self.CalculateBtn)
        self.Bind(wx.EVT_BUTTON, self.SaveEve, self.SaveBtn)
        self.Bind(wx.EVT_BUTTON, self.BackEve, self.BackBtn)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Fnnls Fitting Imaging")
        self.Figure1.SetMinSize((200, 300))
        self.Panel1.SetMinSize((200, 300))
        self.Figure2.SetMinSize((200, 300))
        self.Panel2.SetMinSize((200, 300))
        self.Figure3.SetMinSize((200, 300))
        self.Panel3.SetMinSize((200, 300))
        self.Figure4.SetMinSize((200, 300))
        self.Panel4.SetMinSize((200, 300))
        self.Figure5.SetMinSize((200, 300))
        self.Panel5.SetMinSize((200, 300))
        self.Figure6.SetMinSize((200, 300))
        self.Panel6.SetMinSize((200, 300))
        self.CalculateBtn.SetMinSize((200, -1))
        self.SaveBtn.SetMinSize((200, -1))
        self.BackBtn.SetMinSize((200, -1))
        self.panel_1.SetMinSize((700, 30))
        self.notebook_4.SetMinSize((1300, 400))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_90 = wx.BoxSizer(wx.VERTICAL)
        sizer_91 = wx.BoxSizer(wx.VERTICAL)
        sizer_92 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_93 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_104 = wx.BoxSizer(wx.VERTICAL)
        sizer_105 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_102 = wx.BoxSizer(wx.VERTICAL)
        sizer_103 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_100 = wx.BoxSizer(wx.VERTICAL)
        sizer_101 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_98 = wx.BoxSizer(wx.VERTICAL)
        sizer_99 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_96 = wx.BoxSizer(wx.VERTICAL)
        sizer_97 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_94 = wx.BoxSizer(wx.VERTICAL)
        sizer_95 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_93.Add((20, 20), 0, 0, 0)
        sizer_95.Add(self.Figure1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel1.SetSizer(sizer_95)
        sizer_94.Add(self.Panel1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_7 = wx.StaticText(self.notebook_4_pane_2, wx.ID_ANY, "Component 1")
        sizer_94.Add(label_7, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_93.Add(sizer_94, 1, wx.EXPAND, 0)
        sizer_97.Add(self.Figure2, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel2.SetSizer(sizer_97)
        sizer_96.Add(self.Panel2, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_8 = wx.StaticText(self.notebook_4_pane_2, wx.ID_ANY, "Component 2")
        sizer_96.Add(label_8, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_93.Add(sizer_96, 1, wx.EXPAND, 0)
        sizer_99.Add(self.Figure3, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel3.SetSizer(sizer_99)
        sizer_98.Add(self.Panel3, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_9 = wx.StaticText(self.notebook_4_pane_2, wx.ID_ANY, "Component 3")
        sizer_98.Add(label_9, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_93.Add(sizer_98, 1, wx.EXPAND, 0)
        sizer_101.Add(self.Figure4, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel4.SetSizer(sizer_101)
        sizer_100.Add(self.Panel4, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_10 = wx.StaticText(self.notebook_4_pane_2, wx.ID_ANY, "Component 4")
        sizer_100.Add(label_10, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_93.Add(sizer_100, 1, wx.EXPAND, 0)
        sizer_103.Add(self.Figure5, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel5.SetSizer(sizer_103)
        sizer_102.Add(self.Panel5, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_11 = wx.StaticText(self.notebook_4_pane_2, wx.ID_ANY, "Component 5")
        sizer_102.Add(label_11, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_93.Add(sizer_102, 1, wx.EXPAND, 0)
        sizer_105.Add(self.Figure6, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel6.SetSizer(sizer_105)
        sizer_104.Add(self.Panel6, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        label_12 = wx.StaticText(self.notebook_4_pane_2, wx.ID_ANY, "Component 6")
        sizer_104.Add(label_12, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_93.Add(sizer_104, 1, wx.EXPAND, 0)
        sizer_93.Add((20, 20), 0, 0, 0)
        sizer_91.Add(sizer_93, 1, wx.EXPAND, 0)
        sizer_92.Add((200, 20), 1, 0, 0)
        sizer_2.Add(self.CalculateBtn, 0, wx.ALL, 5)
        sizer_2.Add((50, 20), 0, 0, 0)
        sizer_2.Add(self.SaveBtn, 0, wx.ALL, 5)
        sizer_2.Add((50, 20), 0, 0, 0)
        sizer_2.Add(self.BackBtn, 0, wx.ALL, 5)
        self.panel_1.SetSizer(sizer_2)
        sizer_92.Add(self.panel_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_92.Add((200, 20), 1, 0, 0)
        sizer_91.Add(sizer_92, 1, wx.EXPAND, 0)
        self.notebook_4_pane_2.SetSizer(sizer_91)
        self.notebook_4.AddPage(self.notebook_4_pane_2, "Fnnls Fitting")
        sizer_90.Add(self.notebook_4, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.SetSizer(sizer_90)
        self.Layout()
        # end wxGlade

    def setParent(self, parent):
        print(parent)
        self.parent = parent

    def setCompany(self, company):
        #print(parent)
        self.company = company

    def CalculateEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'CalculateEve' not implemented!")
        #event.Skip()

        # C为参考光谱， d为待计算光谱，X为计算结果
        X = G.lsqnonneg(G.refp.T, G.HyperDatap.T)
        G.fnnlsR = X

        global Xmin, Xmax
        Xmin = np.min(X)
        Xmax = np.max(X)

        global fig1, fig2, fig3, fig4, fig5, fig6

        try:
            fig1 = X[:, 0].reshape(G.m, G.n)
            self.matplotlib_axes1.imshow(fig1, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
            self.matplotlib_axes1.set_xticks([])
            self.matplotlib_axes1.set_yticks([])
            self.Figure1.draw()

            fig2 = X[:, 1].reshape(G.m, G.n)
            self.matplotlib_axes2.imshow(fig2, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
            self.matplotlib_axes2.set_xticks([])
            self.matplotlib_axes2.set_yticks([])
            self.Figure2.draw()

            fig3 = X[:, 2].reshape(G.m, G.n)
            self.matplotlib_axes3.imshow(fig3, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
            self.matplotlib_axes3.set_xticks([])
            self.matplotlib_axes3.set_yticks([])
            self.Figure3.draw()

            fig4 = X[:, 3].reshape(G.m, G.n)
            self.matplotlib_axes4.imshow(fig4, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
            self.matplotlib_axes4.set_xticks([])
            self.matplotlib_axes4.set_yticks([])
            self.Figure4.draw()

            fig5 = X[:, 4].reshape(G.m, G.n)
            self.matplotlib_axes5.imshow(fig5, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
            self.matplotlib_axes5.set_xticks([])
            self.matplotlib_axes5.set_yticks([])
            self.Figure5.draw()

            fig6 = X[:, 5].reshape(G.m, G.n)
            self.matplotlib_axes6.imshow(fig6, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
            self.matplotlib_axes6.set_xticks([])
            self.matplotlib_axes6.set_yticks([])
            self.Figure6.draw()

        except:
            pass

    def SaveEve(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'SaveEve' not implemented!")
        event.Skip()

        global fig1, fig2, fig3, fig4, fig5, fig6
        list1 = []
        list2 = []

        try:
            fig1
            list1.append(fig1)
            list2.append('fig1')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig1.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig1, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig2
            list1.append(fig2)
            list2.append('fig2')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig2.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig2, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig3
            list1.append(fig3)
            list2.append('fig3')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig3.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig3, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig4
            list1.append(fig4)
            list2.append('fig4')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig4.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig4, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig5
            list1.append(fig5)
            list2.append('fig5')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig5.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig5, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            fig6
            list1.append(fig6)
            list2.append('fig6')
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="fig6.png", wildcard=G.wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(fig6, cmap='jet')#,vmin=Xmin, Vmax=Xmax)
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        try:
            list1[1]
            dlg = wx.FileDialog(
                self, message="Save DataS as ...", defaultDir="",
                defaultFile="FnnlsData.npz", wildcard=G.wildcard_npz, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                np.savez(path, dataList=list1, dataName=list2)
            dlg.Destroy()
        except:
            pass

    def BackEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'BackEve' not implemented!")
        #event.Skip()
        self.Destroy()
        self.parent.Show()


# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
