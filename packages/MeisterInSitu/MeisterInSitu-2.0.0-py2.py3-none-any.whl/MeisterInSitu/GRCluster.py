#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.2 on Fri Apr 26 12:56:19 2019
#

import wx
import numpy as np
from sklearn.cluster import KMeans

import G
import GRPurge

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1300, 720))
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.Panel11 = wx.Panel(self.notebook_1_pane_2, wx.ID_ANY)
        figure11 = self.matplotlib_figure = Figure()
        self.matplotlib_axes11 = figure11.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure11 = FigureCanvas(self.Panel11, wx.ID_ANY, figure11)
        self.Panel12 = wx.Panel(self.notebook_1_pane_2, wx.ID_ANY)
        figure12 = self.matplotlib_figure = Figure()
        self.matplotlib_axes12 = figure12.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure12 = FigureCanvas(self.Panel12, wx.ID_ANY, figure12)
        self.notebook_2 = wx.Notebook(self, wx.ID_ANY)
        self.notebook_2_pane_2 = wx.Panel(self.notebook_2, wx.ID_ANY)
        self.ClusterNum = wx.TextCtrl(self.notebook_2_pane_2, wx.ID_ANY, "5", style=wx.TE_CENTRE)
        self.ClusterBtn = wx.Button(self.notebook_2_pane_2, wx.ID_ANY, "K-means Cluster")
        self.Panel20 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure20 = self.matplotlib_figure = Figure()
        self.matplotlib_axes20 = figure20.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure20 = FigureCanvas(self.Panel20, wx.ID_ANY, figure20)
        self.Panel21 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure21 = self.matplotlib_figure = Figure()
        self.matplotlib_axes21 = figure21.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure21 = FigureCanvas(self.Panel21, wx.ID_ANY, figure21)
        self.Check211 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Select")
        self.Check212 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Unselect")
        self.Panel22 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure22 = self.matplotlib_figure = Figure()
        self.matplotlib_axes22 = figure22.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure22 = FigureCanvas(self.Panel22, wx.ID_ANY, figure22)
        self.Check221 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Select")
        self.Check222 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Unselect")
        self.Panel23 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure23 = self.matplotlib_figure = Figure()
        self.matplotlib_axes23 = figure23.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure23 = FigureCanvas(self.Panel23, wx.ID_ANY, figure23)
        self.Check231 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Select")
        self.Check232 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Unselect")
        self.Panel24 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure24 = self.matplotlib_figure = Figure()
        self.matplotlib_axes24 = figure24.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure24 = FigureCanvas(self.Panel24, wx.ID_ANY, figure24)
        self.Check241 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Select")
        self.Check242 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Unselect")
        self.Panel25 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure25 = self.matplotlib_figure = Figure()
        self.matplotlib_axes25 = figure25.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure25 = FigureCanvas(self.Panel25, wx.ID_ANY, figure25)
        self.Check251 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Select")
        self.Check252 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Unselect")
        self.Panel26 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure26 = self.matplotlib_figure = Figure()
        self.matplotlib_axes26 = figure26.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure26 = FigureCanvas(self.Panel26, wx.ID_ANY, figure26)
        self.Check261 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Select")
        self.Check262 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Unselect")
        self.Panel27 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure27 = self.matplotlib_figure = Figure()
        self.matplotlib_axes27 = figure27.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure27 = FigureCanvas(self.Panel27, wx.ID_ANY, figure27)
        self.Check271 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Select")
        self.Check272 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Unselect")
        self.Panel28 = wx.Panel(self.notebook_2_pane_2, wx.ID_ANY)
        figure28 = self.matplotlib_figure = Figure()
        self.matplotlib_axes28 = figure28.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure28 = FigureCanvas(self.Panel28, wx.ID_ANY, figure28)
        self.Check281 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Select")
        self.Check282 = wx.CheckBox(self.notebook_2_pane_2, wx.ID_ANY, "Unselect")
        self.notebook_3 = wx.Notebook(self, wx.ID_ANY)
        self.notebook_3_pane_2 = wx.Panel(self.notebook_3, wx.ID_ANY)
        self.Panel31 = wx.Panel(self.notebook_3_pane_2, wx.ID_ANY)
        figure31 = self.matplotlib_figure = Figure()
        self.matplotlib_axes31 = figure31.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure31 = FigureCanvas(self.Panel31, wx.ID_ANY, figure31)
        self.Check311 = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, "Select")
        self.Check312 = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, "Unselect")
        self.EpureBtn = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Epidermis")
        self.Panel32 = wx.Panel(self.notebook_3_pane_2, wx.ID_ANY)
        figure32 = self.matplotlib_figure = Figure()
        self.matplotlib_axes32 = figure32.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure32 = FigureCanvas(self.Panel32, wx.ID_ANY, figure32)
        self.Check321 = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, "Select")
        self.Check322 = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, "Unselect")
        self.VpureBtn = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Vascular Bundle")
        self.Panel33 = wx.Panel(self.notebook_3_pane_2, wx.ID_ANY)
        figure33 = self.matplotlib_figure = Figure()
        self.matplotlib_axes33 = figure33.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure33 = FigureCanvas(self.Panel33, wx.ID_ANY, figure33)
        self.Check331 = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, "Select")
        self.Check332 = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, "Unselect")
        self.SpureBtn = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Sclerenchyma")
        self.Panel34 = wx.Panel(self.notebook_3_pane_2, wx.ID_ANY)
        figure34 = self.matplotlib_figure = Figure()
        self.matplotlib_axes34 = figure34.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure34 = FigureCanvas(self.Panel34, wx.ID_ANY, figure34)
        self.Check341 = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, "Select")
        self.Check342 = wx.CheckBox(self.notebook_3_pane_2, wx.ID_ANY, "Unselect")
        self.PpureBtn = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Parenchyma")
        self.button_21 = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Back")
        self.button_22 = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Overlap Correction")
        self.button_23 = wx.Button(self.notebook_3_pane_2, wx.ID_ANY, "Comfirm")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.KclusterEve, self.ClusterBtn)
        self.Bind(wx.EVT_BUTTON, self.EpureEve, self.EpureBtn)
        self.Bind(wx.EVT_BUTTON, self.VpureEve, self.VpureBtn)
        self.Bind(wx.EVT_BUTTON, self.SpureEve, self.SpureBtn)
        self.Bind(wx.EVT_BUTTON, self.PpureEve, self.PpureBtn)
        self.Bind(wx.EVT_BUTTON, self.BackEve, self.button_21)
        self.Bind(wx.EVT_BUTTON, self.OverlapCorrect, self.button_22)
        self.Bind(wx.EVT_BUTTON, self.ComfirmEve, self.button_23)
        # end wxGlade

    def setParent(self, parent):
        print(parent)
        self.parent = parent

    def setCompany(self, company):
        #print(parent)
        self.company = company

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Tissue Extract -- HyperData Cluster")
        self.Figure11.SetMinSize((200, 300))
        self.Panel11.SetMinSize((200, 300))
        self.Figure12.SetMinSize((200, 300))
        self.Panel12.SetMinSize((200, 300))
        self.notebook_1_pane_2.SetMinSize((320, 688))
        self.notebook_1.SetMinSize((320, 688))
        self.ClusterNum.SetMinSize((40, 20))
        self.ClusterBtn.SetMinSize((150, 30))
        self.Figure20.SetMinSize((240, 300))
        self.Panel20.SetMinSize((240, 300))
        self.Figure21.SetMinSize((100, 150))
        self.Panel21.SetMinSize((100, 150))
        self.Check211.SetMinSize((50, 20))
        self.Check212.SetMinSize((50, 20))
        self.Figure22.SetMinSize((100, 150))
        self.Panel22.SetMinSize((100, 150))
        self.Check221.SetMinSize((50, 20))
        self.Check222.SetMinSize((50, 20))
        self.Figure23.SetMinSize((100, 150))
        self.Panel23.SetMinSize((100, 150))
        self.Check231.SetMinSize((50, 20))
        self.Check232.SetMinSize((50, 20))
        self.Figure24.SetMinSize((100, 150))
        self.Panel24.SetMinSize((100, 150))
        self.Check241.SetMinSize((50, 20))
        self.Check242.SetMinSize((50, 20))
        self.Figure25.SetMinSize((100, 150))
        self.Panel25.SetMinSize((100, 150))
        self.Check251.SetMinSize((50, 20))
        self.Check252.SetMinSize((50, 20))
        self.Figure26.SetMinSize((100, 150))
        self.Panel26.SetMinSize((100, 150))
        self.Check261.SetMinSize((50, 20))
        self.Check262.SetMinSize((50, 20))
        self.Figure27.SetMinSize((100, 150))
        self.Panel27.SetMinSize((100, 150))
        self.Check271.SetMinSize((50, 20))
        self.Check272.SetMinSize((50, 20))
        self.Figure28.SetMinSize((100, 150))
        self.Panel28.SetMinSize((100, 150))
        self.Check281.SetMinSize((50, 20))
        self.Check282.SetMinSize((50, 20))
        self.notebook_2_pane_2.SetMinSize((960, 341))
        self.notebook_2.SetMinSize((960, 380))
        self.Figure31.SetMinSize((140, 210))
        self.Panel31.SetMinSize((140, 210))
        self.Check311.SetMinSize((50, 20))
        self.Check312.SetMinSize((50, 20))
        self.EpureBtn.SetMinSize((140, -1))
        self.Figure32.SetMinSize((140, 210))
        self.Panel32.SetMinSize((140, 210))
        self.Check321.SetMinSize((50, 20))
        self.Check322.SetMinSize((50, 20))
        self.VpureBtn.SetMinSize((140, -1))
        self.Figure33.SetMinSize((140, 210))
        self.Panel33.SetMinSize((140, 210))
        self.Check331.SetMinSize((50, 20))
        self.Check332.SetMinSize((50, 20))
        self.SpureBtn.SetMinSize((140, -1))
        self.Figure34.SetMinSize((140, 210))
        self.Panel34.SetMinSize((140, 210))
        self.Check341.SetMinSize((50, 20))
        self.Check342.SetMinSize((50, 20))
        self.PpureBtn.SetMinSize((140, -1))
        self.button_21.SetMinSize((150, 30))
        self.button_22.SetMinSize((150, 30))
        self.button_23.SetMinSize((150, 30))
        self.notebook_3.SetMinSize((960, 300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_24 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_26 = wx.BoxSizer(wx.VERTICAL)
        sizer_59 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_77 = wx.BoxSizer(wx.VERTICAL)
        sizer_73 = wx.BoxSizer(wx.VERTICAL)
        sizer_74 = wx.BoxSizer(wx.VERTICAL)
        sizer_76 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_75 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_69 = wx.BoxSizer(wx.VERTICAL)
        sizer_70 = wx.BoxSizer(wx.VERTICAL)
        sizer_72 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_71 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_65 = wx.BoxSizer(wx.VERTICAL)
        sizer_66 = wx.BoxSizer(wx.VERTICAL)
        sizer_68 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_67 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_63 = wx.BoxSizer(wx.VERTICAL)
        sizer_36 = wx.BoxSizer(wx.VERTICAL)
        sizer_64 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_58 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_5 = wx.GridSizer(2, 4, 0, 0)
        sizer_55 = wx.BoxSizer(wx.VERTICAL)
        sizer_57 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_56 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_52 = wx.BoxSizer(wx.VERTICAL)
        sizer_54 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_53 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_49 = wx.BoxSizer(wx.VERTICAL)
        sizer_51 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_50 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_46 = wx.BoxSizer(wx.VERTICAL)
        sizer_48 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_47 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_43 = wx.BoxSizer(wx.VERTICAL)
        sizer_45 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_44 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_40 = wx.BoxSizer(wx.VERTICAL)
        sizer_42 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37 = wx.BoxSizer(wx.VERTICAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_31 = wx.BoxSizer(wx.VERTICAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_60 = wx.BoxSizer(wx.VERTICAL)
        sizer_62 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_61 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27 = wx.BoxSizer(wx.VERTICAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33.Add(self.Figure11, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel11.SetSizer(sizer_33)
        sizer_27.Add(self.Panel11, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        label_5 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, "Visible Image", style=wx.ALIGN_CENTER)
        label_5.SetMinSize((200, 30))
        sizer_27.Add(label_5, 0, wx.ALIGN_CENTER | wx.ALL, 4)
        sizer_34.Add(self.Figure12, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel12.SetSizer(sizer_34)
        sizer_27.Add(self.Panel12, 1, wx.EXPAND, 0)
        label_6 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, "Combined Image", style=wx.ALIGN_CENTER)
        label_6.SetMinSize((200, 30))
        sizer_27.Add(label_6, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        self.notebook_1_pane_2.SetSizer(sizer_27)
        self.notebook_1.AddPage(self.notebook_1_pane_2, "Image Panel")
        sizer_25.Add(self.notebook_1, 1, wx.EXPAND, 0)
        sizer_25.Add((10, 20), 0, 0, 0)
        label_8 = wx.StaticText(self.notebook_2_pane_2, wx.ID_ANY, "Cluster Num. = ")
        label_8.SetMinSize((100, 20))
        sizer_61.Add(label_8, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_61.Add(self.ClusterNum, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_60.Add(sizer_61, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_60.Add(self.ClusterBtn, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_62.Add(self.Figure20, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.Panel20.SetSizer(sizer_62)
        sizer_60.Add(self.Panel20, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_28.Add(sizer_60, 0, 0, 0)
        sizer_35.Add(self.Figure21, 1, wx.EXPAND, 0)
        self.Panel21.SetSizer(sizer_35)
        sizer_31.Add(self.Panel21, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_32.Add(self.Check211, 1, wx.ALL, 5)
        sizer_32.Add(self.Check212, 1, wx.ALL, 5)
        sizer_31.Add(sizer_32, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_31, 1, wx.EXPAND, 0)
        sizer_38.Add(self.Figure22, 1, wx.EXPAND, 0)
        self.Panel22.SetSizer(sizer_38)
        sizer_37.Add(self.Panel22, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_39.Add(self.Check221, 1, wx.ALL, 5)
        sizer_39.Add(self.Check222, 1, wx.ALL, 5)
        sizer_37.Add(sizer_39, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_37, 1, wx.EXPAND, 0)
        sizer_41.Add(self.Figure23, 1, wx.EXPAND, 0)
        self.Panel23.SetSizer(sizer_41)
        sizer_40.Add(self.Panel23, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_42.Add(self.Check231, 1, wx.ALL, 5)
        sizer_42.Add(self.Check232, 1, wx.ALL, 5)
        sizer_40.Add(sizer_42, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_40, 1, wx.EXPAND, 0)
        sizer_44.Add(self.Figure24, 1, wx.EXPAND, 0)
        self.Panel24.SetSizer(sizer_44)
        sizer_43.Add(self.Panel24, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_45.Add(self.Check241, 1, wx.ALL, 5)
        sizer_45.Add(self.Check242, 1, wx.ALL, 5)
        sizer_43.Add(sizer_45, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_43, 1, wx.EXPAND, 0)
        sizer_47.Add(self.Figure25, 1, wx.EXPAND, 0)
        self.Panel25.SetSizer(sizer_47)
        sizer_46.Add(self.Panel25, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_48.Add(self.Check251, 1, wx.ALL, 5)
        sizer_48.Add(self.Check252, 1, wx.ALL, 5)
        sizer_46.Add(sizer_48, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_46, 1, wx.EXPAND, 0)
        sizer_50.Add(self.Figure26, 1, wx.EXPAND, 0)
        self.Panel26.SetSizer(sizer_50)
        sizer_49.Add(self.Panel26, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_51.Add(self.Check261, 1, wx.ALL, 5)
        sizer_51.Add(self.Check262, 1, wx.ALL, 5)
        sizer_49.Add(sizer_51, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_49, 1, wx.EXPAND, 0)
        sizer_53.Add(self.Figure27, 1, wx.EXPAND, 0)
        self.Panel27.SetSizer(sizer_53)
        sizer_52.Add(self.Panel27, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_54.Add(self.Check271, 1, wx.ALL, 5)
        sizer_54.Add(self.Check272, 1, wx.ALL, 5)
        sizer_52.Add(sizer_54, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_52, 1, wx.EXPAND, 0)
        sizer_56.Add(self.Figure28, 1, wx.EXPAND, 0)
        self.Panel28.SetSizer(sizer_56)
        sizer_55.Add(self.Panel28, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_57.Add(self.Check281, 1, wx.ALL, 5)
        sizer_57.Add(self.Check282, 1, wx.ALL, 5)
        sizer_55.Add(sizer_57, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_55, 1, wx.EXPAND, 0)
        sizer_28.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        self.notebook_2_pane_2.SetSizer(sizer_28)
        self.notebook_2.AddPage(self.notebook_2_pane_2, "Cluster Panel")
        sizer_26.Add(self.notebook_2, 1, wx.EXPAND, 0)
        sizer_26.Add((20, 5), 0, 0, 0)
        sizer_58.Add(self.Figure31, 1, wx.EXPAND, 0)
        self.Panel31.SetSizer(sizer_58)
        sizer_36.Add(self.Panel31, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_64.Add(self.Check311, 1, wx.ALL, 5)
        sizer_64.Add(self.Check312, 1, wx.ALL, 5)
        sizer_36.Add(sizer_64, 1, wx.EXPAND, 0)
        sizer_63.Add(sizer_36, 1, wx.EXPAND, 0)
        sizer_63.Add(self.EpureBtn, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_59.Add(sizer_63, 1, wx.EXPAND, 0)
        sizer_67.Add(self.Figure32, 1, wx.EXPAND, 0)
        self.Panel32.SetSizer(sizer_67)
        sizer_66.Add(self.Panel32, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_68.Add(self.Check321, 1, wx.ALL, 5)
        sizer_68.Add(self.Check322, 1, wx.ALL, 5)
        sizer_66.Add(sizer_68, 1, wx.EXPAND, 0)
        sizer_65.Add(sizer_66, 1, wx.EXPAND, 0)
        sizer_65.Add(self.VpureBtn, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_59.Add(sizer_65, 1, wx.EXPAND, 0)
        sizer_71.Add(self.Figure33, 1, wx.EXPAND, 0)
        self.Panel33.SetSizer(sizer_71)
        sizer_70.Add(self.Panel33, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_72.Add(self.Check331, 1, wx.ALL, 5)
        sizer_72.Add(self.Check332, 1, wx.ALL, 5)
        sizer_70.Add(sizer_72, 1, wx.EXPAND, 0)
        sizer_69.Add(sizer_70, 1, wx.EXPAND, 0)
        sizer_69.Add(self.SpureBtn, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_59.Add(sizer_69, 1, wx.EXPAND, 0)
        sizer_75.Add(self.Figure34, 1, wx.EXPAND, 0)
        self.Panel34.SetSizer(sizer_75)
        sizer_74.Add(self.Panel34, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_76.Add(self.Check341, 1, wx.ALL, 5)
        sizer_76.Add(self.Check342, 1, wx.ALL, 5)
        sizer_74.Add(sizer_76, 1, wx.EXPAND, 0)
        sizer_73.Add(sizer_74, 1, wx.EXPAND, 0)
        sizer_73.Add(self.PpureBtn, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_59.Add(sizer_73, 1, wx.EXPAND, 0)
        sizer_77.Add((20, 50), 1, 0, 0)
        sizer_77.Add(self.button_21, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_77.Add(self.button_22, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_77.Add(self.button_23, 0, wx.ALIGN_CENTER | wx.ALL, 5)
        sizer_77.Add((20, 50), 1, 0, 0)
        sizer_59.Add(sizer_77, 1, wx.EXPAND, 0)
        self.notebook_3_pane_2.SetSizer(sizer_59)
        self.notebook_3.AddPage(self.notebook_3_pane_2, "Extract Panel")
        sizer_26.Add(self.notebook_3, 1, wx.EXPAND, 0)
        sizer_25.Add(sizer_26, 1, wx.EXPAND, 0)
        sizer_24.Add(sizer_25, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_24)
        self.Layout()
        # end wxGlade

    def KclusterEve(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'KclusterEve' not implemented!")
        event.Skip()
        X = np.copy(G.Combine2D)

        G.ClusterNum = int(self.ClusterNum.GetValue())

        estimator = KMeans(n_clusters=G.ClusterNum)  #构造聚类器
        estimator.fit(X)  # 聚类

        #labels = G.labels

        labels = np.zeros((G.m*G.n, G.ClusterNum+1))
        #label_pred =
        labels[:, 0] = np.copy(estimator.labels_.reshape(-1, 1)[:, 0])  # 获取聚类标签


        self.matplotlib_axes20.imshow(labels[:, 0].reshape(G.m, G.n), cmap='jet')
        self.matplotlib_axes20.set_xticks([])
        self.matplotlib_axes20.set_yticks([])
        self.Figure20.draw()

        for ii in range(G.ClusterNum):
            labels[:, ii+1] = 1*(labels[:,0] == ii) + 0*(labels[:,0] != ii)

        try:
            self.matplotlib_axes21.cla()
            self.matplotlib_axes21.imshow(labels[:, 1].reshape(G.m, G.n), cmap='jet')
            self.matplotlib_axes21.set_xticks([])
            self.matplotlib_axes21.set_yticks([])
            self.Figure21.draw()
        except:
            pass

        try:
            self.matplotlib_axes22.cla()
            self.matplotlib_axes22.imshow(labels[:, 2].reshape(G.m, G.n), cmap='jet')
            self.matplotlib_axes22.set_xticks([])
            self.matplotlib_axes22.set_yticks([])
            self.Figure22.draw()
        except:
            pass

        try:
            self.matplotlib_axes23.cla()
            self.matplotlib_axes23.imshow(labels[:, 3].reshape(G.m, G.n), cmap='jet')
            self.matplotlib_axes23.set_xticks([])
            self.matplotlib_axes23.set_yticks([])
            self.Figure23.draw()
        except:
            pass

        try:
            self.matplotlib_axes24.cla()
            self.matplotlib_axes24.imshow(labels[:, 4].reshape(G.m, G.n), cmap='jet')
            self.matplotlib_axes24.set_xticks([])
            self.matplotlib_axes24.set_yticks([])
            self.Figure24.draw()
        except:
            pass

        try:
            self.matplotlib_axes25.cla()
            self.matplotlib_axes25.imshow(labels[:, 5].reshape(G.m, G.n), cmap='jet')
            self.matplotlib_axes25.set_xticks([])
            self.matplotlib_axes25.set_yticks([])
            self.Figure25.draw()
        except:
            pass

        try:
            self.matplotlib_axes26.cla()
            self.matplotlib_axes26.imshow(labels[:, 6].reshape(G.m, G.n), cmap='jet')
            self.matplotlib_axes26.set_xticks([])
            self.matplotlib_axes26.set_yticks([])
            self.Figure26.draw()
        except:
            pass

        try:
            self.matplotlib_axes27.cla()
            self.matplotlib_axes27.imshow(labels[:, 7].reshape(G.m, G.n), cmap='jet')
            self.matplotlib_axes27.set_xticks([])
            self.matplotlib_axes27.set_yticks([])
            self.Figure27.draw()
        except:
            pass

        try:
            self.matplotlib_axes28.cla()
            self.matplotlib_axes28.imshow(labels[:, 8].reshape(G.m, G.n), cmap='jet')
            self.matplotlib_axes28.set_xticks([])
            self.matplotlib_axes28.set_yticks([])
            self.Figure28.draw()
        except:
            pass

        a = labels[:, 2].reshape(G.m, G.n)
        G.labels = labels


    def EpureEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'EpureEve' not implemented!")
        #event.Skip()

        global Epidermis, VascularBundle, Sclerenchyma, Parenchyma

        if self.Check311.GetValue():
            Epidermis = np.copy(G.Epidermis)
        else:
            Epidermis = np.zeros((G.m, G.n))

        try:
            if self.Check211.GetValue():
                Epidermis = Epidermis + G.labels[:, 1].reshape(G.m, G.n)
            if self.Check221.GetValue():
                Epidermis = Epidermis + G.labels[:, 2].reshape(G.m, G.n)
            if self.Check231.GetValue():
                Epidermis = Epidermis + G.labels[:, 3].reshape(G.m, G.n)
            if self.Check241.GetValue():
                Epidermis = Epidermis + G.labels[:, 4].reshape(G.m, G.n)
            if self.Check251.GetValue():
                Epidermis = Epidermis + G.labels[:, 5].reshape(G.m, G.n)
            if self.Check261.GetValue():
                Epidermis = Epidermis + G.labels[:, 6].reshape(G.m, G.n)
            if self.Check271.GetValue():
                Epidermis = Epidermis + G.labels[:, 7].reshape(G.m, G.n)
            if self.Check281.GetValue():
                Epidermis = Epidermis + G.labels[:, 8].reshape(G.m, G.n)
        except:
            pass

        try:
            if self.Check321.GetValue():
                Epidermis = Epidermis + VascularBundle
            if self.Check331.GetValue():
                Epidermis = Epidermis + Sclerenchyma
            if self.Check341.GetValue():
                Epidermis = Epidermis + Parenchyma
        except:
            pass

        try:
            if self.Check212.GetValue():
                Epidermis = Epidermis - G.labels[:, 1].reshape(G.m, G.n)
            if self.Check222.GetValue():
                Epidermis = Epidermis - G.labels[:, 2].reshape(G.m, G.n)
            if self.Check232.GetValue():
                Epidermis = Epidermis - G.labels[:, 3].reshape(G.m, G.n)
            if self.Check242.GetValue():
                Epidermis = Epidermis - G.labels[:, 4].reshape(G.m, G.n)
            if self.Check252.GetValue():
                Epidermis = Epidermis - G.labels[:, 5].reshape(G.m, G.n)
            if self.Check262.GetValue():
                Epidermis = Epidermis - G.labels[:, 6].reshape(G.m, G.n)
            if self.Check272.GetValue():
                Epidermis = Epidermis - G.labels[:, 7].reshape(G.m, G.n)
            if self.Check282.GetValue():
                Epidermis = Epidermis - G.labels[:, 8].reshape(G.m, G.n)
        except:
            pass

        try:
            if self.Check322.GetValue():
                Epidermis = Epidermis - VascularBundle
            if self.Check332.GetValue():
                Epidermis = Epidermis - Sclerenchyma
            if self.Check342.GetValue():
                Epidermis = Epidermis - Parenchyma
        except:
            pass

        Epidermis[Epidermis > 1] = 1

        G.Epidermis = Epidermis

        self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
        # setParent是GRPurge的方法之一
        # def setParent(self, parent, parentName, data, figure, axes)
        self.frame.setParent(self, 'Epidermis', G.Epidermis, self.Figure31, self.matplotlib_axes31)

        self.frame.Show()
        self.Hide()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1366, 768))
        self.frame.SetSize((750, 750))
        # 初始化绘图
        self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='jet')
        self.frame.matplotlib_axes.set_xticks([])
        self.frame.matplotlib_axes.set_yticks([])
        self.frame.Figure.draw()


    def VpureEve(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'VpureEve' not implemented!")
        event.Skip()

        global Epidermis, VascularBundle, Sclerenchyma, Parenchyma

        if self.Check321.GetValue():
            VascularBundle = np.copy(G.VascularBundle)
        else:
            VascularBundle = np.zeros((G.m, G.n))

        try:
            if self.Check211.GetValue():
                VascularBundle = VascularBundle + G.labels[:, 1].reshape(G.m, G.n)
            if self.Check221.GetValue():
                VascularBundle = VascularBundle + G.labels[:, 2].reshape(G.m, G.n)
            if self.Check231.GetValue():
                VascularBundle = VascularBundle + G.labels[:, 3].reshape(G.m, G.n)
            if self.Check241.GetValue():
                VascularBundle = VascularBundle + G.labels[:, 4].reshape(G.m, G.n)
            if self.Check251.GetValue():
                VascularBundle = VascularBundle + G.labels[:, 5].reshape(G.m, G.n)
            if self.Check261.GetValue():
                VascularBundle = VascularBundle + G.labels[:, 6].reshape(G.m, G.n)
            if self.Check271.GetValue():
                VascularBundle = VascularBundle + G.labels[:, 7].reshape(G.m, G.n)
            if self.Check281.GetValue():
                VascularBundle = VascularBundle + G.labels[:, 8].reshape(G.m, G.n)
        except:
            pass

        try:
            if self.Check311.GetValue():
                VascularBundle = VascularBundle + Epidermis
            if self.Check331.GetValue():
                VascularBundle = VascularBundle + Sclerenchyma
            if self.Check341.GetValue():
                VascularBundle = VascularBundle + Parenchyma
        except:
            pass

        try:
            if self.Check212.GetValue():
                VascularBundle = VascularBundle - G.labels[:, 1].reshape(G.m, G.n)
            if self.Check222.GetValue():
                VascularBundle = VascularBundle - G.labels[:, 2].reshape(G.m, G.n)
            if self.Check232.GetValue():
                VascularBundle = VascularBundle - G.labels[:, 3].reshape(G.m, G.n)
            if self.Check242.GetValue():
                VascularBundle = VascularBundle - G.labels[:, 4].reshape(G.m, G.n)
            if self.Check252.GetValue():
                VascularBundle = VascularBundle - G.labels[:, 5].reshape(G.m, G.n)
            if self.Check262.GetValue():
                VascularBundle = VascularBundle - G.labels[:, 6].reshape(G.m, G.n)
            if self.Check272.GetValue():
                VascularBundle = VascularBundle - G.labels[:, 7].reshape(G.m, G.n)
            if self.Check282.GetValue():
                VascularBundle = VascularBundle - G.labels[:, 8].reshape(G.m, G.n)
        except:
            pass

        try:
            if self.Check312.GetValue():
                VascularBundle = VascularBundle - Epidermis
            if self.Check332.GetValue():
                VascularBundle = VascularBundle - Sclerenchyma
            if self.Check342.GetValue():
                VascularBundle = VascularBundle - Parenchyma
        except:
            pass

        VascularBundle[VascularBundle > 1] = 1

        G.VascularBundle = VascularBundle

        self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
        # setParent是GRPurge的方法之一
        # def setParent(self, parent, parentName, data, figure, axes)
        self.frame.setParent(self, 'VascularBundle', G.VascularBundle, self.Figure32, self.matplotlib_axes32)

        self.frame.Show()
        self.Hide()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1366, 768))
        self.frame.SetSize((750, 750))
        # 初始化绘图
        self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='jet')
        self.frame.matplotlib_axes.set_xticks([])
        self.frame.matplotlib_axes.set_yticks([])
        self.frame.Figure.draw()

    def SpureEve(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'SpureEve' not implemented!")
        event.Skip()

        global Epidermis, VascularBundle, Sclerenchyma, Parenchyma

        if self.Check331.GetValue():
            Sclerenchyma = np.copy(G.Sclerenchyma)
        else:
            Sclerenchyma = np.zeros((G.m, G.n))

        try:
            if self.Check211.GetValue():
                Sclerenchyma = Sclerenchyma + G.labels[:, 1].reshape(G.m, G.n)
            if self.Check221.GetValue():
                Sclerenchyma = Sclerenchyma + G.labels[:, 2].reshape(G.m, G.n)
            if self.Check231.GetValue():
                Sclerenchyma = Sclerenchyma + G.labels[:, 3].reshape(G.m, G.n)
            if self.Check241.GetValue():
                Sclerenchyma = Sclerenchyma + G.labels[:, 4].reshape(G.m, G.n)
            if self.Check251.GetValue():
                Sclerenchyma = Sclerenchyma + G.labels[:, 5].reshape(G.m, G.n)
            if self.Check261.GetValue():
                Sclerenchyma = Sclerenchyma + G.labels[:, 6].reshape(G.m, G.n)
            if self.Check271.GetValue():
                Sclerenchyma = Sclerenchyma + G.labels[:, 7].reshape(G.m, G.n)
            if self.Check281.GetValue():
                Sclerenchyma = Sclerenchyma + G.labels[:, 8].reshape(G.m, G.n)
        except:
            pass

        try:
            if self.Check311.GetValue():
                Sclerenchyma = Sclerenchyma + Epidermis
            if self.Check321.GetValue():
                Sclerenchyma = Sclerenchyma + VascularBundle
            if self.Check341.GetValue():
                Sclerenchyma = Sclerenchyma + Parenchyma
        except:
            pass

        try:
            if self.Check212.GetValue():
                Sclerenchyma = Sclerenchyma - G.labels[:, 1].reshape(G.m, G.n)
            if self.Check222.GetValue():
                Sclerenchyma = Sclerenchyma - G.labels[:, 2].reshape(G.m, G.n)
            if self.Check232.GetValue():
                Sclerenchyma = Sclerenchyma - G.labels[:, 3].reshape(G.m, G.n)
            if self.Check242.GetValue():
                Sclerenchyma = Sclerenchyma - G.labels[:, 4].reshape(G.m, G.n)
            if self.Check252.GetValue():
                Sclerenchyma = Sclerenchyma - G.labels[:, 5].reshape(G.m, G.n)
            if self.Check262.GetValue():
                Sclerenchyma = Sclerenchyma - G.labels[:, 6].reshape(G.m, G.n)
            if self.Check272.GetValue():
                Sclerenchyma = Sclerenchyma - G.labels[:, 7].reshape(G.m, G.n)
            if self.Check282.GetValue():
                Sclerenchyma = Sclerenchyma - G.labels[:, 8].reshape(G.m, G.n)
        except:
            pass

        try:
            if self.Check312.GetValue():
                Sclerenchyma = Sclerenchyma - Epidermis
            if self.Check322.GetValue():
                Sclerenchyma = Sclerenchyma - VascularBundle
            if self.Check342.GetValue():
                Sclerenchyma = Sclerenchyma - Parenchyma
        except:
            pass

        Sclerenchyma[Sclerenchyma > 1] = 1

        G.Sclerenchyma = Sclerenchyma

        self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
        # setParent是GRPurge的方法之一
        # def setParent(self, parent, parentName, data, figure, axes)
        self.frame.setParent(self, 'Sclerenchyma', G.Sclerenchyma, self.Figure33, self.matplotlib_axes33)

        self.frame.Show()
        self.Hide()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1366, 768))
        self.frame.SetSize((750, 750))
        # 初始化绘图
        self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='jet')
        self.frame.matplotlib_axes.set_xticks([])
        self.frame.matplotlib_axes.set_yticks([])
        self.frame.Figure.draw()

    def PpureEve(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'PpureEve' not implemented!")
        event.Skip()

        global Epidermis, VascularBundle, Sclerenchyma, Parenchyma

        if self.Check341.GetValue():
            Parenchyma = np.copy(G.Parenchyma)
        else:
            Parenchyma = np.zeros((G.m, G.n))

        try:
            if self.Check211.GetValue():
                Parenchyma = Parenchyma + G.labels[:, 1].reshape(G.m, G.n)
            if self.Check221.GetValue():
                Parenchyma = Parenchyma + G.labels[:, 2].reshape(G.m, G.n)
            if self.Check231.GetValue():
                Parenchyma = Parenchyma + G.labels[:, 3].reshape(G.m, G.n)
            if self.Check241.GetValue():
                Parenchyma = Parenchyma + G.labels[:, 4].reshape(G.m, G.n)
            if self.Check251.GetValue():
                Parenchyma = Parenchyma + G.labels[:, 5].reshape(G.m, G.n)
            if self.Check261.GetValue():
                Parenchyma = Parenchyma + G.labels[:, 6].reshape(G.m, G.n)
            if self.Check271.GetValue():
                Parenchyma = Parenchyma + G.labels[:, 7].reshape(G.m, G.n)
            if self.Check281.GetValue():
                Parenchyma = Parenchyma + G.labels[:, 8].reshape(G.m, G.n)
        except:
            pass

        try:
            if self.Check311.GetValue():
                Parenchyma = Parenchyma + Epidermis
            if self.Check321.GetValue():
                Parenchyma = Parenchyma + VascularBundle
            if self.Check331.GetValue():
                Parenchyma = Parenchyma + Sclerenchyma
        except:
            pass

        try:
            if self.Check212.GetValue():
                Parenchyma = Parenchyma - G.labels[:, 1].reshape(G.m, G.n)
            if self.Check222.GetValue():
                Parenchyma = Parenchyma - G.labels[:, 2].reshape(G.m, G.n)
            if self.Check232.GetValue():
                Parenchyma = Parenchyma - G.labels[:, 3].reshape(G.m, G.n)
            if self.Check242.GetValue():
                Parenchyma = Parenchyma - G.labels[:, 4].reshape(G.m, G.n)
            if self.Check252.GetValue():
                Parenchyma = Parenchyma - G.labels[:, 5].reshape(G.m, G.n)
            if self.Check262.GetValue():
                Parenchyma = Parenchyma - G.labels[:, 6].reshape(G.m, G.n)
            if self.Check272.GetValue():
                Parenchyma = Parenchyma - G.labels[:, 7].reshape(G.m, G.n)
            if self.Check282.GetValue():
                Parenchyma = Parenchyma - G.labels[:, 8].reshape(G.m, G.n)
        except:
            pass

        try:
            if self.Check312.GetValue():
                Parenchyma = Parenchyma - Epidermis
            if self.Check322.GetValue():
                Parenchyma = Parenchyma - VascularBundle
            if self.Check332.GetValue():
                Parenchyma = Parenchyma - Sclerenchyma
        except:
            pass

        Parenchyma[Parenchyma > 1] = 1

        G.Parenchyma = Parenchyma

        self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
        # setParent是GRPurge的方法之一
        # def setParent(self, parent, parentName, data, figure, axes)
        self.frame.setParent(self, 'Parenchyma', G.Parenchyma, self.Figure34, self.matplotlib_axes34 )

        self.frame.Show()
        self.Hide()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1366, 768))
        self.frame.SetSize((750, 750))
        # 初始化绘图
        self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='jet')
        self.frame.matplotlib_axes.set_xticks([])
        self.frame.matplotlib_axes.set_yticks([])
        self.frame.Figure.draw()

    def BackEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'BackEve' not implemented!")
        #event.Skip()
        self.Destroy()
        self.company.Show()

    def OverlapCorrect(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'OverlapCorrect' not implemented!")
        #event.Skip()
        #G.Epidermis
        #G.VascularBundle
        # Exclude inter-organizational interference
        try:
            #k = G.VascularBundle * (1-G.Epidermis)
            G.VascularBundle = G.VascularBundle*(1-G.Epidermis)
            self.matplotlib_axes32.cla()
            self.matplotlib_axes32.imshow(G.VascularBundle, cmap='jet')
            self.matplotlib_axes32.set_xticks([])
            self.matplotlib_axes32.set_yticks([])
            self.Figure32.draw()

            G.Sclerenchyma = G.Sclerenchyma * (1-G.Epidermis) * (1-G.VascularBundle)
            self.matplotlib_axes33.cla()
            self.matplotlib_axes33.imshow(G.Sclerenchyma, cmap='jet')
            self.matplotlib_axes33.set_xticks([])
            self.matplotlib_axes33.set_yticks([])
            self.Figure33.draw()

            G.Parenchyma = G.Parenchyma * (1-G.Epidermis) * (1-G.VascularBundle) * (1-G.Sclerenchyma)
            self.matplotlib_axes34.cla()
            self.matplotlib_axes34.imshow(G.Parenchyma, cmap='jet')
            self.matplotlib_axes34.set_xticks([])
            self.matplotlib_axes34.set_yticks([])
            self.Figure34.draw()
        except:
            pass

    def ComfirmEve(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'ComfirmEve' not implemented!")
        #event.Skip()
        self.Destroy()
        #print(self.parent)

        # Create the dialog. In this case the current directory is forced as the starting
        # directory for the dialog, and no default file name is forced. This can easilly
        # be changed in your program. This is an 'save' dialog.
        #
        # Unlike the 'open dialog' example found elsewhere, this example does NOT
        # force the current working directory to change if the user chooses a different
        # directory than the one initially set.
        dlg = wx.FileDialog(
            self, message="Save TissueS as ...", defaultDir="",
            defaultFile="TissueS.npz", wildcard=G.wildcard_npz, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
        )

        # This sets the default filter that the user will initially see. Otherwise,
        # the first filter in the list will be used by default.
        dlg.SetFilterIndex(0)

        # Show the dialog and retrieve the user response. If it is the OK response,
        # process the data.
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            print(path)
            np.savez(path, Epidermis=G.Epidermis, VascularBundle=G.VascularBundle,
                     Sclerenchyma=G.Sclerenchyma, Parenchyma=G.Parenchyma)

            # Normally, at this point you would save your data using the file and path
            # data that the user provided to you, but since we didn't actually start
            # with any data to work with, that would be difficult.
            # You might want to add some error checking :-)

        # Destroy the dialog. Don't do this until you are done with it!
        # BAD things can happen otherwise!
        dlg.Destroy()

        self.parent.Show()
        
# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
