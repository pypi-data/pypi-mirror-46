from .blueprint import Context, RpcWrappedCallable
from .ctx import AppContext
from .orm import GeneratedProtocolMessageType, Message
from .server import Server


class TestContext(Context):
    is_active = lambda x:...
    time_remaining = lambda x:...
    cancel = lambda x:...
    disable_next_message_compression = lambda x:...
    invocation_metadata = lambda x:...
    peer = lambda x:...
    peer_identities = lambda x:...
    peer_identity_key = lambda x:...
    auth_context = lambda x:...
    add_callback = lambda x, k:...
    send_initial_metadata = lambda x, k:...
    set_trailing_metadata = lambda x, k:...
    abort_with_status = lambda x, k:...
    set_code = lambda x, k:...
    set_details = lambda x, k:...
    abort = lambda x, k, v:...


class Client:
    def __init__(self, app: Server):
        self.app = app

    def rpc_call(self,
                 method: RpcWrappedCallable,
                 request: Message,
                 context=TestContext()) -> GeneratedProtocolMessageType:
        for name, bp in self.app.blueprints.items():
            for rpc in bp.service_meta.rpcs:
                rpc.ctx = AppContext(self)
        return method(origin_request=request._message, context=context)
