
control_opcode = [
    ('Friend Poll', 0x01),
    ('Friend Update', 0x02),
    ('Friend Request', 0x03),
    ('Friend Offer', 0x04),
    ('Friend Clear', 0x05),
    ('Friend Clear Confirm', 0x06),
    ('Friend Subscription List Add', 0x07),
    ('Friend Subscription List Remove', 0x08),
    ('Friend Subscription List Confirm', 0x09),
    ('Heartbeat', 0x0A),
]

control_opcodes = [op[1] for op in control_opcode]

sig_models = [
    ('Configuration Server', 0x0000),
    ('Configuration Client', 0x0001),
    ('Health Server', 0x0002),
    ('Health Client', 0x0003),
]

sig_opcode = [
    ('Config AppKey', 'Add', 0x00),
    ('Config AppKey', 'Delete', 0x8000),
    ('Config AppKey', 'Get', 0x8001),
    ('Config AppKey', 'List', 0x8002),
    ('Config AppKey', 'Status', 0x8003),
    ('Config AppKey', 'Update', 0x01),
    ('Config Beacon', 'Get', 0x8009),
    ('Config Beacon', 'Set', 0x800A),
    ('Config Beacon', 'Status', 0x800B),
    ('Config Composition Data', 'Get', 0x8008),
    ('Config Composition Data', 'Status', 0x02),
    ('Config Config Model Publication', 'Set', 0x03),
    ('Config Default TTL', 'Get', 0x800C),
    ('Config Default TTL', 'Set', 0x800D),
    ('Config Default TTL', 'Status', 0x800E),
    ('Config Friend', 'Get', 0x800F),
    ('Config Friend', 'Set', 0x8010),
    ('Config Friend', 'Status', 0x8011),
    ('Config GATT Proxy', 'Get', 0x8012),
    ('Config GATT Proxy', 'Set', 0x8013),
    ('Config GATT Proxy', 'Status', 0x8014),
    ('Config Heartbeat Publication', 'Get', 0x8038),
    ('Config Heartbeat Publication', 'Set', 0x8039),
    ('Config Heartbeat Publication', 'Status', 0x06),
    ('Config Heartbeat Subscription', 'Get', 0x803A),
    ('Config Heartbeat Subscription', 'Set', 0x803B),
    ('Config Heartbeat Subscription', 'Status', 0x803C),
    ('Config Key Refresh Phase', 'Get', 0x8015),
    ('Config Key Refresh Phase', 'Set', 0x8016),
    ('Config Key Refresh Phase', 'Status', 0x8017),
    ('Config Low Power Node PollTimeout', 'Get', 0x802D),
    ('Config Low Power Node PollTimeout', 'Status', 0x802E),
    ('Config Model App', 'Bind', 0x803D),
    ('Config Model App', 'Status', 0x803E),
    ('Config Model App', 'Unbind', 0x803F),
    ('Config Model Publication', 'Get', 0x8018),
    ('Config Model Publication', 'Status', 0x8019),
    ('Config Model Publication Virtual Address', 'Set', 0x801A),
    ('Config Model Subscription', 'Add', 0x801B),
    ('Config Model Subscription', 'Delete', 0x801C),
    ('Config Model Subscription Delete', 'All', 0x801D),
    ('Config Model Subscription', 'Overwrite', 0x801E),
    ('Config Model Subscription', 'Status', 0x801F),
    ('Config Model Subscription Virtual Address', 'Add', 0x8020),
    ('Config Model Subscription Virtual Address', 'Delete', 0x8021),
    ('Config Model Subscription Virtual Address', 'Overwrite', 0x8022),
    ('Config NetKey', 'Add', 0x8040),
    ('Config NetKey', 'Delete', 0x8041),
    ('Config NetKey', 'Get', 0x8042),
    ('Config NetKey', 'List', 0x8043),
    ('Config NetKey', 'Status', 0x8044),
    ('Config NetKey', 'Update', 0x8045),
    ('Config Network Transmit', 'Get', 0x8023),
    ('Config Network Transmit', 'Set', 0x8024),
    ('Config Network Transmit', 'Status', 0x8025),
    ('Config Node Identity', 'Get', 0x8046),
    ('Config Node Identity', 'Set', 0x8047),
    ('Config Node Identity', 'Status', 0x8048),
    ('Config Node', 'Reset', 0x8049),
    ('Config Node Reset', 'Status', 0x804A),
    ('Config Relay', 'Get', 0x8026),
    ('Config Relay', 'Set', 0x8027),
    ('Config Relay', 'Status', 0x8028),
    ('Config SIG Model App', 'Get', 0x804B),
    ('Config SIG Model App', 'List', 0x804C),
    ('Config SIG Model Subscription', 'Get', 0x8029),
    ('Config SIG Model Subscription', 'List', 0x802A),
    ('Config Vendor Model App', 'Get', 0x804D),
    ('Config Vendor Model App', 'List', 0x804E),
    ('Config Vendor Model Subscription', 'Get', 0x802B),
    ('Config Vendor Model Subscription', 'List', 0x802C),
    ('Health Attention', 'Get', 0x8004),
    ('Health Attention', 'Set', 0x8005),
    ('Health Attention Set', 'Unacknowledged', 0x8006),
    ('Health Attention', 'Status', 0x8007),
    ('Health Current', 'Status', 0x04),
    ('Health Fault', 'Clear', 0x802F),
    ('Health Fault Clear', 'Unacknowledged', 0x8030),
    ('Health Fault', 'Get', 0x8031),
    ('Health Fault', 'Status', 0x05),
    ('Health Fault', 'Test', 0x8032),
    ('Health Fault Test', 'Unacknowledged', 0x8033),
    ('Health Period', 'Get', 0x8034),
    ('Health Period', 'Set', 0x8035),
    ('Health Period Set', 'Unacknowledged', 0x8036),
    ('Health Period', 'Status', 0x8037),
]

sig_opcodes = [op[1] for op in sig_opcode]

sig_status = [
    ('Success', 0x00),
    ('Invalid Address', 0x01),
    ('Invalid Model', 0x02),
    ('Invalid AppKey Index', 0x03),
    ('Invalid NetKey Index', 0x04),
    ('Insufficient Resources', 0x05),
    ('Key Index Already Stored', 0x06),
    ('Invalid Publish Parameters', 0x07),
    ('Not a Subscribe Model', 0x08),
    ('Storage Failure', 0x09),
    ('Feature Not Supported', 0x0A),
    ('Cannot Update', 0x0B),
    ('Cannot Remove', 0x0C),
    ('Cannot Bind', 0x0D),
    ('Temporarily Unable to Change State', 0x0E),
    ('Cannot Set', 0x0F),
    ('Unspecified Error', 0x10),
    ('Invalid Binding', 0x11),
]

application_models = [
    ('Generic OnOff Server', 0x1000),
    ('Generic OnOff Client', 0x1001),
    ('Generic Level Server', 0x1002),
    ('Generic Level Client', 0x1003),
    ('Generic Default Transition Time Server', 0x1004),
    ('Generic Default Transition Time Client', 0x1005),
    ('Generic Power OnOff Server', 0x1006),
    ('Generic Power OnOff Setup Server', 0x1007),
    ('Generic Power OnOff Client', 0x1008),
    ('Generic Power Level Server', 0x1009),
    ('Generic Power Level Setup Server', 0x100A),
    ('Generic Power Level Client', 0x100B),
    ('Generic Battery Server', 0x100C),
    ('Generic Battery Client', 0x100D),
    ('Generic Location Server', 0x100E),
    ('Generic Location Setup Server', 0x100F),
    ('Generic Location Client', 0x1010),
    ('Generic Admin Property Server', 0x1011),
    ('Generic Manufacturer Property Server', 0x1012),
    ('Generic User Property Server', 0x1013),
    ('Generic Client Property Server', 0x1014),
    ('Generic Property Client', 0x1015),
    ('Sensors Sensor Server', 0x1100),
    ('Sensor Setup Server', 0x1101),
    ('Sensor Client', 0x1102),
    ('Time and Scenes Time Server', 0x1200),
    ('Time Setup Server', 0x1201),
    ('Time Client', 0x1202),
    ('Scene Server', 0x1203),
    ('Scene Setup Server', 0x1204),
    ('Scene Client', 0x1205),
    ('Scheduler Server', 0x1206),
    ('Scheduler Setup Server', 0x1207),
    ('Scheduler Client', 0x1208),
    ('Lighting Light Lightness Server', 0x1300),
    ('Light Lightness Setup Server', 0x1301),
    ('Light Lightness Client', 0x1302),
    ('Light CTL Server', 0x1303),
    ('Light CTL Setup Server', 0x1304),
    ('Light CTL Client', 0x1305),
    ('Light CTL Temperature Server', 0x1306),
    ('Light HSL Server', 0x1307),
    ('Light HSL Setup Server', 0x1308),
    ('Light HSL Client', 0x1309),
    ('Light HSL Hue Server', 0x130A),
    ('Light HSL Saturation Server', 0x130B),
    ('Light xyL Server', 0x130C),
    ('Light xyL Setup Server', 0x130D),
    ('Light xyL Client', 0x130E),
    ('Light LC Server', 0x130F),
    ('Light LC Setup Server', 0x1310),
    ('Light LC Client', 0x1311),
]

application_status = [
    ('Success', 0x00),
    ('Cannot Set Range Min', 0x01),
    ('Cannot Set Range Max', 0x02),
]

application_opcode = [
    ('Generic OnOff', 'Get', 0x8201, False),
    ('Generic OnOff', 'Set', 0x8202, False),
    ('Generic OnOff', 'Set Unacknowledged', 0x8203, True),
    ('Generic OnOff', 'Status', 0x8204, False),
    ('Generic Level', 'Get', 0x8205, False),
    ('Generic Level', 'Set', 0x8206, False),
    ('Generic Level', 'Set Unacknowledged', 0x8207, True),
    ('Generic Level', 'Status', 0x8208, False),
    ('Generic Delta', 'Set', 0x8209, False),
    ('Generic Delta', 'Set Unacknowledged', 0x820a, True),
    ('Generic Move', 'Set', 0x820b, False),
    ('Generic Move', 'Set Unacknowledged', 0x820c, True),
    ('Generic Default Transition Time', 'Get', 0x820d, False),
    ('Generic Default Transition Time', 'Set', 0x820e, False),
    ('Generic Default Transition Time', 'Set Unacknowledged', 0x820f, True),
    ('Generic Default Transition Time', 'Status', 0x8210, False),
    ('Generic OnPowerUp', 'Get', 0x8211, False),
    ('Generic OnPowerUp', 'Status', 0x8212, False),
    ('Generic OnPowerUp', 'Set', 0x8213, False),
    ('Generic OnPowerUp', 'Set Unacknowledged', 0x8214, True),
    ('Generic Power Level', 'Get', 0x8215, False),
    ('Generic Power Level', 'Set', 0x8216, False),
    ('Generic Power Level', 'Set Unacknowledged', 0x8217, True),
    ('Generic Power Level', 'Status', 0x8218, False),
    ('Generic Power Last', 'Get', 0x8219, False),
    ('Generic Power Last', 'Status', 0x821a, False),
    ('Generic Power Default', 'Get', 0x821b, False),
    ('Generic Power Default', 'Status', 0x821c, False),
    ('Generic Power Range', 'Get', 0x821d, False),
    ('Generic Power Range', 'Status', 0x821e, False),
    ('Generic Power Default', 'Set', 0x821f, False),
    ('Generic Power Default', 'Set Unacknowledged', 0x8220, True),
    ('Generic Power Range', 'Set', 0x8221, False),
    ('Generic Power Range', 'Set Unacknowledged', 0x8222, True),
    ('Generic Battery', 'Get', 0x8223, False),
    ('Generic Battery', 'Status', 0x8224, False),
    ('Generic Location Global', 'Get', 0x8225, False),
    ('Generic Location Global', 'Status', 0x40, False),
    ('Generic Location Local', 'Get', 0x8226, False),
    ('Generic Location Local', 'Status', 0x8227, False),
    ('Generic Location Global', 'Set', 0x41, False),
    ('Generic Location Global', 'Set Unacknowledged', 0x42, True),
    ('Generic Location Local', 'Set', 0x8228, False),
    ('Generic Location Local', 'Set Unacknowledged', 0x8229, True),
    ('Generic Manufacturer Properties', 'Get', 0x822a, False),
    ('Generic Manufacturer Properties', 'Status', 0x43, False),
    ('Generic Manufacturer Property', 'Get', 0x822b, False),
    ('Generic Manufacturer Property', 'Set', 0x44, False),
    ('Generic Manufacturer Property', 'Set Unacknowledged', 0x45, True),
    ('Generic Manufacturer Property', 'Status', 0x46, False),
    ('Generic Admin Properties', 'Get', 0x822c, False),
    ('Generic Admin Properties', 'Status', 0x47, False),
    ('Generic Admin Property', 'Get', 0x822d, False),
    ('Generic Admin Property', 'Set', 0x48, False),
    ('Generic Admin Property', 'Set Unacknowledged', 0x49, True),
    ('Generic Admin Property', 'Status', 0x4a, False),
    ('Generic User Properties', 'Get', 0x822e, False),
    ('Generic User Properties', 'Status', 0x4b, False),
    ('Generic User Property', 'Get', 0x822f, False),
    ('Generic User Property', 'Set', 0x4c, False),
    ('Generic User Property', 'Set Unacknowledged', 0x4d, True),
    ('Generic User Property', 'Status', 0x4e, False),
    ('Generic Client Properties', 'Get', 0x4f, False),
    ('Generic Client Properties', 'Status', 0x50, False),
    ('Sensor Descriptor', 'Get', 0x8230, False),
    ('Sensor Descriptor', 'Status', 0x51, False),
    ('Sensor', 'Get', 0x8231, False),
    ('Sensor', 'Status', 0x52, False),
    ('Sensor Column', 'Get', 0x8232, False),
    ('Sensor Column', 'Status', 0x53, False),
    ('Sensor Series', 'Get', 0x8233, False),
    ('Sensor Series', 'Status', 0x54, False),
    ('Sensor Cadence', 'Get', 0x8234, False),
    ('Sensor Cadence', 'Set', 0x55, False),
    ('Sensor Cadence', 'Set Unacknowledged', 0x56, True),
    ('Sensor Cadence', 'Status', 0x57, False),
    ('Sensor Settings', 'Get', 0x8235, False),
    ('Sensor Settings', 'Status', 0x58, False),
    ('Sensor Setting', 'Get', 0x8236, False),
    ('Sensor Setting', 'Set', 0x59, False),
    ('Sensor Setting', 'Set Unacknowledged', 0x5a, True),
    ('Sensor Setting', 'Status', 0x5b, False),
    ('Time', 'Get', 0x8237, False),
    ('Time', 'Set', 0x5c, False),
    ('Time', 'Status', 0x5d, False),
    ('Time Role', 'Get', 0x8238, False),
    ('Time Role', 'Set', 0x8239, False),
    ('Time Role', 'Status', 0x823a, False),
    ('Time Zone', 'Get', 0x823b, False),
    ('Time Zone', 'Set', 0x823c, False),
    ('Time Zone', 'Status', 0x823d, False),
    ('TAI-UTC Delta', 'Get', 0x823e, False),
    ('TAI-UTC Delta', 'Set', 0x823f, False),
    ('TAI-UTC Delta', 'Status', 0x8240, False),
    ('Scene', 'Get', 0x8241, False),
    ('Scene', 'Recall', 0x8242, False),
    ('Scene ', 'Recall Unacknowledged', 0x8243, True),
    ('Scene', 'Status', 0x5e, False),
    ('Scene Register', 'Get', 0x8244, False),
    ('Scene Register', 'Status', 0x8245, False),
    ('Scene', 'Store', 0x8246, False),
    ('Scene ', 'Store Unacknowledged', 0x8247, True),
    ('Scene', 'Delete', 0x829e, False),
    ('Scene ', 'Delete Unacknowledged', 0x829f, True),
    ('Scheduler Action', 'Get', 0x8248, False),
    ('Scheduler Action', 'Status', 0x5f, False),
    ('Scheduler', 'Get', 0x8249, False),
    ('Scheduler', 'Status', 0x824a, False),
    ('Scheduler Action', 'Set', 0x60, False),
    ('Scheduler Action', 'Set Unacknowledged', 0x61, True),
    ('Light Lightness Light Lightness', 'Get', 0x824b, False),
    ('Light Lightness', 'Set', 0x824c, False),
    ('Light Lightness', 'Set Unacknowledged', 0x824d, True),
    ('Light Lightness', 'Status', 0x824e, False),
    ('Light Lightness Linear', 'Get', 0x824f, False),
    ('Light Lightness Linear', 'Set', 0x8250, False),
    ('Light Lightness Linear', 'Set Unacknowledged', 0x8251, True),
    ('Light Lightness Linear', 'Status', 0x8252, False),
    ('Light Lightness Last', 'Get', 0x8253, False),
    ('Light Lightness Last', 'Status', 0x8254, False),
    ('Light Lightness Default', 'Get', 0x8255, False),
    ('Light Lightness Default', 'Status', 0x8256, False),
    ('Light Lightness Range', 'Get', 0x8257, False),
    ('Light Lightness Range', 'Status', 0x8258, False),
    ('Light Lightness Default', 'Set', 0x8259, False),
    ('Light Lightness Default', 'Set Unacknowledged', 0x825a, True),
    ('Light Lightness Range', 'Set', 0x825b, False),
    ('Light Lightness Range', 'Set Unacknowledged', 0x825c, True),
    ('Light CTL', 'Get', 0x825d, False),
    ('Light CTL', 'Set', 0x825e, False),
    ('Light CTL', 'Set Unacknowledged', 0x825f, True),
    ('Light CTL', 'Status', 0x8260, False),
    ('Light CTL Temperature', 'Get', 0x8261, False),
    ('Light CTL Temperature Range', 'Get', 0x8262, False),
    ('Light CTL Temperature Range', 'Status', 0x8263, False),
    ('Light CTL Temperature', 'Set', 0x8264, False),
    ('Light CTL Temperature', 'Set Unacknowledged', 0x8265, True),
    ('Light CTL Temperature', 'Status', 0x8266, False),
    ('Light CTL Default', 'Get', 0x8267, False),
    ('Light CTL Default', 'Status', 0x8268, False),
    ('Light CTL Default', 'Set', 0x8269, False),
    ('Light CTL Default', 'Set Unacknowledged', 0x826a, True),
    ('Light CTL Temperature Range', 'Set', 0x826b, False),
    ('Light CTL Temperature Range', 'Set Unacknowledged', 0x826c, True),
    ('Light HSL', 'Get', 0x826d, False),
    ('Light HSL Hue', 'Get', 0x826e, False),
    ('Light HSL Hue', 'Set', 0x826f, False),
    ('Light HSL Hue', 'Set Unacknowledged', 0x8270, True),
    ('Light HSL Hue', 'Status', 0x8271, False),
    ('Light HSL Saturation', 'Get', 0x8272, False),
    ('Light HSL Saturation', 'Set', 0x8273, False),
    ('Light HSL Saturation', 'Set Unacknowledged', 0x8274, True),
    ('Light HSL Saturation', 'Status', 0x8275, False),
    ('Light HSL', 'Set', 0x8276, False),
    ('Light HSL', 'Set Unacknowledged', 0x8277, True),
    ('Light HSL', 'Status', 0x8278, False),
    ('Light HSL Target', 'Get', 0x8279, False),
    ('Light HSL Target', 'Status', 0x827a, False),
    ('Light HSL Default', 'Get', 0x827b, False),
    ('Light HSL Default', 'Status', 0x827c, False),
    ('Light HSL Range', 'Get', 0x827d, False),
    ('Light HSL Range', 'Status', 0x827e, False),
    ('Light HSL Default', 'Set', 0x827f, False),
    ('Light HSL Default', 'Set Unacknowledged', 0x8280, True),
    ('Light HSL Range', 'Set', 0x8281, False),
    ('Light HSL Range', 'Set Unacknowledged', 0x8282, True),
    ('Light xyL', 'Get', 0x8283, False),
    ('Light xyL', 'Set', 0x8284, False),
    ('Light xyL', 'Set Unacknowledged', 0x8285, True),
    ('Light xyL', 'Status', 0x8286, False),
    ('Light xyL Target', 'Get', 0x8287, False),
    ('Light xyL Target', 'Status', 0x8288, False),
    ('Light xyL Default', 'Get', 0x8289, False),
    ('Light xyL Default', 'Status', 0x828a, False),
    ('Light xyL Range', 'Get', 0x828b, False),
    ('Light xyL Range', 'Status', 0x828c, False),
    ('Light xyL Default', 'Set', 0x828d, False),
    ('Light xyL Default', 'Set Unacknowledged', 0x828e, True),
    ('Light xyL Range', 'Set', 0x828f, False),
    ('Light xyL Range', 'Set Unacknowledged', 0x8290, True),
    ('Light LC Mode', 'Get', 0x8291, False),
    ('Light LC Mode', 'Set', 0x8292, False),
    ('Light LC Mode', 'Set Unacknowledged', 0x8293, True),
    ('Light LC Mode', 'Status', 0x8294, False),
    ('Light LC OM', 'Get', 0x8295, False),
    ('Light LC OM', 'Set', 0x8296, False),
    ('Light LC OM', 'Set Unacknowledged', 0x8297, True),
    ('Light LC OM', 'Status', 0x8298, False),
    ('Light LC Light OnOff', 'Get', 0x8299, False),
    ('Light LC Light OnOff', 'Set', 0x829a, False),
    ('Light LC Light OnOff', 'Set Unacknowledged', 0x829b, True),
    ('Light LC Light OnOff', 'Status', 0x829c, False),
    ('Light LC Property', 'Get', 0x829d, False),
    ('Light LC Property', 'Set', 0x62, False),
    ('Light LC Property', 'Set Unacknowledged', 0x63, True),
    ('Light LC Property', 'Status', 0x64, False),
]

application_opcodes = [op[1] for op in application_opcode]


def opcode_is_ctl(opcode):
    return opcode in control_opcodes


def opcode_is_sig(opcode):
    return opcode in sig_opcodes


def opcode_is_application(opcode):
    return opcode in application_opcodes


def opcode_description(opcode):
    for res, method, op, ack in application_opcode:
        if op == opcode:
            return res + method
    if opcode > 0xffff:
        return '%06x' % opcode
    elif opcode > 0xff:
        return '%04x' % opcode
    else:
        return '%02x' % opcode
