########################################################################################################################
# M O D U L E   D O C U M E N T A T I O N : ############################################################################
########################################################################################################################


"""
This module contains implementations of auxiliary functions,
 that are often used in other modules.

Functions:
    file_name_generator: Generate file name for already existing file.
    get_byte_width: Count byte size for variables in FPGA.
    to_int_hex_format: Convert value to format for FPGA.
"""


########################################################################################################################
# I M P O R T :  #######################################################################################################
########################################################################################################################


import os
import itertools


########################################################################################################################
# S U P P O R T I N G   T O O L   F U N C T I O N :  ###################################################################
########################################################################################################################


def file_name_generator(task_name, extension, ending=''):
    """
    Generate file name for already existing file.
    """
    path = os.getcwd()
    counter = itertools.count(start=1)
    name = path + '/' + os.path.splitext(os.path.basename(task_name))[0]
    yield name + f'{ending}' + extension
    while True:
        yield name + f'{ending}' + f'_{counter.__next__()}' + extension


########################################################################################################################
# S U P P O R T I N G   T O O L   F U N C T I O N :  ###################################################################
########################################################################################################################


def get_byte_width(value):
    """
    Count byte size for variables in FPGA.
    """
    length = len(format(value, 'x'))
    if length % 2 == 0:
        return int(length / 2)
    else:
        return int((length + 1) / 2)


########################################################################################################################
# S U P P O R T I N G   T O O L   F U N C T I O N :  ###################################################################
########################################################################################################################


def arguments_extract(argument_string):
    """
    Get arguments from argument string.
    """
    arg_list = argument_string.split(';')
    for arg in arg_list:
        yield arg.split(',')

########################################################################################################################
# S U P P O R T I N G   T O O L   F U N C T I O N :  ###################################################################
########################################################################################################################


def to_int_hex_format(value):
    """
    Convert value to format for FPGA.
    """
    return format(round(value * 10 ** 6), 'x')


########################################################################################################################
# E N D   O F   F I L E .  #############################################################################################
########################################################################################################################
