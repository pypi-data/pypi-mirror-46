# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RiskV1DecisionsPost201ResponseRiskInformationIpAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anonymizer_status': 'str',
        'city': 'str',
        'country': 'str',
        'state': 'str',
        'routing_method': 'str'
    }

    attribute_map = {
        'anonymizer_status': 'anonymizerStatus',
        'city': 'city',
        'country': 'country',
        'state': 'state',
        'routing_method': 'routingMethod'
    }

    def __init__(self, anonymizer_status=None, city=None, country=None, state=None, routing_method=None):
        """
        RiskV1DecisionsPost201ResponseRiskInformationIpAddress - a model defined in Swagger
        """

        self._anonymizer_status = None
        self._city = None
        self._country = None
        self._state = None
        self._routing_method = None

        if anonymizer_status is not None:
          self.anonymizer_status = anonymizer_status
        if city is not None:
          self.city = city
        if country is not None:
          self.country = country
        if state is not None:
          self.state = state
        if routing_method is not None:
          self.routing_method = routing_method

    @property
    def anonymizer_status(self):
        """
        Gets the anonymizer_status of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Indicates whether the transaction IP address is associated with a known anonymous proxy. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for 'Reply Fields': \"afsReply_ipAnonymizerStatus\". 

        :return: The anonymizer_status of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :rtype: str
        """
        return self._anonymizer_status

    @anonymizer_status.setter
    def anonymizer_status(self, anonymizer_status):
        """
        Sets the anonymizer_status of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Indicates whether the transaction IP address is associated with a known anonymous proxy. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for 'Reply Fields': \"afsReply_ipAnonymizerStatus\". 

        :param anonymizer_status: The anonymizer_status of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :type: str
        """
        if anonymizer_status is not None and len(anonymizer_status) > 255:
            raise ValueError("Invalid value for `anonymizer_status`, length must be less than or equal to `255`")

        self._anonymizer_status = anonymizer_status

    @property
    def city(self):
        """
        Gets the city of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Name of the city decoded from the IP address used directly or indirectly by the customer to send the order. 

        :return: The city of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Name of the city decoded from the IP address used directly or indirectly by the customer to send the order. 

        :param city: The city of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :type: str
        """
        if city is not None and len(city) > 255:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `255`")

        self._city = city

    @property
    def country(self):
        """
        Gets the country of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Name of the country decoded from the IP address used directly or indirectly by the customer to send the order. 

        :return: The country of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Name of the country decoded from the IP address used directly or indirectly by the customer to send the order. 

        :param country: The country of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :type: str
        """
        if country is not None and len(country) > 255:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `255`")

        self._country = country

    @property
    def state(self):
        """
        Gets the state of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Name of the state decoded from the IP address used directly or indirectly by the customer to send the order. 

        :return: The state of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Name of the state decoded from the IP address used directly or indirectly by the customer to send the order. 

        :param state: The state of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :type: str
        """
        if state is not None and len(state) > 255:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `255`")

        self._state = state

    @property
    def routing_method(self):
        """
        Gets the routing_method of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Routing method decoded from the IP address used directly or indirectly by the customer to send the order. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for 'Reply Fields': \"afsService_ipRoutingMethod \". 

        :return: The routing_method of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :rtype: str
        """
        return self._routing_method

    @routing_method.setter
    def routing_method(self, routing_method):
        """
        Sets the routing_method of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        Routing method decoded from the IP address used directly or indirectly by the customer to send the order. For all possible values, Please refer to Simple Order API Developer Guide on [CyberSource Business Center](https://ebc2.cybersource.com/ebc2/)- Look for 'Reply Fields': \"afsService_ipRoutingMethod \". 

        :param routing_method: The routing_method of this RiskV1DecisionsPost201ResponseRiskInformationIpAddress.
        :type: str
        """
        if routing_method is not None and len(routing_method) > 255:
            raise ValueError("Invalid value for `routing_method`, length must be less than or equal to `255`")

        self._routing_method = routing_method

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RiskV1DecisionsPost201ResponseRiskInformationIpAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
