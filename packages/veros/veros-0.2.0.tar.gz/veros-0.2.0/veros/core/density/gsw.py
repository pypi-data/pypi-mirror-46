from ... import veros_method

"""
==========================================================================
  in-situ density, dynamic enthalpy and derivatives
  from Absolute Salinity and Conservative
  Temperature, using the computationally-efficient 48-term expression for
  density in terms of SA, CT and p (IOC et al., 2010).
==========================================================================
"""
v01 = 9.998420897506056e+2
v02 = 2.839940833161907e0
v03 = -3.147759265588511e-2
v04 = 1.181805545074306e-3
v05 = -6.698001071123802e0
v06 = -2.986498947203215e-2
v07 = 2.327859407479162e-4
v08 = -3.988822378968490e-2
v09 = 5.095422573880500e-4
v10 = -1.426984671633621e-5
v11 = 1.645039373682922e-7
v12 = -2.233269627352527e-2
v13 = -3.436090079851880e-4
v14 = 3.726050720345733e-6
v15 = -1.806789763745328e-4
v16 = 6.876837219536232e-7
v17 = -3.087032500374211e-7
v18 = -1.988366587925593e-8
v19 = -1.061519070296458e-11
v20 = 1.550932729220080e-10
v21 = 1.0e0
v22 = 2.775927747785646e-3
v23 = -2.349607444135925e-5
v24 = 1.119513357486743e-6
v25 = 6.743689325042773e-10
v26 = -7.521448093615448e-3
v27 = -2.764306979894411e-5
v28 = 1.262937315098546e-7
v29 = 9.527875081696435e-10
v30 = -1.811147201949891e-11
v31 = -3.303308871386421e-5
v32 = 3.801564588876298e-7
v33 = -7.672876869259043e-9
v34 = -4.634182341116144e-11
v35 = 2.681097235569143e-12
v36 = 5.419326551148740e-6
v37 = -2.742185394906099e-5
v38 = -3.212746477974189e-7
v39 = 3.191413910561627e-9
v40 = -1.931012931541776e-12
v41 = -1.105097577149576e-7
v42 = 6.211426728363857e-10
v43 = -1.119011592875110e-10
v44 = -1.941660213148725e-11
v45 = -1.864826425365600e-14
v46 = 1.119522344879478e-14
v47 = -1.200507748551599e-15
v48 = 6.057902487546866e-17
rho0 = 1024.0


@veros_method
def gsw_rho(vs, sa, ct, p):
    """
     density as a function of T, S, and p
     sa     : Absolute Salinity                               [g/kg]
     ct     : Conservative Temperature                        [deg C]
     p      : sea pressure                                    [dbar]
    ==========================================================================
    """
    # convert scalar values if necessary
    sa, ct, p = np.asarray(sa), np.asarray(ct), np.asarray(p)
    sqrtsa = np.sqrt(sa)
    v_hat_denominator = v01 + ct * (v02 + ct * (v03 + v04 * ct)) \
        + sa * (v05 + ct * (v06 + v07 * ct)
                + sqrtsa * (v08 + ct * (v09 + ct * (v10 + v11 * ct)))) \
        + p * (v12 + ct * (v13 + v14 * ct) + sa * (v15 + v16 * ct)
               + p * (v17 + ct * (v18 + v19 * ct) + v20 * sa))
    v_hat_numerator = v21 + ct * (v22 + ct * (v23 + ct * (v24 + v25 * ct)))  \
        + sa * (v26 + ct * (v27 + ct * (v28 + ct * (v29 + v30 * ct))) + v36 * sa
                + sqrtsa * (v31 + ct * (v32 + ct * (v33 + ct * (v34 + v35 * ct))))) \
        + p * (v37 + ct * (v38 + ct * (v39 + v40 * ct))
               + sa * (v41 + v42 * ct) + p * (v43 + ct * (v44 + v45 * ct + v46 * sa)
                                              + p * (v47 + v48 * ct)))
    return v_hat_denominator / v_hat_numerator - rho0


@veros_method
def gsw_drhodT(vs, sa, ct, p):
    """
    d/dT of density
    sa     : Absolute Salinity                               [g/kg]
    ct     : Conservative Temperature                        [deg C]
    p      : sea pressure                                    [dbar]
    ==========================================================================
    """
    p = np.asarray(p)  # convert scalar value if necessary
    a01 = 2.839940833161907e0
    a02 = -6.295518531177023e-2
    a03 = 3.545416635222918e-3
    a04 = -2.986498947203215e-2
    a05 = 4.655718814958324e-4
    a06 = 5.095422573880500e-4
    a07 = -2.853969343267241e-5
    a08 = 4.935118121048767e-7
    a09 = -3.436090079851880e-4
    a10 = 7.452101440691467e-6
    a11 = 6.876837219536232e-7
    a12 = -1.988366587925593e-8
    a13 = -2.123038140592916e-11
    a14 = 2.775927747785646e-3
    a15 = -4.699214888271850e-5
    a16 = 3.358540072460230e-6
    a17 = 2.697475730017109e-9
    a18 = -2.764306979894411e-5
    a19 = 2.525874630197091e-7
    a20 = 2.858362524508931e-9
    a21 = -7.244588807799565e-11
    a22 = 3.801564588876298e-7
    a23 = -1.534575373851809e-8
    a24 = -1.390254702334843e-10
    a25 = 1.072438894227657e-11
    a26 = -3.212746477974189e-7
    a27 = 6.382827821123254e-9
    a28 = -5.793038794625329e-12
    a29 = 6.211426728363857e-10
    a30 = -1.941660213148725e-11
    a31 = -3.729652850731201e-14
    a32 = 1.119522344879478e-14
    a33 = 6.057902487546866e-17

    sqrtsa = np.sqrt(sa)
    v_hat_denominator = v01 + ct * (v02 + ct * (v03 + v04 * ct)) + sa * (v05 + ct * (v06 + v07 * ct)
                                                                         + sqrtsa * (v08 + ct * (v09 + ct * (v10 + v11 * ct)))) + p * (v12 + ct * (v13 + v14 * ct) + sa * (v15 + v16 * ct)
                                                                                                                                       + p * (v17 + ct * (v18 + v19 * ct) + v20 * sa))

    v_hat_numerator = v21 + ct * (v22 + ct * (v23 + ct * (v24 + v25 * ct))) \
        + sa * (v26 + ct * (v27 + ct * (v28 + ct * (v29 + v30 * ct))) + v36 * sa
                + sqrtsa * (v31 + ct * (v32 + ct * (v33 + ct * (v34 + v35 * ct))))) + p * (v37 + ct * (v38 + ct * (v39 + v40 * ct))
                                                                                           + sa * (v41 + v42 * ct) + p * (v43 + ct * (v44 + v45 * ct + v46 * sa) + p * (v47 + v48 * ct)))

    dvhatden_dct = a01 + ct * (a02 + a03 * ct) + sa * (a04 + a05 * ct + sqrtsa * (a06 + ct * (a07 + a08 * ct))) \
        + p * (a09 + a10 * ct + a11 * sa + p * (a12 + a13 * ct))

    dvhatnum_dct = a14 + ct * (a15 + ct * (a16 + a17 * ct)) + sa * (a18 + ct * (a19 + ct * (a20 + a21 * ct))
                                                                    + sqrtsa * (a22 + ct * (a23 + ct * (a24 + a25 * ct)))) \
        + p * (a26 + ct * (a27 + a28 * ct) + a29 * sa + p * (a30 + a31 * ct + a32 * sa + a33 * p))

    rec_num = 1.0 / v_hat_numerator
    rho = rec_num * v_hat_denominator
    return (dvhatden_dct - dvhatnum_dct * rho) * rec_num


@veros_method
def gsw_drhodS(vs, sa, ct, p):
    """
     d/dS of density
     sa     : Absolute Salinity                               [g/kg]
     ct     : Conservative Temperature                        [deg C]
     p      : sea pressure                                    [dbar]
    ==========================================================================
    """
    p = np.asarray(p)  # convert scalar value if necessary
    b01 = -6.698001071123802e0
    b02 = -2.986498947203215e-2
    b03 = 2.327859407479162e-4
    b04 = -5.983233568452735e-2
    b05 = 7.643133860820750e-4
    b06 = -2.140477007450431e-5
    b07 = 2.467559060524383e-7
    b08 = -1.806789763745328e-4
    b09 = 6.876837219536232e-7
    b10 = 1.550932729220080e-10
    b11 = -7.521448093615448e-3
    b12 = -2.764306979894411e-5
    b13 = 1.262937315098546e-7
    b14 = 9.527875081696435e-10
    b15 = -1.811147201949891e-11
    b16 = -4.954963307079632e-5
    b17 = 5.702346883314446e-7
    b18 = -1.150931530388857e-8
    b19 = -6.951273511674217e-11
    b20 = 4.021645853353715e-12
    b21 = 1.083865310229748e-5
    b22 = -1.105097577149576e-7
    b23 = 6.211426728363857e-10
    b24 = 1.119522344879478e-14

    sqrtsa = np.sqrt(sa)
    v_hat_denominator = v01 + ct * (v02 + ct * (v03 + v04 * ct)) + sa * (v05 + ct * (v06 + v07 * ct)
                                                                         + sqrtsa * (v08 + ct * (v09 + ct * (v10 + v11 * ct)))) + p * (v12 + ct * (v13 + v14 * ct) + sa * (v15 + v16 * ct)
                                                                                                                                       + p * (v17 + ct * (v18 + v19 * ct) + v20 * sa))

    v_hat_numerator = v21 + ct * (v22 + ct * (v23 + ct * (v24 + v25 * ct))) \
        + sa * (v26 + ct * (v27 + ct * (v28 + ct * (v29 + v30 * ct))) + v36 * sa
                + sqrtsa * (v31 + ct * (v32 + ct * (v33 + ct * (v34 + v35 * ct))))) \
        + p * (v37 + ct * (v38 + ct * (v39 + v40 * ct)) + sa * (v41 + v42 * ct) + p * (v43 + ct * (v44 + v45 * ct + v46 * sa)
                                                                                       + p * (v47 + v48 * ct)))

    dvhatden_dsa = b01 + ct * (b02 + b03 * ct) + sqrtsa * (b04 + ct * (b05 + ct * (b06 + b07 * ct))) \
        + p * (b08 + b09 * ct + b10 * p)

    dvhatnum_dsa = b11 + ct * (b12 + ct * (b13 + ct * (b14 + b15 * ct))) \
        + sqrtsa * (b16 + ct * (b17 + ct * (b18 + ct * (b19 + b20 * ct)))) \
        + b21 * sa + p * (b22 + ct * (b23 + b24 * p))

    rec_num = 1.0 / v_hat_numerator
    rho = rec_num * v_hat_denominator
    return (dvhatden_dsa - dvhatnum_dsa * rho) * rec_num


@veros_method
def gsw_drhodP(vs, sa, ct, p):
    """
     d/dp of density
     sa     : Absolute Salinity                               [g/kg]
     ct     : Conservative Temperature                        [deg C]
     p      : sea pressure                                    [dbar]
    ==========================================================================
    """
    p = np.asarray(p)  # convert scalar value if necessary
    c01 = -2.233269627352527e-2
    c02 = -3.436090079851880e-4
    c03 = 3.726050720345733e-6
    c04 = -1.806789763745328e-4
    c05 = 6.876837219536232e-7
    c06 = -6.174065000748422e-7
    c07 = -3.976733175851186e-8
    c08 = -2.123038140592916e-11
    c09 = 3.101865458440160e-10
    c10 = -2.742185394906099e-5
    c11 = -3.212746477974189e-7
    c12 = 3.191413910561627e-9
    c13 = -1.931012931541776e-12
    c14 = -1.105097577149576e-7
    c15 = 6.211426728363857e-10
    c16 = -2.238023185750219e-10
    c17 = -3.883320426297450e-11
    c18 = -3.729652850731201e-14
    c19 = 2.239044689758956e-14
    c20 = -3.601523245654798e-15
    c21 = 1.817370746264060e-16
    pa2db = 1e-4

    sqrtsa = np.sqrt(sa)
    v_hat_denominator = v01 + ct * (v02 + ct * (v03 + v04 * ct)) + sa * (v05 + ct * (v06 + v07 * ct)
                                                                         + sqrtsa * (v08 + ct * (v09 + ct * (v10 + v11 * ct)))) + p * (v12 + ct * (v13 + v14 * ct) + sa * (v15 + v16 * ct)
                                                                                                                                       + p * (v17 + ct * (v18 + v19 * ct) + v20 * sa))

    v_hat_numerator = v21 + ct * (v22 + ct * (v23 + ct * (v24 + v25 * ct))) \
        + sa * (v26 + ct * (v27 + ct * (v28 + ct * (v29 + v30 * ct))) + v36 * sa
                + sqrtsa * (v31 + ct * (v32 + ct * (v33 + ct * (v34 + v35 * ct)))))   \
        + p * (v37 + ct * (v38 + ct * (v39 + v40 * ct)) + sa * (v41 + v42 * ct) + p * (v43 + ct * (v44 + v45 * ct + v46 * sa)
                                                                                       + p * (v47 + v48 * ct)))

    dvhatden_dp = c01 + ct * (c02 + c03 * ct) + sa * (c04 + c05 * ct) + \
        p * (c06 + ct * (c07 + c08 * ct) + c09 * sa)

    dvhatnum_dp = c10 + ct * (c11 + ct * (c12 + c13 * ct)) \
        + sa * (c14 + c15 * ct) + p * (c16 + ct * (c17 + c18 * ct + c19 * sa) + p * (c20 + c21 * ct))

    rec_num = 1.0 / v_hat_numerator
    rho = rec_num * v_hat_denominator
    return pa2db * (dvhatden_dp - dvhatnum_dp * rho) * rec_num


@veros_method
def gsw_dyn_enthalpy(vs, sa, ct, p):
    """
     Calculates dynamic enthalpy of seawater using the computationally
     efficient 48-term expression for density in terms of SA, CT and p
     (IOC et al., 2010)

     A component due to the constant reference density in Boussinesq
     approximation is removed

     sa     : Absolute Salinity                               [g/kg]
     ct     : Conservative Temperature                        [deg C]
     p      : sea pressure                                    [dbar]
    ==========================================================================
    """
    p = np.asarray(p)  # convert scalar value if necessary
    db2pa = 1e4                             # factor to convert from dbar to Pa
    sqrtsa = np.sqrt(sa)
    a0 = v21 + ct * (v22 + ct * (v23 + ct * (v24 + v25 * ct))) \
        + sa * (v26 + ct * (v27 + ct * (v28 + ct * (v29 + v30 * ct))) + v36 * sa
                + sqrtsa * (v31 + ct * (v32 + ct * (v33 + ct * (v34 + v35 * ct)))))
    a1 = v37 + ct * (v38 + ct * (v39 + v40 * ct)) + sa * (v41 + v42 * ct)
    a2 = v43 + ct * (v44 + v45 * ct + v46 * sa)
    a3 = v47 + v48 * ct
    b0 = v01 + ct * (v02 + ct * (v03 + v04 * ct)) + sa * (v05 + ct * (v06 + v07 * ct)
                                                          + sqrtsa * (v08 + ct * (v09 + ct * (v10 + v11 * ct))))
    b1 = 0.5 * (v12 + ct * (v13 + v14 * ct) + sa * (v15 + v16 * ct))
    b2 = v17 + ct * (v18 + v19 * ct) + v20 * sa
    b1sq = b1 * b1
    sqrt_disc = np.sqrt(b1sq - b0 * b2)
    cn = a0 + (2 * a3 * b0 * b1 / b2 - a2 * b0) / b2
    cm = a1 + (4 * a3 * b1sq / b2 - a3 * b0 - 2 * a2 * b1) / b2
    ca = b1 - sqrt_disc
    cb = b1 + sqrt_disc
    part = (cn * b2 - cm * b1) / (b2 * (cb - ca))
    Hd = db2pa * (p * (a2 - 2.0 * a3 * b1 / b2 + 0.5 * a3 * p) / b2 + (cm / (2.0 * b2)) * np.log(1.0 + p * (2.0 * b1 + b2 * p) / b0)
                  + part * np.log(1.0 + (b2 * p * (cb - ca)) / (ca * (cb + b2 * p))))
    return Hd - p * db2pa / rho0


@veros_method
def gsw_dHdT1(vs, sa, ct, p):
    """
     d/dT of dynamic enthalpy, numerical derivative

     sa     : Absolute Salinity                               [g/kg]
     ct     : Conservative Temperature                        [deg C]
     p      : sea pressure                                    [dbar]
    ==========================================================================
    """
    p = np.asarray(p)  # convert scalar value if necessary
    delta = 1e-4
    return (gsw_dyn_enthalpy(sa, ct + delta, p) - gsw_dyn_enthalpy(sa, ct, p)) / delta


@veros_method
def gsw_dHdS1(vs, sa, ct, p):
    """
     d/dS of dynamic enthalpy, numerical derivative

     sa     : Absolute Salinity                               [g/kg]
     ct     : Conservative Temperature                        [deg C]
     p      : sea pressure                                    [dbar]
    ==========================================================================
    """
    p = np.asarray(p)  # convert scalar value if necessary
    delta = 1e-4
    return (gsw_dyn_enthalpy(sa + delta, ct, p) - gsw_dyn_enthalpy(sa, ct, p)) / delta


@veros_method
def gsw_dHdT(vs, sa_in, ct_in, p):
    """
    d/dT of dynamic enthalpy, analytical derivative

    sa     : Absolute Salinity                               [g/kg]
    ct     : Conservative Temperature                        [deg C]
    p      : sea pressure                                    [dbar]
    """
    p = np.asarray(p)  # convert scalar value if necessary
    sa = np.maximum(1e-1, sa_in)  # prevent division by zero
    ct = np.maximum(-12, ct_in)  # prevent blowing up for values smaller than -15 degC
    t1 = v45 * ct
    t2 = 0.2e1 * t1
    t3 = v46 * sa
    t4 = 0.5 * v12
    t5 = v14 * ct
    t7 = ct * (v13 + t5)
    t8 = 0.5 * t7
    t11 = sa * (v15 + v16 * ct)
    t12 = 0.5 * t11
    t13 = t4 + t8 + t12
    t15 = v19 * ct
    t19 = v17 + ct * (v18 + t15) + v20 * sa
    t20 = 1.0 / t19
    t24 = v47 + v48 * ct
    t25 = 0.5 * v13
    t26 = 1.0 * t5
    t27 = sa * v16
    t28 = 0.5 * t27
    t29 = t25 + t26 + t28
    t33 = t24 * t13
    t34 = t19 ** 2
    t35 = 1.0 / t34
    t37 = v18 + 2.0 * t15
    t38 = t35 * t37
    t48 = ct * (v44 + t1 + t3)
    t57 = v40 * ct
    t59 = ct * (v39 + t57)
    t64 = t13 ** 2
    t68 = t20 * t29
    t71 = t24 * t64
    t74 = v04 * ct
    t76 = ct * (v03 + t74)
    t79 = v07 * ct
    t82 = np.sqrt(sa)
    t83 = v11 * ct
    t85 = ct * (v10 + t83)
    t92 = v01 + ct * (v02 + t76) + sa * (v05 + ct * (v06 + t79) + t82 * (v08 + ct * (v09 + t85)))
    t93 = v48 * t92
    t105 = v02 + t76 + ct * (v03 + 2.0 * t74) + sa * (v06 + 2.0 * t79 +
                                                    t82 * (v09 + t85 + ct * (v10 + 2.0 * t83)))
    t106 = t24 * t105
    t107 = v44 + t2 + t3
    t110 = v43 + t48
    t117 = t24 * t92
    t120 = 4.0 * t71 * t20 - t117 - 2.0 * t110 * t13
    t123 = v38 + t59 + ct * (v39 + 2.0 * t57) + sa * v42 + (4.0 *
                                                            v48 * t64 * t20 + 8.0 * t33 * t68 - 4.0 * t71 * t38 - t93 - t106
                                                            - 2.0 * t107 * t13 - 2.0 * t110 * t29) * t20 - t120 * t35 * t37
    t128 = t19 * p
    t130 = p * (1.0 * v12 + 1.0 * t7 + 1.0 * t11 + t128)
    t131 = 1.0 / t92
    t133 = 1.0 + t130 * t131
    t134 = np.log(t133)
    t143 = v37 + ct * (v38 + t59) + sa * (v41 + v42 * ct) + t120 * t20
    t152 = t37 * p
    t156 = t92 ** 2
    t165 = v25 * ct
    t167 = ct * (v24 + t165)
    t169 = ct * (v23 + t167)
    t175 = v30 * ct
    t177 = ct * (v29 + t175)
    t179 = ct * (v28 + t177)
    t185 = v35 * ct
    t187 = ct * (v34 + t185)
    t189 = ct * (v33 + t187)
    t199 = t13 * t20
    t217 = 2.0 * t117 * t199 - t110 * t92
    t234 = v21 + ct * (v22 + t169) + sa * (v26 + ct * (v27 + t179) + v36 *
                                        sa + t82 * (v31 + ct * (v32 + t189))) + t217 * t20
    t241 = t64 - t92 * t19
    t242 = np.sqrt(t241)
    t243 = 1.0 / t242
    t244 = t4 + t8 + t12 - t242
    t245 = 1.0 / t244
    t247 = t4 + t8 + t12 + t242 + t128
    t248 = 1.0 / t247
    t249 = t242 * t245 * t248
    t252 = 1.0 + 2.0 * t128 * t249
    t253 = np.log(t252)
    t254 = t243 * t253
    t259 = t234 * t19 - t143 * t13
    t264 = t259 * t20
    t272 = 2.0 * t13 * t29 - t105 * t19 - t92 * t37
    t282 = t128 * t242
    t283 = t244 ** 2
    t287 = t243 * t272 / 2.0
    t292 = t247 ** 2
    t305 = 0.1e5 * p * (v44 + t2 + t3 - 2.0 * v48 * t13 * t20
                        - 2.0 * t24 * t29 * t20 + 2.0 * t33 * t38 + 0.5 * v48 * p) * t20  \
        - 0.1e5 * p * (v43 + t48 - 2.0 * t33 * t20 + 0.5 * t24 * p) * t38 \
        + 0.5e4 * t123 * t20 * t134 - 0.5e4 * t143 * t35 * t134 * t37 \
        + 0.5e4 * t143 * t20 * (p * (1.0 * v13 + 2.0 * t5 + 1.0 * t27 + t152) * t131
                                - t130 / t156 * t105) / t133 \
        + 0.5e4 * ((v22 + t169 + ct * (v23 + t167 + ct * (v24 + 2.0 * t165))
                    + sa * (v27 + t179 + ct * (v28 + t177 + ct * (v29 + 2.0 * t175)) + t82 * (v32 + t189
                                                                                            + ct * (v33 + t187 + ct * (v34 + 2.0 * t185)))) + (2.0 * t93 * t199 + 2.0 * t106 *
                                                                                                                                                t199 + 2.0 * t117 * t68 - 2.0 * t117 * t13 * t35 * t37 - t107
                                                                                                                                                * t92 - t110 * t105) * t20 - t217 * t35 * t37) * t19 + t234 * t37
                - t123 * t13 - t143 * t29) * t20 * t254 - 0.5e4 * t259 * \
        t35 * t254 * t37 - 0.25e4 * t264 / t242 / t241 * t253 * t272 \
        + 0.5e4 * t264 * t243 * (2.0 * t152 * t249 + t128 *
                                t243 * t245 * t248 * t272 - 2.0 * t282 /
                                t283 * t248 * (t25 + t26 + t28 - t287)
                                - 2.0 * t282 * t245 / t292 * (t25 + t26 + t28 + t287 + t152)) / t252

    return t305


@veros_method
def gsw_dHdS(vs, sa_in, ct_in, p):
    """
    d/dS of dynamic enthalpy, analytical derivative
    sa     : Absolute Salinity                               [g/kg]
    ct     : Conservative Temperature                        [deg C]
    p      : sea pressure                                    [dbar]
    """
    p = np.asarray(p)  # convert scalar value if necessary
    sa = np.maximum(1e-1, sa_in)  # prevent division by zero
    ct = np.maximum(-12.0, ct_in)  # prevent blowing up for values smaller than -15 degC
    t1 = ct * v46
    t3 = v47 + v48 * ct
    t4 = 0.5 * v15
    t5 = v16 * ct
    t6 = 0.5 * t5
    t7 = t4 + t6
    t13 = v17 + ct * (v18 + v19 * ct) + v20 * sa
    t14 = 1.0 / t13
    t17 = 0.5 * v12
    t20 = ct * (v13 + v14 * ct)
    t21 = 0.5 * t20
    t23 = sa * (v15 + t5)
    t24 = 0.5 * t23
    t25 = t17 + t21 + t24
    t26 = t3 * t25
    t27 = t13 ** 2
    t28 = 1.0 / t27
    t29 = t28 * v20
    t39 = ct * (v44 + v45 * ct + v46 * sa)
    t48 = v42 * ct
    t49 = t14 * t7
    t52 = t25 ** 2
    t53 = t3 * t52
    t58 = ct * (v06 + v07 * ct)
    t59 = np.sqrt(sa)
    t66 = t59 * (v08 + ct * (v09 + ct * (v10 + v11 * ct)))
    t68 = v05 + t58 + 3.0 / 2.0 * t66
    t69 = t3 * t68
    t72 = v43 + t39
    t86 = v01 + ct * (v02 + ct * (v03 + v04 * ct)) + sa * (v05 + t58 + t66)
    t87 = t3 * t86
    t90 = 4.0 * t53 * t14 - t87 - 2.0 * t72 * t25
    t93 = v41 + t48 + (8.0 * t26 * t49 - 4.0 * t53 * t29 - t69 - 2.0 *
                       t1 * t25 - 2.0 * t72 * t7) * t14 - t90 * t28 * v20
    t98 = t13 * p
    t100 = p * (1.0 * v12 + 1.0 * t20 + 1.0 * t23 + t98)
    t101 = 1.0 / t86
    t103 = 1.0 + t100 * t101
    t104 = np.log(t103)
    t115 = v37 + ct * (v38 + ct * (v39 + v40 * ct)) + sa * (v41 + t48) + t90 * t14
    t123 = v20 * p
    t127 = t86 ** 2
    t142 = ct * (v27 + ct * (v28 + ct * (v29 + v30 * ct)))
    t143 = v36 * sa
    t151 = v31 + ct * (v32 + ct * (v33 + ct * (v34 + v35 * ct)))
    t152 = t59 * t151
    t158 = t25 * t14
    t174 = 2.0 * t87 * t158 - t72 * t86
    t189 = v21 + ct * (v22 + ct * (v23 + ct * (v24 + v25 * ct))) + \
        sa * (v26 + t142 + t143 + t152) + t174 * t14
    t196 = t52 - t86 * t13
    t197 = np.sqrt(t196)
    t198 = 1.0 / t197
    t199 = t17 + t21 + t24 - t197
    t200 = 1.0 / t199
    t202 = t17 + t21 + t24 + t197 + t98
    t203 = 1.0 / t202
    t204 = t197 * t200 * t203
    t207 = 1.0 + 2.0 * t98 * t204
    t208 = np.log(t207)
    t209 = t198 * t208
    t214 = t189 * t13 - t115 * t25
    t219 = t214 * t14
    t227 = 2.0 * t25 * t7 - t68 * t13 - t86 * v20
    t237 = t98 * t197
    t238 = t199 ** 2
    t242 = t198 * t227 / 2.0
    t247 = t202 ** 2
    t260 = 0.1e5 * p * (t1 - 2.0 * t3 * t7 * t14 + 2.0 * t26 * t29) * t14 \
        - 0.1e5 * p * (v43 + t39 - 2.0 * t26 * t14 + 0.5 * t3 * p) * t29 \
        + 0.5e4 * t93 * t14 * t104 - 0.5e4 * t115 * t28 * t104 * v20 \
        + 0.5e4 * t115 * t14 * (p * (1.0 * v15 + 1.0 * t5 + t123) * t101 - t100 / t127 * t68) / t103 \
        + 0.5e4 * ((v26 + t142 + t143 + t152 + sa * (v36 + 1.0 / t59 * t151 / 2.0)
                    + (2.0 * t69 * t158 + 2.0 * t87 * t49 - 2.0 * t87 *
                       t25 * t28 * v20 - t1 * t86 - t72 * t68) * t14
                    - t174 * t28 * v20) * t13 + t189 * v20 - t93 * t25 - t115 * t7) * t14 * t209 - 0.5e4 * t214 * t28 * t209 * v20 \
        - 0.25e4 * t219 / t197 / t196 * t208 * t227 + 0.5e4 * t219 * t198 * (2.0 * t123 * t204
                                                                             + t98 * t198 * t200 * t203 * t227 - 2.0 *
                                                                             t237 / t238 * t203 *
                                                                             (t4 + t6 - t242)
                                                                             - 2.0 * t237 * t200 / t247 * (t4 + t6 + t242 + t123)) / t207
    return t260


"""
==========================================================================
  Potential density and temperature, enthropy, Gibbs free energy and its
  derivatives from Absolute Salinity, in-situ Temperature, Sea Pressure
  using the Thermodynamic Equation Of Seawater - 2010 (TEOS-10) package
  (see details in IOC, 2010; http://www.teos-10.org)
==========================================================================
"""


GSW_TEOS10_CONSTANTS = dict(
    db2pa=1.0e4,
    rec_db2pa=1.0e-4,
    pa2db=1.0e-4,
    rec_pa2db=1.0e4,
    pi=3.141592653589793,
    deg2rad=3.141592653589793 / 180.0,
    rad2deg=180.0 / 3.141592653589793,
    gamma=2.26e-7,
    #  cp0  =  The 'specific heat' for use                         [ J/(kg K) ]
    #          with Conservative Temperature
    gsw_cp0=3991.86795711963,
    #  T0  =  the Celcius zero point.                                     [ K ]
    gsw_t0=273.15,
    #  P0  =  Absolute Pressure of one standard atmosphere.              [ Pa ]
    gsw_p0=101325.0,
    #  SSO  =  Standard Ocean Reference Salinity.                      [ g/kg ]
    gsw_sso=35.16504,
    gsw_sqrtsso=5.930011804372737,
    #  uPS  =  unit conversion factor for salinities                   [ g/kg ]
    gsw_ups=35.16504 / 35.0,
    #  sfac  =  1/(40*gsw_ups)
    gsw_sfac=0.0248826675584615,
    #  deltaS = 24, offset = deltaS*gsw_sfac
    offset=5.971840214030754e-1,
    #  C3515  =  Conductivity at (SP=35, t_68=15, p=0)                [ mS/cm ]
    gsw_c3515=42.9140,
    #  SonCl  =  SP to Chlorinity ratio                           [ (g/kg)^-1 ]
    gsw_soncl=1.80655,
    #  valence_factor  =  valence factor of sea salt of Reference Composition
    #                                                              [ unitless ]
    gsw_valence_factor=1.2452898,
    #  atomic_weight = mole-weighted atomic weight of sea salt of Reference
    #                  Composition                                    [ g/mol ]
    gsw_atomic_weight=31.4038218)


@veros_method
def gsw_gibbs(vs, nsd, ntd, npd, sa, t, p):
    """
    Seawater specific Gibbs free energy and derivatives up to order 2

    Arguments:
        nsd     : order of s derivative
        ntd     : order of t derivative
        npd     : order of p derivative

        sa      : Absolute Salinity                          [ g/kg ]
        t       : temperature                                 [deg C]
        p       : sea pressure                                 [dbar]

    Returns:
        Specific Gibbs energy or its derivative
    """

    gsw_sfac = GSW_TEOS10_CONSTANTS['gsw_sfac']
    x2 = gsw_sfac * sa
    x = np.sqrt(x2)
    y = t * 0.025
    z = p * 1e-4

    if (nsd == 0) and (ntd == 0) and (npd == 0):

        g03 = 101.342743139674 + z * (100015.695367145
            + z * (-2544.5765420363 + z * (284.517778446287
            + z * (-33.3146754253611 + (4.20263108803084 - 0.546428511471039 * z) * z)))) \
            + y * (5.90578347909402 + z * (-270.983805184062
            + z * (776.153611613101 + z * (-196.51255088122 + (28.9796526294175 - 2.13290083518327 * z) * z)))
            + y * (-12357.785933039 + z * (1455.0364540468
            + z * (-756.558385769359 + z * (273.479662323528 + z * (-55.5604063817218 + 4.34420671917197 * z))))
            + y * (736.741204151612 + z * (-672.50778314507
            + z * (499.360390819152 + z * (-239.545330654412 + (48.8012518593872 - 1.66307106208905 * z) * z)))
            + y * (-148.185936433658 + z * (397.968445406972
            + z * (-301.815380621876 + (152.196371733841 - 26.3748377232802 * z) * z))
            + y * (58.0259125842571 + z * (-194.618310617595
            + z * (120.520654902025 + z * (-55.2723052340152 + 6.48190668077221 * z)))
            + y * (-18.9843846514172 + y * (3.05081646487967 - 9.63108119393062 * z)
            + z * (63.5113936641785 + z * (-22.2897317140459 + 8.17060541818112 * z))))))))

        g08 = x2 * (1416.27648484197 + z * (-3310.49154044839
            + z * (384.794152978599 + z * (-96.5324320107458 + (15.8408172766824 - 2.62480156590992 * z) * z)))
            + x * (-2432.14662381794 + x * (2025.80115603697
            + y * (543.835333000098 + y * (-68.5572509204491
            + y * (49.3667694856254 + y * (-17.1397577419788 + 2.49697009569508 * y))) - 22.6683558512829 * z)
            + x * (-1091.66841042967 - 196.028306689776 * y
            + x * (374.60123787784 - 48.5891069025409 * x + 36.7571622995805 * y) + 36.0284195611086 * z)
            + z * (-54.7919133532887 + (-4.08193978912261 - 30.1755111971161 * z) * z))
            + z * (199.459603073901 + z * (-52.2940909281335 + (68.0444942726459 - 3.41251932441282 * z) * z))
            + y * (-493.407510141682 + z * (-175.292041186547 + (83.1923927801819 - 29.483064349429 * z) * z)
            + y * (-43.0664675978042 + z * (383.058066002476 + z * (-54.1917262517112 + 25.6398487389914 * z))
            + y * (-10.0227370861875 - 460.319931801257 * z + y * (0.875600661808945 + 234.565187611355 * z)))))
            + y * (168.072408311545 + z * (729.116529735046
            + z * (-343.956902961561 + z * (124.687671116248 + z * (-31.656964386073 + 7.04658803315449 * z))))
            + y * (880.031352997204 + y * (-225.267649263401
            + y * (91.4260447751259 + y * (-21.6603240875311 + 2.13016970847183 * y)
            + z * (-297.728741987187 + (74.726141138756 - 36.4872919001588 * z) * z))
            + z * (694.244814133268 + z * (-204.889641964903 + (113.561697840594 - 11.1282734326413 * z) * z)))
            + z * (-860.764303783977 + z * (337.409530269367
            + z * (-178.314556207638 + (44.2040358308 - 7.92001547211682 * z) * z))))))

        if sa > 0.:
            g08 = g08 + x2 * (5812.81456626732 + 851.226734946706 * y) * np.log(x)

        return g03 + g08

    elif (nsd == 1) and (ntd == 0) and (npd == 0):

        g08 = 8645.36753595126 + z * (-6620.98308089678
            + z * (769.588305957198 + z * (-193.0648640214916 + (31.6816345533648 - 5.24960313181984 * z) * z))) \
            + x * (-7296.43987145382 + x * (8103.20462414788
            + y * (2175.341332000392 + y * (-274.2290036817964
            + y * (197.4670779425016 + y * (-68.5590309679152 + 9.98788038278032 * y))) - 90.6734234051316 * z)
            + x * (-5458.34205214835 - 980.14153344888 * y
            + x * (2247.60742726704 - 340.1237483177863 * x + 220.542973797483 * y) + 180.142097805543 * z)
            + z * (-219.1676534131548 + (-16.32775915649044 - 120.7020447884644 * z) * z))
            + z * (598.378809221703 + z * (-156.8822727844005 + (204.1334828179377 - 10.23755797323846 * z) * z))
            + y * (-1480.222530425046 + z * (-525.876123559641 + (249.57717834054571 - 88.449193048287 * z) * z)
            + y * (-129.1994027934126 + z * (1149.174198007428 + z * (-162.5751787551336 + 76.9195462169742 * z))
            + y * (-30.0682112585625 - 1380.9597954037708 * z + y * (2.626801985426835 + 703.695562834065 * z))))) \
            + y * (1187.3715515697959 + z * (1458.233059470092
            + z * (-687.913805923122 + z * (249.375342232496 + z * (-63.313928772146 + 14.09317606630898 * z))))
            + y * (1760.062705994408 + y * (-450.535298526802
            + y * (182.8520895502518 + y * (-43.3206481750622 + 4.26033941694366 * y)
            + z * (-595.457483974374 + (149.452282277512 - 72.9745838003176 * z) * z))
            + z * (1388.489628266536 + z * (-409.779283929806 + (227.123395681188 - 22.2565468652826 * z) * z)))
            + z * (-1721.528607567954 + z * (674.819060538734
            + z * (-356.629112415276 + (88.4080716616 - 15.84003094423364 * z) * z)))))

        if sa > 0:
            g08 = g08 + (11625.62913253464 + 1702.453469893412 * y) * np.log(x)
        else:
            g08 = 0.0

        return 0.5 * gsw_sfac * g08

    elif (nsd == 0) and (ntd == 1) and (npd == 0):

        g03 = 5.90578347909402 + z * (-270.983805184062
            + z * (776.153611613101 + z * (-196.51255088122 + (28.9796526294175 - 2.13290083518327 * z) * z))) \
            + y * (-24715.571866078 + z * (2910.0729080936
            + z * (-1513.116771538718 + z * (546.959324647056 + z * (-111.1208127634436 + 8.68841343834394 * z))))
            + y * (2210.2236124548363 + z * (-2017.52334943521
            + z * (1498.081172457456 + z * (-718.6359919632359 + (146.4037555781616 - 4.9892131862671505 * z) * z)))
            + y * (-592.743745734632 + z * (1591.873781627888
            + z * (-1207.261522487504 + (608.785486935364 - 105.4993508931208 * z) * z))
            + y * (290.12956292128547 + z * (-973.091553087975
            + z * (602.603274510125 + z * (-276.361526170076 + 32.40953340386105 * z)))
            + y * (-113.90630790850321 + y * (21.35571525415769 - 67.41756835751434 * z)
            + z * (381.06836198507096 + z * (-133.7383902842754 + 49.023632509086724 * z)))))))

        g08 = x2 * (168.072408311545 + z * (729.116529735046
            + z * (-343.956902961561 + z * (124.687671116248 + z * (-31.656964386073 + 7.04658803315449 * z))))
            + x * (-493.407510141682 + x * (543.835333000098 + x * (-196.028306689776 + 36.7571622995805 * x)
            + y * (-137.1145018408982 + y * (148.10030845687618 + y * (-68.5590309679152 + 12.4848504784754 * y)))
            - 22.6683558512829 * z) + z * (-175.292041186547 + (83.1923927801819 - 29.483064349429 * z) * z)
            + y * (-86.1329351956084 + z * (766.116132004952 + z * (-108.3834525034224 + 51.2796974779828 * z))
            + y * (-30.0682112585625 - 1380.9597954037708 * z + y * (3.50240264723578 + 938.26075044542 * z))))
            + y * (1760.062705994408 + y * (-675.802947790203
            + y * (365.7041791005036 + y * (-108.30162043765552 + 12.78101825083098 * y)
            + z * (-1190.914967948748 + (298.904564555024 - 145.9491676006352 * z) * z))
            + z * (2082.7344423998043 + z * (-614.668925894709 + (340.685093521782 - 33.3848202979239 * z) * z)))
            + z * (-1721.528607567954 + z * (674.819060538734
            + z * (-356.629112415276 + (88.4080716616 - 15.84003094423364 * z) * z)))))

        if sa > 0:
            g08 = g08 + 851.226734946706 * x2 * np.log(x)

        return (g03 + g08) * 0.025

    elif (nsd == 0) and (ntd == 0) and (npd == 1):

        g03 = 100015.695367145 + z * (-5089.1530840726
            + z * (853.5533353388611 + z * (-133.2587017014444 + (21.0131554401542 - 3.278571068826234 * z) * z))) \
            + y * (-270.983805184062 + z * (1552.307223226202
            + z * (-589.53765264366 + (115.91861051767 - 10.664504175916349 * z) * z))
            + y * (1455.0364540468 + z * (-1513.116771538718
            + z * (820.438986970584 + z * (-222.2416255268872 + 21.72103359585985 * z)))
            + y * (-672.50778314507 + z * (998.720781638304
            + z * (-718.6359919632359 + (195.2050074375488 - 8.31535531044525 * z) * z))
            + y * (397.968445406972 + z * (-603.630761243752 + (456.589115201523 - 105.4993508931208 * z) * z)
            + y * (-194.618310617595 + y * (63.5113936641785 - 9.63108119393062 * y
            + z * (-44.5794634280918 + 24.511816254543362 * z))
            + z * (241.04130980405 + z * (-165.8169157020456
            + 25.92762672308884 * z)))))))

        g08 = x2 * (-3310.49154044839 + z * (769.588305957198
            + z * (-289.5972960322374 + (63.3632691067296 - 13.1240078295496 * z) * z))
            + x * (199.459603073901 + x * (-54.7919133532887 + 36.0284195611086 * x - 22.6683558512829 * y
            + (-8.16387957824522 - 90.52653359134831 * z) * z)
            + z * (-104.588181856267 + (204.1334828179377 - 13.65007729765128 * z) * z)
            + y * (-175.292041186547 + (166.3847855603638 - 88.449193048287 * z) * z
            + y * (383.058066002476 + y * (-460.319931801257 + 234.565187611355 * y)
            + z * (-108.3834525034224 + 76.9195462169742 * z))))
            + y * (729.116529735046 + z * (-687.913805923122
            + z * (374.063013348744 + z * (-126.627857544292 + 35.23294016577245 * z)))
            + y * (-860.764303783977 + y * (694.244814133268
            + y * (-297.728741987187 + (149.452282277512 - 109.46187570047641 * z) * z)
            + z * (-409.779283929806 + (340.685093521782 - 44.5130937305652 * z) * z))
            + z * (674.819060538734 + z * (-534.943668622914 + (176.8161433232 - 39.600077360584095 * z) * z)))))

        return (g03 + g08) * 1e-8

    elif (nsd == 0) and (ntd == 2) and (npd == 0):

        g03 = -24715.571866078 + z * (2910.0729080936 + z
           * (-1513.116771538718 + z * (546.959324647056 + z * (-111.1208127634436 + 8.68841343834394 * z)))) \
           + y * (4420.4472249096725 + z * (-4035.04669887042
           + z * (2996.162344914912 + z * (-1437.2719839264719 + (292.8075111563232 - 9.978426372534301 * z) * z)))
           + y * (-1778.231237203896 + z * (4775.621344883664
           + z * (-3621.784567462512 + (1826.356460806092 - 316.49805267936244 * z) * z))
           + y * (1160.5182516851419 + z * (-3892.3662123519
           + z * (2410.4130980405 + z * (-1105.446104680304 + 129.6381336154442 * z)))
           + y * (-569.531539542516 + y * (128.13429152494615 - 404.50541014508605 * z)
           + z * (1905.341809925355 + z * (-668.691951421377 + 245.11816254543362 * z))))))

        g08 = x2 * (1760.062705994408 + x * (-86.1329351956084
            + x * (-137.1145018408982 + y * (296.20061691375236 + y * (-205.67709290374563 + 49.9394019139016 * y)))
            + z * (766.116132004952 + z * (-108.3834525034224 + 51.2796974779828 * z))
            + y * (-60.136422517125 - 2761.9195908075417 * z + y * (10.50720794170734 + 2814.78225133626 * z)))
            + y * (-1351.605895580406 + y * (1097.1125373015109 + y * (-433.20648175062206 + 63.905091254154904 * y)
            + z * (-3572.7449038462437 + (896.713693665072 - 437.84750280190565 * z) * z))
            + z * (4165.4688847996085 + z * (-1229.337851789418 + (681.370187043564 - 66.7696405958478 * z) * z)))
            + z * (-1721.528607567954 + z * (674.819060538734
            + z * (-356.629112415276 + (88.4080716616 - 15.84003094423364 * z) * z))))

        return (g03 + g08) * 0.000625

    elif (nsd == 1) and (ntd == 0) and (npd == 1):

        g08 = -6620.98308089678 + z * (1539.176611914396
            + z * (-579.1945920644748 + (126.7265382134592 - 26.2480156590992 * z) * z)) \
            + x * (598.378809221703 + x * (-219.1676534131548 + 180.142097805543 * x - 90.6734234051316 * y
            + (-32.65551831298088 - 362.10613436539325 * z) * z)
            + z * (-313.764545568801 + (612.4004484538132 - 40.95023189295384 * z) * z)
            + y * (-525.876123559641 + (499.15435668109143 - 265.347579144861 * z) * z
            + y * (1149.174198007428 + y * (-1380.9597954037708 + 703.695562834065 * y)
            + z * (-325.1503575102672 + 230.7586386509226 * z)))) \
            + y * (1458.233059470092 + z * (-1375.827611846244
            + z * (748.126026697488 + z * (-253.255715088584 + 70.4658803315449 * z)))
            + y * (-1721.528607567954 + y * (1388.489628266536
            + y * (-595.457483974374 + (298.904564555024 - 218.92375140095282 * z) * z)
            + z * (-819.558567859612 + (681.370187043564 - 89.0261874611304 * z) * z))
            + z * (1349.638121077468 + z * (-1069.887337245828 + (353.6322866464 - 79.20015472116819 * z) * z))))

        return g08 * gsw_sfac * 0.5e-8

    elif (nsd == 0) and (ntd == 1) and (npd == 1):

        g03 = -270.983805184062 + z * (1552.307223226202 + z * (-589.53765264366
              + (115.91861051767 - 10.664504175916349 * z) * z)) \
            + y * (2910.0729080936 + z * (-3026.233543077436
            + z * (1640.877973941168 + z * (-444.4832510537744 + 43.4420671917197 * z)))
            + y * (-2017.52334943521 + z * (2996.162344914912
            + z * (-2155.907975889708 + (585.6150223126464 - 24.946065931335752 * z) * z))
            + y * (1591.873781627888 + z * (-2414.523044975008 + (1826.356460806092 - 421.9974035724832 * z) * z)
            + y * (-973.091553087975 + z * (1205.20654902025 + z * (-829.084578510228 + 129.6381336154442 * z))
            + y * (381.06836198507096 - 67.41756835751434 * y + z * (-267.4767805685508 + 147.07089752726017 * z))))))

        g08 = x2 * (729.116529735046 + z * (-687.913805923122
            + z * (374.063013348744 + z * (-126.627857544292 + 35.23294016577245 * z)))
            + x * (-175.292041186547 - 22.6683558512829 * x + (166.3847855603638 - 88.449193048287 * z) * z
            + y * (766.116132004952 + y * (-1380.9597954037708 + 938.26075044542 * y)
            + z * (-216.7669050068448 + 153.8390924339484 * z)))
            + y * (-1721.528607567954 + y * (2082.7344423998043
            + y * (-1190.914967948748 + (597.809129110048 - 437.84750280190565 * z) * z)
            + z * (-1229.337851789418 + (1022.055280565346 - 133.5392811916956 * z) * z))
            + z * (1349.638121077468 + z * (-1069.887337245828 + (353.6322866464 - 79.20015472116819 * z) * z))))

        return (g03 + g08) * 2.5e-10

    elif (nsd == 1) and (ntd == 1) and (npd == 0):

        g08 = 1187.3715515697959 + z * (1458.233059470092
            + z * (-687.913805923122 + z * (249.375342232496 + z * (-63.313928772146 + 14.09317606630898 * z)))) \
            + x * (-1480.222530425046 + x * (2175.341332000392 + x * (-980.14153344888 + 220.542973797483 * x)
            + y * (-548.4580073635929 + y * (592.4012338275047 + y * (-274.2361238716608 + 49.9394019139016 * y)))
            - 90.6734234051316 * z) + z * (-525.876123559641 + (249.57717834054571 - 88.449193048287 * z) * z)
            + y * (-258.3988055868252 + z * (2298.348396014856 + z * (-325.1503575102672 + 153.8390924339484 * z))
            + y * (-90.2046337756875 - 4142.8793862113125 * z + y * (10.50720794170734 + 2814.78225133626 * z)))) \
            + y * (3520.125411988816 + y * (-1351.605895580406
            + y * (731.4083582010072 + y * (-216.60324087531103 + 25.56203650166196 * y)
            + z * (-2381.829935897496 + (597.809129110048 - 291.8983352012704 * z) * z))
            + z * (4165.4688847996085 + z * (-1229.337851789418 + (681.370187043564 - 66.7696405958478 * z) * z)))
            + z * (-3443.057215135908 + z * (1349.638121077468
            + z * (-713.258224830552 + (176.8161433232 - 31.68006188846728 * z) * z))))

        if sa > 0:
            g08 = g08 + 1702.453469893412 * np.log(x)

        return 0.5 * gsw_sfac * 0.025 * g08

    elif (nsd == 2) and (ntd == 0) and (npd == 0):

        g08 = 2.0 * (8103.20462414788
            + y * (2175.341332000392 + y * (-274.2290036817964
            + y * (197.4670779425016 + y * (-68.5590309679152 + 9.98788038278032 * y))) - 90.6734234051316 * z)
            + 1.5 * x * (-5458.34205214835 - 980.14153344888 * y
            + (4.0 / 3.0) * x * (2247.60742726704 - 340.1237483177863*1.25 * x + 220.542973797483 * y)
            + 180.142097805543 * z)
            + z * (-219.1676534131548 + (-16.32775915649044 - 120.7020447884644 * z) * z))

        if x > 0:
            g08 = g08 + (-7296.43987145382 + z * (598.378809221703
                + z * (-156.8822727844005 + (204.1334828179377 - 10.23755797323846 * z) * z))
                + y * (-1480.222530425046 + z * (-525.876123559641
                + (249.57717834054571 - 88.449193048287 * z) * z)
                + y * (-129.1994027934126 + z * (1149.174198007428
                + z * (-162.5751787551336 + 76.9195462169742 * z))
                + y * (-30.0682112585625 - 1380.9597954037708 * z
                + y * (2.626801985426835 + 703.695562834065 * z))))) / x \
                + (11625.62913253464 + 1702.453469893412 * y) / x2
        else:
            g08 = 0.0

        return 0.25 * gsw_sfac * gsw_sfac * g08

    elif (nsd == 0) and (ntd == 0) and (npd == 2):

        g03 = -5089.1530840726 \
            + z * (1707.1066706777221
                   + z * (-399.7761051043332 + (84.0526217606168 - 16.39285534413117 * z) * z)) \
            + y * (1552.307223226202 + z * (-1179.07530528732 + (347.75583155301 - 42.658016703665396 * z) * z)
            + y * (-1513.116771538718 + z * (1640.877973941168 + z * (-666.7248765806615 + 86.8841343834394 * z))
                + y * (998.720781638304 + z * (-1437.2719839264719 + (585.6150223126464 - 33.261421241781 * z) * z)
                + y * (-603.630761243752 + (913.178230403046 - 316.49805267936244 * z) * z
                    + y * (241.04130980405 + y * (-44.5794634280918 + 49.023632509086724 * z)
                           + z * (-331.6338314040912 + 77.78288016926652 * z))))))

        g08 = x2 * (769.588305957198 + z * (-579.1945920644748 + (190.08980732018878 - 52.4960313181984 * z) * z)
            + x * (-104.588181856267 + x * (-8.16387957824522 - 181.05306718269662 * z)
                   + (408.2669656358754 - 40.95023189295384 * z) * z
            + y * (166.3847855603638 - 176.898386096574 * z + y * (-108.3834525034224 + 153.8390924339484 * z)))
                + y * (-687.913805923122 + z * (748.126026697488 + z * (-379.883572632876 + 140.9317606630898 * z))
                + y * (674.819060538734 + z * (-1069.887337245828 + (530.4484299696 - 158.40030944233638 * z) * z)
                    + y * (-409.779283929806 + y * (149.452282277512 - 218.92375140095282 * z)
                           + (681.370187043564 - 133.5392811916956 * z) * z))))

        return (g03 + g08) * 1e-16

    else:

        raise ValueError('nsd, ntd and npd values do not match '
                         + '(given: {}, {}, {})'.format(nsd, ntd, npd))


@veros_method
def gsw_gibbs_pt0_pt0(vs, sa, pt0):
    """
    gibbs_tt at (sa,pt,0)

    Arguments:
        sa     : Absolute Salinity                            [g/kg]
        pt0    : potential temperature                        [deg C]
    """

    x2 = GSW_TEOS10_CONSTANTS['gsw_sfac'] * sa
    x = np.sqrt(x2)
    y = pt0 * 0.025

    g03 = -24715.571866078 \
        + y * (4420.4472249096725
               + y * (-1778.231237203896
                      + y * (1160.5182516851419
                             + y * (-569.531539542516 + y * 128.13429152494615))))

    g08 = x2 * (1760.062705994408
                + x * (-86.1329351956084
                       + x * (-137.1145018408982 + y * (296.20061691375236
                              + y * (-205.67709290374563 + 49.9394019139016 * y)))
                       + y * (-60.136422517125 + y * 10.50720794170734))
                + y * (-1351.605895580406 + y * (1097.1125373015109
                       + y * (-433.20648175062206 + 63.905091254154904 * y))))

    return (g03 + g08) * 0.000625


@veros_method
def gsw_ct_from_pt(vs, sa, pt):
    """
    Calculates Conservative Temperature from potential temperature of seawater

    Arguments:
        sa      : Absolute Salinity                              [g/kg]
        pt      : potential temperature with                     [deg C]
                  reference pressure of 0 dbar
    Returns:
        Conservative Temperature                                 [deg C]
    """

    x2 = GSW_TEOS10_CONSTANTS['gsw_sfac'] * sa
    x = np.sqrt(x2)
    y = pt * 0.025

    return (61.01362420681071
            + y * (168776.46138048015
                   + y * (-2735.2785605119625
                          + y * (2574.2164453821433
                                 + y * (-1536.6644434977543 + y * (545.7340497931629
                                                                   + (-50.91091728474331 - 18.30489878927802 * y) * y)))))
            + x2 * (268.5520265845071
                    + y * (-12019.028203559312 + y * (3734.858026725145 + y * (-2046.7671145057618
                                                      + y * (465.28655623826234 + (-0.6370820302376359 - 10.650848542359153 * y) * y))))
                    + x * (937.2099110620707
                           + y * (588.1802812170108 + y * (248.39476522971285 + (-3.871557904936333 - 2.6268019854268356 * y) * y))
                           + x * (-1687.914374187449 + x * (246.9598888781377 + x * (123.59576582457964 - 48.5891069025409 * x))
                                  + y * (936.3206544460336 + y * (-942.7827304544439 + y * (369.4389437509002 + (-33.83664947895248 - 9.987880382780322 * y) * y))))))) \
            / GSW_TEOS10_CONSTANTS['gsw_cp0']


@veros_method
def gsw_pt_from_ct(vs, sa, ct):
    """
    Potential temperature of seawater from conservative temperature

    Arguments:
        sa     : Absolute Salinity                               [g/kg]
        ct     : Conservative Temperature                        [deg C]
        p      : sea pressure                                    [dbar]

    Returns:
        Potential temperature with reference pressure of 0 dbar  [deg C]

    Reference:
        McDougall, T. J., D. R. Jackett, D. G. Wright and R. Feistel, 2003:
        Accurate and computationally efficient algorithms for potential
        temperature and density of seawater.
        Journal of Atmospheric and Oceanic Technology, 20, 730-741
    """

    A0 = -1.446013646344788e-2
    A1 = -3.305308995852924e-3
    A2 = 1.062415929128982e-4
    A3 = 9.477566673794488e-1
    A4 = 2.166591947736613e-3
    A5 = 3.828842955039902e-3

    B0 = 1.0
    B1 = 6.506097115635800e-4
    B2 = 3.830289486850898e-3
    B3 = 1.247811760368034e-6

    s1 = sa / GSW_TEOS10_CONSTANTS['gsw_ups']

    a5ct = A5 * ct
    b3ct = B3 * ct

    ct_factor = (A3 + A4 * s1 + a5ct)
    pt_num = A0 + s1 * (A1 + A2 * s1) + ct * ct_factor
    pt_recden = 1.0 / (B0 + B1 * s1 + ct * (B2 + b3ct))
    pt = pt_num * pt_recden

    dpt_dct = (ct_factor + a5ct - (B2 + b3ct + b3ct) * pt) * pt_recden

    # Start the 1.5 iterations through the modified Newton-Rapshon iterative,
    # method, which is also known as the Newton-McDougall method.

    ct_diff = gsw_ct_from_pt(vs, sa, pt) - ct
    pt_old = pt
    pt = pt_old - ct_diff * dpt_dct
    ptm = 0.5 * (pt + pt_old)

    dpt_dct = -GSW_TEOS10_CONSTANTS['gsw_cp0'] \
        / ((ptm + GSW_TEOS10_CONSTANTS['gsw_t0'])
            * gsw_gibbs_pt0_pt0(vs, sa, ptm))

    pt = pt_old - ct_diff * dpt_dct
    ct_diff = gsw_ct_from_pt(vs, sa, pt) - ct
    pt_old = pt
    gsw_pt_from_ct = pt_old - ct_diff * dpt_dct

    return gsw_pt_from_ct


@veros_method
def gsw_rho_t_exact(vs, sa, t, p):
    """
    Calculates in-situ density of seawater from Absolute Salinity and
    in-situ temperature.

    Arguments:
        sa     : Absolute Salinity                               [ g/kg ]
        t      : in-situ temperature                              [deg C]
        p      : sea pressure                                      [dbar]

    Returns:
        in-situ density                                          [kg/m^3]
    """

    return 1.0 / gsw_gibbs(vs, 0, 0, 1, sa, t, p)


@veros_method
def gsw_pot_rho_ct(vs, sa, ct, p_ref=0.):
    """
    Calculates the potential density of seawater from Absolute Salinity and
    Conservative Temperature

    Arguments:
        sa     : Absolute Salinity                               [ g/kg ]
        ct     : Conservative Temperature                         [deg C]
        p_ref  : reference sea pressure                            [dbar]

    Returns:
        Potential density                                        [kg/m^3]
    """

    pt = gsw_pt_from_ct(vs, sa, ct)
    return gsw_rho_t_exact(vs, sa, pt, p=p_ref) - rho0

