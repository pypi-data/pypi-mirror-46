# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tvlnv')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_tvlnv')
    _tvlnv = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tvlnv', [dirname(__file__)])
        except ImportError:
            import _tvlnv
            return _tvlnv
        try:
            _mod = imp.load_module('_tvlnv', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _tvlnv = swig_import_helper()
    del swig_import_helper
else:
    import _tvlnv
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x



NVDECException = _tvlnv.NVDECException

class TvlnvFrameReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TvlnvFrameReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TvlnvFrameReader, name)
    __repr__ = _swig_repr

    def __init__(self, mem_manager, video_file_path, gpu_index, out_width=0, out_height=0):
        this = _tvlnv.new_TvlnvFrameReader(mem_manager, video_file_path, gpu_index, out_width, out_height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnv.delete_TvlnvFrameReader
    __del__ = lambda self: None

    def get_filename(self):
        return _tvlnv.TvlnvFrameReader_get_filename(self)

    def get_width(self):
        return _tvlnv.TvlnvFrameReader_get_width(self)

    def get_height(self):
        return _tvlnv.TvlnvFrameReader_get_height(self)

    def get_frame_size(self):
        return _tvlnv.TvlnvFrameReader_get_frame_size(self)

    def get_duration(self):
        return _tvlnv.TvlnvFrameReader_get_duration(self)

    def get_frame_rate(self):
        return _tvlnv.TvlnvFrameReader_get_frame_rate(self)

    def get_number_of_frames(self):
        return _tvlnv.TvlnvFrameReader_get_number_of_frames(self)

    def seek(self, time_secs):
        return _tvlnv.TvlnvFrameReader_seek(self, time_secs)

    def read_frame(self):
        return _tvlnv.TvlnvFrameReader_read_frame(self)
TvlnvFrameReader_swigregister = _tvlnv.TvlnvFrameReader_swigregister
TvlnvFrameReader_swigregister(TvlnvFrameReader)

MEM_TYPE_HOST = _tvlnv.MEM_TYPE_HOST
MEM_TYPE_CUDA = _tvlnv.MEM_TYPE_CUDA
LENGTH_MEM_TYPE = _tvlnv.LENGTH_MEM_TYPE
class MemManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemManager, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _tvlnv.delete_MemManager
    __del__ = lambda self: None

    def allocate(self, size):
        return _tvlnv.MemManager_allocate(self, size)

    def clear(self):
        return _tvlnv.MemManager_clear(self)

    def get_mem_type(self):
        return _tvlnv.MemManager_get_mem_type(self)
    __swig_setmethods__["cu_context"] = _tvlnv.MemManager_cu_context_set
    __swig_getmethods__["cu_context"] = _tvlnv.MemManager_cu_context_get
    if _newclass:
        cu_context = _swig_property(_tvlnv.MemManager_cu_context_get, _tvlnv.MemManager_cu_context_set)

    def __init__(self):
        if self.__class__ == MemManager:
            _self = None
        else:
            _self = self
        this = _tvlnv.new_MemManager(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _tvlnv.disown_MemManager(self)
        return weakref_proxy(self)
MemManager_swigregister = _tvlnv.MemManager_swigregister
MemManager_swigregister(MemManager)

class HostMemManager(MemManager):
    __swig_setmethods__ = {}
    for _s in [MemManager]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostMemManager, name, value)
    __swig_getmethods__ = {}
    for _s in [MemManager]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HostMemManager, name)
    __repr__ = _swig_repr

    def allocate(self, size):
        return _tvlnv.HostMemManager_allocate(self, size)

    def clear(self):
        return _tvlnv.HostMemManager_clear(self)

    def get_mem_type(self):
        return _tvlnv.HostMemManager_get_mem_type(self)

    def __init__(self):
        this = _tvlnv.new_HostMemManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnv.delete_HostMemManager
    __del__ = lambda self: None
HostMemManager_swigregister = _tvlnv.HostMemManager_swigregister
HostMemManager_swigregister(HostMemManager)

class CuMemManager(MemManager):
    __swig_setmethods__ = {}
    for _s in [MemManager]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CuMemManager, name, value)
    __swig_getmethods__ = {}
    for _s in [MemManager]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CuMemManager, name)
    __repr__ = _swig_repr

    def allocate(self, size):
        return _tvlnv.CuMemManager_allocate(self, size)

    def clear(self):
        return _tvlnv.CuMemManager_clear(self)

    def get_mem_type(self):
        return _tvlnv.CuMemManager_get_mem_type(self)

    def __init__(self):
        this = _tvlnv.new_CuMemManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnv.delete_CuMemManager
    __del__ = lambda self: None
CuMemManager_swigregister = _tvlnv.CuMemManager_swigregister
CuMemManager_swigregister(CuMemManager)

class Rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l"] = _tvlnv.Rect_l_set
    __swig_getmethods__["l"] = _tvlnv.Rect_l_get
    if _newclass:
        l = _swig_property(_tvlnv.Rect_l_get, _tvlnv.Rect_l_set)
    __swig_setmethods__["t"] = _tvlnv.Rect_t_set
    __swig_getmethods__["t"] = _tvlnv.Rect_t_get
    if _newclass:
        t = _swig_property(_tvlnv.Rect_t_get, _tvlnv.Rect_t_set)
    __swig_setmethods__["r"] = _tvlnv.Rect_r_set
    __swig_getmethods__["r"] = _tvlnv.Rect_r_get
    if _newclass:
        r = _swig_property(_tvlnv.Rect_r_get, _tvlnv.Rect_r_set)
    __swig_setmethods__["b"] = _tvlnv.Rect_b_set
    __swig_getmethods__["b"] = _tvlnv.Rect_b_get
    if _newclass:
        b = _swig_property(_tvlnv.Rect_b_get, _tvlnv.Rect_b_set)

    def __init__(self):
        this = _tvlnv.new_Rect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnv.delete_Rect
    __del__ = lambda self: None
Rect_swigregister = _tvlnv.Rect_swigregister
Rect_swigregister(Rect)

class Dim(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dim, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dim, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _tvlnv.Dim_w_set
    __swig_getmethods__["w"] = _tvlnv.Dim_w_get
    if _newclass:
        w = _swig_property(_tvlnv.Dim_w_get, _tvlnv.Dim_w_set)
    __swig_setmethods__["h"] = _tvlnv.Dim_h_set
    __swig_getmethods__["h"] = _tvlnv.Dim_h_get
    if _newclass:
        h = _swig_property(_tvlnv.Dim_h_get, _tvlnv.Dim_h_set)

    def __init__(self):
        this = _tvlnv.new_Dim()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tvlnv.delete_Dim
    __del__ = lambda self: None
Dim_swigregister = _tvlnv.Dim_swigregister
Dim_swigregister(Dim)

# This file is compatible with both classic and new-style classes.


