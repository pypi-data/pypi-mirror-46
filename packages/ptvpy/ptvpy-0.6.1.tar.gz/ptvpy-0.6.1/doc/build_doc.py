#!/usr/bin/env python

"""Helper & command line script to to build the documentation.

This script generates stub files for the command line and Python interface of
PtvPy. The files are created inside the subdirectory "_generated". See the
command line help of this script for usage information.
"""


import shutil
import types
import re
from pathlib import Path
from importlib import import_module

import sphinx.cmd.build
from textwrap import indent
import click
from click.testing import CliRunner

import ptvpy
from ptvpy._cli_root import root_group
from ptvpy._profile import profile_template


here = Path(__file__).parent


CLI_DOCUMENT_HEADER = """.. Autogenerated with build_doc.py

:gitlab_url: https://gitlab.com/tud-mst/ptvpy/blob/master/doc/build_doc.py

.. _cli:

======================
Command Line Interface
======================

This page provides an auto-generated summary of PtvPy's command line usage. For
more details and examples, refer to the relevant guides.


"""


CLI_SECTION_TEMPLATE = """.. _cli-{label}:

{title}
{underline}

Output of ``{title} --help``:

.. code-block:: none

{usage_message}


"""


#: Document only these modules (order matters).
API_MODULES = [
    "ptvpy.errors",
    "ptvpy.generate",
    "ptvpy.io",
    "ptvpy.plot",
    "ptvpy.process",
    "ptvpy.utils",
    "ptvpy._cli_generate",
    "ptvpy._cli_process",
    "ptvpy._cli_profile",
    "ptvpy._cli_root",
    "ptvpy._cli_view",
    "ptvpy._profile",
    "ptvpy._schema",
]


API_DOCUMENT_HEADER = """.. Autogenerated with build_doc.py

:gitlab_url: https://gitlab.com/tud-mst/ptvpy/blob/master/doc/build_doc.py

.. _api:

===========
Package API
===========

This page provides an auto-generated summary of PtvPyâ€™s API if imported as a 
Python package. For more details and examples, refer to the relevant guides.

.. warning:: 

   The API is still in development and may change significantly in the future.
   This applies especially to private modules and objects which are prefixed 
   with "_". 


"""


API_SECTION_TEMPLATE = """.. _api-{module_name}:

{module_name}
{underline}

.. automodule:: {module_name}

.. currentmodule::  {module_name}

.. autosummary::
   :nosignatures:
   :toctree:
   :template: object.rst

   {members}


"""


PROFILE_DOCUMENT_HEADER = """.. Autogenerated with build_doc.py

:gitlab_url: https://gitlab.com/tud-mst/ptvpy/blob/master/doc/build_doc.py

.. _profile-config:

=====================
Profile Configuration
=====================

This page provides an auto-generated summary of the configuration options available
in PtvPy's profiles. To start with a fresh profile you can use the command 
:ref:`cli-ptvpy-profile-create` or manually create one using this 
:download:`template <../../src/ptvpy/profile_template.toml>`. The file itself uses 
the TOML_ language.

.. _TOML: https://github.com/toml-lang/toml/blob/master/versions/en/toml-v0.5.0.md

"""


PROFILE_SECTION_TEMPLATE = """.. _profile-{title}:

{title}
{underline}

"""


PROFILE_OPTION_TEMPLATE = """.. _profile-{name}:

{name}
{underline}

{comment}

"""


# Requires http[s]-protocol-string! Source http://urlregex.com/
URL_REGEX = (
    r"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+"
)


#: If true, python objects prefix with "_" will be included. Overwritten by
#: command line option "--show-private".
_SHOW_PRIVATE_API = False


def clear_directory(path):
    """Clear directory at `path`."""
    path = Path(path)
    if path.is_dir():
        shutil.rmtree(path)
    path.mkdir()


def _generate_cli_section(cmds, underline_char):
    names = [cmd.name for cmd in cmds]
    result = CliRunner().invoke(cmds[0], names[1:] + ["--help"])
    title = " ".join(names)
    return CLI_SECTION_TEMPLATE.format(
        label="-".join(names),
        title=title,
        underline=(underline_char * len(title)),
        usage_message=indent(result.output, prefix="   "),
    )


def generate_cli_doc(path: Path):
    """Document command line interface."""
    root_group.name = "ptvpy"  # Overwrite default name "__main__"
    document = CLI_DOCUMENT_HEADER

    # Add section for root commmand
    document += _generate_cli_section(cmds=[root_group], underline_char="=")

    # Create page for subcommands on the same level as root command
    for sub_cmd in root_group.commands.values():
        document += _generate_cli_section(
            cmds=[root_group, sub_cmd], underline_char="="
        )

        # Create pages for subsubcommands
        if hasattr(sub_cmd, "commands"):
            for sub_sub_cmd in sub_cmd.commands.values():
                document += _generate_cli_section(
                    cmds=[root_group, sub_cmd, sub_sub_cmd], underline_char="-"
                )

    with open(path, "w") as stream:
        stream.write(document)


def _in_api(obj_name, obj_value, module_name):
    """Check whether a module level object is part of the API.

    Parameters
    ----------
    obj_name : str
        Name of the object inside the current module.
    obj_value : any
        The object itself.
    module_name : str
        Name of the module the key-value pair was found in.

    Returns
    -------
    in_api : bool
        Whether the object is part of the API that should be documented.
    """
    if obj_name.startswith("__" if _SHOW_PRIVATE_API else "_"):
        return False

    if isinstance(obj_value, click.BaseCommand):
        # Replace object with original wrapped Python function so that the
        # true module origin is tested later
        obj_value = obj_value.callback

    if hasattr(obj_value, "__module__"):
        # Test if function or class was defined in current module
        if obj_value.__module__ == module_name:
            return True

    # Omit imported modules such as `os` which have no attribute "__module__
    elif not isinstance(obj_value, types.ModuleType):
        return True

    return False


def generate_api_doc(path: Path):
    """Create a file documenting the Python API at `path`.

    The function :func:`_in_api` decides which functions are part of the API.
    """
    # Modules that are part of the API
    document = API_DOCUMENT_HEADER

    for module_name in API_MODULES:
        if not _SHOW_PRIVATE_API and (
            module_name.startswith("_") or "._" in module_name
        ):
            # Skip unless _SHOW_PRIVATE_API is True
            continue

        # Get members
        module = import_module(module_name)
        members = sorted(
            obj_name
            for obj_name, obj_value in module.__dict__.items()
            if _in_api(obj_name, obj_value, module_name)
        )

        if _SHOW_PRIVATE_API and members:
            # Make sure private members are sorted last
            public = [m for m in members if not m.startswith("_")]
            private = [m for m in members if m.startswith("_")]
            members = public + private

        document += API_SECTION_TEMPLATE.format(
            module_name=module_name,
            underline=("=" * len(module_name)),
            members="\n   ".join(members),
        )

    with open(path, "w") as stream:
        stream.write(document)


def generate_profile_doc(path: Path):
    """Create a file documenting the profile configuration `path`.

    This function parses the raw profile template in a very straight-forward
    (and naive) way and may be prone do breakage. URLs are converted to
    footnotes [#1]_.

    References
    ----------
    .. [1] http://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#footnotes
    """
    profile = profile_template(parse=False)

    blocks = [s.strip() for s in profile.split("\n\n")]
    blocks = blocks[1:]  # Skip header
    document = []
    for block in blocks:

        if block.startswith("["):
            # Parse section
            first_line = block.split("\n")[0]
            title = first_line[1:-1]
            document.append(
                PROFILE_SECTION_TEMPLATE.format(title=title, underline=len(title) * "=")
            )

        elif block.startswith("# "):
            # Parse option
            lines = block.split("\n")
            name = [l for l in lines if not l.startswith("# ") and "=" in l]
            name = ", ".join(l.split("=")[0].strip() for l in name)
            name = name.replace("#", "")
            comment = [l for l in lines if l.startswith("# ")]
            comment = " ".join(comment)
            comment = comment.replace("# ", "")
            document.append(
                PROFILE_OPTION_TEMPLATE.format(
                    name=name, underline=len(name) * "-", comment=comment
                )
            )

    document = "\n".join(document)

    # Replace URLs with footnotes and append to the end of the document
    urls = re.findall(URL_REGEX, document)
    urls = list(dict.fromkeys(urls))  # Use unique URLs preserving order
    footnotes = []
    for i, url in enumerate(urls):
        document = document.replace(url, f"[#f{i}]_")
        footnotes.append(f".. [#f{i}] {url}")
    document += "-----\n\n" + "\n".join(footnotes)

    with open(path, "w") as stream:
        stream.write(PROFILE_DOCUMENT_HEADER)
        stream.write(document)


@click.command()
@click.argument("build_dir", type=click.Path(file_okay=False))
@click.option(
    "--clear",
    is_flag=True,
    help="Explicitly clear 'doc/_generated' and 'build/html-doc' folders.",
)
@click.option(
    "--sphinx",
    help="Overwrite certain options passed to sphinx-build. Default: '-a -E'",
    type=click.STRING,
    default="-a -E",
)
@click.option(
    "--show-private",
    is_flag=True,
    help="Include private classes and functions in API documentation.",
)
@click.help_option("-h", "--help")
def main(**kwargs):
    """Build documentation but do some pre-processing first.

    The RST-files documenting PtvPy's CLI and API must be auto-generated before
    invoking sphinx-build. It will generate the files `profile.rst`, `cli.rst`,
    and `api.rst` inside the "doc/_generated" directory before invoking
    sphinx-build which creates the full HTML documentation inside BUILD_DIR.
    """
    click.echo(f"Using PtvPy at '{Path(ptvpy.__file__).parent}'")
    global _SHOW_PRIVATE_API
    _SHOW_PRIVATE_API = kwargs["show_private"]

    target_dir = here / "_generated"
    if not target_dir.is_dir():
        target_dir.mkdir()

    if kwargs["clear"]:
        click.echo(f"clearing '{target_dir}' folder...")
        clear_directory(target_dir)
        path = Path(kwargs["build_dir"])
        click.echo(f"clearing '{path}' folder...")
        clear_directory(path)

    path = target_dir / "cli.rst"
    click.echo(f"generating '{path}'...")
    generate_cli_doc(path)

    path = target_dir / "api.rst"
    click.echo(f"generating '{path}'...")
    generate_api_doc(path)

    path = target_dir / "profile.rst"
    click.echo(f"generating '{path}'...")
    generate_profile_doc(path)

    argv = [
        "sphinx-build",
        *kwargs["sphinx"].split(" "),
        "-b",
        "html",
        str(here),
        kwargs["build_dir"],
    ]
    click.echo(f"invoking '{' '.join(argv)}':")
    sphinx.cmd.build.main(argv[1:])


if __name__ == "__main__":
    main()
