/*
 ******************************************************************************
 *
 * Convert CUBE to GRD3D format... IN PREP!!
 *
 ******************************************************************************
 */

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "libxtg.h"
#include "libxtg_.h"

/*
 ******************************************************************************
 *
 * NAME:
 *    grd3d_from_cube.c
 *
 * AUTHOR(S):
 *    Jan C. Rivenaes
 *
 * DESCRIPTION:
 *    Makes a grd3d structure, with property, from a Cube object
 *
 * ARGUMENTS:
 *
 * RETURNS:
 *    0 if OK
 *    Resulting pointers will be updated.
 *
 * TODO/ISSUES/BUGS:
 *
 * LICENCE:
 *    cf. XTGeo LICENSE
 ******************************************************************************
 */

/* ######################################################################### */
/* LIBRARY FUNCTION                                                          */
/* ######################################################################### */

int grd3d_from_cube (
                     int nx,
                     int ny,
                     int nz,
                     double xori,
                     double yori,
                     double zori,
                     double xinc,
                     double yinc,
                     double zinc,
                     double rotation,
                     int yflip,
                     double *cube_v,
                     double *coord_v,
                     double *zcorn_v,
                     int *actnum_v,
                     double *prop_v
                     )
{

    /* IN PREP! */

    char s[24] = "grd3d_from_cube";
    int anint, iok;

    xtgverbose(debug);

    xtg_speak(s, 2, "Making COORD vector:", s);

    ib = 0;
    for (k = 1; k <= nz; k++) {
        for (j = 1; j <= ny; j++) {
            for (i = 1; i <= nx; i++) {

                if (k == 1) {
                    cube_xy_from_ij(i, j, &xcoord, &ycoord, xori, xinc, yori,
                                    yinc, nx, ny, yflip, rotation, 0, debug);

                    coord_v[ib++] = xcoord;
                    coord_v[ib++] = ycoord;
                    coord_v[ib++] = zori;

                    coord_v[ib++] = xcoord;
                    coord_v[ib++] = ycoord;
                    coord_v[ib++] = zori + zinc * nz;
                }

                /* ZCORN array */
                cube_xy_from_ij(i, j, &xcoord, &ycoord, xori, xinc, yori,
                                yinc, nx, ny, yflip, rotation, 0, debug);

            }
        }
    }



    return EXIT_SUCCESS;
}
