# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DICToolkit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DICToolkit')
    _DICToolkit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DICToolkit', [dirname(__file__)])
        except ImportError:
            import _DICToolkit
            return _DICToolkit
        try:
            _mod = imp.load_module('_DICToolkit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DICToolkit = swig_import_helper()
    del swig_import_helper
else:
    import _DICToolkit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def computeDICoperators(computeDICoperators_nz1, computeDICoperators_nz2, computeDICoperators_nz2gz, computeDICoperators_nz2gy, computeDICoperators_nz2gx, computeDICoperators_twelve1, computeDICoperators_twelve3):
    return _DICToolkit.computeDICoperators(computeDICoperators_nz1, computeDICoperators_nz2, computeDICoperators_nz2gz, computeDICoperators_nz2gy, computeDICoperators_nz2gx, computeDICoperators_twelve1, computeDICoperators_twelve3)
computeDICoperators = _DICToolkit.computeDICoperators

def computeDICoperatorsGM(computeDICoperatorsGM_nz1, computeDICoperatorsGM_nz2, computeDICoperatorsGM_nz2gz, computeDICoperatorsGM_nz2gy, computeDICoperatorsGM_nz2gx, computeDICoperatorsGM_binsF, computeDICoperatorsGM_nPeaks, computeDICoperatorsGM_twelve1, computeDICoperatorsGM_twelve3):
    return _DICToolkit.computeDICoperatorsGM(computeDICoperatorsGM_nz1, computeDICoperatorsGM_nz2, computeDICoperatorsGM_nz2gz, computeDICoperatorsGM_nz2gy, computeDICoperatorsGM_nz2gx, computeDICoperatorsGM_binsF, computeDICoperatorsGM_nPeaks, computeDICoperatorsGM_twelve1, computeDICoperatorsGM_twelve3)
computeDICoperatorsGM = _DICToolkit.computeDICoperatorsGM

def computeDICoperatorsLL(computeDICoperatorsLL_nz1, computeDICoperatorsLL_nz2, computeDICoperatorsLL_nz2gz, computeDICoperatorsLL_nz2gy, computeDICoperatorsLL_nz2gx, computeDICoperatorsLL_nBinsA, computeDICoperatorsLL_nBinsC, computeDICoperatorsLL_twelve1, computeDICoperatorsLL_twelve3):
    return _DICToolkit.computeDICoperatorsLL(computeDICoperatorsLL_nz1, computeDICoperatorsLL_nz2, computeDICoperatorsLL_nz2gz, computeDICoperatorsLL_nz2gy, computeDICoperatorsLL_nz2gx, computeDICoperatorsLL_nBinsA, computeDICoperatorsLL_nBinsC, computeDICoperatorsLL_twelve1, computeDICoperatorsLL_twelve3)
computeDICoperatorsLL = _DICToolkit.computeDICoperatorsLL

def computeDICglobalMatrix(computeDICglobalMatrix_nz1, cgmFour, computeDICglobalMatrix_ConneSize, computeDICglobalMatrix_nodesSize, computeDICglobalMatrix_dof1):
    return _DICToolkit.computeDICglobalMatrix(computeDICglobalMatrix_nz1, cgmFour, computeDICglobalMatrix_ConneSize, computeDICglobalMatrix_nodesSize, computeDICglobalMatrix_dof1)
computeDICglobalMatrix = _DICToolkit.computeDICglobalMatrix

def computeDICglobalVector(computeDICglobalVector_nz1, cgvFour, computeDICglobalVector_nz3, computeDICglobalVector_nz4, computeDICglobalVector_ConneSize, computeDICglobalVector_nodesSize, computeDICglobalVector_dof3):
    return _DICToolkit.computeDICglobalVector(computeDICglobalVector_nz1, cgvFour, computeDICglobalVector_nz3, computeDICglobalVector_nz4, computeDICglobalVector_ConneSize, computeDICglobalVector_nodesSize, computeDICglobalVector_dof3)
computeDICglobalVector = _DICToolkit.computeDICglobalVector

def applyMeshTransformation(applyMeshTransformation_nz1, applyMeshTransformation_nz2, applyMeshTransformation_nz3, applyMeshTransformation_ConneSize, applyMeshTransformation_nodesSize, applyMeshTransformation_three):
    return _DICToolkit.applyMeshTransformation(applyMeshTransformation_nz1, applyMeshTransformation_nz2, applyMeshTransformation_nz3, applyMeshTransformation_ConneSize, applyMeshTransformation_nodesSize, applyMeshTransformation_three)
applyMeshTransformation = _DICToolkit.applyMeshTransformation

def applyPhiC(applyPhiC_nz1, applyPhiC_nz2, applyPhiC_fourA, applyPhiC_threeB, applyPhiC_interpOrder):
    return _DICToolkit.applyPhiC(applyPhiC_nz1, applyPhiC_nz2, applyPhiC_fourA, applyPhiC_threeB, applyPhiC_interpOrder)
applyPhiC = _DICToolkit.applyPhiC

def binningFloat(binningFloat_nz1, binningFloat_nz2, binningFloat_three, binningFloat_binning):
    return _DICToolkit.binningFloat(binningFloat_nz1, binningFloat_nz2, binningFloat_three, binningFloat_binning)
binningFloat = _DICToolkit.binningFloat

def binningUInt(binningUInt_nz1, binningUInt_nz2, binningUInt_three, binningUInt_binning):
    return _DICToolkit.binningUInt(binningUInt_nz1, binningUInt_nz2, binningUInt_three, binningUInt_binning)
binningUInt = _DICToolkit.binningUInt

def binningChar(binningChar_nz1, binningChar_nz2, binningChar_three, binningChar_binning):
    return _DICToolkit.binningChar(binningChar_nz1, binningChar_nz2, binningChar_three, binningChar_binning)
binningChar = _DICToolkit.binningChar

def pixelSearchC(pixelSearch_im1z, pixelSearch_im2z, pixelSearch_startPosN, pixelSearch_searchRangeN, pixelSearch_n1):
    return _DICToolkit.pixelSearchC(pixelSearch_im1z, pixelSearch_im2z, pixelSearch_startPosN, pixelSearch_searchRangeN, pixelSearch_n1)
pixelSearchC = _DICToolkit.pixelSearchC

def computeGMresidualAndPhase(computeGMresidualAndPhase_nz1, computeGMresidualAndPhase_nz2, computeGMresidualAndPhase_binsF, computeGMresidualAndPhase_nPeaks, computeGMresidualAndPhase_nz3, computeGMresidualAndPhase_nz4):
    return _DICToolkit.computeGMresidualAndPhase(computeGMresidualAndPhase_nz1, computeGMresidualAndPhase_nz2, computeGMresidualAndPhase_binsF, computeGMresidualAndPhase_nPeaks, computeGMresidualAndPhase_nz3, computeGMresidualAndPhase_nz4)
computeGMresidualAndPhase = _DICToolkit.computeGMresidualAndPhase
# This file is compatible with both classic and new-style classes.


