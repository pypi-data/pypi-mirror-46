# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_meshToolkit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_meshToolkit')
    _meshToolkit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_meshToolkit', [dirname(__file__)])
        except ImportError:
            import _meshToolkit
            return _meshToolkit
        try:
            _mod = imp.load_module('_meshToolkit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _meshToolkit = swig_import_helper()
    del swig_import_helper
else:
    import _meshToolkit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _meshToolkit.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _meshToolkit.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _meshToolkit.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _meshToolkit.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _meshToolkit.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _meshToolkit.SwigPyIterator_equal(self, x)

    def copy(self):
        return _meshToolkit.SwigPyIterator_copy(self)

    def next(self):
        return _meshToolkit.SwigPyIterator_next(self)

    def __next__(self):
        return _meshToolkit.SwigPyIterator___next__(self)

    def previous(self):
        return _meshToolkit.SwigPyIterator_previous(self)

    def advance(self, n):
        return _meshToolkit.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _meshToolkit.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _meshToolkit.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _meshToolkit.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _meshToolkit.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _meshToolkit.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _meshToolkit.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _meshToolkit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _meshToolkit.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _meshToolkit.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _meshToolkit.VectorDouble___bool__(self)

    def __len__(self):
        return _meshToolkit.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _meshToolkit.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _meshToolkit.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _meshToolkit.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _meshToolkit.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _meshToolkit.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _meshToolkit.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _meshToolkit.VectorDouble_pop(self)

    def append(self, x):
        return _meshToolkit.VectorDouble_append(self, x)

    def empty(self):
        return _meshToolkit.VectorDouble_empty(self)

    def size(self):
        return _meshToolkit.VectorDouble_size(self)

    def swap(self, v):
        return _meshToolkit.VectorDouble_swap(self, v)

    def begin(self):
        return _meshToolkit.VectorDouble_begin(self)

    def end(self):
        return _meshToolkit.VectorDouble_end(self)

    def rbegin(self):
        return _meshToolkit.VectorDouble_rbegin(self)

    def rend(self):
        return _meshToolkit.VectorDouble_rend(self)

    def clear(self):
        return _meshToolkit.VectorDouble_clear(self)

    def get_allocator(self):
        return _meshToolkit.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _meshToolkit.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _meshToolkit.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _meshToolkit.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _meshToolkit.VectorDouble_push_back(self, x)

    def front(self):
        return _meshToolkit.VectorDouble_front(self)

    def back(self):
        return _meshToolkit.VectorDouble_back(self)

    def assign(self, n, x):
        return _meshToolkit.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _meshToolkit.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _meshToolkit.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _meshToolkit.VectorDouble_reserve(self, n)

    def capacity(self):
        return _meshToolkit.VectorDouble_capacity(self)
    __swig_destroy__ = _meshToolkit.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _meshToolkit.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorVectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _meshToolkit.VectorVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _meshToolkit.VectorVectorDouble___nonzero__(self)

    def __bool__(self):
        return _meshToolkit.VectorVectorDouble___bool__(self)

    def __len__(self):
        return _meshToolkit.VectorVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _meshToolkit.VectorVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _meshToolkit.VectorVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _meshToolkit.VectorVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _meshToolkit.VectorVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _meshToolkit.VectorVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _meshToolkit.VectorVectorDouble___setitem__(self, *args)

    def pop(self):
        return _meshToolkit.VectorVectorDouble_pop(self)

    def append(self, x):
        return _meshToolkit.VectorVectorDouble_append(self, x)

    def empty(self):
        return _meshToolkit.VectorVectorDouble_empty(self)

    def size(self):
        return _meshToolkit.VectorVectorDouble_size(self)

    def swap(self, v):
        return _meshToolkit.VectorVectorDouble_swap(self, v)

    def begin(self):
        return _meshToolkit.VectorVectorDouble_begin(self)

    def end(self):
        return _meshToolkit.VectorVectorDouble_end(self)

    def rbegin(self):
        return _meshToolkit.VectorVectorDouble_rbegin(self)

    def rend(self):
        return _meshToolkit.VectorVectorDouble_rend(self)

    def clear(self):
        return _meshToolkit.VectorVectorDouble_clear(self)

    def get_allocator(self):
        return _meshToolkit.VectorVectorDouble_get_allocator(self)

    def pop_back(self):
        return _meshToolkit.VectorVectorDouble_pop_back(self)

    def erase(self, *args):
        return _meshToolkit.VectorVectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _meshToolkit.new_VectorVectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _meshToolkit.VectorVectorDouble_push_back(self, x)

    def front(self):
        return _meshToolkit.VectorVectorDouble_front(self)

    def back(self):
        return _meshToolkit.VectorVectorDouble_back(self)

    def assign(self, n, x):
        return _meshToolkit.VectorVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _meshToolkit.VectorVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _meshToolkit.VectorVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _meshToolkit.VectorVectorDouble_reserve(self, n)

    def capacity(self):
        return _meshToolkit.VectorVectorDouble_capacity(self)
    __swig_destroy__ = _meshToolkit.delete_VectorVectorDouble
    __del__ = lambda self: None
VectorVectorDouble_swigregister = _meshToolkit.VectorVectorDouble_swigregister
VectorVectorDouble_swigregister(VectorVectorDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _meshToolkit.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _meshToolkit.VectorString___nonzero__(self)

    def __bool__(self):
        return _meshToolkit.VectorString___bool__(self)

    def __len__(self):
        return _meshToolkit.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _meshToolkit.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _meshToolkit.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _meshToolkit.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _meshToolkit.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _meshToolkit.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _meshToolkit.VectorString___setitem__(self, *args)

    def pop(self):
        return _meshToolkit.VectorString_pop(self)

    def append(self, x):
        return _meshToolkit.VectorString_append(self, x)

    def empty(self):
        return _meshToolkit.VectorString_empty(self)

    def size(self):
        return _meshToolkit.VectorString_size(self)

    def swap(self, v):
        return _meshToolkit.VectorString_swap(self, v)

    def begin(self):
        return _meshToolkit.VectorString_begin(self)

    def end(self):
        return _meshToolkit.VectorString_end(self)

    def rbegin(self):
        return _meshToolkit.VectorString_rbegin(self)

    def rend(self):
        return _meshToolkit.VectorString_rend(self)

    def clear(self):
        return _meshToolkit.VectorString_clear(self)

    def get_allocator(self):
        return _meshToolkit.VectorString_get_allocator(self)

    def pop_back(self):
        return _meshToolkit.VectorString_pop_back(self)

    def erase(self, *args):
        return _meshToolkit.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _meshToolkit.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _meshToolkit.VectorString_push_back(self, x)

    def front(self):
        return _meshToolkit.VectorString_front(self)

    def back(self):
        return _meshToolkit.VectorString_back(self)

    def assign(self, n, x):
        return _meshToolkit.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _meshToolkit.VectorString_resize(self, *args)

    def insert(self, *args):
        return _meshToolkit.VectorString_insert(self, *args)

    def reserve(self, n):
        return _meshToolkit.VectorString_reserve(self, n)

    def capacity(self):
        return _meshToolkit.VectorString_capacity(self)
    __swig_destroy__ = _meshToolkit.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _meshToolkit.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorUnsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsigned, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _meshToolkit.VectorUnsigned_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _meshToolkit.VectorUnsigned___nonzero__(self)

    def __bool__(self):
        return _meshToolkit.VectorUnsigned___bool__(self)

    def __len__(self):
        return _meshToolkit.VectorUnsigned___len__(self)

    def __getslice__(self, i, j):
        return _meshToolkit.VectorUnsigned___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _meshToolkit.VectorUnsigned___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _meshToolkit.VectorUnsigned___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _meshToolkit.VectorUnsigned___delitem__(self, *args)

    def __getitem__(self, *args):
        return _meshToolkit.VectorUnsigned___getitem__(self, *args)

    def __setitem__(self, *args):
        return _meshToolkit.VectorUnsigned___setitem__(self, *args)

    def pop(self):
        return _meshToolkit.VectorUnsigned_pop(self)

    def append(self, x):
        return _meshToolkit.VectorUnsigned_append(self, x)

    def empty(self):
        return _meshToolkit.VectorUnsigned_empty(self)

    def size(self):
        return _meshToolkit.VectorUnsigned_size(self)

    def swap(self, v):
        return _meshToolkit.VectorUnsigned_swap(self, v)

    def begin(self):
        return _meshToolkit.VectorUnsigned_begin(self)

    def end(self):
        return _meshToolkit.VectorUnsigned_end(self)

    def rbegin(self):
        return _meshToolkit.VectorUnsigned_rbegin(self)

    def rend(self):
        return _meshToolkit.VectorUnsigned_rend(self)

    def clear(self):
        return _meshToolkit.VectorUnsigned_clear(self)

    def get_allocator(self):
        return _meshToolkit.VectorUnsigned_get_allocator(self)

    def pop_back(self):
        return _meshToolkit.VectorUnsigned_pop_back(self)

    def erase(self, *args):
        return _meshToolkit.VectorUnsigned_erase(self, *args)

    def __init__(self, *args):
        this = _meshToolkit.new_VectorUnsigned(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _meshToolkit.VectorUnsigned_push_back(self, x)

    def front(self):
        return _meshToolkit.VectorUnsigned_front(self)

    def back(self):
        return _meshToolkit.VectorUnsigned_back(self)

    def assign(self, n, x):
        return _meshToolkit.VectorUnsigned_assign(self, n, x)

    def resize(self, *args):
        return _meshToolkit.VectorUnsigned_resize(self, *args)

    def insert(self, *args):
        return _meshToolkit.VectorUnsigned_insert(self, *args)

    def reserve(self, n):
        return _meshToolkit.VectorUnsigned_reserve(self, n)

    def capacity(self):
        return _meshToolkit.VectorUnsigned_capacity(self)
    __swig_destroy__ = _meshToolkit.delete_VectorUnsigned
    __del__ = lambda self: None
VectorUnsigned_swigregister = _meshToolkit.VectorUnsigned_swigregister
VectorUnsigned_swigregister(VectorUnsigned)


def pack_and_field(param, delta, origi, cells, inside, objects_vtk, field_vtk, field_file, domain):
    return _meshToolkit.pack_and_field(param, delta, origi, cells, inside, objects_vtk, field_vtk, field_file, domain)
pack_and_field = _meshToolkit.pack_and_field

def create_pack_and_field(objects, phases_values, param, delta, origi, cells, inside, objects_vtk, field_vtk, field_file, domain):
    return _meshToolkit.create_pack_and_field(objects, phases_values, param, delta, origi, cells, inside, objects_vtk, field_vtk, field_file, domain)
create_pack_and_field = _meshToolkit.create_pack_and_field

def objects_to_field(objects, phases_values, delta, origi, cells, field_vtk, field_file):
    return _meshToolkit.objects_to_field(objects, phases_values, delta, origi, cells, field_vtk, field_file)
objects_to_field = _meshToolkit.objects_to_field

def project_fields(msh_file, feap_file, threshold, field_file, n_skip, mesh_vtk):
    return _meshToolkit.project_fields(msh_file, feap_file, threshold, field_file, n_skip, mesh_vtk)
project_fields = _meshToolkit.project_fields
# This file is compatible with both classic and new-style classes.


