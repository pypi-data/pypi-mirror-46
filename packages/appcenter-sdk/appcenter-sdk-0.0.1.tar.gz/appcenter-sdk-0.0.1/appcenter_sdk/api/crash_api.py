# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter_sdk.api_client import ApiClient


class crashApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def crashes_getAppVersions(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a list of application versions. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getAppVersions(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getAppVersions_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getAppVersions_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getAppVersions_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a list of application versions. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getAppVersions_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getAppVersions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getAppVersions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getAppVersions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_getStatus(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_getStatus  # noqa: E501

        Returns a particular symbol by id (uuid) for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_getStatus(symbol_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbols_getStatus_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_getStatus_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_getStatus_with_http_info(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_getStatus  # noqa: E501

        Returns a particular symbol by id (uuid) for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_getStatus_with_http_info(symbol_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_getStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_id' is set
        if ('symbol_id' not in params or
                params['symbol_id'] is None):
            raise ValueError("Missing the required parameter `symbol_id` when calling `symbols_getStatus`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_getStatus`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_getStatus`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_id' in params:
            path_params['symbol_id'] = params['symbol_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_getLocation(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_getLocation  # noqa: E501

        Gets the URL to download the symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_getLocation(symbol_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbols_getLocation_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_getLocation_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_getLocation_with_http_info(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_getLocation  # noqa: E501

        Gets the URL to download the symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_getLocation_with_http_info(symbol_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_getLocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_id' is set
        if ('symbol_id' not in params or
                params['symbol_id'] is None):
            raise ValueError("Missing the required parameter `symbol_id` when calling `symbols_getLocation`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_getLocation`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_getLocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_id' in params:
            path_params['symbol_id'] = params['symbol_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_ignore(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_ignore  # noqa: E501

        Marks a symbol by id (uuid) as ignored  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_ignore(symbol_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbols_ignore_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_ignore_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_ignore_with_http_info(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_ignore  # noqa: E501

        Marks a symbol by id (uuid) as ignored  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_ignore_with_http_info(symbol_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_ignore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_id' is set
        if ('symbol_id' not in params or
                params['symbol_id'] is None):
            raise ValueError("Missing the required parameter `symbol_id` when calling `symbols_ignore`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_ignore`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_ignore`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_id' in params:
            path_params['symbol_id'] = params['symbol_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_get(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_get  # noqa: E501

        Returns a particular symbol by id (uuid) for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_get(symbol_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbols_get_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_get_with_http_info(symbol_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_get_with_http_info(self, symbol_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_get  # noqa: E501

        Returns a particular symbol by id (uuid) for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_get_with_http_info(symbol_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_id: The ID of the symbol (uuid of the symbol) (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_id' is set
        if ('symbol_id' not in params or
                params['symbol_id'] is None):
            raise ValueError("Missing the required parameter `symbol_id` when calling `symbols_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_id' in params:
            path_params['symbol_id'] = params['symbol_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbols_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_list  # noqa: E501

        Returns the list of all symbols for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_list(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbols_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbols_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbols_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """symbols_list  # noqa: E501

        Returns the list of all symbols for the provided application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbols_list_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbols_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbols_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbols_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbols', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbolUploads_getLocation(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbolUploads_getLocation  # noqa: E501

        Gets the URL to download the symbol upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_getLocation(symbol_upload_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_upload_id: The ID of the symbol upload (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbolUploads_getLocation_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbolUploads_getLocation_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbolUploads_getLocation_with_http_info(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbolUploads_getLocation  # noqa: E501

        Gets the URL to download the symbol upload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_getLocation_with_http_info(symbol_upload_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_upload_id: The ID of the symbol upload (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_upload_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbolUploads_getLocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_upload_id' is set
        if ('symbol_upload_id' not in params or
                params['symbol_upload_id'] is None):
            raise ValueError("Missing the required parameter `symbol_upload_id` when calling `symbolUploads_getLocation`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbolUploads_getLocation`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbolUploads_getLocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_upload_id' in params:
            path_params['symbol_upload_id'] = params['symbol_upload_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbolUploads_get(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbolUploads_get  # noqa: E501

        Gets a symbol upload by id for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_get(symbol_upload_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_upload_id: The ID of the symbol upload (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbolUploads_get_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbolUploads_get_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbolUploads_get_with_http_info(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbolUploads_get  # noqa: E501

        Gets a symbol upload by id for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_get_with_http_info(symbol_upload_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_upload_id: The ID of the symbol upload (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_upload_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbolUploads_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_upload_id' is set
        if ('symbol_upload_id' not in params or
                params['symbol_upload_id'] is None):
            raise ValueError("Missing the required parameter `symbol_upload_id` when calling `symbolUploads_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbolUploads_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbolUploads_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_upload_id' in params:
            path_params['symbol_upload_id'] = params['symbol_upload_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbolUploads_complete(self, symbol_upload_id, owner_name, app_name, body, **kwargs):  # noqa: E501
        """symbolUploads_complete  # noqa: E501

        Commits or aborts the symbol upload process for a new set of symbols for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_complete(symbol_upload_id, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_upload_id: The ID of the symbol upload (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The symbol information (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbolUploads_complete_with_http_info(symbol_upload_id, owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.symbolUploads_complete_with_http_info(symbol_upload_id, owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def symbolUploads_complete_with_http_info(self, symbol_upload_id, owner_name, app_name, body, **kwargs):  # noqa: E501
        """symbolUploads_complete  # noqa: E501

        Commits or aborts the symbol upload process for a new set of symbols for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_complete_with_http_info(symbol_upload_id, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_upload_id: The ID of the symbol upload (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The symbol information (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_upload_id', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbolUploads_complete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_upload_id' is set
        if ('symbol_upload_id' not in params or
                params['symbol_upload_id'] is None):
            raise ValueError("Missing the required parameter `symbol_upload_id` when calling `symbolUploads_complete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbolUploads_complete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbolUploads_complete`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `symbolUploads_complete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_upload_id' in params:
            path_params['symbol_upload_id'] = params['symbol_upload_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbolUploads_delete(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbolUploads_delete  # noqa: E501

        Deletes a symbol upload by id for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_delete(symbol_upload_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_upload_id: The ID of the symbol upload (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbolUploads_delete_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbolUploads_delete_with_http_info(symbol_upload_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbolUploads_delete_with_http_info(self, symbol_upload_id, owner_name, app_name, **kwargs):  # noqa: E501
        """symbolUploads_delete  # noqa: E501

        Deletes a symbol upload by id for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_delete_with_http_info(symbol_upload_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_upload_id: The ID of the symbol upload (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_upload_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbolUploads_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_upload_id' is set
        if ('symbol_upload_id' not in params or
                params['symbol_upload_id'] is None):
            raise ValueError("Missing the required parameter `symbol_upload_id` when calling `symbolUploads_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbolUploads_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbolUploads_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_upload_id' in params:
            path_params['symbol_upload_id'] = params['symbol_upload_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbolUploads_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """symbolUploads_list  # noqa: E501

        Gets a list of all uploads for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_list(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param integer top: The maximum number of results to return.(optional)
        :param string status: Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.
(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbolUploads_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.symbolUploads_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def symbolUploads_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """symbolUploads_list  # noqa: E501

        Gets a list of all uploads for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_list_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param integer top: The maximum number of results to return.(optional, default to )
        :param string status: Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.
(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'top', 'status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbolUploads_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbolUploads_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbolUploads_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def symbolUploads_create(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """symbolUploads_create  # noqa: E501

        Begins the symbol upload process for a new set of symbols for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_create(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The symbol information (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.symbolUploads_create_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.symbolUploads_create_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def symbolUploads_create_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """symbolUploads_create  # noqa: E501

        Begins the symbol upload process for a new set of symbols for the specified application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.symbolUploads_create_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The symbol information (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method symbolUploads_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `symbolUploads_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `symbolUploads_create`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `symbolUploads_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_getHockeyAppCrashForwardingStatus(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the state of HockeyApp Crash forwarding for SxS apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getHockeyAppCrashForwardingStatus(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getHockeyAppCrashForwardingStatus_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getHockeyAppCrashForwardingStatus_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getHockeyAppCrashForwardingStatus_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the state of HockeyApp Crash forwarding for SxS apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getHockeyAppCrashForwardingStatus_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getHockeyAppCrashForwardingStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getHockeyAppCrashForwardingStatus`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getHockeyAppCrashForwardingStatus`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/hockeyapp_crash_forwarding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_updateHockeyAppCrashForwarding(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """  # noqa: E501

        Enable HockeyApp crash forwarding for SxS apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_updateHockeyAppCrashForwarding(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Enable Forwarding (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_updateHockeyAppCrashForwarding_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_updateHockeyAppCrashForwarding_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def crashes_updateHockeyAppCrashForwarding_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """  # noqa: E501

        Enable HockeyApp crash forwarding for SxS apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_updateHockeyAppCrashForwarding_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Enable Forwarding (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_updateHockeyAppCrashForwarding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_updateHockeyAppCrashForwarding`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_updateHockeyAppCrashForwarding`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crashes_updateHockeyAppCrashForwarding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/hockeyapp_crash_forwarding', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missingSymbolGroups_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets application level statistics for all missing symbol groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.missingSymbolGroups_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: v2FailureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.missingSymbolGroups_info_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.missingSymbolGroups_info_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def missingSymbolGroups_info_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets application level statistics for all missing symbol groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.missingSymbolGroups_info_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: v2FailureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missingSymbolGroups_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `missingSymbolGroups_info`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `missingSymbolGroups_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='v2FailureResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missingSymbolGroups_get(self, symbol_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets missing symbol crash group by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.missingSymbolGroups_get(symbol_group_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_group_id: missing symbol crash group id (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: v2FailureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.missingSymbolGroups_get_with_http_info(symbol_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.missingSymbolGroups_get_with_http_info(symbol_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def missingSymbolGroups_get_with_http_info(self, symbol_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets missing symbol crash group by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.missingSymbolGroups_get_with_http_info(symbol_group_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string symbol_group_id: missing symbol crash group id (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: v2FailureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missingSymbolGroups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol_group_id' is set
        if ('symbol_group_id' not in params or
                params['symbol_group_id'] is None):
            raise ValueError("Missing the required parameter `symbol_group_id` when calling `missingSymbolGroups_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `missingSymbolGroups_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `missingSymbolGroups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol_group_id' in params:
            path_params['symbol_group_id'] = params['symbol_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='v2FailureResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def missingSymbolGroups_list(self, top, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets top N (ordered by crash count) of crash groups by missing symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.missingSymbolGroups_list(top, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param integer top: top N elements (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string filter: query filter(optional)
        :return: v2FailureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.missingSymbolGroups_list_with_http_info(top, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.missingSymbolGroups_list_with_http_info(top, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def missingSymbolGroups_list_with_http_info(self, top, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets top N (ordered by crash count) of crash groups by missing symbol  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.missingSymbolGroups_list_with_http_info(top, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param integer top: top N elements (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string filter: query filter(optional)
        :return: v2FailureResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['top', 'owner_name', 'app_name', 'filter']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method missingSymbolGroups_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'top' is set
        if ('top' not in params or
                params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `missingSymbolGroups_list`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `missingSymbolGroups_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `missingSymbolGroups_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='v2FailureResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_getAppCrashesInfo(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets whether the application has any crashes. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getAppCrashesInfo(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getAppCrashesInfo_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getAppCrashesInfo_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getAppCrashesInfo_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets whether the application has any crashes. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getAppCrashesInfo_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getAppCrashesInfo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getAppCrashesInfo`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getAppCrashesInfo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_getCrashTextAttachmentContent(self, crash_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets content of the text attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getCrashTextAttachmentContent(crash_id, attachment_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_id: id of a specific crash (required)
        :param string attachment_id: attachment id (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getCrashTextAttachmentContent_with_http_info(crash_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getCrashTextAttachmentContent_with_http_info(crash_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getCrashTextAttachmentContent_with_http_info(self, crash_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets content of the text attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getCrashTextAttachmentContent_with_http_info(crash_id, attachment_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_id: id of a specific crash (required)
        :param string attachment_id: attachment id (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_id', 'attachment_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getCrashTextAttachmentContent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_getCrashTextAttachmentContent`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `crashes_getCrashTextAttachmentContent`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getCrashTextAttachmentContent`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getCrashTextAttachmentContent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_getCrashAttachmentLocation(self, crash_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the URI location to download crash attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getCrashAttachmentLocation(crash_id, attachment_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_id: id of a specific crash (required)
        :param string attachment_id: attachment id (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getCrashAttachmentLocation_with_http_info(crash_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getCrashAttachmentLocation_with_http_info(crash_id, attachment_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getCrashAttachmentLocation_with_http_info(self, crash_id, attachment_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the URI location to download crash attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getCrashAttachmentLocation_with_http_info(crash_id, attachment_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_id: id of a specific crash (required)
        :param string attachment_id: attachment id (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_id', 'attachment_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getCrashAttachmentLocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_getCrashAttachmentLocation`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if ('attachment_id' not in params or
                params['attachment_id'] is None):
            raise ValueError("Missing the required parameter `attachment_id` when calling `crashes_getCrashAttachmentLocation`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getCrashAttachmentLocation`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getCrashAttachmentLocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_listAttachments(self, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets all attachments for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_listAttachments(crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_listAttachments_with_http_info(crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_listAttachments_with_http_info(crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_listAttachments_with_http_info(self, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets all attachments for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_listAttachments_with_http_info(crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_listAttachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_listAttachments`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_listAttachments`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_listAttachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashGroups_getStacktrace(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a stacktrace for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashGroups_getStacktrace(crash_group_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashGroups_getStacktrace_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashGroups_getStacktrace_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashGroups_getStacktrace_with_http_info(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a stacktrace for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashGroups_getStacktrace_with_http_info(crash_group_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'owner_name', 'app_name', 'grouping_only']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashGroups_getStacktrace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashGroups_getStacktrace`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashGroups_getStacktrace`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashGroups_getStacktrace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'grouping_only' in params:
            query_params.append(('grouping_only', params['grouping_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_getStacktrace(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a stacktrace for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getStacktrace(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getStacktrace_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getStacktrace_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getStacktrace_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a stacktrace for a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getStacktrace_with_http_info(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name', 'grouping_only']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getStacktrace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_getStacktrace`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_getStacktrace`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getStacktrace`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getStacktrace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'grouping_only' in params:
            query_params.append(('grouping_only', params['grouping_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_getRawCrashLocation(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the URI location to download json of a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getRawCrashLocation(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getRawCrashLocation_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getRawCrashLocation_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getRawCrashLocation_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the URI location to download json of a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getRawCrashLocation_with_http_info(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getRawCrashLocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_getRawCrashLocation`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_getRawCrashLocation`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getRawCrashLocation`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getRawCrashLocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_getNativeCrashDownload(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the native log of a specific crash as a text attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getNativeCrashDownload(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getNativeCrashDownload_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getNativeCrashDownload_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getNativeCrashDownload_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the native log of a specific crash as a text attachment. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getNativeCrashDownload_with_http_info(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getNativeCrashDownload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_getNativeCrashDownload`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_getNativeCrashDownload`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getNativeCrashDownload`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getNativeCrashDownload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_getNativeCrash(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the native log of a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getNativeCrash(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_getNativeCrash_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_getNativeCrash_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_getNativeCrash_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets the native log of a specific crash. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_getNativeCrash_with_http_info(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_getNativeCrash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_getNativeCrash`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_getNativeCrash`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_getNativeCrash`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_getNativeCrash`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_get(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a specific crash for an app. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_get(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean include_report: true if the crash should include the raw crash report. Default is false(optional)
        :param boolean include_log: true if the crash should include the custom log report. Default is false(optional)
        :param boolean include_details: true if the crash should include in depth crash details(optional)
        :param boolean include_stacktrace: true if the crash should include the stacktrace information(optional)
        :param boolean grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_get_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_get_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_get_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a specific crash for an app. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_get_with_http_info(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean include_report: true if the crash should include the raw crash report. Default is false(optional)
        :param boolean include_log: true if the crash should include the custom log report. Default is false(optional)
        :param boolean include_details: true if the crash should include in depth crash details(optional)
        :param boolean include_stacktrace: true if the crash should include the stacktrace information(optional)
        :param boolean grouping_only: true if the stacktrace should be only the relevant thread / exception. Default is false(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name', 'include_report', 'include_log', 'include_details', 'include_stacktrace', 'grouping_only']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_get`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'include_report' in params:
            query_params.append(('include_report', params['include_report']))  # noqa: E501
        if 'include_log' in params:
            query_params.append(('include_log', params['include_log']))  # noqa: E501
        if 'include_details' in params:
            query_params.append(('include_details', params['include_details']))  # noqa: E501
        if 'include_stacktrace' in params:
            query_params.append(('include_stacktrace', params['include_stacktrace']))  # noqa: E501
        if 'grouping_only' in params:
            query_params.append(('grouping_only', params['grouping_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_delete(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Delete a specific crash and related attachments and blobs for an app. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_delete(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean retention_delete: true in that case if the method should skip update counts(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_delete_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_delete_with_http_info(crash_group_id, crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_delete_with_http_info(self, crash_group_id, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Delete a specific crash and related attachments and blobs for an app. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_delete_with_http_info(crash_group_id, crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string crash_id: id of a specific crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean retention_delete: true in that case if the method should skip update counts(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'crash_id', 'owner_name', 'app_name', 'retention_delete']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_delete`")  # noqa: E501
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `crashes_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'retention_delete' in params:
            query_params.append(('retention_delete', params['retention_delete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashes_list(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets all crashes of a group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_list(crash_group_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean include_report: true if the crash should include the raw crash report. Default is false(optional)
        :param boolean include_log: true if the crash should include the custom log report. Default is false(optional)
        :param string date_from:(optional)
        :param string date_to:(optional)
        :param string app_version: version(optional)
        :param string error_type:(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashes_list_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashes_list_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashes_list_with_http_info(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets all crashes of a group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashes_list_with_http_info(crash_group_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean include_report: true if the crash should include the raw crash report. Default is false(optional)
        :param boolean include_log: true if the crash should include the custom log report. Default is false(optional)
        :param string date_from:(optional)
        :param string date_to:(optional)
        :param string app_version: version(optional)
        :param string error_type:(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'owner_name', 'app_name', 'include_report', 'include_log', 'date_from', 'date_to', 'app_version', 'error_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashes_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashes_list`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashes_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashes_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'include_report' in params:
            query_params.append(('include_report', params['include_report']))  # noqa: E501
        if 'include_log' in params:
            query_params.append(('include_log', params['include_log']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('date_from', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('date_to', params['date_to']))  # noqa: E501
        if 'app_version' in params:
            query_params.append(('app_version', params['app_version']))  # noqa: E501
        if 'error_type' in params:
            query_params.append(('error_type', params['error_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashGroups_get(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a specific group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashGroups_get(crash_group_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashGroups_get_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashGroups_get_with_http_info(crash_group_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashGroups_get_with_http_info(self, crash_group_id, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a specific group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashGroups_get_with_http_info(crash_group_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashGroups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashGroups_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashGroups_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashGroups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashGroups_update(self, crash_group_id, owner_name, app_name, body, **kwargs):  # noqa: E501
        """  # noqa: E501

        Updates a group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashGroups_update(crash_group_id, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Group change object. All fields are optional and only provided fields will get updated. (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashGroups_update_with_http_info(crash_group_id, owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.crashGroups_update_with_http_info(crash_group_id, owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def crashGroups_update_with_http_info(self, crash_group_id, owner_name, app_name, body, **kwargs):  # noqa: E501
        """  # noqa: E501

        Updates a group. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashGroups_update_with_http_info(crash_group_id, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: id of a specific group (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Group change object. All fields are optional and only provided fields will get updated. (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashGroups_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `crashGroups_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashGroups_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashGroups_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `crashGroups_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def crashGroups_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a list of crash groups and whether the list contains all available groups. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashGroups_list(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string last_occurrence_from: Earliest date when the last time a crash occured in a crash group(optional)
        :param string last_occurrence_to: Latest date when the last time a crash occured in a crash group(optional)
        :param string app_version: version(optional)
        :param string group_type:(optional)
        :param string group_status:(optional)
        :param string group_text_search: A freetext search that matches in crash, crash types, crash stack_traces and crash user(optional)
        :param string $orderby: the OData-like $orderby argument(optional)
        :param string continuation_token: Cassandra request continuation token. The token is used for pagination.(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.crashGroups_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.crashGroups_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def crashGroups_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Gets a list of crash groups and whether the list contains all available groups. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.crashGroups_list_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string last_occurrence_from: Earliest date when the last time a crash occured in a crash group(optional)
        :param string last_occurrence_to: Latest date when the last time a crash occured in a crash group(optional)
        :param string app_version: version(optional)
        :param string group_type:(optional)
        :param string group_status:(optional)
        :param string group_text_search: A freetext search that matches in crash, crash types, crash stack_traces and crash user(optional)
        :param string $orderby: the OData-like $orderby argument(optional, default to )
        :param string continuation_token: Cassandra request continuation token. The token is used for pagination.(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'last_occurrence_from', 'last_occurrence_to', 'app_version', 'group_type', 'group_status', 'group_text_search', '$orderby', 'continuation_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method crashGroups_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `crashGroups_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `crashGroups_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'last_occurrence_from' in params:
            query_params.append(('last_occurrence_from', params['last_occurrence_from']))  # noqa: E501
        if 'last_occurrence_to' in params:
            query_params.append(('last_occurrence_to', params['last_occurrence_to']))  # noqa: E501
        if 'app_version' in params:
            query_params.append(('app_version', params['app_version']))  # noqa: E501
        if 'group_type' in params:
            query_params.append(('group_type', params['group_type']))  # noqa: E501
        if 'group_status' in params:
            query_params.append(('group_status', params['group_status']))  # noqa: E501
        if 'group_text_search' in params:
            query_params.append(('group_text_search', params['group_text_search']))  # noqa: E501
        if '$orderby' in params:
            query_params.append(('$orderby', params['$orderby']))  # noqa: E501
        if 'continuation_token' in params:
            query_params.append(('continuation_token', params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crash_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
