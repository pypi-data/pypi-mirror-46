# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter_sdk.api_client import ApiClient


class pushApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def Push_ConfigExists(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_ConfigExists  # noqa: E501

        Returns whether a push configuration exists for the selected app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_ConfigExists(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_ConfigExists_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_ConfigExists_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Push_ConfigExists_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_ConfigExists  # noqa: E501

        Returns whether a push configuration exists for the selected app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_ConfigExists_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_ConfigExists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_ConfigExists`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_ConfigExists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/notifications_config', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_GetConfig(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_GetConfig  # noqa: E501

        Get the push configuration for the selected app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_GetConfig(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_GetConfig_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_GetConfig_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Push_GetConfig_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_GetConfig  # noqa: E501

        Get the push configuration for the selected app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_GetConfig_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_GetConfig" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_GetConfig`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_GetConfig`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/notifications_config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_SetConfig(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Push_SetConfig  # noqa: E501

        Set the push configuration for the selected app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_SetConfig(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Notification configurations. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_SetConfig_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_SetConfig_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def Push_SetConfig_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Push_SetConfig  # noqa: E501

        Set the push configuration for the selected app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_SetConfig_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Notification configurations. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_SetConfig" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_SetConfig`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_SetConfig`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `Push_SetConfig`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/notifications_config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_DeleteConfig(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_DeleteConfig  # noqa: E501

        Delete the push configuration for the selected app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_DeleteConfig(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_DeleteConfig_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_DeleteConfig_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Push_DeleteConfig_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_DeleteConfig  # noqa: E501

        Delete the push configuration for the selected app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_DeleteConfig_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_DeleteConfig" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_DeleteConfig`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_DeleteConfig`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/notifications_config', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_Get(self, notification_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_Get  # noqa: E501

        Get details about a specific notification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_Get(notification_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string notification_id: The id of the notification. (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_Get_with_http_info(notification_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_Get_with_http_info(notification_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Push_Get_with_http_info(self, notification_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_Get  # noqa: E501

        Get details about a specific notification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_Get_with_http_info(notification_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string notification_id: The id of the notification. (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_Get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_id' is set
        if ('notification_id' not in params or
                params['notification_id'] is None):
            raise ValueError("Missing the required parameter `notification_id` when calling `Push_Get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_Get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_Get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_id' in params:
            path_params['notification_id'] = params['notification_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/notifications/{notification_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_List(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_List  # noqa: E501

        Get a list of notifications from the service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_List(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :param string $skiptoken: The value identifies a starting point in the collection of entities. This parameter along with limit is used to perform pagination.(optional)
        :param string $orderby: controls the sorting order and sorting based on which column(optional)
        :param string $inlinecount: Controls whether or not to include a count of all the items across all pages.(optional)
        :param boolean include_archived: Include arhived push notifications(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_List_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_List_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Push_List_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_List  # noqa: E501

        Get a list of notifications from the service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_List_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :param string $skiptoken: The value identifies a starting point in the collection of entities. This parameter along with limit is used to perform pagination.(optional)
        :param string $orderby: controls the sorting order and sorting based on which column(optional, default to )
        :param string $inlinecount: Controls whether or not to include a count of all the items across all pages.(optional, default to )
        :param boolean include_archived: Include arhived push notifications(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', '$top', '$skiptoken', '$orderby', '$inlinecount', 'include_archived']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_List" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_List`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_List`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501
        if '$skiptoken' in params:
            query_params.append(('$skiptoken', params['$skiptoken']))  # noqa: E501
        if '$orderby' in params:
            query_params.append(('$orderby', params['$orderby']))  # noqa: E501
        if '$inlinecount' in params:
            query_params.append(('$inlinecount', params['$inlinecount']))  # noqa: E501
        if 'include_archived' in params:
            query_params.append(('include_archived', params['include_archived']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_Send(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Push_Send  # noqa: E501

        Send a notification to one or more devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_Send(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Notification specifications. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_Send_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_Send_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def Push_Send_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Push_Send  # noqa: E501

        Send a notification to one or more devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_Send_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Notification specifications. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_Send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_Send`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_Send`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `Push_Send`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/notifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_Delete(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Push_Delete  # noqa: E501

        Delete a notification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_Delete(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: List of notification ids (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_Delete_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_Delete_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def Push_Delete_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Push_Delete  # noqa: E501

        Delete a notification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_Delete_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: List of notification ids (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_Delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_Delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_Delete`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `Push_Delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/notifications', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_DeleteInstallId(self, install_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_DeleteInstallId  # noqa: E501

        Delete a device with the selected installId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_DeleteInstallId(install_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string install_id: device install id (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_DeleteInstallId_with_http_info(install_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_DeleteInstallId_with_http_info(install_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Push_DeleteInstallId_with_http_info(self, install_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_DeleteInstallId  # noqa: E501

        Delete a device with the selected installId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_DeleteInstallId_with_http_info(install_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string install_id: device install id (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['install_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_DeleteInstallId" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'install_id' is set
        if ('install_id' not in params or
                params['install_id'] is None):
            raise ValueError("Missing the required parameter `install_id` when calling `Push_DeleteInstallId`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_DeleteInstallId`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_DeleteInstallId`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'install_id' in params:
            path_params['install_id'] = params['install_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/devices/{install_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_ExportDevicesStatus(self, export_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_ExportDevicesStatus  # noqa: E501

        Get the status of an export operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_ExportDevicesStatus(export_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string export_id: The id of the export. (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_ExportDevicesStatus_with_http_info(export_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_ExportDevicesStatus_with_http_info(export_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Push_ExportDevicesStatus_with_http_info(self, export_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Push_ExportDevicesStatus  # noqa: E501

        Get the status of an export operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_ExportDevicesStatus_with_http_info(export_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string export_id: The id of the export. (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['export_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_ExportDevicesStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'export_id' is set
        if ('export_id' not in params or
                params['export_id'] is None):
            raise ValueError("Missing the required parameter `export_id` when calling `Push_ExportDevicesStatus`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_ExportDevicesStatus`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_ExportDevicesStatus`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'export_id' in params:
            path_params['export_id'] = params['export_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/device_exports/{export_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Push_ExportDevices(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Push_ExportDevices  # noqa: E501

        Exports information for all devices using Push to Azure Blob Storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_ExportDevices(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Export configurations. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Push_ExportDevices_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.Push_ExportDevices_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def Push_ExportDevices_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Push_ExportDevices  # noqa: E501

        Exports information for all devices using Push to Azure Blob Storage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Push_ExportDevices_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Export configurations. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Push_ExportDevices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Push_ExportDevices`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Push_ExportDevices`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `Push_ExportDevices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/push/device_exports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
