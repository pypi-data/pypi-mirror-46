# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter_sdk.api_client import ApiClient


class codepushApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def codePushAcquisition_updateCheck(self, deployment_key, app_version, **kwargs):  # noqa: E501
        """codePushAcquisition_updateCheck  # noqa: E501

        Check for updates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushAcquisition_updateCheck(deployment_key, app_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_key: (required)
        :param string app_version: (required)
        :param string package_hash:(optional)
        :param string label:(optional)
        :param string client_unique_id:(optional)
        :param boolean is_companion:(optional)
        :param string previous_label_or_app_version:(optional)
        :param string previous_deployment_key:(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushAcquisition_updateCheck_with_http_info(deployment_key, app_version, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushAcquisition_updateCheck_with_http_info(deployment_key, app_version, **kwargs)  # noqa: E501
            return data

    def codePushAcquisition_updateCheck_with_http_info(self, deployment_key, app_version, **kwargs):  # noqa: E501
        """codePushAcquisition_updateCheck  # noqa: E501

        Check for updates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushAcquisition_updateCheck_with_http_info(deployment_key, app_version, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_key: (required)
        :param string app_version: (required)
        :param string package_hash:(optional)
        :param string label:(optional)
        :param string client_unique_id:(optional)
        :param boolean is_companion:(optional)
        :param string previous_label_or_app_version:(optional)
        :param string previous_deployment_key:(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_key', 'app_version', 'package_hash', 'label', 'client_unique_id', 'is_companion', 'previous_label_or_app_version', 'previous_deployment_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushAcquisition_updateCheck" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_key' is set
        if ('deployment_key' not in params or
                params['deployment_key'] is None):
            raise ValueError("Missing the required parameter `deployment_key` when calling `codePushAcquisition_updateCheck`")  # noqa: E501
        # verify the required parameter 'app_version' is set
        if ('app_version' not in params or
                params['app_version'] is None):
            raise ValueError("Missing the required parameter `app_version` when calling `codePushAcquisition_updateCheck`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'deployment_key' in params:
            query_params.append(('deployment_key', params['deployment_key']))  # noqa: E501
        if 'app_version' in params:
            query_params.append(('app_version', params['app_version']))  # noqa: E501
        if 'package_hash' in params:
            query_params.append(('package_hash', params['package_hash']))  # noqa: E501
        if 'label' in params:
            query_params.append(('label', params['label']))  # noqa: E501
        if 'client_unique_id' in params:
            query_params.append(('client_unique_id', params['client_unique_id']))  # noqa: E501
        if 'is_companion' in params:
            query_params.append(('is_companion', params['is_companion']))  # noqa: E501
        if 'previous_label_or_app_version' in params:
            query_params.append(('previous_label_or_app_version', params['previous_label_or_app_version']))  # noqa: E501
        if 'previous_deployment_key' in params:
            query_params.append(('previous_deployment_key', params['previous_deployment_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/codepush/update_check', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushAcquisition_getAcquisitionStatus(self, **kwargs):  # noqa: E501
        """codePushAcquisition_getAcquisitionStatus  # noqa: E501

        Returns the acquisition service status to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushAcquisition_getAcquisitionStatus(async=True)
        >>> result = thread.get()

        :param async bool
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushAcquisition_getAcquisitionStatus_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.codePushAcquisition_getAcquisitionStatus_with_http_info(**kwargs)  # noqa: E501
            return data

    def codePushAcquisition_getAcquisitionStatus_with_http_info(self, **kwargs):  # noqa: E501
        """codePushAcquisition_getAcquisitionStatus  # noqa: E501

        Returns the acquisition service status to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushAcquisition_getAcquisitionStatus_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushAcquisition_getAcquisitionStatus" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/codepush/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushAcquisition_updateDownloadStatus(self, body, **kwargs):  # noqa: E501
        """codePushAcquisition_updateDownloadStatus  # noqa: E501

        Report download of specified release  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushAcquisition_updateDownloadStatus(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: Deployment status metric properties (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushAcquisition_updateDownloadStatus_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushAcquisition_updateDownloadStatus_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def codePushAcquisition_updateDownloadStatus_with_http_info(self, body, **kwargs):  # noqa: E501
        """codePushAcquisition_updateDownloadStatus  # noqa: E501

        Report download of specified release  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushAcquisition_updateDownloadStatus_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: Deployment status metric properties (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushAcquisition_updateDownloadStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `codePushAcquisition_updateDownloadStatus`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/codepush/report_status/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushAcquisition_updateDeployStatus(self, body, **kwargs):  # noqa: E501
        """codePushAcquisition_updateDeployStatus  # noqa: E501

        Report Deployment status metric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushAcquisition_updateDeployStatus(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: Deployment status metric properties (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushAcquisition_updateDeployStatus_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushAcquisition_updateDeployStatus_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def codePushAcquisition_updateDeployStatus_with_http_info(self, body, **kwargs):  # noqa: E501
        """codePushAcquisition_updateDeployStatus  # noqa: E501

        Report Deployment status metric  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushAcquisition_updateDeployStatus_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: Deployment status metric properties (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushAcquisition_updateDeployStatus" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `codePushAcquisition_updateDeployStatus`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/public/codepush/report_status/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeploymentRelease_rollback(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentRelease_rollback  # noqa: E501

        Rollback the latest or a specific release for an app deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentRelease_rollback(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The specific release label that you want to rollback to(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeploymentRelease_rollback_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeploymentRelease_rollback_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeploymentRelease_rollback_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentRelease_rollback  # noqa: E501

        Rollback the latest or a specific release for an app deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentRelease_rollback_with_http_info(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The specific release label that you want to rollback to(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeploymentRelease_rollback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeploymentRelease_rollback`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeploymentRelease_rollback`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeploymentRelease_rollback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploymentReleases_update(self, deployment_name, release_label, owner_name, app_name, body, **kwargs):  # noqa: E501
        """deploymentReleases_update  # noqa: E501

        Modifies a CodePush release metadata under the given Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deploymentReleases_update(deployment_name, release_label, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string release_label: release label (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Release modification. All fields are optional and only provided fields will get updated. (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.deploymentReleases_update_with_http_info(deployment_name, release_label, owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.deploymentReleases_update_with_http_info(deployment_name, release_label, owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def deploymentReleases_update_with_http_info(self, deployment_name, release_label, owner_name, app_name, body, **kwargs):  # noqa: E501
        """deploymentReleases_update  # noqa: E501

        Modifies a CodePush release metadata under the given Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.deploymentReleases_update_with_http_info(deployment_name, release_label, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string release_label: release label (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Release modification. All fields are optional and only provided fields will get updated. (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'release_label', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploymentReleases_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `deploymentReleases_update`")  # noqa: E501
        # verify the required parameter 'release_label' is set
        if ('release_label' not in params or
                params['release_label'] is None):
            raise ValueError("Missing the required parameter `release_label` when calling `deploymentReleases_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `deploymentReleases_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `deploymentReleases_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `deploymentReleases_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'release_label' in params:
            path_params['release_label'] = params['release_label']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeploymentReleases_delete(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentReleases_delete  # noqa: E501

        Clears a Deployment of releases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentReleases_delete(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeploymentReleases_delete_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeploymentReleases_delete_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeploymentReleases_delete_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentReleases_delete  # noqa: E501

        Clears a Deployment of releases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentReleases_delete_with_http_info(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeploymentReleases_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeploymentReleases_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeploymentReleases_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeploymentReleases_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeploymentReleases_get(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentReleases_get  # noqa: E501

        Gets the history of releases on a Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentReleases_get(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeploymentReleases_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeploymentReleases_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeploymentReleases_get_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentReleases_get  # noqa: E501

        Gets the history of releases on a Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentReleases_get_with_http_info(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeploymentReleases_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeploymentReleases_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeploymentReleases_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeploymentReleases_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeploymentReleases_create(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentReleases_create  # noqa: E501

        Create a new CodePush release for the specified deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentReleases_create(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body:(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeploymentReleases_create_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeploymentReleases_create_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeploymentReleases_create_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentReleases_create  # noqa: E501

        Create a new CodePush release for the specified deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentReleases_create_with_http_info(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body:(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeploymentReleases_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeploymentReleases_create`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeploymentReleases_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeploymentReleases_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeployments_promote(self, deployment_name, promote_deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeployments_promote  # noqa: E501

        Promote one release (default latest one) from one deployment to another  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_promote(deployment_name, promote_deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string promote_deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeployments_promote_with_http_info(deployment_name, promote_deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeployments_promote_with_http_info(deployment_name, promote_deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeployments_promote_with_http_info(self, deployment_name, promote_deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeployments_promote  # noqa: E501

        Promote one release (default latest one) from one deployment to another  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_promote_with_http_info(deployment_name, promote_deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string promote_deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion(optional)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'promote_deployment_name', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeployments_promote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeployments_promote`")  # noqa: E501
        # verify the required parameter 'promote_deployment_name' is set
        if ('promote_deployment_name' not in params or
                params['promote_deployment_name'] is None):
            raise ValueError("Missing the required parameter `promote_deployment_name` when calling `codePushDeployments_promote`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeployments_promote`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeployments_promote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'promote_deployment_name' in params:
            path_params['promote_deployment_name'] = params['promote_deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeploymentMetrics_get(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentMetrics_get  # noqa: E501

        Gets all releases metrics for specified Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentMetrics_get(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeploymentMetrics_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeploymentMetrics_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeploymentMetrics_get_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeploymentMetrics_get  # noqa: E501

        Gets all releases metrics for specified Deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeploymentMetrics_get_with_http_info(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeploymentMetrics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeploymentMetrics_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeploymentMetrics_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeploymentMetrics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeployments_delete(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeployments_delete  # noqa: E501

        Deletes a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_delete(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeployments_delete_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeployments_delete_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeployments_delete_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeployments_delete  # noqa: E501

        Deletes a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_delete_with_http_info(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeployments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeployments_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeployments_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeployments_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeployments_get(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeployments_get  # noqa: E501

        Gets a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_get(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeployments_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeployments_get_with_http_info(deployment_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeployments_get_with_http_info(self, deployment_name, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeployments_get  # noqa: E501

        Gets a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_get_with_http_info(deployment_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeployments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeployments_get`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeployments_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeployments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeployments_update(self, deployment_name, owner_name, app_name, body, **kwargs):  # noqa: E501
        """codePushDeployments_update  # noqa: E501

        Modifies a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_update(deployment_name, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Deployment modification. All fields are optional and only provided fields will get updated. (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeployments_update_with_http_info(deployment_name, owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeployments_update_with_http_info(deployment_name, owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def codePushDeployments_update_with_http_info(self, deployment_name, owner_name, app_name, body, **kwargs):  # noqa: E501
        """codePushDeployments_update  # noqa: E501

        Modifies a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_update_with_http_info(deployment_name, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string deployment_name: deployment name (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Deployment modification. All fields are optional and only provided fields will get updated. (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_name', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeployments_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params or
                params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `codePushDeployments_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeployments_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeployments_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `codePushDeployments_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_name' in params:
            path_params['deployment_name'] = params['deployment_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeployments_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeployments_list  # noqa: E501

        Gets a list of CodePush deployments for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_list(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeployments_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeployments_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def codePushDeployments_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """codePushDeployments_list  # noqa: E501

        Gets a list of CodePush deployments for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_list_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeployments_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeployments_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeployments_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def codePushDeployments_create(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """codePushDeployments_create  # noqa: E501

        Creates a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_create(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Deployment to be created (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.codePushDeployments_create_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.codePushDeployments_create_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def codePushDeployments_create_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """codePushDeployments_create  # noqa: E501

        Creates a CodePush Deployment for the given app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.codePushDeployments_create_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Deployment to be created (required)
        :return: Failure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method codePushDeployments_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `codePushDeployments_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `codePushDeployments_create`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `codePushDeployments_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Failure',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
