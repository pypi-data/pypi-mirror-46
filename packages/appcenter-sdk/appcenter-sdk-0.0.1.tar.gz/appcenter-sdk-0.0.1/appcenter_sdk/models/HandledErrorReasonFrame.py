# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class HandledErrorReasonFrame(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    JavaScript = "JavaScript"
    CSharp = "CSharp"
    Objective-C = "Objective-C"
    Objective-Cpp = "Objective-Cpp"
    Cpp = "Cpp"
    C = "C"
    Swift = "Swift"
    Java = "Java"
    Unknown = "Unknown"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_name': 'string',
        'method': 'string',
        'class_method': 'boolean',
        'file': 'string',
        'line': 'integer',
        'app_code': 'boolean',
        'framework_name': 'string',
        'code_formatted': 'string',
        'code_raw': 'string',
        'language': 'string',
        'method_params': 'string',
        'exception_type': 'string',
        'os_exception_type': 'string'
    }

    attribute_map = {
        'class_name': 'class_name',
        'method': 'method',
        'class_method': 'class_method',
        'file': 'file',
        'line': 'line',
        'app_code': 'app_code',
        'framework_name': 'framework_name',
        'code_formatted': 'code_formatted',
        'code_raw': 'code_raw',
        'language': 'language',
        'method_params': 'method_params',
        'exception_type': 'exception_type',
        'os_exception_type': 'os_exception_type'
    }

    def __init__(self, class_name=None, method=None, class_method=None, file=None, line=None, app_code=None, framework_name=None, code_formatted=None, code_raw=None, language=None, method_params=None, exception_type=None, os_exception_type=None):  # noqa: E501
        """HandledErrorReasonFrame - a model defined in Swagger"""  # noqa: E501
        self._class_name = None
        self._method = None
        self._class_method = None
        self._file = None
        self._line = None
        self._app_code = None
        self._framework_name = None
        self._code_formatted = None
        self._code_raw = None
        self._language = None
        self._method_params = None
        self._exception_type = None
        self._os_exception_type = None
        self.discriminator = None
        if class_name is not None:
            self.class_name = class_name
        if method is not None:
            self.method = method
        if class_method is not None:
            self.class_method = class_method
        if file is not None:
            self.file = file
        if line is not None:
            self.line = line
        if app_code is not None:
            self.app_code = app_code
        if framework_name is not None:
            self.framework_name = framework_name
        if code_formatted is not None:
            self.code_formatted = code_formatted
        if code_raw is not None:
            self.code_raw = code_raw
        if language is not None:
            self.language = language
        if method_params is not None:
            self.method_params = method_params
        if exception_type is not None:
            self.exception_type = exception_type
        if os_exception_type is not None:
            self.os_exception_type = os_exception_type

    @property
    def class_name(self):
        """Gets the class_name of this HandledErrorReasonFrame.  # noqa: E501

        name of the class  # noqa: E501

        :return: The class_name of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this HandledErrorReasonFrame.

        name of the class  # noqa: E501

        :param class_name: The class_name of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._class_name = class_name

    @property
    def method(self):
        """Gets the method of this HandledErrorReasonFrame.  # noqa: E501

        name of the method  # noqa: E501

        :return: The method of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HandledErrorReasonFrame.

        name of the method  # noqa: E501

        :param method: The method of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._method = method

    @property
    def class_method(self):
        """Gets the class_method of this HandledErrorReasonFrame.  # noqa: E501

        is a class method  # noqa: E501

        :return: The class_method of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: boolean
        """
        return self._class_method

    @class_method.setter
    def class_method(self, class_method):
        """Sets the class_method of this HandledErrorReasonFrame.

        is a class method  # noqa: E501

        :param class_method: The class_method of this HandledErrorReasonFrame.  # noqa: E501
        :type: boolean
        """

        self._class_method = class_method

    @property
    def file(self):
        """Gets the file of this HandledErrorReasonFrame.  # noqa: E501

        name of the file  # noqa: E501

        :return: The file of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this HandledErrorReasonFrame.

        name of the file  # noqa: E501

        :param file: The file of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._file = file

    @property
    def line(self):
        """Gets the line of this HandledErrorReasonFrame.  # noqa: E501

        line number  # noqa: E501

        :return: The line of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: integer
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this HandledErrorReasonFrame.

        line number  # noqa: E501

        :param line: The line of this HandledErrorReasonFrame.  # noqa: E501
        :type: integer
        """

        self._line = line

    @property
    def app_code(self):
        """Gets the app_code of this HandledErrorReasonFrame.  # noqa: E501

        this line isn't from any framework  # noqa: E501

        :return: The app_code of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: boolean
        """
        return self._app_code

    @app_code.setter
    def app_code(self, app_code):
        """Sets the app_code of this HandledErrorReasonFrame.

        this line isn't from any framework  # noqa: E501

        :param app_code: The app_code of this HandledErrorReasonFrame.  # noqa: E501
        :type: boolean
        """

        self._app_code = app_code

    @property
    def framework_name(self):
        """Gets the framework_name of this HandledErrorReasonFrame.  # noqa: E501

        Name of the framework  # noqa: E501

        :return: The framework_name of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._framework_name

    @framework_name.setter
    def framework_name(self, framework_name):
        """Sets the framework_name of this HandledErrorReasonFrame.

        Name of the framework  # noqa: E501

        :param framework_name: The framework_name of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._framework_name = framework_name

    @property
    def code_formatted(self):
        """Gets the code_formatted of this HandledErrorReasonFrame.  # noqa: E501

        Formatted frame string  # noqa: E501

        :return: The code_formatted of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._code_formatted

    @code_formatted.setter
    def code_formatted(self, code_formatted):
        """Sets the code_formatted of this HandledErrorReasonFrame.

        Formatted frame string  # noqa: E501

        :param code_formatted: The code_formatted of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._code_formatted = code_formatted

    @property
    def code_raw(self):
        """Gets the code_raw of this HandledErrorReasonFrame.  # noqa: E501

        Unformatted Frame string  # noqa: E501

        :return: The code_raw of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._code_raw

    @code_raw.setter
    def code_raw(self, code_raw):
        """Sets the code_raw of this HandledErrorReasonFrame.

        Unformatted Frame string  # noqa: E501

        :param code_raw: The code_raw of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._code_raw = code_raw

    @property
    def language(self):
        """Gets the language of this HandledErrorReasonFrame.  # noqa: E501

        programming language of the frame  # noqa: E501

        :return: The language of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this HandledErrorReasonFrame.

        programming language of the frame  # noqa: E501

        :param language: The language of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, ]  # noqa: E501

        self._language = language

    @property
    def method_params(self):
        """Gets the method_params of this HandledErrorReasonFrame.  # noqa: E501

        parameters of the frames method  # noqa: E501

        :return: The method_params of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._method_params

    @method_params.setter
    def method_params(self, method_params):
        """Sets the method_params of this HandledErrorReasonFrame.

        parameters of the frames method  # noqa: E501

        :param method_params: The method_params of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._method_params = method_params

    @property
    def exception_type(self):
        """Gets the exception_type of this HandledErrorReasonFrame.  # noqa: E501

        Exception type.  # noqa: E501

        :return: The exception_type of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._exception_type

    @exception_type.setter
    def exception_type(self, exception_type):
        """Sets the exception_type of this HandledErrorReasonFrame.

        Exception type.  # noqa: E501

        :param exception_type: The exception_type of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._exception_type = exception_type

    @property
    def os_exception_type(self):
        """Gets the os_exception_type of this HandledErrorReasonFrame.  # noqa: E501

        OS exception type. (aka. SIGNAL)  # noqa: E501

        :return: The os_exception_type of this HandledErrorReasonFrame.  # noqa: E501
        :rtype: string
        """
        return self._os_exception_type

    @os_exception_type.setter
    def os_exception_type(self, os_exception_type):
        """Sets the os_exception_type of this HandledErrorReasonFrame.

        OS exception type. (aka. SIGNAL)  # noqa: E501

        :param os_exception_type: The os_exception_type of this HandledErrorReasonFrame.  # noqa: E501
        :type: string
        """

        self._os_exception_type = os_exception_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HandledErrorReasonFrame):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
