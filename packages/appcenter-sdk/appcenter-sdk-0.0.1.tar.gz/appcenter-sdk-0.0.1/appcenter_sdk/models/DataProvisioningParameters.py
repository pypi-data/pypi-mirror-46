# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class DataProvisioningParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    East Asia = "East Asia"
    Southeast Asia = "Southeast Asia"
    Australia Central = "Australia Central"
    Australia Central 2 = "Australia Central 2"
    Australia East = "Australia East"
    Australia Southeast = "Australia Southeast"
    Brazil South = "Brazil South"
    Canada Central = "Canada Central"
    Canada East = "Canada East"
    Central India = "Central India"
    South India = "South India"
    West India = "West India"
    North Europe = "North Europe"
    West Europe = "West Europe"
    France Central = "France Central"
    France South = "France South"
    Germany Central = "Germany Central"
    Germany Northeast = "Germany Northeast"
    Japan East = "Japan East"
    Japan West = "Japan West"
    Korea Central = "Korea Central"
    Korea South = "Korea South"
    South Africa North = "South Africa North"
    South Africa West = "South Africa West"
    UK South = "UK South"
    UK West = "UK West"
    Central US = "Central US"
    East US = "East US"
    East US 2 = "East US 2"
    US Gov Arizona = "US Gov Arizona"
    US Gov Texas = "US Gov Texas"
    North Central US = "North Central US"
    South Central US = "South Central US"
    West US = "West US"
    West US 2 = "West US 2"
    West Central US = "West Central US"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_id': 'string',
        'database_connection_string': 'string',
        'resource_region': 'string',
        'database': 'string',
        'collection': 'string',
        'request_units': 'integer',
        'account_name': 'string'
    }

    attribute_map = {
        'subscription_id': 'subscription_id',
        'database_connection_string': 'database_connection_string',
        'resource_region': 'resource_region',
        'database': 'database',
        'collection': 'collection',
        'request_units': 'request_units',
        'account_name': 'account_name'
    }

    def __init__(self, subscription_id=None, database_connection_string=None, resource_region=None, database=None, collection=None, request_units=None, account_name=None):  # noqa: E501
        """DataProvisioningParameters - a model defined in Swagger"""  # noqa: E501
        self._subscription_id = None
        self._database_connection_string = None
        self._resource_region = None
        self._database = None
        self._collection = None
        self._request_units = None
        self._account_name = None
        self.discriminator = None
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if database_connection_string is not None:
            self.database_connection_string = database_connection_string
        if resource_region is not None:
            self.resource_region = resource_region
        if database is not None:
            self.database = database
        if collection is not None:
            self.collection = collection
        if request_units is not None:
            self.request_units = request_units
        if account_name is not None:
            self.account_name = account_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this DataProvisioningParameters.  # noqa: E501


        :return: The subscription_id of this DataProvisioningParameters.  # noqa: E501
        :rtype: string
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this DataProvisioningParameters.


        :param subscription_id: The subscription_id of this DataProvisioningParameters.  # noqa: E501
        :type: string
        """

        self._subscription_id = subscription_id

    @property
    def database_connection_string(self):
        """Gets the database_connection_string of this DataProvisioningParameters.  # noqa: E501


        :return: The database_connection_string of this DataProvisioningParameters.  # noqa: E501
        :rtype: string
        """
        return self._database_connection_string

    @database_connection_string.setter
    def database_connection_string(self, database_connection_string):
        """Sets the database_connection_string of this DataProvisioningParameters.


        :param database_connection_string: The database_connection_string of this DataProvisioningParameters.  # noqa: E501
        :type: string
        """

        self._database_connection_string = database_connection_string

    @property
    def resource_region(self):
        """Gets the resource_region of this DataProvisioningParameters.  # noqa: E501


        :return: The resource_region of this DataProvisioningParameters.  # noqa: E501
        :rtype: string
        """
        return self._resource_region

    @resource_region.setter
    def resource_region(self, resource_region):
        """Sets the resource_region of this DataProvisioningParameters.


        :param resource_region: The resource_region of this DataProvisioningParameters.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, ]  # noqa: E501

        self._resource_region = resource_region

    @property
    def database(self):
        """Gets the database of this DataProvisioningParameters.  # noqa: E501


        :return: The database of this DataProvisioningParameters.  # noqa: E501
        :rtype: string
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DataProvisioningParameters.


        :param database: The database of this DataProvisioningParameters.  # noqa: E501
        :type: string
        """

        self._database = database

    @property
    def collection(self):
        """Gets the collection of this DataProvisioningParameters.  # noqa: E501


        :return: The collection of this DataProvisioningParameters.  # noqa: E501
        :rtype: string
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this DataProvisioningParameters.


        :param collection: The collection of this DataProvisioningParameters.  # noqa: E501
        :type: string
        """

        self._collection = collection

    @property
    def request_units(self):
        """Gets the request_units of this DataProvisioningParameters.  # noqa: E501


        :return: The request_units of this DataProvisioningParameters.  # noqa: E501
        :rtype: integer
        """
        return self._request_units

    @request_units.setter
    def request_units(self, request_units):
        """Sets the request_units of this DataProvisioningParameters.


        :param request_units: The request_units of this DataProvisioningParameters.  # noqa: E501
        :type: integer
        """

        self._request_units = request_units

    @property
    def account_name(self):
        """Gets the account_name of this DataProvisioningParameters.  # noqa: E501


        :return: The account_name of this DataProvisioningParameters.  # noqa: E501
        :rtype: string
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this DataProvisioningParameters.


        :param account_name: The account_name of this DataProvisioningParameters.  # noqa: E501
        :type: string
        """

        self._account_name = account_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataProvisioningParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
