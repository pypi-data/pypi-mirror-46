# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class CodePushReleaseMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'string',
        'active': 'integer',
        'downloaded': 'integer',
        'failed': 'integer',
        'installed': 'integer'
    }

    attribute_map = {
        'label': 'label',
        'active': 'active',
        'downloaded': 'downloaded',
        'failed': 'failed',
        'installed': 'installed'
    }

    def __init__(self, label=None, active=None, downloaded=None, failed=None, installed=None):  # noqa: E501
        """CodePushReleaseMetric - a model defined in Swagger"""  # noqa: E501
        self._label = None
        self._active = None
        self._downloaded = None
        self._failed = None
        self._installed = None
        self.discriminator = None
        self.label = label
        self.active = active
        if downloaded is not None:
            self.downloaded = downloaded
        if failed is not None:
            self.failed = failed
        if installed is not None:
            self.installed = installed

    @property
    def label(self):
        """Gets the label of this CodePushReleaseMetric.  # noqa: E501


        :return: The label of this CodePushReleaseMetric.  # noqa: E501
        :rtype: string
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CodePushReleaseMetric.


        :param label: The label of this CodePushReleaseMetric.  # noqa: E501
        :type: string
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def active(self):
        """Gets the active of this CodePushReleaseMetric.  # noqa: E501


        :return: The active of this CodePushReleaseMetric.  # noqa: E501
        :rtype: integer
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CodePushReleaseMetric.


        :param active: The active of this CodePushReleaseMetric.  # noqa: E501
        :type: integer
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def downloaded(self):
        """Gets the downloaded of this CodePushReleaseMetric.  # noqa: E501


        :return: The downloaded of this CodePushReleaseMetric.  # noqa: E501
        :rtype: integer
        """
        return self._downloaded

    @downloaded.setter
    def downloaded(self, downloaded):
        """Sets the downloaded of this CodePushReleaseMetric.


        :param downloaded: The downloaded of this CodePushReleaseMetric.  # noqa: E501
        :type: integer
        """

        self._downloaded = downloaded

    @property
    def failed(self):
        """Gets the failed of this CodePushReleaseMetric.  # noqa: E501


        :return: The failed of this CodePushReleaseMetric.  # noqa: E501
        :rtype: integer
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this CodePushReleaseMetric.


        :param failed: The failed of this CodePushReleaseMetric.  # noqa: E501
        :type: integer
        """

        self._failed = failed

    @property
    def installed(self):
        """Gets the installed of this CodePushReleaseMetric.  # noqa: E501


        :return: The installed of this CodePushReleaseMetric.  # noqa: E501
        :rtype: integer
        """
        return self._installed

    @installed.setter
    def installed(self, installed):
        """Sets the installed of this CodePushReleaseMetric.


        :param installed: The installed of this CodePushReleaseMetric.  # noqa: E501
        :type: integer
        """

        self._installed = installed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodePushReleaseMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
