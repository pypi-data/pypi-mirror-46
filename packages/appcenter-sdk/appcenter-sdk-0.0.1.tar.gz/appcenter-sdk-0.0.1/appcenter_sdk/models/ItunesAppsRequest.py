# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ItunesAppsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'string',
        'password': 'string',
        'service_connection_id': 'string',
        'team_identifier': 'string',
        'cookie': 'string'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'service_connection_id': 'service_connection_id',
        'team_identifier': 'team_identifier',
        'cookie': 'cookie'
    }

    def __init__(self, username=None, password=None, service_connection_id=None, team_identifier=None, cookie=None):  # noqa: E501
        """ItunesAppsRequest - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._password = None
        self._service_connection_id = None
        self._team_identifier = None
        self._cookie = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if service_connection_id is not None:
            self.service_connection_id = service_connection_id
        if team_identifier is not None:
            self.team_identifier = team_identifier
        if cookie is not None:
            self.cookie = cookie

    @property
    def username(self):
        """Gets the username of this ItunesAppsRequest.  # noqa: E501

        The username for the Apple Developer account.  # noqa: E501

        :return: The username of this ItunesAppsRequest.  # noqa: E501
        :rtype: string
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ItunesAppsRequest.

        The username for the Apple Developer account.  # noqa: E501

        :param username: The username of this ItunesAppsRequest.  # noqa: E501
        :type: string
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ItunesAppsRequest.  # noqa: E501

        The password for the Apple Developer account.  # noqa: E501

        :return: The password of this ItunesAppsRequest.  # noqa: E501
        :rtype: string
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ItunesAppsRequest.

        The password for the Apple Developer account.  # noqa: E501

        :param password: The password of this ItunesAppsRequest.  # noqa: E501
        :type: string
        """

        self._password = password

    @property
    def service_connection_id(self):
        """Gets the service_connection_id of this ItunesAppsRequest.  # noqa: E501

        The service_connection_id of the stored Apple credentials instead of username, password.  # noqa: E501

        :return: The service_connection_id of this ItunesAppsRequest.  # noqa: E501
        :rtype: string
        """
        return self._service_connection_id

    @service_connection_id.setter
    def service_connection_id(self, service_connection_id):
        """Sets the service_connection_id of this ItunesAppsRequest.

        The service_connection_id of the stored Apple credentials instead of username, password.  # noqa: E501

        :param service_connection_id: The service_connection_id of this ItunesAppsRequest.  # noqa: E501
        :type: string
        """

        self._service_connection_id = service_connection_id

    @property
    def team_identifier(self):
        """Gets the team_identifier of this ItunesAppsRequest.  # noqa: E501

        Identifier of the team to use when logged in.  # noqa: E501

        :return: The team_identifier of this ItunesAppsRequest.  # noqa: E501
        :rtype: string
        """
        return self._team_identifier

    @team_identifier.setter
    def team_identifier(self, team_identifier):
        """Sets the team_identifier of this ItunesAppsRequest.

        Identifier of the team to use when logged in.  # noqa: E501

        :param team_identifier: The team_identifier of this ItunesAppsRequest.  # noqa: E501
        :type: string
        """

        self._team_identifier = team_identifier

    @property
    def cookie(self):
        """Gets the cookie of this ItunesAppsRequest.  # noqa: E501

        The 30-day session cookie for multi-factor authentication backed accounts.  # noqa: E501

        :return: The cookie of this ItunesAppsRequest.  # noqa: E501
        :rtype: string
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this ItunesAppsRequest.

        The 30-day session cookie for multi-factor authentication backed accounts.  # noqa: E501

        :param cookie: The cookie of this ItunesAppsRequest.  # noqa: E501
        :type: string
        """

        self._cookie = cookie

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItunesAppsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
