# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AppInvitationDetailResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    manager = "manager"
    developer = "developer"
    viewer = "viewer"
    tester = "tester"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'app': '',
        'email': 'string',
        'invite_type': 'string',
        'invited_by': '',
        'is_existing_user': 'boolean',
        'permissions': 'array',
        'app_count': 'number',
        'distribution_group': 'object'
    }

    attribute_map = {
        'id': 'id',
        'app': 'app',
        'email': 'email',
        'invite_type': 'invite_type',
        'invited_by': 'invited_by',
        'is_existing_user': 'is_existing_user',
        'permissions': 'permissions',
        'app_count': 'app_count',
        'distribution_group': 'distribution_group'
    }

    def __init__(self, id=None, app=None, email=None, invite_type=None, invited_by=None, is_existing_user=None, permissions=None, app_count=None, distribution_group=None):  # noqa: E501
        """AppInvitationDetailResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._app = None
        self._email = None
        self._invite_type = None
        self._invited_by = None
        self._is_existing_user = None
        self._permissions = None
        self._app_count = None
        self._distribution_group = None
        self.discriminator = None
        self.id = id
        self.app = app
        self.email = email
        self.invite_type = invite_type
        self.invited_by = invited_by
        self.is_existing_user = is_existing_user
        if permissions is not None:
            self.permissions = permissions
        if app_count is not None:
            self.app_count = app_count
        if distribution_group is not None:
            self.distribution_group = distribution_group

    @property
    def id(self):
        """Gets the id of this AppInvitationDetailResponse.  # noqa: E501

        The unique ID (UUID) of the invitation  # noqa: E501

        :return: The id of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppInvitationDetailResponse.

        The unique ID (UUID) of the invitation  # noqa: E501

        :param id: The id of this AppInvitationDetailResponse.  # noqa: E501
        :type: string
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def app(self):
        """Gets the app of this AppInvitationDetailResponse.  # noqa: E501


        :return: The app of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: 
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this AppInvitationDetailResponse.


        :param app: The app of this AppInvitationDetailResponse.  # noqa: E501
        :type: 
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")  # noqa: E501

        self._app = app

    @property
    def email(self):
        """Gets the email of this AppInvitationDetailResponse.  # noqa: E501

        The email address of the invited user  # noqa: E501

        :return: The email of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: string
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AppInvitationDetailResponse.

        The email address of the invited user  # noqa: E501

        :param email: The email of this AppInvitationDetailResponse.  # noqa: E501
        :type: string
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def invite_type(self):
        """Gets the invite_type of this AppInvitationDetailResponse.  # noqa: E501

        The invitation type  # noqa: E501

        :return: The invite_type of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: string
        """
        return self._invite_type

    @invite_type.setter
    def invite_type(self, invite_type):
        """Sets the invite_type of this AppInvitationDetailResponse.

        The invitation type  # noqa: E501

        :param invite_type: The invite_type of this AppInvitationDetailResponse.  # noqa: E501
        :type: string
        """
        if invite_type is None:
            raise ValueError("Invalid value for `invite_type`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, undefined, undefined, ]  # noqa: E501

        self._invite_type = invite_type

    @property
    def invited_by(self):
        """Gets the invited_by of this AppInvitationDetailResponse.  # noqa: E501


        :return: The invited_by of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: 
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this AppInvitationDetailResponse.


        :param invited_by: The invited_by of this AppInvitationDetailResponse.  # noqa: E501
        :type: 
        """
        if invited_by is None:
            raise ValueError("Invalid value for `invited_by`, must not be `None`")  # noqa: E501

        self._invited_by = invited_by

    @property
    def is_existing_user(self):
        """Gets the is_existing_user of this AppInvitationDetailResponse.  # noqa: E501

        Indicates whether the invited user already exists  # noqa: E501

        :return: The is_existing_user of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._is_existing_user

    @is_existing_user.setter
    def is_existing_user(self, is_existing_user):
        """Sets the is_existing_user of this AppInvitationDetailResponse.

        Indicates whether the invited user already exists  # noqa: E501

        :param is_existing_user: The is_existing_user of this AppInvitationDetailResponse.  # noqa: E501
        :type: boolean
        """
        if is_existing_user is None:
            raise ValueError("Invalid value for `is_existing_user`, must not be `None`")  # noqa: E501

        self._is_existing_user = is_existing_user

    @property
    def permissions(self):
        """Gets the permissions of this AppInvitationDetailResponse.  # noqa: E501

        The permissions the user has for the app  # noqa: E501

        :return: The permissions of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: array
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AppInvitationDetailResponse.

        The permissions the user has for the app  # noqa: E501

        :param permissions: The permissions of this AppInvitationDetailResponse.  # noqa: E501
        :type: array
        """

        self._permissions = permissions

    @property
    def app_count(self):
        """Gets the app_count of this AppInvitationDetailResponse.  # noqa: E501

        The number of apps in the group  # noqa: E501

        :return: The app_count of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: number
        """
        return self._app_count

    @app_count.setter
    def app_count(self, app_count):
        """Sets the app_count of this AppInvitationDetailResponse.

        The number of apps in the group  # noqa: E501

        :param app_count: The app_count of this AppInvitationDetailResponse.  # noqa: E501
        :type: number
        """

        self._app_count = app_count

    @property
    def distribution_group(self):
        """Gets the distribution_group of this AppInvitationDetailResponse.  # noqa: E501

        The organization that owns the distribution group, if it exists  # noqa: E501

        :return: The distribution_group of this AppInvitationDetailResponse.  # noqa: E501
        :rtype: object
        """
        return self._distribution_group

    @distribution_group.setter
    def distribution_group(self, distribution_group):
        """Sets the distribution_group of this AppInvitationDetailResponse.

        The organization that owns the distribution group, if it exists  # noqa: E501

        :param distribution_group: The distribution_group of this AppInvitationDetailResponse.  # noqa: E501
        :type: object
        """

        self._distribution_group = distribution_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppInvitationDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
