# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class BillingPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    Build = "Build"
    Test = "Test"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'version': 'string',
        'price': 'number',
        'payment_source': 'string',
        'service': 'string',
        'limits': 'object',
        'attributes': 'object',
        'parent_id': 'string'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'price': 'price',
        'payment_source': 'payment_source',
        'service': 'service',
        'limits': 'limits',
        'attributes': 'attributes',
        'parent_id': 'parent_id'
    }

    def __init__(self, id=None, version=None, price=None, payment_source=None, service=None, limits=None, attributes=None, parent_id=None):  # noqa: E501
        """BillingPlan - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version = None
        self._price = None
        self._payment_source = None
        self._service = None
        self._limits = None
        self._attributes = None
        self._parent_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if version is not None:
            self.version = version
        if price is not None:
            self.price = price
        if payment_source is not None:
            self.payment_source = payment_source
        if service is not None:
            self.service = service
        if limits is not None:
            self.limits = limits
        if attributes is not None:
            self.attributes = attributes
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def id(self):
        """Gets the id of this BillingPlan.  # noqa: E501

        The Billing Plan ID  # noqa: E501

        :return: The id of this BillingPlan.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillingPlan.

        The Billing Plan ID  # noqa: E501

        :param id: The id of this BillingPlan.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this BillingPlan.  # noqa: E501

        Version of the Billing Plan schema  # noqa: E501

        :return: The version of this BillingPlan.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BillingPlan.

        Version of the Billing Plan schema  # noqa: E501

        :param version: The version of this BillingPlan.  # noqa: E501
        :type: string
        """

        self._version = version

    @property
    def price(self):
        """Gets the price of this BillingPlan.  # noqa: E501

        Price of the Billing Plan  # noqa: E501

        :return: The price of this BillingPlan.  # noqa: E501
        :rtype: number
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BillingPlan.

        Price of the Billing Plan  # noqa: E501

        :param price: The price of this BillingPlan.  # noqa: E501
        :type: number
        """

        self._price = price

    @property
    def payment_source(self):
        """Gets the payment_source of this BillingPlan.  # noqa: E501

        Service that receives payments for this billing plan.  # noqa: E501

        :return: The payment_source of this BillingPlan.  # noqa: E501
        :rtype: string
        """
        return self._payment_source

    @payment_source.setter
    def payment_source(self, payment_source):
        """Sets the payment_source of this BillingPlan.

        Service that receives payments for this billing plan.  # noqa: E501

        :param payment_source: The payment_source of this BillingPlan.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._payment_source = payment_source

    @property
    def service(self):
        """Gets the service of this BillingPlan.  # noqa: E501

        Name of the service that the plan applies to.  # noqa: E501

        :return: The service of this BillingPlan.  # noqa: E501
        :rtype: string
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this BillingPlan.

        Name of the service that the plan applies to.  # noqa: E501

        :param service: The service of this BillingPlan.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._service = service

    @property
    def limits(self):
        """Gets the limits of this BillingPlan.  # noqa: E501

        A collection of named numeric values  # noqa: E501

        :return: The limits of this BillingPlan.  # noqa: E501
        :rtype: object
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this BillingPlan.

        A collection of named numeric values  # noqa: E501

        :param limits: The limits of this BillingPlan.  # noqa: E501
        :type: object
        """

        self._limits = limits

    @property
    def attributes(self):
        """Gets the attributes of this BillingPlan.  # noqa: E501

        Collection of attribute values.  # noqa: E501

        :return: The attributes of this BillingPlan.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this BillingPlan.

        Collection of attribute values.  # noqa: E501

        :param attributes: The attributes of this BillingPlan.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def parent_id(self):
        """Gets the parent_id of this BillingPlan.  # noqa: E501


        :return: The parent_id of this BillingPlan.  # noqa: E501
        :rtype: string
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BillingPlan.


        :param parent_id: The parent_id of this BillingPlan.  # noqa: E501
        :type: string
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
