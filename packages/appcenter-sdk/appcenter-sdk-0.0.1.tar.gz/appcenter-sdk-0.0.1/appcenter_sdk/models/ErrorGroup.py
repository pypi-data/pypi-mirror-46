# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ErrorGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    open = "open"
    closed = "closed"
    ignored = "ignored"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_group_id': 'string',
        'app_version': 'string',
        'app_build': 'string',
        'count': 'integer',
        'device_count': 'integer',
        'first_occurrence': 'string',
        'last_occurrence': 'string',
        'exception_type': 'string',
        'exception_message': 'string',
        'exception_class_name': 'string',
        'exception_class_method': 'boolean',
        'exception_method': 'string',
        'exception_app_code': 'boolean',
        'exception_file': 'string',
        'exception_line': 'string',
        'code_raw': 'string',
        'reason_frames': 'array'
    }

    attribute_map = {
        'error_group_id': 'error_group_id',
        'app_version': 'app_version',
        'app_build': 'app_build',
        'count': 'count',
        'device_count': 'device_count',
        'first_occurrence': 'first_occurrence',
        'last_occurrence': 'last_occurrence',
        'exception_type': 'exception_type',
        'exception_message': 'exception_message',
        'exception_class_name': 'exception_class_name',
        'exception_class_method': 'exception_class_method',
        'exception_method': 'exception_method',
        'exception_app_code': 'exception_app_code',
        'exception_file': 'exception_file',
        'exception_line': 'exception_line',
        'code_raw': 'code_raw',
        'reason_frames': 'reason_frames'
    }

    def __init__(self, error_group_id=None, app_version=None, app_build=None, count=None, device_count=None, first_occurrence=None, last_occurrence=None, exception_type=None, exception_message=None, exception_class_name=None, exception_class_method=None, exception_method=None, exception_app_code=None, exception_file=None, exception_line=None, code_raw=None, reason_frames=None):  # noqa: E501
        """ErrorGroup - a model defined in Swagger"""  # noqa: E501
        self._error_group_id = None
        self._app_version = None
        self._app_build = None
        self._count = None
        self._device_count = None
        self._first_occurrence = None
        self._last_occurrence = None
        self._exception_type = None
        self._exception_message = None
        self._exception_class_name = None
        self._exception_class_method = None
        self._exception_method = None
        self._exception_app_code = None
        self._exception_file = None
        self._exception_line = None
        self._code_raw = None
        self._reason_frames = None
        self.discriminator = None
        if error_group_id is not None:
            self.error_group_id = error_group_id
        if app_version is not None:
            self.app_version = app_version
        if app_build is not None:
            self.app_build = app_build
        self.count = count
        if device_count is not None:
            self.device_count = device_count
        if first_occurrence is not None:
            self.first_occurrence = first_occurrence
        if last_occurrence is not None:
            self.last_occurrence = last_occurrence
        if exception_type is not None:
            self.exception_type = exception_type
        if exception_message is not None:
            self.exception_message = exception_message
        if exception_class_name is not None:
            self.exception_class_name = exception_class_name
        if exception_class_method is not None:
            self.exception_class_method = exception_class_method
        if exception_method is not None:
            self.exception_method = exception_method
        if exception_app_code is not None:
            self.exception_app_code = exception_app_code
        if exception_file is not None:
            self.exception_file = exception_file
        if exception_line is not None:
            self.exception_line = exception_line
        if code_raw is not None:
            self.code_raw = code_raw
        if reason_frames is not None:
            self.reason_frames = reason_frames

    @property
    def error_group_id(self):
        """Gets the error_group_id of this ErrorGroup.  # noqa: E501


        :return: The error_group_id of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._error_group_id

    @error_group_id.setter
    def error_group_id(self, error_group_id):
        """Sets the error_group_id of this ErrorGroup.


        :param error_group_id: The error_group_id of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._error_group_id = error_group_id

    @property
    def app_version(self):
        """Gets the app_version of this ErrorGroup.  # noqa: E501


        :return: The app_version of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this ErrorGroup.


        :param app_version: The app_version of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._app_version = app_version

    @property
    def app_build(self):
        """Gets the app_build of this ErrorGroup.  # noqa: E501


        :return: The app_build of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._app_build

    @app_build.setter
    def app_build(self, app_build):
        """Sets the app_build of this ErrorGroup.


        :param app_build: The app_build of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._app_build = app_build

    @property
    def count(self):
        """Gets the count of this ErrorGroup.  # noqa: E501


        :return: The count of this ErrorGroup.  # noqa: E501
        :rtype: integer
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ErrorGroup.


        :param count: The count of this ErrorGroup.  # noqa: E501
        :type: integer
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def device_count(self):
        """Gets the device_count of this ErrorGroup.  # noqa: E501


        :return: The device_count of this ErrorGroup.  # noqa: E501
        :rtype: integer
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this ErrorGroup.


        :param device_count: The device_count of this ErrorGroup.  # noqa: E501
        :type: integer
        """

        self._device_count = device_count

    @property
    def first_occurrence(self):
        """Gets the first_occurrence of this ErrorGroup.  # noqa: E501


        :return: The first_occurrence of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._first_occurrence

    @first_occurrence.setter
    def first_occurrence(self, first_occurrence):
        """Sets the first_occurrence of this ErrorGroup.


        :param first_occurrence: The first_occurrence of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._first_occurrence = first_occurrence

    @property
    def last_occurrence(self):
        """Gets the last_occurrence of this ErrorGroup.  # noqa: E501


        :return: The last_occurrence of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._last_occurrence

    @last_occurrence.setter
    def last_occurrence(self, last_occurrence):
        """Sets the last_occurrence of this ErrorGroup.


        :param last_occurrence: The last_occurrence of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._last_occurrence = last_occurrence

    @property
    def exception_type(self):
        """Gets the exception_type of this ErrorGroup.  # noqa: E501


        :return: The exception_type of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._exception_type

    @exception_type.setter
    def exception_type(self, exception_type):
        """Sets the exception_type of this ErrorGroup.


        :param exception_type: The exception_type of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._exception_type = exception_type

    @property
    def exception_message(self):
        """Gets the exception_message of this ErrorGroup.  # noqa: E501


        :return: The exception_message of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._exception_message

    @exception_message.setter
    def exception_message(self, exception_message):
        """Sets the exception_message of this ErrorGroup.


        :param exception_message: The exception_message of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._exception_message = exception_message

    @property
    def exception_class_name(self):
        """Gets the exception_class_name of this ErrorGroup.  # noqa: E501


        :return: The exception_class_name of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._exception_class_name

    @exception_class_name.setter
    def exception_class_name(self, exception_class_name):
        """Sets the exception_class_name of this ErrorGroup.


        :param exception_class_name: The exception_class_name of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._exception_class_name = exception_class_name

    @property
    def exception_class_method(self):
        """Gets the exception_class_method of this ErrorGroup.  # noqa: E501


        :return: The exception_class_method of this ErrorGroup.  # noqa: E501
        :rtype: boolean
        """
        return self._exception_class_method

    @exception_class_method.setter
    def exception_class_method(self, exception_class_method):
        """Sets the exception_class_method of this ErrorGroup.


        :param exception_class_method: The exception_class_method of this ErrorGroup.  # noqa: E501
        :type: boolean
        """

        self._exception_class_method = exception_class_method

    @property
    def exception_method(self):
        """Gets the exception_method of this ErrorGroup.  # noqa: E501


        :return: The exception_method of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._exception_method

    @exception_method.setter
    def exception_method(self, exception_method):
        """Sets the exception_method of this ErrorGroup.


        :param exception_method: The exception_method of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._exception_method = exception_method

    @property
    def exception_app_code(self):
        """Gets the exception_app_code of this ErrorGroup.  # noqa: E501


        :return: The exception_app_code of this ErrorGroup.  # noqa: E501
        :rtype: boolean
        """
        return self._exception_app_code

    @exception_app_code.setter
    def exception_app_code(self, exception_app_code):
        """Sets the exception_app_code of this ErrorGroup.


        :param exception_app_code: The exception_app_code of this ErrorGroup.  # noqa: E501
        :type: boolean
        """

        self._exception_app_code = exception_app_code

    @property
    def exception_file(self):
        """Gets the exception_file of this ErrorGroup.  # noqa: E501


        :return: The exception_file of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._exception_file

    @exception_file.setter
    def exception_file(self, exception_file):
        """Sets the exception_file of this ErrorGroup.


        :param exception_file: The exception_file of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._exception_file = exception_file

    @property
    def exception_line(self):
        """Gets the exception_line of this ErrorGroup.  # noqa: E501


        :return: The exception_line of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._exception_line

    @exception_line.setter
    def exception_line(self, exception_line):
        """Sets the exception_line of this ErrorGroup.


        :param exception_line: The exception_line of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._exception_line = exception_line

    @property
    def code_raw(self):
        """Gets the code_raw of this ErrorGroup.  # noqa: E501


        :return: The code_raw of this ErrorGroup.  # noqa: E501
        :rtype: string
        """
        return self._code_raw

    @code_raw.setter
    def code_raw(self, code_raw):
        """Sets the code_raw of this ErrorGroup.


        :param code_raw: The code_raw of this ErrorGroup.  # noqa: E501
        :type: string
        """

        self._code_raw = code_raw

    @property
    def reason_frames(self):
        """Gets the reason_frames of this ErrorGroup.  # noqa: E501


        :return: The reason_frames of this ErrorGroup.  # noqa: E501
        :rtype: array
        """
        return self._reason_frames

    @reason_frames.setter
    def reason_frames(self, reason_frames):
        """Sets the reason_frames of this ErrorGroup.


        :param reason_frames: The reason_frames of this ErrorGroup.  # noqa: E501
        :type: array
        """

        self._reason_frames = reason_frames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
