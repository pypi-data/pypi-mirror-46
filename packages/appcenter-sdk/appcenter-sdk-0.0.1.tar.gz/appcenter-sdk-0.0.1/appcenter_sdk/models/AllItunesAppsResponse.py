# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AllItunesAppsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apple_id': 'string',
        'bundle_id': 'string',
        'name': 'string',
        'icon_url': 'string'
    }

    attribute_map = {
        'apple_id': 'apple_id',
        'bundle_id': 'bundle_id',
        'name': 'name',
        'icon_url': 'icon_url'
    }

    def __init__(self, apple_id=None, bundle_id=None, name=None, icon_url=None):  # noqa: E501
        """AllItunesAppsResponse - a model defined in Swagger"""  # noqa: E501
        self._apple_id = None
        self._bundle_id = None
        self._name = None
        self._icon_url = None
        self.discriminator = None
        if apple_id is not None:
            self.apple_id = apple_id
        if bundle_id is not None:
            self.bundle_id = bundle_id
        if name is not None:
            self.name = name
        if icon_url is not None:
            self.icon_url = icon_url

    @property
    def apple_id(self):
        """Gets the apple_id of this AllItunesAppsResponse.  # noqa: E501

        apple id for app team id.  # noqa: E501

        :return: The apple_id of this AllItunesAppsResponse.  # noqa: E501
        :rtype: string
        """
        return self._apple_id

    @apple_id.setter
    def apple_id(self, apple_id):
        """Sets the apple_id of this AllItunesAppsResponse.

        apple id for app team id.  # noqa: E501

        :param apple_id: The apple_id of this AllItunesAppsResponse.  # noqa: E501
        :type: string
        """

        self._apple_id = apple_id

    @property
    def bundle_id(self):
        """Gets the bundle_id of this AllItunesAppsResponse.  # noqa: E501

        bundle identifier of app  # noqa: E501

        :return: The bundle_id of this AllItunesAppsResponse.  # noqa: E501
        :rtype: string
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this AllItunesAppsResponse.

        bundle identifier of app  # noqa: E501

        :param bundle_id: The bundle_id of this AllItunesAppsResponse.  # noqa: E501
        :type: string
        """

        self._bundle_id = bundle_id

    @property
    def name(self):
        """Gets the name of this AllItunesAppsResponse.  # noqa: E501

        App Name  # noqa: E501

        :return: The name of this AllItunesAppsResponse.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AllItunesAppsResponse.

        App Name  # noqa: E501

        :param name: The name of this AllItunesAppsResponse.  # noqa: E501
        :type: string
        """

        self._name = name

    @property
    def icon_url(self):
        """Gets the icon_url of this AllItunesAppsResponse.  # noqa: E501

        url for the app icon from app store  # noqa: E501

        :return: The icon_url of this AllItunesAppsResponse.  # noqa: E501
        :rtype: string
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this AllItunesAppsResponse.

        url for the app icon from app store  # noqa: E501

        :param icon_url: The icon_url of this AllItunesAppsResponse.  # noqa: E501
        :type: string
        """

        self._icon_url = icon_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllItunesAppsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
