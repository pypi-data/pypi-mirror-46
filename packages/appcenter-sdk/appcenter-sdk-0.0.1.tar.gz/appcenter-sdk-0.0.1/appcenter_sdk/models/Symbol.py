# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class Symbol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    available = "available"
    ignored = "ignored"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol_id': 'string',
        'type': 'string',
        'app_id': 'string',
        'platform': 'string',
        'url': 'string',
        'origin': 'string',
        'alternate_symbol_ids': 'array',
        'status': 'string',
        'version': 'string',
        'build': 'string',
        'symbol_upload_id': 'string'
    }

    attribute_map = {
        'symbol_id': 'symbol_id',
        'type': 'type',
        'app_id': 'app_id',
        'platform': 'platform',
        'url': 'url',
        'origin': 'origin',
        'alternate_symbol_ids': 'alternate_symbol_ids',
        'status': 'status',
        'version': 'version',
        'build': 'build',
        'symbol_upload_id': 'symbol_upload_id'
    }

    def __init__(self, symbol_id=None, type=None, app_id=None, platform=None, url=None, origin=None, alternate_symbol_ids=None, status=None, version=None, build=None, symbol_upload_id=None):  # noqa: E501
        """Symbol - a model defined in Swagger"""  # noqa: E501
        self._symbol_id = None
        self._type = None
        self._app_id = None
        self._platform = None
        self._url = None
        self._origin = None
        self._alternate_symbol_ids = None
        self._status = None
        self._version = None
        self._build = None
        self._symbol_upload_id = None
        self.discriminator = None
        self.symbol_id = symbol_id
        self.type = type
        self.app_id = app_id
        self.platform = platform
        self.url = url
        self.origin = origin
        self.alternate_symbol_ids = alternate_symbol_ids
        self.status = status
        if version is not None:
            self.version = version
        if build is not None:
            self.build = build
        self.symbol_upload_id = symbol_upload_id

    @property
    def symbol_id(self):
        """Gets the symbol_id of this Symbol.  # noqa: E501

        The unique id for this symbol (uuid)  # noqa: E501

        :return: The symbol_id of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._symbol_id

    @symbol_id.setter
    def symbol_id(self, symbol_id):
        """Sets the symbol_id of this Symbol.

        The unique id for this symbol (uuid)  # noqa: E501

        :param symbol_id: The symbol_id of this Symbol.  # noqa: E501
        :type: string
        """
        if symbol_id is None:
            raise ValueError("Invalid value for `symbol_id`, must not be `None`")  # noqa: E501

        self._symbol_id = symbol_id

    @property
    def type(self):
        """Gets the type of this Symbol.  # noqa: E501

        The type of the symbol for the current symbol upload  # noqa: E501

        :return: The type of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Symbol.

        The type of the symbol for the current symbol upload  # noqa: E501

        :param type: The type of this Symbol.  # noqa: E501
        :type: string
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._type = type

    @property
    def app_id(self):
        """Gets the app_id of this Symbol.  # noqa: E501

        The application that this symbol belongs to  # noqa: E501

        :return: The app_id of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Symbol.

        The application that this symbol belongs to  # noqa: E501

        :param app_id: The app_id of this Symbol.  # noqa: E501
        :type: string
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def platform(self):
        """Gets the platform of this Symbol.  # noqa: E501

        The platform that this symbol is associated with  # noqa: E501

        :return: The platform of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Symbol.

        The platform that this symbol is associated with  # noqa: E501

        :param platform: The platform of this Symbol.  # noqa: E501
        :type: string
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def url(self):
        """Gets the url of this Symbol.  # noqa: E501

        The path name of the symbol file in blob storage  # noqa: E501

        :return: The url of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Symbol.

        The path name of the symbol file in blob storage  # noqa: E501

        :param url: The url of this Symbol.  # noqa: E501
        :type: string
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def origin(self):
        """Gets the origin of this Symbol.  # noqa: E501

        The origin of the symbol file  # noqa: E501

        :return: The origin of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Symbol.

        The origin of the symbol file  # noqa: E501

        :param origin: The origin of this Symbol.  # noqa: E501
        :type: string
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._origin = origin

    @property
    def alternate_symbol_ids(self):
        """Gets the alternate_symbol_ids of this Symbol.  # noqa: E501

        The other symbols in the same file  # noqa: E501

        :return: The alternate_symbol_ids of this Symbol.  # noqa: E501
        :rtype: array
        """
        return self._alternate_symbol_ids

    @alternate_symbol_ids.setter
    def alternate_symbol_ids(self, alternate_symbol_ids):
        """Sets the alternate_symbol_ids of this Symbol.

        The other symbols in the same file  # noqa: E501

        :param alternate_symbol_ids: The alternate_symbol_ids of this Symbol.  # noqa: E501
        :type: array
        """
        if alternate_symbol_ids is None:
            raise ValueError("Invalid value for `alternate_symbol_ids`, must not be `None`")  # noqa: E501

        self._alternate_symbol_ids = alternate_symbol_ids

    @property
    def status(self):
        """Gets the status of this Symbol.  # noqa: E501

        Whether the symbol is ignored.  # noqa: E501

        :return: The status of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Symbol.

        Whether the symbol is ignored.  # noqa: E501

        :param status: The status of this Symbol.  # noqa: E501
        :type: string
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._status = status

    @property
    def version(self):
        """Gets the version of this Symbol.  # noqa: E501

        The version number. Optional for Apple. Required for Android.  # noqa: E501

        :return: The version of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Symbol.

        The version number. Optional for Apple. Required for Android.  # noqa: E501

        :param version: The version of this Symbol.  # noqa: E501
        :type: string
        """

        self._version = version

    @property
    def build(self):
        """Gets the build of this Symbol.  # noqa: E501

        The build number. Optional for Apple. Required for Android.  # noqa: E501

        :return: The build of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this Symbol.

        The build number. Optional for Apple. Required for Android.  # noqa: E501

        :param build: The build of this Symbol.  # noqa: E501
        :type: string
        """

        self._build = build

    @property
    def symbol_upload_id(self):
        """Gets the symbol_upload_id of this Symbol.  # noqa: E501

        The id of the symbol upload this symbol belongs to.  # noqa: E501

        :return: The symbol_upload_id of this Symbol.  # noqa: E501
        :rtype: string
        """
        return self._symbol_upload_id

    @symbol_upload_id.setter
    def symbol_upload_id(self, symbol_upload_id):
        """Sets the symbol_upload_id of this Symbol.

        The id of the symbol upload this symbol belongs to.  # noqa: E501

        :param symbol_upload_id: The symbol_upload_id of this Symbol.  # noqa: E501
        :type: string
        """
        if symbol_upload_id is None:
            raise ValueError("Invalid value for `symbol_upload_id`, must not be `None`")  # noqa: E501

        self._symbol_upload_id = symbol_upload_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Symbol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
