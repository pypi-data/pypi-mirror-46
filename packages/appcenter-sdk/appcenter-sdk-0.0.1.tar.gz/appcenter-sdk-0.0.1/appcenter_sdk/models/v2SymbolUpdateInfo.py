# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class v2SymbolUpdateInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    missing = "missing"
    ignored = "ignored"
    available = "available"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol_id': 'string',
        'app_id': 'string',
        'status': 'string'
    }

    attribute_map = {
        'symbol_id': 'symbol_id',
        'app_id': 'app_id',
        'status': 'status'
    }

    def __init__(self, symbol_id=None, app_id=None, status=None):  # noqa: E501
        """v2SymbolUpdateInfo - a model defined in Swagger"""  # noqa: E501
        self._symbol_id = None
        self._app_id = None
        self._status = None
        self.discriminator = None
        self.symbol_id = symbol_id
        self.app_id = app_id
        self.status = status

    @property
    def symbol_id(self):
        """Gets the symbol_id of this v2SymbolUpdateInfo.  # noqa: E501

        UUID of the symbol  # noqa: E501

        :return: The symbol_id of this v2SymbolUpdateInfo.  # noqa: E501
        :rtype: string
        """
        return self._symbol_id

    @symbol_id.setter
    def symbol_id(self, symbol_id):
        """Sets the symbol_id of this v2SymbolUpdateInfo.

        UUID of the symbol  # noqa: E501

        :param symbol_id: The symbol_id of this v2SymbolUpdateInfo.  # noqa: E501
        :type: string
        """
        if symbol_id is None:
            raise ValueError("Invalid value for `symbol_id`, must not be `None`")  # noqa: E501

        self._symbol_id = symbol_id

    @property
    def app_id(self):
        """Gets the app_id of this v2SymbolUpdateInfo.  # noqa: E501

        application id  # noqa: E501

        :return: The app_id of this v2SymbolUpdateInfo.  # noqa: E501
        :rtype: string
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this v2SymbolUpdateInfo.

        application id  # noqa: E501

        :param app_id: The app_id of this v2SymbolUpdateInfo.  # noqa: E501
        :type: string
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def status(self):
        """Gets the status of this v2SymbolUpdateInfo.  # noqa: E501

        symbol upload status  # noqa: E501

        :return: The status of this v2SymbolUpdateInfo.  # noqa: E501
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this v2SymbolUpdateInfo.

        symbol upload status  # noqa: E501

        :param status: The status of this v2SymbolUpdateInfo.  # noqa: E501
        :type: string
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = [undefinedundefinedundefined]  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, v2SymbolUpdateInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
