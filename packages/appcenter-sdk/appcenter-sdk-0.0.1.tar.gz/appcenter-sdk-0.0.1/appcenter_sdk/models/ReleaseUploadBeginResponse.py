# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ReleaseUploadBeginResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_id': 'string',
        'upload_url': 'string',
        'asset_id': 'string',
        'asset_domain': 'string',
        'asset_token': 'string'
    }

    attribute_map = {
        'upload_id': 'upload_id',
        'upload_url': 'upload_url',
        'asset_id': 'asset_id',
        'asset_domain': 'asset_domain',
        'asset_token': 'asset_token'
    }

    def __init__(self, upload_id=None, upload_url=None, asset_id=None, asset_domain=None, asset_token=None):  # noqa: E501
        """ReleaseUploadBeginResponse - a model defined in Swagger"""  # noqa: E501
        self._upload_id = None
        self._upload_url = None
        self._asset_id = None
        self._asset_domain = None
        self._asset_token = None
        self.discriminator = None
        self.upload_id = upload_id
        self.upload_url = upload_url
        if asset_id is not None:
            self.asset_id = asset_id
        if asset_domain is not None:
            self.asset_domain = asset_domain
        if asset_token is not None:
            self.asset_token = asset_token

    @property
    def upload_id(self):
        """Gets the upload_id of this ReleaseUploadBeginResponse.  # noqa: E501

        The ID for the current upload  # noqa: E501

        :return: The upload_id of this ReleaseUploadBeginResponse.  # noqa: E501
        :rtype: string
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this ReleaseUploadBeginResponse.

        The ID for the current upload  # noqa: E501

        :param upload_id: The upload_id of this ReleaseUploadBeginResponse.  # noqa: E501
        :type: string
        """
        if upload_id is None:
            raise ValueError("Invalid value for `upload_id`, must not be `None`")  # noqa: E501

        self._upload_id = upload_id

    @property
    def upload_url(self):
        """Gets the upload_url of this ReleaseUploadBeginResponse.  # noqa: E501

        The URL where the client needs to upload the release to  # noqa: E501

        :return: The upload_url of this ReleaseUploadBeginResponse.  # noqa: E501
        :rtype: string
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this ReleaseUploadBeginResponse.

        The URL where the client needs to upload the release to  # noqa: E501

        :param upload_url: The upload_url of this ReleaseUploadBeginResponse.  # noqa: E501
        :type: string
        """
        if upload_url is None:
            raise ValueError("Invalid value for `upload_url`, must not be `None`")  # noqa: E501

        self._upload_url = upload_url

    @property
    def asset_id(self):
        """Gets the asset_id of this ReleaseUploadBeginResponse.  # noqa: E501

        The ID for the current upload, reserved for future use  # noqa: E501

        :return: The asset_id of this ReleaseUploadBeginResponse.  # noqa: E501
        :rtype: string
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this ReleaseUploadBeginResponse.

        The ID for the current upload, reserved for future use  # noqa: E501

        :param asset_id: The asset_id of this ReleaseUploadBeginResponse.  # noqa: E501
        :type: string
        """

        self._asset_id = asset_id

    @property
    def asset_domain(self):
        """Gets the asset_domain of this ReleaseUploadBeginResponse.  # noqa: E501

        The URL for the current upload, reserved for future use  # noqa: E501

        :return: The asset_domain of this ReleaseUploadBeginResponse.  # noqa: E501
        :rtype: string
        """
        return self._asset_domain

    @asset_domain.setter
    def asset_domain(self, asset_domain):
        """Sets the asset_domain of this ReleaseUploadBeginResponse.

        The URL for the current upload, reserved for future use  # noqa: E501

        :param asset_domain: The asset_domain of this ReleaseUploadBeginResponse.  # noqa: E501
        :type: string
        """

        self._asset_domain = asset_domain

    @property
    def asset_token(self):
        """Gets the asset_token of this ReleaseUploadBeginResponse.  # noqa: E501

        The token for the current upload, reserved for future use  # noqa: E501

        :return: The asset_token of this ReleaseUploadBeginResponse.  # noqa: E501
        :rtype: string
        """
        return self._asset_token

    @asset_token.setter
    def asset_token(self, asset_token):
        """Sets the asset_token of this ReleaseUploadBeginResponse.

        The token for the current upload, reserved for future use  # noqa: E501

        :param asset_token: The asset_token of this ReleaseUploadBeginResponse.  # noqa: E501
        :type: string
        """

        self._asset_token = asset_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseUploadBeginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
