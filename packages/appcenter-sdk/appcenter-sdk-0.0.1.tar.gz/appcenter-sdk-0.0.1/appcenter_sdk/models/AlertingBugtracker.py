# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AlertingBugtracker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    github = "github"
    vsts = "vsts"
    jira = "jira"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'string',
        'state': 'string',
        'token_id': 'string',
        'event_types': 'array',
        'crash_count_threshold': 'integer',
        'settings': 'object'
    }

    attribute_map = {
        'type': 'type',
        'state': 'state',
        'token_id': 'token_id',
        'event_types': 'event_types',
        'crash_count_threshold': 'crash_count_threshold',
        'settings': 'settings'
    }

    def __init__(self, type=None, state=None, token_id=None, event_types=None, crash_count_threshold=None, settings=None):  # noqa: E501
        """AlertingBugtracker - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._state = None
        self._token_id = None
        self._event_types = None
        self._crash_count_threshold = None
        self._settings = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if state is not None:
            self.state = state
        if token_id is not None:
            self.token_id = token_id
        if event_types is not None:
            self.event_types = event_types
        if crash_count_threshold is not None:
            self.crash_count_threshold = crash_count_threshold
        if settings is not None:
            self.settings = settings

    @property
    def type(self):
        """Gets the type of this AlertingBugtracker.  # noqa: E501

        type of bugtracker  # noqa: E501

        :return: The type of this AlertingBugtracker.  # noqa: E501
        :rtype: string
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertingBugtracker.

        type of bugtracker  # noqa: E501

        :param type: The type of this AlertingBugtracker.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, undefined, ]  # noqa: E501

        self._type = type

    @property
    def state(self):
        """Gets the state of this AlertingBugtracker.  # noqa: E501

        bugtracker state  # noqa: E501

        :return: The state of this AlertingBugtracker.  # noqa: E501
        :rtype: string
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AlertingBugtracker.

        bugtracker state  # noqa: E501

        :param state: The state of this AlertingBugtracker.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, undefined, ]  # noqa: E501

        self._state = state

    @property
    def token_id(self):
        """Gets the token_id of this AlertingBugtracker.  # noqa: E501

        ID of OAuth token  # noqa: E501

        :return: The token_id of this AlertingBugtracker.  # noqa: E501
        :rtype: string
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this AlertingBugtracker.

        ID of OAuth token  # noqa: E501

        :param token_id: The token_id of this AlertingBugtracker.  # noqa: E501
        :type: string
        """

        self._token_id = token_id

    @property
    def event_types(self):
        """Gets the event_types of this AlertingBugtracker.  # noqa: E501

        Event types enabled for bugtracker  # noqa: E501

        :return: The event_types of this AlertingBugtracker.  # noqa: E501
        :rtype: array
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this AlertingBugtracker.

        Event types enabled for bugtracker  # noqa: E501

        :param event_types: The event_types of this AlertingBugtracker.  # noqa: E501
        :type: array
        """

        self._event_types = event_types

    @property
    def crash_count_threshold(self):
        """Gets the crash_count_threshold of this AlertingBugtracker.  # noqa: E501

        Threshold for the number of crashes at which to create a bug  # noqa: E501

        :return: The crash_count_threshold of this AlertingBugtracker.  # noqa: E501
        :rtype: integer
        """
        return self._crash_count_threshold

    @crash_count_threshold.setter
    def crash_count_threshold(self, crash_count_threshold):
        """Sets the crash_count_threshold of this AlertingBugtracker.

        Threshold for the number of crashes at which to create a bug  # noqa: E501

        :param crash_count_threshold: The crash_count_threshold of this AlertingBugtracker.  # noqa: E501
        :type: integer
        """

        self._crash_count_threshold = crash_count_threshold

    @property
    def settings(self):
        """Gets the settings of this AlertingBugtracker.  # noqa: E501

        Bugtracker specific settings  # noqa: E501

        :return: The settings of this AlertingBugtracker.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AlertingBugtracker.

        Bugtracker specific settings  # noqa: E501

        :param settings: The settings of this AlertingBugtracker.  # noqa: E501
        :type: object
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertingBugtracker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
