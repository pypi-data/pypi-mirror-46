# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ResignInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'string',
        'profile_name': 'string',
        'profile_type': 'string',
        'certificate_name': 'string',
        'certificate_expiration': 'string'
    }

    attribute_map = {
        'group_name': 'group_name',
        'profile_name': 'profile_name',
        'profile_type': 'profile_type',
        'certificate_name': 'certificate_name',
        'certificate_expiration': 'certificate_expiration'
    }

    def __init__(self, group_name=None, profile_name=None, profile_type=None, certificate_name=None, certificate_expiration=None):  # noqa: E501
        """ResignInfo - a model defined in Swagger"""  # noqa: E501
        self._group_name = None
        self._profile_name = None
        self._profile_type = None
        self._certificate_name = None
        self._certificate_expiration = None
        self.discriminator = None
        if group_name is not None:
            self.group_name = group_name
        if profile_name is not None:
            self.profile_name = profile_name
        if profile_type is not None:
            self.profile_type = profile_type
        if certificate_name is not None:
            self.certificate_name = certificate_name
        if certificate_expiration is not None:
            self.certificate_expiration = certificate_expiration

    @property
    def group_name(self):
        """Gets the group_name of this ResignInfo.  # noqa: E501

        The group name of the resign attempt  # noqa: E501

        :return: The group_name of this ResignInfo.  # noqa: E501
        :rtype: string
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ResignInfo.

        The group name of the resign attempt  # noqa: E501

        :param group_name: The group_name of this ResignInfo.  # noqa: E501
        :type: string
        """

        self._group_name = group_name

    @property
    def profile_name(self):
        """Gets the profile_name of this ResignInfo.  # noqa: E501

        The provisioning profile name of group for the given resign attempt  # noqa: E501

        :return: The profile_name of this ResignInfo.  # noqa: E501
        :rtype: string
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this ResignInfo.

        The provisioning profile name of group for the given resign attempt  # noqa: E501

        :param profile_name: The profile_name of this ResignInfo.  # noqa: E501
        :type: string
        """

        self._profile_name = profile_name

    @property
    def profile_type(self):
        """Gets the profile_type of this ResignInfo.  # noqa: E501

        The provisioning profile type of group for the given resign attempt  # noqa: E501

        :return: The profile_type of this ResignInfo.  # noqa: E501
        :rtype: string
        """
        return self._profile_type

    @profile_type.setter
    def profile_type(self, profile_type):
        """Sets the profile_type of this ResignInfo.

        The provisioning profile type of group for the given resign attempt  # noqa: E501

        :param profile_type: The profile_type of this ResignInfo.  # noqa: E501
        :type: string
        """

        self._profile_type = profile_type

    @property
    def certificate_name(self):
        """Gets the certificate_name of this ResignInfo.  # noqa: E501

        The name of the certificate used for the resign attempt  # noqa: E501

        :return: The certificate_name of this ResignInfo.  # noqa: E501
        :rtype: string
        """
        return self._certificate_name

    @certificate_name.setter
    def certificate_name(self, certificate_name):
        """Sets the certificate_name of this ResignInfo.

        The name of the certificate used for the resign attempt  # noqa: E501

        :param certificate_name: The certificate_name of this ResignInfo.  # noqa: E501
        :type: string
        """

        self._certificate_name = certificate_name

    @property
    def certificate_expiration(self):
        """Gets the certificate_expiration of this ResignInfo.  # noqa: E501

        The expiration date of the certificate used for the resign attempt  # noqa: E501

        :return: The certificate_expiration of this ResignInfo.  # noqa: E501
        :rtype: string
        """
        return self._certificate_expiration

    @certificate_expiration.setter
    def certificate_expiration(self, certificate_expiration):
        """Sets the certificate_expiration of this ResignInfo.

        The expiration date of the certificate used for the resign attempt  # noqa: E501

        :param certificate_expiration: The certificate_expiration of this ResignInfo.  # noqa: E501
        :type: string
        """

        self._certificate_expiration = certificate_expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResignInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
