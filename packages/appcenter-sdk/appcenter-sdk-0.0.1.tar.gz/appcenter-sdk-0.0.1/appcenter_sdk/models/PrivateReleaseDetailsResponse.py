# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class PrivateReleaseDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    group = "group"
    store = "store"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'integer',
        'status': 'string',
        'app_name': 'string',
        'app_display_name': 'string',
        'version': 'string',
        'short_version': 'string',
        'release_notes': 'string',
        'provisioning_profile_name': 'string',
        'provisioning_profile_type': 'string',
        'is_provisioning_profile_syncing': 'boolean',
        'size': 'integer',
        'min_os': 'string',
        'device_family': 'string',
        'android_min_api_level': 'string',
        'bundle_identifier': 'string',
        'fingerprint': 'string',
        'uploaded_at': 'string',
        'download_url': 'string',
        'app_icon_url': 'string',
        'install_url': 'string',
        'distribution_group_id': 'string',
        'publishing_status': 'string',
        'destination_type': 'string'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'app_name': 'app_name',
        'app_display_name': 'app_display_name',
        'version': 'version',
        'short_version': 'short_version',
        'release_notes': 'release_notes',
        'provisioning_profile_name': 'provisioning_profile_name',
        'provisioning_profile_type': 'provisioning_profile_type',
        'is_provisioning_profile_syncing': 'is_provisioning_profile_syncing',
        'size': 'size',
        'min_os': 'min_os',
        'device_family': 'device_family',
        'android_min_api_level': 'android_min_api_level',
        'bundle_identifier': 'bundle_identifier',
        'fingerprint': 'fingerprint',
        'uploaded_at': 'uploaded_at',
        'download_url': 'download_url',
        'app_icon_url': 'app_icon_url',
        'install_url': 'install_url',
        'distribution_group_id': 'distribution_group_id',
        'publishing_status': 'publishing_status',
        'destination_type': 'destination_type'
    }

    def __init__(self, id=None, status=None, app_name=None, app_display_name=None, version=None, short_version=None, release_notes=None, provisioning_profile_name=None, provisioning_profile_type=None, is_provisioning_profile_syncing=None, size=None, min_os=None, device_family=None, android_min_api_level=None, bundle_identifier=None, fingerprint=None, uploaded_at=None, download_url=None, app_icon_url=None, install_url=None, distribution_group_id=None, publishing_status=None, destination_type=None):  # noqa: E501
        """PrivateReleaseDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._app_name = None
        self._app_display_name = None
        self._version = None
        self._short_version = None
        self._release_notes = None
        self._provisioning_profile_name = None
        self._provisioning_profile_type = None
        self._is_provisioning_profile_syncing = None
        self._size = None
        self._min_os = None
        self._device_family = None
        self._android_min_api_level = None
        self._bundle_identifier = None
        self._fingerprint = None
        self._uploaded_at = None
        self._download_url = None
        self._app_icon_url = None
        self._install_url = None
        self._distribution_group_id = None
        self._publishing_status = None
        self._destination_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if app_name is not None:
            self.app_name = app_name
        if app_display_name is not None:
            self.app_display_name = app_display_name
        if version is not None:
            self.version = version
        if short_version is not None:
            self.short_version = short_version
        if release_notes is not None:
            self.release_notes = release_notes
        if provisioning_profile_name is not None:
            self.provisioning_profile_name = provisioning_profile_name
        if provisioning_profile_type is not None:
            self.provisioning_profile_type = provisioning_profile_type
        if is_provisioning_profile_syncing is not None:
            self.is_provisioning_profile_syncing = is_provisioning_profile_syncing
        if size is not None:
            self.size = size
        if min_os is not None:
            self.min_os = min_os
        if device_family is not None:
            self.device_family = device_family
        if android_min_api_level is not None:
            self.android_min_api_level = android_min_api_level
        if bundle_identifier is not None:
            self.bundle_identifier = bundle_identifier
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if download_url is not None:
            self.download_url = download_url
        if app_icon_url is not None:
            self.app_icon_url = app_icon_url
        if install_url is not None:
            self.install_url = install_url
        if distribution_group_id is not None:
            self.distribution_group_id = distribution_group_id
        if publishing_status is not None:
            self.publishing_status = publishing_status
        if destination_type is not None:
            self.destination_type = destination_type

    @property
    def id(self):
        """Gets the id of this PrivateReleaseDetailsResponse.  # noqa: E501

        ID identifying this unique release.  # noqa: E501

        :return: The id of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateReleaseDetailsResponse.

        ID identifying this unique release.  # noqa: E501

        :param id: The id of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: integer
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this PrivateReleaseDetailsResponse.  # noqa: E501

        OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
The release state.<br>
<b>available</b>: The uploaded release has been distributed.<br>
<b>unavailable</b>: The uploaded release is not visible to the user. <br>
  # noqa: E501

        :return: The status of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PrivateReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
The release state.<br>
<b>available</b>: The uploaded release has been distributed.<br>
<b>unavailable</b>: The uploaded release is not visible to the user. <br>
  # noqa: E501

        :param status: The status of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._status = status

    @property
    def app_name(self):
        """Gets the app_name of this PrivateReleaseDetailsResponse.  # noqa: E501

        The app's name (extracted from the uploaded release).  # noqa: E501

        :return: The app_name of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this PrivateReleaseDetailsResponse.

        The app's name (extracted from the uploaded release).  # noqa: E501

        :param app_name: The app_name of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._app_name = app_name

    @property
    def app_display_name(self):
        """Gets the app_display_name of this PrivateReleaseDetailsResponse.  # noqa: E501

        The app's display name.  # noqa: E501

        :return: The app_display_name of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this PrivateReleaseDetailsResponse.

        The app's display name.  # noqa: E501

        :param app_display_name: The app_display_name of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._app_display_name = app_display_name

    @property
    def version(self):
        """Gets the version of this PrivateReleaseDetailsResponse.  # noqa: E501

        The release's version.<br>
For iOS: CFBundleVersion from info.plist.
For Android: android:versionCode from AppManifest.xml.
  # noqa: E501

        :return: The version of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PrivateReleaseDetailsResponse.

        The release's version.<br>
For iOS: CFBundleVersion from info.plist.
For Android: android:versionCode from AppManifest.xml.
  # noqa: E501

        :param version: The version of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._version = version

    @property
    def short_version(self):
        """Gets the short_version of this PrivateReleaseDetailsResponse.  # noqa: E501

        The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.
For Android: android:versionName from AppManifest.xml.
  # noqa: E501

        :return: The short_version of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this PrivateReleaseDetailsResponse.

        The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.
For Android: android:versionName from AppManifest.xml.
  # noqa: E501

        :param short_version: The short_version of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._short_version = short_version

    @property
    def release_notes(self):
        """Gets the release_notes of this PrivateReleaseDetailsResponse.  # noqa: E501

        The release's release notes.  # noqa: E501

        :return: The release_notes of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this PrivateReleaseDetailsResponse.

        The release's release notes.  # noqa: E501

        :param release_notes: The release_notes of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._release_notes = release_notes

    @property
    def provisioning_profile_name(self):
        """Gets the provisioning_profile_name of this PrivateReleaseDetailsResponse.  # noqa: E501

        The release's provisioning profile name.  # noqa: E501

        :return: The provisioning_profile_name of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._provisioning_profile_name

    @provisioning_profile_name.setter
    def provisioning_profile_name(self, provisioning_profile_name):
        """Sets the provisioning_profile_name of this PrivateReleaseDetailsResponse.

        The release's provisioning profile name.  # noqa: E501

        :param provisioning_profile_name: The provisioning_profile_name of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._provisioning_profile_name = provisioning_profile_name

    @property
    def provisioning_profile_type(self):
        """Gets the provisioning_profile_type of this PrivateReleaseDetailsResponse.  # noqa: E501

        The type of the provisioning profile for the requested app version.  # noqa: E501

        :return: The provisioning_profile_type of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._provisioning_profile_type

    @provisioning_profile_type.setter
    def provisioning_profile_type(self, provisioning_profile_type):
        """Sets the provisioning_profile_type of this PrivateReleaseDetailsResponse.

        The type of the provisioning profile for the requested app version.  # noqa: E501

        :param provisioning_profile_type: The provisioning_profile_type of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._provisioning_profile_type = provisioning_profile_type

    @property
    def is_provisioning_profile_syncing(self):
        """Gets the is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.  # noqa: E501

        A flag that determines whether the release's provisioning profile is still extracted or not.  # noqa: E501

        :return: The is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._is_provisioning_profile_syncing

    @is_provisioning_profile_syncing.setter
    def is_provisioning_profile_syncing(self, is_provisioning_profile_syncing):
        """Sets the is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.

        A flag that determines whether the release's provisioning profile is still extracted or not.  # noqa: E501

        :param is_provisioning_profile_syncing: The is_provisioning_profile_syncing of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: boolean
        """

        self._is_provisioning_profile_syncing = is_provisioning_profile_syncing

    @property
    def size(self):
        """Gets the size of this PrivateReleaseDetailsResponse.  # noqa: E501

        The release's size in bytes.  # noqa: E501

        :return: The size of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: integer
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PrivateReleaseDetailsResponse.

        The release's size in bytes.  # noqa: E501

        :param size: The size of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: integer
        """

        self._size = size

    @property
    def min_os(self):
        """Gets the min_os of this PrivateReleaseDetailsResponse.  # noqa: E501

        The release's minimum required operating system.  # noqa: E501

        :return: The min_os of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._min_os

    @min_os.setter
    def min_os(self, min_os):
        """Sets the min_os of this PrivateReleaseDetailsResponse.

        The release's minimum required operating system.  # noqa: E501

        :param min_os: The min_os of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._min_os = min_os

    @property
    def device_family(self):
        """Gets the device_family of this PrivateReleaseDetailsResponse.  # noqa: E501

        The release's device family.  # noqa: E501

        :return: The device_family of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this PrivateReleaseDetailsResponse.

        The release's device family.  # noqa: E501

        :param device_family: The device_family of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._device_family = device_family

    @property
    def android_min_api_level(self):
        """Gets the android_min_api_level of this PrivateReleaseDetailsResponse.  # noqa: E501

        The release's minimum required Android API level.  # noqa: E501

        :return: The android_min_api_level of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._android_min_api_level

    @android_min_api_level.setter
    def android_min_api_level(self, android_min_api_level):
        """Sets the android_min_api_level of this PrivateReleaseDetailsResponse.

        The release's minimum required Android API level.  # noqa: E501

        :param android_min_api_level: The android_min_api_level of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._android_min_api_level = android_min_api_level

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this PrivateReleaseDetailsResponse.  # noqa: E501

        The identifier of the apps bundle.  # noqa: E501

        :return: The bundle_identifier of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this PrivateReleaseDetailsResponse.

        The identifier of the apps bundle.  # noqa: E501

        :param bundle_identifier: The bundle_identifier of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._bundle_identifier = bundle_identifier

    @property
    def fingerprint(self):
        """Gets the fingerprint of this PrivateReleaseDetailsResponse.  # noqa: E501

        MD5 checksum of the release binary.  # noqa: E501

        :return: The fingerprint of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this PrivateReleaseDetailsResponse.

        MD5 checksum of the release binary.  # noqa: E501

        :param fingerprint: The fingerprint of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._fingerprint = fingerprint

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this PrivateReleaseDetailsResponse.  # noqa: E501

        UTC time in ISO 8601 format of the uploaded time.  # noqa: E501

        :return: The uploaded_at of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this PrivateReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.  # noqa: E501

        :param uploaded_at: The uploaded_at of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._uploaded_at = uploaded_at

    @property
    def download_url(self):
        """Gets the download_url of this PrivateReleaseDetailsResponse.  # noqa: E501

        The URL that hosts the binary for this release.  # noqa: E501

        :return: The download_url of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this PrivateReleaseDetailsResponse.

        The URL that hosts the binary for this release.  # noqa: E501

        :param download_url: The download_url of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._download_url = download_url

    @property
    def app_icon_url(self):
        """Gets the app_icon_url of this PrivateReleaseDetailsResponse.  # noqa: E501

        A URL to the app's icon.  # noqa: E501

        :return: The app_icon_url of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._app_icon_url

    @app_icon_url.setter
    def app_icon_url(self, app_icon_url):
        """Sets the app_icon_url of this PrivateReleaseDetailsResponse.

        A URL to the app's icon.  # noqa: E501

        :param app_icon_url: The app_icon_url of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._app_icon_url = app_icon_url

    @property
    def install_url(self):
        """Gets the install_url of this PrivateReleaseDetailsResponse.  # noqa: E501

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`  # noqa: E501

        :return: The install_url of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._install_url

    @install_url.setter
    def install_url(self, install_url):
        """Sets the install_url of this PrivateReleaseDetailsResponse.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`  # noqa: E501

        :param install_url: The install_url of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._install_url = install_url

    @property
    def distribution_group_id(self):
        """Gets the distribution_group_id of this PrivateReleaseDetailsResponse.  # noqa: E501

        the destination where release is distributed  # noqa: E501

        :return: The distribution_group_id of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._distribution_group_id

    @distribution_group_id.setter
    def distribution_group_id(self, distribution_group_id):
        """Sets the distribution_group_id of this PrivateReleaseDetailsResponse.

        the destination where release is distributed  # noqa: E501

        :param distribution_group_id: The distribution_group_id of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._distribution_group_id = distribution_group_id

    @property
    def publishing_status(self):
        """Gets the publishing_status of this PrivateReleaseDetailsResponse.  # noqa: E501

        the publishing status of the distributed release  # noqa: E501

        :return: The publishing_status of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this PrivateReleaseDetailsResponse.

        the publishing status of the distributed release  # noqa: E501

        :param publishing_status: The publishing_status of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._publishing_status = publishing_status

    @property
    def destination_type(self):
        """Gets the destination_type of this PrivateReleaseDetailsResponse.  # noqa: E501

        The destination type.<br>
<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
  # noqa: E501

        :return: The destination_type of this PrivateReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this PrivateReleaseDetailsResponse.

        The destination type.<br>
<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
  # noqa: E501

        :param destination_type: The destination_type of this PrivateReleaseDetailsResponse.  # noqa: E501
        :type: string
        """
        allowed_values = [undefinedundefined]  # noqa: E501

        self._destination_type = destination_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateReleaseDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
