# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class NotificationOverviewResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    Queued = "Queued"
    Sending = "Sending"
    Completed = "Completed"
    Failed = "Failed"
    NoTargetFound = "NoTargetFound"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_id': 'string',
        'name': 'string',
        'notification_target': 'object',
        'send_time': 'string',
        'pns_send_failure': 'integer',
        'pns_send_success': 'integer',
        'state': 'string'
    }

    attribute_map = {
        'notification_id': 'notification_id',
        'name': 'name',
        'notification_target': 'notification_target',
        'send_time': 'send_time',
        'pns_send_failure': 'pns_send_failure',
        'pns_send_success': 'pns_send_success',
        'state': 'state'
    }

    def __init__(self, notification_id=None, name=None, notification_target=None, send_time=None, pns_send_failure=None, pns_send_success=None, state=None):  # noqa: E501
        """NotificationOverviewResult - a model defined in Swagger"""  # noqa: E501
        self._notification_id = None
        self._name = None
        self._notification_target = None
        self._send_time = None
        self._pns_send_failure = None
        self._pns_send_success = None
        self._state = None
        self.discriminator = None
        self.notification_id = notification_id
        if name is not None:
            self.name = name
        if notification_target is not None:
            self.notification_target = notification_target
        if send_time is not None:
            self.send_time = send_time
        if pns_send_failure is not None:
            self.pns_send_failure = pns_send_failure
        if pns_send_success is not None:
            self.pns_send_success = pns_send_success
        self.state = state

    @property
    def notification_id(self):
        """Gets the notification_id of this NotificationOverviewResult.  # noqa: E501

        Notification id.  # noqa: E501

        :return: The notification_id of this NotificationOverviewResult.  # noqa: E501
        :rtype: string
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this NotificationOverviewResult.

        Notification id.  # noqa: E501

        :param notification_id: The notification_id of this NotificationOverviewResult.  # noqa: E501
        :type: string
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")  # noqa: E501

        self._notification_id = notification_id

    @property
    def name(self):
        """Gets the name of this NotificationOverviewResult.  # noqa: E501

        Notification name  # noqa: E501

        :return: The name of this NotificationOverviewResult.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationOverviewResult.

        Notification name  # noqa: E501

        :param name: The name of this NotificationOverviewResult.  # noqa: E501
        :type: string
        """

        self._name = name

    @property
    def notification_target(self):
        """Gets the notification_target of this NotificationOverviewResult.  # noqa: E501

        Type of Notification target (audiences, devices, user ids or account ids). The object must include the correct properties for the specified target type.  # noqa: E501

        :return: The notification_target of this NotificationOverviewResult.  # noqa: E501
        :rtype: object
        """
        return self._notification_target

    @notification_target.setter
    def notification_target(self, notification_target):
        """Sets the notification_target of this NotificationOverviewResult.

        Type of Notification target (audiences, devices, user ids or account ids). The object must include the correct properties for the specified target type.  # noqa: E501

        :param notification_target: The notification_target of this NotificationOverviewResult.  # noqa: E501
        :type: object
        """

        self._notification_target = notification_target

    @property
    def send_time(self):
        """Gets the send_time of this NotificationOverviewResult.  # noqa: E501

        Notification send time  # noqa: E501

        :return: The send_time of this NotificationOverviewResult.  # noqa: E501
        :rtype: string
        """
        return self._send_time

    @send_time.setter
    def send_time(self, send_time):
        """Sets the send_time of this NotificationOverviewResult.

        Notification send time  # noqa: E501

        :param send_time: The send_time of this NotificationOverviewResult.  # noqa: E501
        :type: string
        """

        self._send_time = send_time

    @property
    def pns_send_failure(self):
        """Gets the pns_send_failure of this NotificationOverviewResult.  # noqa: E501

        Number of the notifications failed to send to the push provider.  # noqa: E501

        :return: The pns_send_failure of this NotificationOverviewResult.  # noqa: E501
        :rtype: integer
        """
        return self._pns_send_failure

    @pns_send_failure.setter
    def pns_send_failure(self, pns_send_failure):
        """Sets the pns_send_failure of this NotificationOverviewResult.

        Number of the notifications failed to send to the push provider.  # noqa: E501

        :param pns_send_failure: The pns_send_failure of this NotificationOverviewResult.  # noqa: E501
        :type: integer
        """

        self._pns_send_failure = pns_send_failure

    @property
    def pns_send_success(self):
        """Gets the pns_send_success of this NotificationOverviewResult.  # noqa: E501

        Number of the notifications successfully sent to push the provider.  # noqa: E501

        :return: The pns_send_success of this NotificationOverviewResult.  # noqa: E501
        :rtype: integer
        """
        return self._pns_send_success

    @pns_send_success.setter
    def pns_send_success(self, pns_send_success):
        """Sets the pns_send_success of this NotificationOverviewResult.

        Number of the notifications successfully sent to push the provider.  # noqa: E501

        :param pns_send_success: The pns_send_success of this NotificationOverviewResult.  # noqa: E501
        :type: integer
        """

        self._pns_send_success = pns_send_success

    @property
    def state(self):
        """Gets the state of this NotificationOverviewResult.  # noqa: E501

        State of the notification.  # noqa: E501

        :return: The state of this NotificationOverviewResult.  # noqa: E501
        :rtype: string
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NotificationOverviewResult.

        State of the notification.  # noqa: E501

        :param state: The state of this NotificationOverviewResult.  # noqa: E501
        :type: string
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = [undefinedundefinedundefinedundefinedundefined]  # noqa: E501

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationOverviewResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
