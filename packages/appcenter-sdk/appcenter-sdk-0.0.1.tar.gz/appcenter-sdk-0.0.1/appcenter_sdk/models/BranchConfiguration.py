# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class BranchConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    buildId = "buildId"
    timestamp = "timestamp"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'integer',
        'trigger': 'string',
        'tests_enabled': 'boolean',
        'badge_is_enabled': 'boolean',
        'signed': 'boolean',
        'toolsets': '',
        'artifact_versioning': ''
    }

    attribute_map = {
        'id': 'id',
        'trigger': 'trigger',
        'tests_enabled': 'tests_enabled',
        'badge_is_enabled': 'badge_is_enabled',
        'signed': 'signed',
        'toolsets': 'toolsets',
        'artifact_versioning': 'artifact_versioning'
    }

    def __init__(self, id=None, trigger=None, tests_enabled=None, badge_is_enabled=None, signed=None, toolsets=None, artifact_versioning=None):  # noqa: E501
        """BranchConfiguration - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._trigger = None
        self._tests_enabled = None
        self._badge_is_enabled = None
        self._signed = None
        self._toolsets = None
        self._artifact_versioning = None
        self.discriminator = None
        self.id = id
        if trigger is not None:
            self.trigger = trigger
        if tests_enabled is not None:
            self.tests_enabled = tests_enabled
        if badge_is_enabled is not None:
            self.badge_is_enabled = badge_is_enabled
        if signed is not None:
            self.signed = signed
        if toolsets is not None:
            self.toolsets = toolsets
        if artifact_versioning is not None:
            self.artifact_versioning = artifact_versioning

    @property
    def id(self):
        """Gets the id of this BranchConfiguration.  # noqa: E501


        :return: The id of this BranchConfiguration.  # noqa: E501
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BranchConfiguration.


        :param id: The id of this BranchConfiguration.  # noqa: E501
        :type: integer
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def trigger(self):
        """Gets the trigger of this BranchConfiguration.  # noqa: E501


        :return: The trigger of this BranchConfiguration.  # noqa: E501
        :rtype: string
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this BranchConfiguration.


        :param trigger: The trigger of this BranchConfiguration.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._trigger = trigger

    @property
    def tests_enabled(self):
        """Gets the tests_enabled of this BranchConfiguration.  # noqa: E501


        :return: The tests_enabled of this BranchConfiguration.  # noqa: E501
        :rtype: boolean
        """
        return self._tests_enabled

    @tests_enabled.setter
    def tests_enabled(self, tests_enabled):
        """Sets the tests_enabled of this BranchConfiguration.


        :param tests_enabled: The tests_enabled of this BranchConfiguration.  # noqa: E501
        :type: boolean
        """

        self._tests_enabled = tests_enabled

    @property
    def badge_is_enabled(self):
        """Gets the badge_is_enabled of this BranchConfiguration.  # noqa: E501


        :return: The badge_is_enabled of this BranchConfiguration.  # noqa: E501
        :rtype: boolean
        """
        return self._badge_is_enabled

    @badge_is_enabled.setter
    def badge_is_enabled(self, badge_is_enabled):
        """Sets the badge_is_enabled of this BranchConfiguration.


        :param badge_is_enabled: The badge_is_enabled of this BranchConfiguration.  # noqa: E501
        :type: boolean
        """

        self._badge_is_enabled = badge_is_enabled

    @property
    def signed(self):
        """Gets the signed of this BranchConfiguration.  # noqa: E501


        :return: The signed of this BranchConfiguration.  # noqa: E501
        :rtype: boolean
        """
        return self._signed

    @signed.setter
    def signed(self, signed):
        """Sets the signed of this BranchConfiguration.


        :param signed: The signed of this BranchConfiguration.  # noqa: E501
        :type: boolean
        """

        self._signed = signed

    @property
    def toolsets(self):
        """Gets the toolsets of this BranchConfiguration.  # noqa: E501

        The branch build configuration for each toolset  # noqa: E501

        :return: The toolsets of this BranchConfiguration.  # noqa: E501
        :rtype: 
        """
        return self._toolsets

    @toolsets.setter
    def toolsets(self, toolsets):
        """Sets the toolsets of this BranchConfiguration.

        The branch build configuration for each toolset  # noqa: E501

        :param toolsets: The toolsets of this BranchConfiguration.  # noqa: E501
        :type: 
        """

        self._toolsets = toolsets

    @property
    def artifact_versioning(self):
        """Gets the artifact_versioning of this BranchConfiguration.  # noqa: E501

        The versioning configuration for artifacts built for this branch  # noqa: E501

        :return: The artifact_versioning of this BranchConfiguration.  # noqa: E501
        :rtype: 
        """
        return self._artifact_versioning

    @artifact_versioning.setter
    def artifact_versioning(self, artifact_versioning):
        """Sets the artifact_versioning of this BranchConfiguration.

        The versioning configuration for artifacts built for this branch  # noqa: E501

        :param artifact_versioning: The artifact_versioning of this BranchConfiguration.  # noqa: E501
        :type: 
        """

        self._artifact_versioning = artifact_versioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BranchConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
