# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class DestinationError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'string',
        'message': 'string',
        'id': 'string',
        'name': 'string'
    }

    attribute_map = {
        'code': 'code',
        'message': 'message',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, code=None, message=None, id=None, name=None):  # noqa: E501
        """DestinationError - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._message = None
        self._id = None
        self._name = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if message is not None:
            self.message = message
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def code(self):
        """Gets the code of this DestinationError.  # noqa: E501

        Error Codes:<br>
<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
<b>store_release_not_available</b>: The release is not available.<br>
<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
  # noqa: E501

        :return: The code of this DestinationError.  # noqa: E501
        :rtype: string
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DestinationError.

        Error Codes:<br>
<b>invalid_store_secrets</b>: While distributing to store, secrets provided for store are not valid.<br>
<b>store_release_bad_request</b>: Proper package release details for the store is not provided.<br>
<b>store_release_unauthorized</b>: User is not authorized to publish to store due to invalid developer credentials.<br>
<b>store_release_forbidden</b>: Publish to store is forbidden due to conflicts/errors in the release version and already existing version in the store.<br>
<b>store_release_promotion</b>: Release already distributed, promoting a release is not supported.<br>
<b>store_track_deactivated</b>: One or more tracks would be deactivated with this release. This is not supported yet.<br>
<b>store_release_not_found</b>: App with the given package name is not found in the store.<br>
<b>store_release_not_available</b>: The release is not available.<br>
<b>internal_server_error</b>: Failed to distribute to a destination due to an internal server error.
  # noqa: E501

        :param code: The code of this DestinationError.  # noqa: E501
        :type: string
        """

        self._code = code

    @property
    def message(self):
        """Gets the message of this DestinationError.  # noqa: E501


        :return: The message of this DestinationError.  # noqa: E501
        :rtype: string
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DestinationError.


        :param message: The message of this DestinationError.  # noqa: E501
        :type: string
        """

        self._message = message

    @property
    def id(self):
        """Gets the id of this DestinationError.  # noqa: E501


        :return: The id of this DestinationError.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DestinationError.


        :param id: The id of this DestinationError.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DestinationError.  # noqa: E501


        :return: The name of this DestinationError.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinationError.


        :param name: The name of this DestinationError.  # noqa: E501
        :type: string
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
