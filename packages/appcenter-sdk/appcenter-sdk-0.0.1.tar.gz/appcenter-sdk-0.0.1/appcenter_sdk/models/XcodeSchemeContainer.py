# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class XcodeSchemeContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'string',
        'shared_schemes': 'array',
        'podfile_path': 'string',
        'cartfile_path': 'string',
        'xcode_project_sha': 'string',
        'workspace_project_paths': 'string',
        'app_extension_targets': 'array'
    }

    attribute_map = {
        'path': 'path',
        'shared_schemes': 'shared_schemes',
        'podfile_path': 'podfile_path',
        'cartfile_path': 'cartfile_path',
        'xcode_project_sha': 'xcode_project_sha',
        'workspace_project_paths': 'workspace_project_paths',
        'app_extension_targets': 'app_extension_targets'
    }

    def __init__(self, path=None, shared_schemes=None, podfile_path=None, cartfile_path=None, xcode_project_sha=None, workspace_project_paths=None, app_extension_targets=None):  # noqa: E501
        """XcodeSchemeContainer - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._shared_schemes = None
        self._podfile_path = None
        self._cartfile_path = None
        self._xcode_project_sha = None
        self._workspace_project_paths = None
        self._app_extension_targets = None
        self.discriminator = None
        self.path = path
        if shared_schemes is not None:
            self.shared_schemes = shared_schemes
        if podfile_path is not None:
            self.podfile_path = podfile_path
        if cartfile_path is not None:
            self.cartfile_path = cartfile_path
        if xcode_project_sha is not None:
            self.xcode_project_sha = xcode_project_sha
        if workspace_project_paths is not None:
            self.workspace_project_paths = workspace_project_paths
        if app_extension_targets is not None:
            self.app_extension_targets = app_extension_targets

    @property
    def path(self):
        """Gets the path of this XcodeSchemeContainer.  # noqa: E501

        Path to project  # noqa: E501

        :return: The path of this XcodeSchemeContainer.  # noqa: E501
        :rtype: string
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this XcodeSchemeContainer.

        Path to project  # noqa: E501

        :param path: The path of this XcodeSchemeContainer.  # noqa: E501
        :type: string
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def shared_schemes(self):
        """Gets the shared_schemes of this XcodeSchemeContainer.  # noqa: E501

        Project schemes  # noqa: E501

        :return: The shared_schemes of this XcodeSchemeContainer.  # noqa: E501
        :rtype: array
        """
        return self._shared_schemes

    @shared_schemes.setter
    def shared_schemes(self, shared_schemes):
        """Sets the shared_schemes of this XcodeSchemeContainer.

        Project schemes  # noqa: E501

        :param shared_schemes: The shared_schemes of this XcodeSchemeContainer.  # noqa: E501
        :type: array
        """

        self._shared_schemes = shared_schemes

    @property
    def podfile_path(self):
        """Gets the podfile_path of this XcodeSchemeContainer.  # noqa: E501

        Path to CocoaPods file, if present  # noqa: E501

        :return: The podfile_path of this XcodeSchemeContainer.  # noqa: E501
        :rtype: string
        """
        return self._podfile_path

    @podfile_path.setter
    def podfile_path(self, podfile_path):
        """Sets the podfile_path of this XcodeSchemeContainer.

        Path to CocoaPods file, if present  # noqa: E501

        :param podfile_path: The podfile_path of this XcodeSchemeContainer.  # noqa: E501
        :type: string
        """

        self._podfile_path = podfile_path

    @property
    def cartfile_path(self):
        """Gets the cartfile_path of this XcodeSchemeContainer.  # noqa: E501

        Path to Carthage file, if present  # noqa: E501

        :return: The cartfile_path of this XcodeSchemeContainer.  # noqa: E501
        :rtype: string
        """
        return self._cartfile_path

    @cartfile_path.setter
    def cartfile_path(self, cartfile_path):
        """Sets the cartfile_path of this XcodeSchemeContainer.

        Path to Carthage file, if present  # noqa: E501

        :param cartfile_path: The cartfile_path of this XcodeSchemeContainer.  # noqa: E501
        :type: string
        """

        self._cartfile_path = cartfile_path

    @property
    def xcode_project_sha(self):
        """Gets the xcode_project_sha of this XcodeSchemeContainer.  # noqa: E501

        repo object Id of the pbxproject  # noqa: E501

        :return: The xcode_project_sha of this XcodeSchemeContainer.  # noqa: E501
        :rtype: string
        """
        return self._xcode_project_sha

    @xcode_project_sha.setter
    def xcode_project_sha(self, xcode_project_sha):
        """Sets the xcode_project_sha of this XcodeSchemeContainer.

        repo object Id of the pbxproject  # noqa: E501

        :param xcode_project_sha: The xcode_project_sha of this XcodeSchemeContainer.  # noqa: E501
        :type: string
        """

        self._xcode_project_sha = xcode_project_sha

    @property
    def workspace_project_paths(self):
        """Gets the workspace_project_paths of this XcodeSchemeContainer.  # noqa: E501

        Related projects paths for xcworkspace  # noqa: E501

        :return: The workspace_project_paths of this XcodeSchemeContainer.  # noqa: E501
        :rtype: string
        """
        return self._workspace_project_paths

    @workspace_project_paths.setter
    def workspace_project_paths(self, workspace_project_paths):
        """Sets the workspace_project_paths of this XcodeSchemeContainer.

        Related projects paths for xcworkspace  # noqa: E501

        :param workspace_project_paths: The workspace_project_paths of this XcodeSchemeContainer.  # noqa: E501
        :type: string
        """

        self._workspace_project_paths = workspace_project_paths

    @property
    def app_extension_targets(self):
        """Gets the app_extension_targets of this XcodeSchemeContainer.  # noqa: E501

        Information regarding project app extensions, if present  # noqa: E501

        :return: The app_extension_targets of this XcodeSchemeContainer.  # noqa: E501
        :rtype: array
        """
        return self._app_extension_targets

    @app_extension_targets.setter
    def app_extension_targets(self, app_extension_targets):
        """Sets the app_extension_targets of this XcodeSchemeContainer.

        Information regarding project app extensions, if present  # noqa: E501

        :param app_extension_targets: The app_extension_targets of this XcodeSchemeContainer.  # noqa: E501
        :type: array
        """

        self._app_extension_targets = app_extension_targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XcodeSchemeContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
