# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class DeviceInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'udid': 'string',
        'model': 'string',
        'device_name': 'string',
        'full_device_name': 'string',
        'os_build': 'string',
        'os_version': 'string',
        'serial': 'string',
        'imei': 'string',
        'owner_id': 'string',
        'status': 'string',
        'registered_at': 'string'
    }

    attribute_map = {
        'udid': 'udid',
        'model': 'model',
        'device_name': 'device_name',
        'full_device_name': 'full_device_name',
        'os_build': 'os_build',
        'os_version': 'os_version',
        'serial': 'serial',
        'imei': 'imei',
        'owner_id': 'owner_id',
        'status': 'status',
        'registered_at': 'registered_at'
    }

    def __init__(self, udid=None, model=None, device_name=None, full_device_name=None, os_build=None, os_version=None, serial=None, imei=None, owner_id=None, status=None, registered_at=None):  # noqa: E501
        """DeviceInfoResponse - a model defined in Swagger"""  # noqa: E501
        self._udid = None
        self._model = None
        self._device_name = None
        self._full_device_name = None
        self._os_build = None
        self._os_version = None
        self._serial = None
        self._imei = None
        self._owner_id = None
        self._status = None
        self._registered_at = None
        self.discriminator = None
        self.udid = udid
        self.model = model
        self.device_name = device_name
        if full_device_name is not None:
            self.full_device_name = full_device_name
        self.os_build = os_build
        self.os_version = os_version
        if serial is not None:
            self.serial = serial
        if imei is not None:
            self.imei = imei
        if owner_id is not None:
            self.owner_id = owner_id
        self.status = status
        if registered_at is not None:
            self.registered_at = registered_at

    @property
    def udid(self):
        """Gets the udid of this DeviceInfoResponse.  # noqa: E501

        The Unique Device IDentifier of the device  # noqa: E501

        :return: The udid of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this DeviceInfoResponse.

        The Unique Device IDentifier of the device  # noqa: E501

        :param udid: The udid of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """
        if udid is None:
            raise ValueError("Invalid value for `udid`, must not be `None`")  # noqa: E501

        self._udid = udid

    @property
    def model(self):
        """Gets the model of this DeviceInfoResponse.  # noqa: E501

        The model identifier of the device, in the format iDeviceM,N  # noqa: E501

        :return: The model of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceInfoResponse.

        The model identifier of the device, in the format iDeviceM,N  # noqa: E501

        :param model: The model of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def device_name(self):
        """Gets the device_name of this DeviceInfoResponse.  # noqa: E501

        The device description, in the format "iPhone 7 Plus (A1784)"  # noqa: E501

        :return: The device_name of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceInfoResponse.

        The device description, in the format "iPhone 7 Plus (A1784)"  # noqa: E501

        :param device_name: The device_name of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def full_device_name(self):
        """Gets the full_device_name of this DeviceInfoResponse.  # noqa: E501

        A combination of the device model name and the owner name.  # noqa: E501

        :return: The full_device_name of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._full_device_name

    @full_device_name.setter
    def full_device_name(self, full_device_name):
        """Sets the full_device_name of this DeviceInfoResponse.

        A combination of the device model name and the owner name.  # noqa: E501

        :param full_device_name: The full_device_name of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """

        self._full_device_name = full_device_name

    @property
    def os_build(self):
        """Gets the os_build of this DeviceInfoResponse.  # noqa: E501

        The last known OS version running on the device  # noqa: E501

        :return: The os_build of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._os_build

    @os_build.setter
    def os_build(self, os_build):
        """Sets the os_build of this DeviceInfoResponse.

        The last known OS version running on the device  # noqa: E501

        :param os_build: The os_build of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """
        if os_build is None:
            raise ValueError("Invalid value for `os_build`, must not be `None`")  # noqa: E501

        self._os_build = os_build

    @property
    def os_version(self):
        """Gets the os_version of this DeviceInfoResponse.  # noqa: E501

        The last known OS version running on the device  # noqa: E501

        :return: The os_version of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this DeviceInfoResponse.

        The last known OS version running on the device  # noqa: E501

        :param os_version: The os_version of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")  # noqa: E501

        self._os_version = os_version

    @property
    def serial(self):
        """Gets the serial of this DeviceInfoResponse.  # noqa: E501

        The device's serial number. Always empty or undefined at present.  # noqa: E501

        :return: The serial of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this DeviceInfoResponse.

        The device's serial number. Always empty or undefined at present.  # noqa: E501

        :param serial: The serial of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """

        self._serial = serial

    @property
    def imei(self):
        """Gets the imei of this DeviceInfoResponse.  # noqa: E501

        The device's International Mobile Equipment Identity number. Always empty or undefined at present.  # noqa: E501

        :return: The imei of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this DeviceInfoResponse.

        The device's International Mobile Equipment Identity number. Always empty or undefined at present.  # noqa: E501

        :param imei: The imei of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """

        self._imei = imei

    @property
    def owner_id(self):
        """Gets the owner_id of this DeviceInfoResponse.  # noqa: E501

        The user ID of the device owner.  # noqa: E501

        :return: The owner_id of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this DeviceInfoResponse.

        The user ID of the device owner.  # noqa: E501

        :param owner_id: The owner_id of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """

        self._owner_id = owner_id

    @property
    def status(self):
        """Gets the status of this DeviceInfoResponse.  # noqa: E501

        The provisioning status of the device.  # noqa: E501

        :return: The status of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceInfoResponse.

        The provisioning status of the device.  # noqa: E501

        :param status: The status of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def registered_at(self):
        """Gets the registered_at of this DeviceInfoResponse.  # noqa: E501

        Timestamp of when the device was registered in ISO format.  # noqa: E501

        :return: The registered_at of this DeviceInfoResponse.  # noqa: E501
        :rtype: string
        """
        return self._registered_at

    @registered_at.setter
    def registered_at(self, registered_at):
        """Sets the registered_at of this DeviceInfoResponse.

        Timestamp of when the device was registered in ISO format.  # noqa: E501

        :param registered_at: The registered_at of this DeviceInfoResponse.  # noqa: E501
        :type: string
        """

        self._registered_at = registered_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
