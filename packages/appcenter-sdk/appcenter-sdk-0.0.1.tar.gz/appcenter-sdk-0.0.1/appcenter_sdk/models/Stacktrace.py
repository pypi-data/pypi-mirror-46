# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class Stacktrace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ios = "ios"
    android = "android"
    xamarin = "xamarin"
    react-native = "react-native"
    ndk = "ndk"
    unity = "unity"
    other = "other"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'string',
        'reason': 'string',
        'threads': 'array',
        'exception': ''
    }

    attribute_map = {
        'title': 'title',
        'reason': 'reason',
        'threads': 'threads',
        'exception': 'exception'
    }

    def __init__(self, title=None, reason=None, threads=None, exception=None):  # noqa: E501
        """Stacktrace - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._reason = None
        self._threads = None
        self._exception = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if reason is not None:
            self.reason = reason
        if threads is not None:
            self.threads = threads
        if exception is not None:
            self.exception = exception

    @property
    def title(self):
        """Gets the title of this Stacktrace.  # noqa: E501


        :return: The title of this Stacktrace.  # noqa: E501
        :rtype: string
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Stacktrace.


        :param title: The title of this Stacktrace.  # noqa: E501
        :type: string
        """

        self._title = title

    @property
    def reason(self):
        """Gets the reason of this Stacktrace.  # noqa: E501


        :return: The reason of this Stacktrace.  # noqa: E501
        :rtype: string
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Stacktrace.


        :param reason: The reason of this Stacktrace.  # noqa: E501
        :type: string
        """

        self._reason = reason

    @property
    def threads(self):
        """Gets the threads of this Stacktrace.  # noqa: E501


        :return: The threads of this Stacktrace.  # noqa: E501
        :rtype: array
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """Sets the threads of this Stacktrace.


        :param threads: The threads of this Stacktrace.  # noqa: E501
        :type: array
        """

        self._threads = threads

    @property
    def exception(self):
        """Gets the exception of this Stacktrace.  # noqa: E501

        a exception  # noqa: E501

        :return: The exception of this Stacktrace.  # noqa: E501
        :rtype: 
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this Stacktrace.

        a exception  # noqa: E501

        :param exception: The exception of this Stacktrace.  # noqa: E501
        :type: 
        """

        self._exception = exception

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stacktrace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
