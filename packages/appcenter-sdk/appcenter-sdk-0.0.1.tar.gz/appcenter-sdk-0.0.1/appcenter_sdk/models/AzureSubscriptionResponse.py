# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AzureSubscriptionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_id': 'string',
        'tenant_id': 'string',
        'subscription_name': 'string',
        'is_billing': 'boolean',
        'is_billable': 'boolean',
        'is_microsoft_internal': 'boolean'
    }

    attribute_map = {
        'subscription_id': 'subscription_id',
        'tenant_id': 'tenant_id',
        'subscription_name': 'subscription_name',
        'is_billing': 'is_billing',
        'is_billable': 'is_billable',
        'is_microsoft_internal': 'is_microsoft_internal'
    }

    def __init__(self, subscription_id=None, tenant_id=None, subscription_name=None, is_billing=None, is_billable=None, is_microsoft_internal=None):  # noqa: E501
        """AzureSubscriptionResponse - a model defined in Swagger"""  # noqa: E501
        self._subscription_id = None
        self._tenant_id = None
        self._subscription_name = None
        self._is_billing = None
        self._is_billable = None
        self._is_microsoft_internal = None
        self.discriminator = None
        self.subscription_id = subscription_id
        self.tenant_id = tenant_id
        self.subscription_name = subscription_name
        if is_billing is not None:
            self.is_billing = is_billing
        if is_billable is not None:
            self.is_billable = is_billable
        if is_microsoft_internal is not None:
            self.is_microsoft_internal = is_microsoft_internal

    @property
    def subscription_id(self):
        """Gets the subscription_id of this AzureSubscriptionResponse.  # noqa: E501

        The azure subscription id  # noqa: E501

        :return: The subscription_id of this AzureSubscriptionResponse.  # noqa: E501
        :rtype: string
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this AzureSubscriptionResponse.

        The azure subscription id  # noqa: E501

        :param subscription_id: The subscription_id of this AzureSubscriptionResponse.  # noqa: E501
        :type: string
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AzureSubscriptionResponse.  # noqa: E501

        The tenant id of the azure subscription belongs to  # noqa: E501

        :return: The tenant_id of this AzureSubscriptionResponse.  # noqa: E501
        :rtype: string
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AzureSubscriptionResponse.

        The tenant id of the azure subscription belongs to  # noqa: E501

        :param tenant_id: The tenant_id of this AzureSubscriptionResponse.  # noqa: E501
        :type: string
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def subscription_name(self):
        """Gets the subscription_name of this AzureSubscriptionResponse.  # noqa: E501

        The name of the azure subscription  # noqa: E501

        :return: The subscription_name of this AzureSubscriptionResponse.  # noqa: E501
        :rtype: string
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this AzureSubscriptionResponse.

        The name of the azure subscription  # noqa: E501

        :param subscription_name: The subscription_name of this AzureSubscriptionResponse.  # noqa: E501
        :type: string
        """
        if subscription_name is None:
            raise ValueError("Invalid value for `subscription_name`, must not be `None`")  # noqa: E501

        self._subscription_name = subscription_name

    @property
    def is_billing(self):
        """Gets the is_billing of this AzureSubscriptionResponse.  # noqa: E501

        If the subscription is used for billing  # noqa: E501

        :return: The is_billing of this AzureSubscriptionResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._is_billing

    @is_billing.setter
    def is_billing(self, is_billing):
        """Sets the is_billing of this AzureSubscriptionResponse.

        If the subscription is used for billing  # noqa: E501

        :param is_billing: The is_billing of this AzureSubscriptionResponse.  # noqa: E501
        :type: boolean
        """

        self._is_billing = is_billing

    @property
    def is_billable(self):
        """Gets the is_billable of this AzureSubscriptionResponse.  # noqa: E501

        If the subscription can be used for billing  # noqa: E501

        :return: The is_billable of this AzureSubscriptionResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._is_billable

    @is_billable.setter
    def is_billable(self, is_billable):
        """Sets the is_billable of this AzureSubscriptionResponse.

        If the subscription can be used for billing  # noqa: E501

        :param is_billable: The is_billable of this AzureSubscriptionResponse.  # noqa: E501
        :type: boolean
        """

        self._is_billable = is_billable

    @property
    def is_microsoft_internal(self):
        """Gets the is_microsoft_internal of this AzureSubscriptionResponse.  # noqa: E501

        If the subscription is internal Microsoft subscription  # noqa: E501

        :return: The is_microsoft_internal of this AzureSubscriptionResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._is_microsoft_internal

    @is_microsoft_internal.setter
    def is_microsoft_internal(self, is_microsoft_internal):
        """Sets the is_microsoft_internal of this AzureSubscriptionResponse.

        If the subscription is internal Microsoft subscription  # noqa: E501

        :param is_microsoft_internal: The is_microsoft_internal of this AzureSubscriptionResponse.  # noqa: E501
        :type: boolean
        """

        self._is_microsoft_internal = is_microsoft_internal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureSubscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
