# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class Crash(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ios = "ios"
    android = "android"
    xamarin = "xamarin"
    react-native = "react-native"
    ndk = "ndk"
    unity = "unity"
    other = "other"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': '',
        'new_crash_group_id': 'string',
        'crash_id': 'string',
        'new_crash_id': 'string',
        'display_id': 'string',
        'timestamp': 'string',
        'version': 'string',
        'build': 'string',
        'device': 'string',
        'device_name': 'string',
        'os_version': 'string',
        'os_type': 'string',
        'stacktrace': '',
        'user_name': 'string',
        'user_email': 'string'
    }

    attribute_map = {
        'details': 'details',
        'new_crash_group_id': 'new_crash_group_id',
        'crash_id': 'crash_id',
        'new_crash_id': 'new_crash_id',
        'display_id': 'display_id',
        'timestamp': 'timestamp',
        'version': 'version',
        'build': 'build',
        'device': 'device',
        'device_name': 'device_name',
        'os_version': 'os_version',
        'os_type': 'os_type',
        'stacktrace': 'stacktrace',
        'user_name': 'user_name',
        'user_email': 'user_email'
    }

    def __init__(self, details=None, new_crash_group_id=None, crash_id=None, new_crash_id=None, display_id=None, timestamp=None, version=None, build=None, device=None, device_name=None, os_version=None, os_type=None, stacktrace=None, user_name=None, user_email=None):  # noqa: E501
        """Crash - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._new_crash_group_id = None
        self._crash_id = None
        self._new_crash_id = None
        self._display_id = None
        self._timestamp = None
        self._version = None
        self._build = None
        self._device = None
        self._device_name = None
        self._os_version = None
        self._os_type = None
        self._stacktrace = None
        self._user_name = None
        self._user_email = None
        self.discriminator = None
        if details is not None:
            self.details = details
        self.new_crash_group_id = new_crash_group_id
        self.crash_id = crash_id
        self.new_crash_id = new_crash_id
        if display_id is not None:
            self.display_id = display_id
        self.timestamp = timestamp
        self.version = version
        self.build = build
        self.device = device
        if device_name is not None:
            self.device_name = device_name
        self.os_version = os_version
        if os_type is not None:
            self.os_type = os_type
        if stacktrace is not None:
            self.stacktrace = stacktrace
        self.user_name = user_name
        if user_email is not None:
            self.user_email = user_email

    @property
    def details(self):
        """Gets the details of this Crash.  # noqa: E501


        :return: The details of this Crash.  # noqa: E501
        :rtype: 
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Crash.


        :param details: The details of this Crash.  # noqa: E501
        :type: 
        """

        self._details = details

    @property
    def new_crash_group_id(self):
        """Gets the new_crash_group_id of this Crash.  # noqa: E501


        :return: The new_crash_group_id of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._new_crash_group_id

    @new_crash_group_id.setter
    def new_crash_group_id(self, new_crash_group_id):
        """Sets the new_crash_group_id of this Crash.


        :param new_crash_group_id: The new_crash_group_id of this Crash.  # noqa: E501
        :type: string
        """
        if new_crash_group_id is None:
            raise ValueError("Invalid value for `new_crash_group_id`, must not be `None`")  # noqa: E501

        self._new_crash_group_id = new_crash_group_id

    @property
    def crash_id(self):
        """Gets the crash_id of this Crash.  # noqa: E501


        :return: The crash_id of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._crash_id

    @crash_id.setter
    def crash_id(self, crash_id):
        """Sets the crash_id of this Crash.


        :param crash_id: The crash_id of this Crash.  # noqa: E501
        :type: string
        """
        if crash_id is None:
            raise ValueError("Invalid value for `crash_id`, must not be `None`")  # noqa: E501

        self._crash_id = crash_id

    @property
    def new_crash_id(self):
        """Gets the new_crash_id of this Crash.  # noqa: E501


        :return: The new_crash_id of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._new_crash_id

    @new_crash_id.setter
    def new_crash_id(self, new_crash_id):
        """Sets the new_crash_id of this Crash.


        :param new_crash_id: The new_crash_id of this Crash.  # noqa: E501
        :type: string
        """
        if new_crash_id is None:
            raise ValueError("Invalid value for `new_crash_id`, must not be `None`")  # noqa: E501

        self._new_crash_id = new_crash_id

    @property
    def display_id(self):
        """Gets the display_id of this Crash.  # noqa: E501


        :return: The display_id of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._display_id

    @display_id.setter
    def display_id(self, display_id):
        """Sets the display_id of this Crash.


        :param display_id: The display_id of this Crash.  # noqa: E501
        :type: string
        """

        self._display_id = display_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Crash.  # noqa: E501


        :return: The timestamp of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Crash.


        :param timestamp: The timestamp of this Crash.  # noqa: E501
        :type: string
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def version(self):
        """Gets the version of this Crash.  # noqa: E501


        :return: The version of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Crash.


        :param version: The version of this Crash.  # noqa: E501
        :type: string
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def build(self):
        """Gets the build of this Crash.  # noqa: E501


        :return: The build of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this Crash.


        :param build: The build of this Crash.  # noqa: E501
        :type: string
        """
        if build is None:
            raise ValueError("Invalid value for `build`, must not be `None`")  # noqa: E501

        self._build = build

    @property
    def device(self):
        """Gets the device of this Crash.  # noqa: E501


        :return: The device of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Crash.


        :param device: The device of this Crash.  # noqa: E501
        :type: string
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def device_name(self):
        """Gets the device_name of this Crash.  # noqa: E501


        :return: The device_name of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Crash.


        :param device_name: The device_name of this Crash.  # noqa: E501
        :type: string
        """

        self._device_name = device_name

    @property
    def os_version(self):
        """Gets the os_version of this Crash.  # noqa: E501


        :return: The os_version of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this Crash.


        :param os_version: The os_version of this Crash.  # noqa: E501
        :type: string
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")  # noqa: E501

        self._os_version = os_version

    @property
    def os_type(self):
        """Gets the os_type of this Crash.  # noqa: E501


        :return: The os_type of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this Crash.


        :param os_type: The os_type of this Crash.  # noqa: E501
        :type: string
        """

        self._os_type = os_type

    @property
    def stacktrace(self):
        """Gets the stacktrace of this Crash.  # noqa: E501

        a stacktrace in a processed and prettyfied way  # noqa: E501

        :return: The stacktrace of this Crash.  # noqa: E501
        :rtype: 
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this Crash.

        a stacktrace in a processed and prettyfied way  # noqa: E501

        :param stacktrace: The stacktrace of this Crash.  # noqa: E501
        :type: 
        """

        self._stacktrace = stacktrace

    @property
    def user_name(self):
        """Gets the user_name of this Crash.  # noqa: E501


        :return: The user_name of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Crash.


        :param user_name: The user_name of this Crash.  # noqa: E501
        :type: string
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def user_email(self):
        """Gets the user_email of this Crash.  # noqa: E501


        :return: The user_email of this Crash.  # noqa: E501
        :rtype: string
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this Crash.


        :param user_email: The user_email of this Crash.  # noqa: E501
        :type: string
        """

        self._user_email = user_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Crash):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
