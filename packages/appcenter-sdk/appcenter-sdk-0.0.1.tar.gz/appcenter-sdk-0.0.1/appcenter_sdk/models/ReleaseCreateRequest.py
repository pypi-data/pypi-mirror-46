# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ReleaseCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    adhoc = "adhoc"
    enterprise = "enterprise"
    other = "other"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'string',
        'version': 'string',
        'build_version': 'string',
        'unique_identifier': 'string',
        'minimum_os_version': 'string',
        'device_family': 'string',
        'languages': 'array',
        'fingerprint': 'string',
        'size': 'integer',
        'package_url': 'string',
        'upload_id': 'string',
        'icon_url': 'string',
        'ipa_uuids': 'array',
        'provision': 'object',
        'appex_provisioning_profiles': 'array'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'build_version': 'build_version',
        'unique_identifier': 'unique_identifier',
        'minimum_os_version': 'minimum_os_version',
        'device_family': 'device_family',
        'languages': 'languages',
        'fingerprint': 'fingerprint',
        'size': 'size',
        'package_url': 'package_url',
        'upload_id': 'upload_id',
        'icon_url': 'icon_url',
        'ipa_uuids': 'ipa_uuids',
        'provision': 'provision',
        'appex_provisioning_profiles': 'appex_provisioning_profiles'
    }

    def __init__(self, name=None, version=None, build_version=None, unique_identifier=None, minimum_os_version=None, device_family=None, languages=None, fingerprint=None, size=None, package_url=None, upload_id=None, icon_url=None, ipa_uuids=None, provision=None, appex_provisioning_profiles=None):  # noqa: E501
        """ReleaseCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._version = None
        self._build_version = None
        self._unique_identifier = None
        self._minimum_os_version = None
        self._device_family = None
        self._languages = None
        self._fingerprint = None
        self._size = None
        self._package_url = None
        self._upload_id = None
        self._icon_url = None
        self._ipa_uuids = None
        self._provision = None
        self._appex_provisioning_profiles = None
        self.discriminator = None
        self.name = name
        self.version = version
        self.build_version = build_version
        self.unique_identifier = unique_identifier
        self.minimum_os_version = minimum_os_version
        if device_family is not None:
            self.device_family = device_family
        if languages is not None:
            self.languages = languages
        self.fingerprint = fingerprint
        self.size = size
        self.package_url = package_url
        self.upload_id = upload_id
        if icon_url is not None:
            self.icon_url = icon_url
        if ipa_uuids is not None:
            self.ipa_uuids = ipa_uuids
        if provision is not None:
            self.provision = provision
        if appex_provisioning_profiles is not None:
            self.appex_provisioning_profiles = appex_provisioning_profiles

    @property
    def name(self):
        """Gets the name of this ReleaseCreateRequest.  # noqa: E501

        The display name of the app, extracted from the build.  # noqa: E501

        :return: The name of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseCreateRequest.

        The display name of the app, extracted from the build.  # noqa: E501

        :param name: The name of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this ReleaseCreateRequest.  # noqa: E501

        The release's version.<br>
For iOS: CFBundleVersion from info.plist.<br>
For Android: android:versionCode from AppManifest.xml.
  # noqa: E501

        :return: The version of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReleaseCreateRequest.

        The release's version.<br>
For iOS: CFBundleVersion from info.plist.<br>
For Android: android:versionCode from AppManifest.xml.
  # noqa: E501

        :param version: The version of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def build_version(self):
        """Gets the build_version of this ReleaseCreateRequest.  # noqa: E501

        The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.<br>
For Android: android:versionName from AppManifest.xml.
  # noqa: E501

        :return: The build_version of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this ReleaseCreateRequest.

        The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.<br>
For Android: android:versionName from AppManifest.xml.
  # noqa: E501

        :param build_version: The build_version of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """
        if build_version is None:
            raise ValueError("Invalid value for `build_version`, must not be `None`")  # noqa: E501

        self._build_version = build_version

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this ReleaseCreateRequest.  # noqa: E501

        The identifier of the app's bundle.  # noqa: E501

        :return: The unique_identifier of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this ReleaseCreateRequest.

        The identifier of the app's bundle.  # noqa: E501

        :param unique_identifier: The unique_identifier of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """
        if unique_identifier is None:
            raise ValueError("Invalid value for `unique_identifier`, must not be `None`")  # noqa: E501

        self._unique_identifier = unique_identifier

    @property
    def minimum_os_version(self):
        """Gets the minimum_os_version of this ReleaseCreateRequest.  # noqa: E501

        The release's minimum required operating system.  # noqa: E501

        :return: The minimum_os_version of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._minimum_os_version

    @minimum_os_version.setter
    def minimum_os_version(self, minimum_os_version):
        """Sets the minimum_os_version of this ReleaseCreateRequest.

        The release's minimum required operating system.  # noqa: E501

        :param minimum_os_version: The minimum_os_version of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """
        if minimum_os_version is None:
            raise ValueError("Invalid value for `minimum_os_version`, must not be `None`")  # noqa: E501

        self._minimum_os_version = minimum_os_version

    @property
    def device_family(self):
        """Gets the device_family of this ReleaseCreateRequest.  # noqa: E501

        The release's device family.  # noqa: E501

        :return: The device_family of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this ReleaseCreateRequest.

        The release's device family.  # noqa: E501

        :param device_family: The device_family of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """

        self._device_family = device_family

    @property
    def languages(self):
        """Gets the languages of this ReleaseCreateRequest.  # noqa: E501

        The languages supported by the release.  # noqa: E501

        :return: The languages of this ReleaseCreateRequest.  # noqa: E501
        :rtype: array
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ReleaseCreateRequest.

        The languages supported by the release.  # noqa: E501

        :param languages: The languages of this ReleaseCreateRequest.  # noqa: E501
        :type: array
        """

        self._languages = languages

    @property
    def fingerprint(self):
        """Gets the fingerprint of this ReleaseCreateRequest.  # noqa: E501

        MD5 checksum of the release binary.  # noqa: E501

        :return: The fingerprint of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this ReleaseCreateRequest.

        MD5 checksum of the release binary.  # noqa: E501

        :param fingerprint: The fingerprint of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """
        if fingerprint is None:
            raise ValueError("Invalid value for `fingerprint`, must not be `None`")  # noqa: E501

        self._fingerprint = fingerprint

    @property
    def size(self):
        """Gets the size of this ReleaseCreateRequest.  # noqa: E501

        The release's size in bytes.  # noqa: E501

        :return: The size of this ReleaseCreateRequest.  # noqa: E501
        :rtype: integer
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ReleaseCreateRequest.

        The release's size in bytes.  # noqa: E501

        :param size: The size of this ReleaseCreateRequest.  # noqa: E501
        :type: integer
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def package_url(self):
        """Gets the package_url of this ReleaseCreateRequest.  # noqa: E501

        The URL to the release's binary.  # noqa: E501

        :return: The package_url of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._package_url

    @package_url.setter
    def package_url(self, package_url):
        """Sets the package_url of this ReleaseCreateRequest.

        The URL to the release's binary.  # noqa: E501

        :param package_url: The package_url of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """
        if package_url is None:
            raise ValueError("Invalid value for `package_url`, must not be `None`")  # noqa: E501

        self._package_url = package_url

    @property
    def upload_id(self):
        """Gets the upload_id of this ReleaseCreateRequest.  # noqa: E501

        The upload id associated with the release, to map to the releases upload table.  # noqa: E501

        :return: The upload_id of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this ReleaseCreateRequest.

        The upload id associated with the release, to map to the releases upload table.  # noqa: E501

        :param upload_id: The upload_id of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """
        if upload_id is None:
            raise ValueError("Invalid value for `upload_id`, must not be `None`")  # noqa: E501

        self._upload_id = upload_id

    @property
    def icon_url(self):
        """Gets the icon_url of this ReleaseCreateRequest.  # noqa: E501

        The URL to the release's icon.  # noqa: E501

        :return: The icon_url of this ReleaseCreateRequest.  # noqa: E501
        :rtype: string
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this ReleaseCreateRequest.

        The URL to the release's icon.  # noqa: E501

        :param icon_url: The icon_url of this ReleaseCreateRequest.  # noqa: E501
        :type: string
        """

        self._icon_url = icon_url

    @property
    def ipa_uuids(self):
        """Gets the ipa_uuids of this ReleaseCreateRequest.  # noqa: E501

        A list of UUIDs for architectures for an iOS app.  # noqa: E501

        :return: The ipa_uuids of this ReleaseCreateRequest.  # noqa: E501
        :rtype: array
        """
        return self._ipa_uuids

    @ipa_uuids.setter
    def ipa_uuids(self, ipa_uuids):
        """Sets the ipa_uuids of this ReleaseCreateRequest.

        A list of UUIDs for architectures for an iOS app.  # noqa: E501

        :param ipa_uuids: The ipa_uuids of this ReleaseCreateRequest.  # noqa: E501
        :type: array
        """

        self._ipa_uuids = ipa_uuids

    @property
    def provision(self):
        """Gets the provision of this ReleaseCreateRequest.  # noqa: E501

        An object containing information about an iOS provisioning profile.  # noqa: E501

        :return: The provision of this ReleaseCreateRequest.  # noqa: E501
        :rtype: object
        """
        return self._provision

    @provision.setter
    def provision(self, provision):
        """Sets the provision of this ReleaseCreateRequest.

        An object containing information about an iOS provisioning profile.  # noqa: E501

        :param provision: The provision of this ReleaseCreateRequest.  # noqa: E501
        :type: object
        """

        self._provision = provision

    @property
    def appex_provisioning_profiles(self):
        """Gets the appex_provisioning_profiles of this ReleaseCreateRequest.  # noqa: E501

        iOS app extension provisioning profiles included in the release.  # noqa: E501

        :return: The appex_provisioning_profiles of this ReleaseCreateRequest.  # noqa: E501
        :rtype: array
        """
        return self._appex_provisioning_profiles

    @appex_provisioning_profiles.setter
    def appex_provisioning_profiles(self, appex_provisioning_profiles):
        """Sets the appex_provisioning_profiles of this ReleaseCreateRequest.

        iOS app extension provisioning profiles included in the release.  # noqa: E501

        :param appex_provisioning_profiles: The appex_provisioning_profiles of this ReleaseCreateRequest.  # noqa: E501
        :type: array
        """

        self._appex_provisioning_profiles = appex_provisioning_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
