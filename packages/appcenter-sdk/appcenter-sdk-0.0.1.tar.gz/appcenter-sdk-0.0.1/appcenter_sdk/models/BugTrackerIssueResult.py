# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class BugTrackerIssueResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    github = "github"
    vsts = "vsts"
    jira = "jira"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'url': 'string',
        'title': 'string',
        'bug_tracker_type': 'string',
        'repo_name': 'string',
        'mobile_center_id': 'string',
        'event_type': 'string'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'title': 'title',
        'bug_tracker_type': 'bug_tracker_type',
        'repo_name': 'repo_name',
        'mobile_center_id': 'mobile_center_id',
        'event_type': 'event_type'
    }

    def __init__(self, id=None, url=None, title=None, bug_tracker_type=None, repo_name=None, mobile_center_id=None, event_type=None):  # noqa: E501
        """BugTrackerIssueResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._url = None
        self._title = None
        self._bug_tracker_type = None
        self._repo_name = None
        self._mobile_center_id = None
        self._event_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if title is not None:
            self.title = title
        if bug_tracker_type is not None:
            self.bug_tracker_type = bug_tracker_type
        if repo_name is not None:
            self.repo_name = repo_name
        if mobile_center_id is not None:
            self.mobile_center_id = mobile_center_id
        if event_type is not None:
            self.event_type = event_type

    @property
    def id(self):
        """Gets the id of this BugTrackerIssueResult.  # noqa: E501


        :return: The id of this BugTrackerIssueResult.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BugTrackerIssueResult.


        :param id: The id of this BugTrackerIssueResult.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this BugTrackerIssueResult.  # noqa: E501


        :return: The url of this BugTrackerIssueResult.  # noqa: E501
        :rtype: string
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BugTrackerIssueResult.


        :param url: The url of this BugTrackerIssueResult.  # noqa: E501
        :type: string
        """

        self._url = url

    @property
    def title(self):
        """Gets the title of this BugTrackerIssueResult.  # noqa: E501


        :return: The title of this BugTrackerIssueResult.  # noqa: E501
        :rtype: string
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BugTrackerIssueResult.


        :param title: The title of this BugTrackerIssueResult.  # noqa: E501
        :type: string
        """

        self._title = title

    @property
    def bug_tracker_type(self):
        """Gets the bug_tracker_type of this BugTrackerIssueResult.  # noqa: E501


        :return: The bug_tracker_type of this BugTrackerIssueResult.  # noqa: E501
        :rtype: string
        """
        return self._bug_tracker_type

    @bug_tracker_type.setter
    def bug_tracker_type(self, bug_tracker_type):
        """Sets the bug_tracker_type of this BugTrackerIssueResult.


        :param bug_tracker_type: The bug_tracker_type of this BugTrackerIssueResult.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, undefined, ]  # noqa: E501

        self._bug_tracker_type = bug_tracker_type

    @property
    def repo_name(self):
        """Gets the repo_name of this BugTrackerIssueResult.  # noqa: E501


        :return: The repo_name of this BugTrackerIssueResult.  # noqa: E501
        :rtype: string
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this BugTrackerIssueResult.


        :param repo_name: The repo_name of this BugTrackerIssueResult.  # noqa: E501
        :type: string
        """

        self._repo_name = repo_name

    @property
    def mobile_center_id(self):
        """Gets the mobile_center_id of this BugTrackerIssueResult.  # noqa: E501


        :return: The mobile_center_id of this BugTrackerIssueResult.  # noqa: E501
        :rtype: string
        """
        return self._mobile_center_id

    @mobile_center_id.setter
    def mobile_center_id(self, mobile_center_id):
        """Sets the mobile_center_id of this BugTrackerIssueResult.


        :param mobile_center_id: The mobile_center_id of this BugTrackerIssueResult.  # noqa: E501
        :type: string
        """

        self._mobile_center_id = mobile_center_id

    @property
    def event_type(self):
        """Gets the event_type of this BugTrackerIssueResult.  # noqa: E501


        :return: The event_type of this BugTrackerIssueResult.  # noqa: E501
        :rtype: string
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this BugTrackerIssueResult.


        :param event_type: The event_type of this BugTrackerIssueResult.  # noqa: E501
        :type: string
        """

        self._event_type = event_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BugTrackerIssueResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
