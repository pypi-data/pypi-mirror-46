# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AppGroupResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    Java = "Java"
    Objective-C-Swift = "Objective-C-Swift"
    UWP = "UWP"
    Cordova = "Cordova"
    React-Native = "React-Native"
    Unity = "Unity"
    Electron = "Electron"
    Xamarin = "Xamarin"
    Unknown = "Unknown"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'group_id': 'string',
        'display_name': 'string',
        'release_type': 'string',
        'name': 'string',
        'os': 'string',
        'platform': 'string'
    }

    attribute_map = {
        'id': 'id',
        'group_id': 'group_id',
        'display_name': 'display_name',
        'release_type': 'release_type',
        'name': 'name',
        'os': 'os',
        'platform': 'platform'
    }

    def __init__(self, id=None, group_id=None, display_name=None, release_type=None, name=None, os=None, platform=None):  # noqa: E501
        """AppGroupResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._group_id = None
        self._display_name = None
        self._release_type = None
        self._name = None
        self._os = None
        self._platform = None
        self.discriminator = None
        self.id = id
        self.group_id = group_id
        if display_name is not None:
            self.display_name = display_name
        if release_type is not None:
            self.release_type = release_type
        self.name = name
        self.os = os
        self.platform = platform

    @property
    def id(self):
        """Gets the id of this AppGroupResponse.  # noqa: E501

        The unique ID (UUID) of the app  # noqa: E501

        :return: The id of this AppGroupResponse.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppGroupResponse.

        The unique ID (UUID) of the app  # noqa: E501

        :param id: The id of this AppGroupResponse.  # noqa: E501
        :type: string
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this AppGroupResponse.  # noqa: E501

        The unique ID (UUID) of the group that the app belongs to  # noqa: E501

        :return: The group_id of this AppGroupResponse.  # noqa: E501
        :rtype: string
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AppGroupResponse.

        The unique ID (UUID) of the group that the app belongs to  # noqa: E501

        :param group_id: The group_id of this AppGroupResponse.  # noqa: E501
        :type: string
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def display_name(self):
        """Gets the display_name of this AppGroupResponse.  # noqa: E501

        The display name of the app  # noqa: E501

        :return: The display_name of this AppGroupResponse.  # noqa: E501
        :rtype: string
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppGroupResponse.

        The display name of the app  # noqa: E501

        :param display_name: The display_name of this AppGroupResponse.  # noqa: E501
        :type: string
        """

        self._display_name = display_name

    @property
    def release_type(self):
        """Gets the release_type of this AppGroupResponse.  # noqa: E501

        A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase  # noqa: E501

        :return: The release_type of this AppGroupResponse.  # noqa: E501
        :rtype: string
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """Sets the release_type of this AppGroupResponse.

        A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase  # noqa: E501

        :param release_type: The release_type of this AppGroupResponse.  # noqa: E501
        :type: string
        """

        self._release_type = release_type

    @property
    def name(self):
        """Gets the name of this AppGroupResponse.  # noqa: E501

        The name of the app used in URLs  # noqa: E501

        :return: The name of this AppGroupResponse.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppGroupResponse.

        The name of the app used in URLs  # noqa: E501

        :param name: The name of this AppGroupResponse.  # noqa: E501
        :type: string
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def os(self):
        """Gets the os of this AppGroupResponse.  # noqa: E501

        The OS the app will be running on  # noqa: E501

        :return: The os of this AppGroupResponse.  # noqa: E501
        :rtype: string
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this AppGroupResponse.

        The OS the app will be running on  # noqa: E501

        :param os: The os of this AppGroupResponse.  # noqa: E501
        :type: string
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, ]  # noqa: E501

        self._os = os

    @property
    def platform(self):
        """Gets the platform of this AppGroupResponse.  # noqa: E501

        The platform of the app  # noqa: E501

        :return: The platform of this AppGroupResponse.  # noqa: E501
        :rtype: string
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AppGroupResponse.

        The platform of the app  # noqa: E501

        :param platform: The platform of this AppGroupResponse.  # noqa: E501
        :type: string
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501
        allowed_values = [undefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedundefined]  # noqa: E501

        self._platform = platform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppGroupResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
