# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class LogFlowDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sdk_name': 'string',
        'sdk_version': 'string',
        'wrapper_sdk_version': 'string',
        'wrapper_sdk_name': 'string',
        'model': 'string',
        'oem_name': 'string',
        'os_name': 'string',
        'os_version': 'string',
        'os_build': 'string',
        'os_api_level': 'integer',
        'locale': 'string',
        'time_zone_offset': 'integer',
        'screen_size': 'string',
        'app_version': 'string',
        'carrier_name': 'string',
        'carrier_code': 'string',
        'carrier_country': 'string',
        'app_build': 'string',
        'app_namespace': 'string',
        'live_update_release_label': 'string',
        'live_update_deployment_key': 'string',
        'live_update_package_hash': 'string',
        'wrapper_runtime_version': 'string'
    }

    attribute_map = {
        'sdk_name': 'sdk_name',
        'sdk_version': 'sdk_version',
        'wrapper_sdk_version': 'wrapper_sdk_version',
        'wrapper_sdk_name': 'wrapper_sdk_name',
        'model': 'model',
        'oem_name': 'oem_name',
        'os_name': 'os_name',
        'os_version': 'os_version',
        'os_build': 'os_build',
        'os_api_level': 'os_api_level',
        'locale': 'locale',
        'time_zone_offset': 'time_zone_offset',
        'screen_size': 'screen_size',
        'app_version': 'app_version',
        'carrier_name': 'carrier_name',
        'carrier_code': 'carrier_code',
        'carrier_country': 'carrier_country',
        'app_build': 'app_build',
        'app_namespace': 'app_namespace',
        'live_update_release_label': 'live_update_release_label',
        'live_update_deployment_key': 'live_update_deployment_key',
        'live_update_package_hash': 'live_update_package_hash',
        'wrapper_runtime_version': 'wrapper_runtime_version'
    }

    def __init__(self, sdk_name=None, sdk_version=None, wrapper_sdk_version=None, wrapper_sdk_name=None, model=None, oem_name=None, os_name=None, os_version=None, os_build=None, os_api_level=None, locale=None, time_zone_offset=None, screen_size=None, app_version=None, carrier_name=None, carrier_code=None, carrier_country=None, app_build=None, app_namespace=None, live_update_release_label=None, live_update_deployment_key=None, live_update_package_hash=None, wrapper_runtime_version=None):  # noqa: E501
        """LogFlowDevice - a model defined in Swagger"""  # noqa: E501
        self._sdk_name = None
        self._sdk_version = None
        self._wrapper_sdk_version = None
        self._wrapper_sdk_name = None
        self._model = None
        self._oem_name = None
        self._os_name = None
        self._os_version = None
        self._os_build = None
        self._os_api_level = None
        self._locale = None
        self._time_zone_offset = None
        self._screen_size = None
        self._app_version = None
        self._carrier_name = None
        self._carrier_code = None
        self._carrier_country = None
        self._app_build = None
        self._app_namespace = None
        self._live_update_release_label = None
        self._live_update_deployment_key = None
        self._live_update_package_hash = None
        self._wrapper_runtime_version = None
        self.discriminator = None
        self.sdk_name = sdk_name
        self.sdk_version = sdk_version
        if wrapper_sdk_version is not None:
            self.wrapper_sdk_version = wrapper_sdk_version
        if wrapper_sdk_name is not None:
            self.wrapper_sdk_name = wrapper_sdk_name
        if model is not None:
            self.model = model
        if oem_name is not None:
            self.oem_name = oem_name
        self.os_name = os_name
        self.os_version = os_version
        if os_build is not None:
            self.os_build = os_build
        if os_api_level is not None:
            self.os_api_level = os_api_level
        self.locale = locale
        self.time_zone_offset = time_zone_offset
        if screen_size is not None:
            self.screen_size = screen_size
        self.app_version = app_version
        if carrier_name is not None:
            self.carrier_name = carrier_name
        if carrier_code is not None:
            self.carrier_code = carrier_code
        if carrier_country is not None:
            self.carrier_country = carrier_country
        self.app_build = app_build
        if app_namespace is not None:
            self.app_namespace = app_namespace
        if live_update_release_label is not None:
            self.live_update_release_label = live_update_release_label
        if live_update_deployment_key is not None:
            self.live_update_deployment_key = live_update_deployment_key
        if live_update_package_hash is not None:
            self.live_update_package_hash = live_update_package_hash
        if wrapper_runtime_version is not None:
            self.wrapper_runtime_version = wrapper_runtime_version

    @property
    def sdk_name(self):
        """Gets the sdk_name of this LogFlowDevice.  # noqa: E501

        Name of the SDK. Consists of the name of the SDK and the platform, e.g. "appcenter.ios", "hockeysdk.android".
  # noqa: E501

        :return: The sdk_name of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._sdk_name

    @sdk_name.setter
    def sdk_name(self, sdk_name):
        """Sets the sdk_name of this LogFlowDevice.

        Name of the SDK. Consists of the name of the SDK and the platform, e.g. "appcenter.ios", "hockeysdk.android".
  # noqa: E501

        :param sdk_name: The sdk_name of this LogFlowDevice.  # noqa: E501
        :type: string
        """
        if sdk_name is None:
            raise ValueError("Invalid value for `sdk_name`, must not be `None`")  # noqa: E501

        self._sdk_name = sdk_name

    @property
    def sdk_version(self):
        """Gets the sdk_version of this LogFlowDevice.  # noqa: E501

        Version of the SDK in semver format, e.g. "1.2.0" or "0.12.3-alpha.1".
  # noqa: E501

        :return: The sdk_version of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._sdk_version

    @sdk_version.setter
    def sdk_version(self, sdk_version):
        """Sets the sdk_version of this LogFlowDevice.

        Version of the SDK in semver format, e.g. "1.2.0" or "0.12.3-alpha.1".
  # noqa: E501

        :param sdk_version: The sdk_version of this LogFlowDevice.  # noqa: E501
        :type: string
        """
        if sdk_version is None:
            raise ValueError("Invalid value for `sdk_version`, must not be `None`")  # noqa: E501

        self._sdk_version = sdk_version

    @property
    def wrapper_sdk_version(self):
        """Gets the wrapper_sdk_version of this LogFlowDevice.  # noqa: E501

        Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.
  # noqa: E501

        :return: The wrapper_sdk_version of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._wrapper_sdk_version

    @wrapper_sdk_version.setter
    def wrapper_sdk_version(self, wrapper_sdk_version):
        """Sets the wrapper_sdk_version of this LogFlowDevice.

        Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.
  # noqa: E501

        :param wrapper_sdk_version: The wrapper_sdk_version of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._wrapper_sdk_version = wrapper_sdk_version

    @property
    def wrapper_sdk_name(self):
        """Gets the wrapper_sdk_name of this LogFlowDevice.  # noqa: E501

        Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. "appcenter.xamarin", "hockeysdk.cordova".
  # noqa: E501

        :return: The wrapper_sdk_name of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._wrapper_sdk_name

    @wrapper_sdk_name.setter
    def wrapper_sdk_name(self, wrapper_sdk_name):
        """Sets the wrapper_sdk_name of this LogFlowDevice.

        Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. "appcenter.xamarin", "hockeysdk.cordova".
  # noqa: E501

        :param wrapper_sdk_name: The wrapper_sdk_name of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._wrapper_sdk_name = wrapper_sdk_name

    @property
    def model(self):
        """Gets the model of this LogFlowDevice.  # noqa: E501

        Device model (example: iPad2,3).
  # noqa: E501

        :return: The model of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this LogFlowDevice.

        Device model (example: iPad2,3).
  # noqa: E501

        :param model: The model of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._model = model

    @property
    def oem_name(self):
        """Gets the oem_name of this LogFlowDevice.  # noqa: E501

        Device manufacturer (example: HTC).
  # noqa: E501

        :return: The oem_name of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._oem_name

    @oem_name.setter
    def oem_name(self, oem_name):
        """Sets the oem_name of this LogFlowDevice.

        Device manufacturer (example: HTC).
  # noqa: E501

        :param oem_name: The oem_name of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._oem_name = oem_name

    @property
    def os_name(self):
        """Gets the os_name of this LogFlowDevice.  # noqa: E501

        OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.
  # noqa: E501

        :return: The os_name of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this LogFlowDevice.

        OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.
  # noqa: E501

        :param os_name: The os_name of this LogFlowDevice.  # noqa: E501
        :type: string
        """
        if os_name is None:
            raise ValueError("Invalid value for `os_name`, must not be `None`")  # noqa: E501

        self._os_name = os_name

    @property
    def os_version(self):
        """Gets the os_version of this LogFlowDevice.  # noqa: E501

        OS version (example: 9.3.0).
  # noqa: E501

        :return: The os_version of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this LogFlowDevice.

        OS version (example: 9.3.0).
  # noqa: E501

        :param os_version: The os_version of this LogFlowDevice.  # noqa: E501
        :type: string
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")  # noqa: E501

        self._os_version = os_version

    @property
    def os_build(self):
        """Gets the os_build of this LogFlowDevice.  # noqa: E501

        OS build code (example: LMY47X).
  # noqa: E501

        :return: The os_build of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._os_build

    @os_build.setter
    def os_build(self, os_build):
        """Sets the os_build of this LogFlowDevice.

        OS build code (example: LMY47X).
  # noqa: E501

        :param os_build: The os_build of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._os_build = os_build

    @property
    def os_api_level(self):
        """Gets the os_api_level of this LogFlowDevice.  # noqa: E501

        API level when applicable like in Android (example: 15).
  # noqa: E501

        :return: The os_api_level of this LogFlowDevice.  # noqa: E501
        :rtype: integer
        """
        return self._os_api_level

    @os_api_level.setter
    def os_api_level(self, os_api_level):
        """Sets the os_api_level of this LogFlowDevice.

        API level when applicable like in Android (example: 15).
  # noqa: E501

        :param os_api_level: The os_api_level of this LogFlowDevice.  # noqa: E501
        :type: integer
        """

        self._os_api_level = os_api_level

    @property
    def locale(self):
        """Gets the locale of this LogFlowDevice.  # noqa: E501

        Language code (example: en_US).
  # noqa: E501

        :return: The locale of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this LogFlowDevice.

        Language code (example: en_US).
  # noqa: E501

        :param locale: The locale of this LogFlowDevice.  # noqa: E501
        :type: string
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def time_zone_offset(self):
        """Gets the time_zone_offset of this LogFlowDevice.  # noqa: E501

        The offset in minutes from UTC for the device time zone, including daylight savings time.
  # noqa: E501

        :return: The time_zone_offset of this LogFlowDevice.  # noqa: E501
        :rtype: integer
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset):
        """Sets the time_zone_offset of this LogFlowDevice.

        The offset in minutes from UTC for the device time zone, including daylight savings time.
  # noqa: E501

        :param time_zone_offset: The time_zone_offset of this LogFlowDevice.  # noqa: E501
        :type: integer
        """
        if time_zone_offset is None:
            raise ValueError("Invalid value for `time_zone_offset`, must not be `None`")  # noqa: E501

        self._time_zone_offset = time_zone_offset

    @property
    def screen_size(self):
        """Gets the screen_size of this LogFlowDevice.  # noqa: E501

        Screen size of the device in pixels (example: 640x480).
  # noqa: E501

        :return: The screen_size of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._screen_size

    @screen_size.setter
    def screen_size(self, screen_size):
        """Sets the screen_size of this LogFlowDevice.

        Screen size of the device in pixels (example: 640x480).
  # noqa: E501

        :param screen_size: The screen_size of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._screen_size = screen_size

    @property
    def app_version(self):
        """Gets the app_version of this LogFlowDevice.  # noqa: E501

        Application version name, e.g. 1.1.0
  # noqa: E501

        :return: The app_version of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this LogFlowDevice.

        Application version name, e.g. 1.1.0
  # noqa: E501

        :param app_version: The app_version of this LogFlowDevice.  # noqa: E501
        :type: string
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")  # noqa: E501

        self._app_version = app_version

    @property
    def carrier_name(self):
        """Gets the carrier_name of this LogFlowDevice.  # noqa: E501

        Carrier name (for mobile devices).
  # noqa: E501

        :return: The carrier_name of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this LogFlowDevice.

        Carrier name (for mobile devices).
  # noqa: E501

        :param carrier_name: The carrier_name of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._carrier_name = carrier_name

    @property
    def carrier_code(self):
        """Gets the carrier_code of this LogFlowDevice.  # noqa: E501

        Carrier country code (for mobile devices).
  # noqa: E501

        :return: The carrier_code of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this LogFlowDevice.

        Carrier country code (for mobile devices).
  # noqa: E501

        :param carrier_code: The carrier_code of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._carrier_code = carrier_code

    @property
    def carrier_country(self):
        """Gets the carrier_country of this LogFlowDevice.  # noqa: E501

        Carrier country.
  # noqa: E501

        :return: The carrier_country of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._carrier_country

    @carrier_country.setter
    def carrier_country(self, carrier_country):
        """Sets the carrier_country of this LogFlowDevice.

        Carrier country.
  # noqa: E501

        :param carrier_country: The carrier_country of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._carrier_country = carrier_country

    @property
    def app_build(self):
        """Gets the app_build of this LogFlowDevice.  # noqa: E501

        The app's build number, e.g. 42.
  # noqa: E501

        :return: The app_build of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._app_build

    @app_build.setter
    def app_build(self, app_build):
        """Sets the app_build of this LogFlowDevice.

        The app's build number, e.g. 42.
  # noqa: E501

        :param app_build: The app_build of this LogFlowDevice.  # noqa: E501
        :type: string
        """
        if app_build is None:
            raise ValueError("Invalid value for `app_build`, must not be `None`")  # noqa: E501

        self._app_build = app_build

    @property
    def app_namespace(self):
        """Gets the app_namespace of this LogFlowDevice.  # noqa: E501

        The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.
  # noqa: E501

        :return: The app_namespace of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._app_namespace

    @app_namespace.setter
    def app_namespace(self, app_namespace):
        """Sets the app_namespace of this LogFlowDevice.

        The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.
  # noqa: E501

        :param app_namespace: The app_namespace of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._app_namespace = app_namespace

    @property
    def live_update_release_label(self):
        """Gets the live_update_release_label of this LogFlowDevice.  # noqa: E501

        Label that is used to identify application code 'version' released via Live Update beacon running on device
  # noqa: E501

        :return: The live_update_release_label of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._live_update_release_label

    @live_update_release_label.setter
    def live_update_release_label(self, live_update_release_label):
        """Sets the live_update_release_label of this LogFlowDevice.

        Label that is used to identify application code 'version' released via Live Update beacon running on device
  # noqa: E501

        :param live_update_release_label: The live_update_release_label of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._live_update_release_label = live_update_release_label

    @property
    def live_update_deployment_key(self):
        """Gets the live_update_deployment_key of this LogFlowDevice.  # noqa: E501

        Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.
  # noqa: E501

        :return: The live_update_deployment_key of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._live_update_deployment_key

    @live_update_deployment_key.setter
    def live_update_deployment_key(self, live_update_deployment_key):
        """Sets the live_update_deployment_key of this LogFlowDevice.

        Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.
  # noqa: E501

        :param live_update_deployment_key: The live_update_deployment_key of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._live_update_deployment_key = live_update_deployment_key

    @property
    def live_update_package_hash(self):
        """Gets the live_update_package_hash of this LogFlowDevice.  # noqa: E501

        Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.
  # noqa: E501

        :return: The live_update_package_hash of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._live_update_package_hash

    @live_update_package_hash.setter
    def live_update_package_hash(self, live_update_package_hash):
        """Sets the live_update_package_hash of this LogFlowDevice.

        Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.
  # noqa: E501

        :param live_update_package_hash: The live_update_package_hash of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._live_update_package_hash = live_update_package_hash

    @property
    def wrapper_runtime_version(self):
        """Gets the wrapper_runtime_version of this LogFlowDevice.  # noqa: E501

        Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.
  # noqa: E501

        :return: The wrapper_runtime_version of this LogFlowDevice.  # noqa: E501
        :rtype: string
        """
        return self._wrapper_runtime_version

    @wrapper_runtime_version.setter
    def wrapper_runtime_version(self, wrapper_runtime_version):
        """Sets the wrapper_runtime_version of this LogFlowDevice.

        Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.
  # noqa: E501

        :param wrapper_runtime_version: The wrapper_runtime_version of this LogFlowDevice.  # noqa: E501
        :type: string
        """

        self._wrapper_runtime_version = wrapper_runtime_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogFlowDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
