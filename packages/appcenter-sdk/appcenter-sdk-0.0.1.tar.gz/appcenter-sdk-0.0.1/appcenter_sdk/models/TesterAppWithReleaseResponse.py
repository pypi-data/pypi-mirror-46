# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class TesterAppWithReleaseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    org = "org"
    user = "user"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'release': '',
        'name': 'string',
        'display_name': 'string',
        'description': 'string',
        'icon_url': 'string',
        'os': 'string',
        'owner': 'object'
    }

    attribute_map = {
        'id': 'id',
        'release': 'release',
        'name': 'name',
        'display_name': 'display_name',
        'description': 'description',
        'icon_url': 'icon_url',
        'os': 'os',
        'owner': 'owner'
    }

    def __init__(self, id=None, release=None, name=None, display_name=None, description=None, icon_url=None, os=None, owner=None):  # noqa: E501
        """TesterAppWithReleaseResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._release = None
        self._name = None
        self._display_name = None
        self._description = None
        self._icon_url = None
        self._os = None
        self._owner = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if release is not None:
            self.release = release
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if icon_url is not None:
            self.icon_url = icon_url
        if os is not None:
            self.os = os
        if owner is not None:
            self.owner = owner

    @property
    def id(self):
        """Gets the id of this TesterAppWithReleaseResponse.  # noqa: E501

        The unique ID (UUID) of the app  # noqa: E501

        :return: The id of this TesterAppWithReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TesterAppWithReleaseResponse.

        The unique ID (UUID) of the app  # noqa: E501

        :param id: The id of this TesterAppWithReleaseResponse.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def release(self):
        """Gets the release of this TesterAppWithReleaseResponse.  # noqa: E501


        :return: The release of this TesterAppWithReleaseResponse.  # noqa: E501
        :rtype: 
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this TesterAppWithReleaseResponse.


        :param release: The release of this TesterAppWithReleaseResponse.  # noqa: E501
        :type: 
        """

        self._release = release

    @property
    def name(self):
        """Gets the name of this TesterAppWithReleaseResponse.  # noqa: E501

        The app's name.  # noqa: E501

        :return: The name of this TesterAppWithReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TesterAppWithReleaseResponse.

        The app's name.  # noqa: E501

        :param name: The name of this TesterAppWithReleaseResponse.  # noqa: E501
        :type: string
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this TesterAppWithReleaseResponse.  # noqa: E501

        The app's display name.  # noqa: E501

        :return: The display_name of this TesterAppWithReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TesterAppWithReleaseResponse.

        The app's display name.  # noqa: E501

        :param display_name: The display_name of this TesterAppWithReleaseResponse.  # noqa: E501
        :type: string
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this TesterAppWithReleaseResponse.  # noqa: E501

        The description of the app  # noqa: E501

        :return: The description of this TesterAppWithReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TesterAppWithReleaseResponse.

        The description of the app  # noqa: E501

        :param description: The description of this TesterAppWithReleaseResponse.  # noqa: E501
        :type: string
        """

        self._description = description

    @property
    def icon_url(self):
        """Gets the icon_url of this TesterAppWithReleaseResponse.  # noqa: E501

        A URL to the app's icon.  # noqa: E501

        :return: The icon_url of this TesterAppWithReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this TesterAppWithReleaseResponse.

        A URL to the app's icon.  # noqa: E501

        :param icon_url: The icon_url of this TesterAppWithReleaseResponse.  # noqa: E501
        :type: string
        """

        self._icon_url = icon_url

    @property
    def os(self):
        """Gets the os of this TesterAppWithReleaseResponse.  # noqa: E501

        The app's os.  # noqa: E501

        :return: The os of this TesterAppWithReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this TesterAppWithReleaseResponse.

        The app's os.  # noqa: E501

        :param os: The os of this TesterAppWithReleaseResponse.  # noqa: E501
        :type: string
        """

        self._os = os

    @property
    def owner(self):
        """Gets the owner of this TesterAppWithReleaseResponse.  # noqa: E501

        The information about the app's owner  # noqa: E501

        :return: The owner of this TesterAppWithReleaseResponse.  # noqa: E501
        :rtype: object
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TesterAppWithReleaseResponse.

        The information about the app's owner  # noqa: E501

        :param owner: The owner of this TesterAppWithReleaseResponse.  # noqa: E501
        :type: object
        """

        self._owner = owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TesterAppWithReleaseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
