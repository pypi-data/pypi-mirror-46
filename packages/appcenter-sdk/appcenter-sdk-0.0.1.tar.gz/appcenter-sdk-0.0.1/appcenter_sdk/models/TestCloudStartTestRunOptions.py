# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class TestCloudStartTestRunOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_cloud_start_test_run_options': 'object',
        'test_framework': 'string',
        'device_selection': 'string',
        'language': 'string',
        'locale': 'string',
        'test_series': 'string',
        'test_parameters': 'object'
    }

    attribute_map = {
        'test_cloud_start_test_run_options': 'test_cloud_start_test_run_options',
        'test_framework': 'test_framework',
        'device_selection': 'device_selection',
        'language': 'language',
        'locale': 'locale',
        'test_series': 'test_series',
        'test_parameters': 'test_parameters'
    }

    def __init__(self, test_cloud_start_test_run_options=None, test_framework=None, device_selection=None, language=None, locale=None, test_series=None, test_parameters=None):  # noqa: E501
        """TestCloudStartTestRunOptions - a model defined in Swagger"""  # noqa: E501
        self._test_cloud_start_test_run_options = None
        self._test_framework = None
        self._device_selection = None
        self._language = None
        self._locale = None
        self._test_series = None
        self._test_parameters = None
        self.discriminator = None
        if test_cloud_start_test_run_options is not None:
            self.test_cloud_start_test_run_options = test_cloud_start_test_run_options
        self.test_framework = test_framework
        self.device_selection = device_selection
        if language is not None:
            self.language = language
        if locale is not None:
            self.locale = locale
        if test_series is not None:
            self.test_series = test_series
        if test_parameters is not None:
            self.test_parameters = test_parameters

    @property
    def test_cloud_start_test_run_options(self):
        """Gets the test_cloud_start_test_run_options of this TestCloudStartTestRunOptions.  # noqa: E501

        Options required to start the test run  # noqa: E501

        :return: The test_cloud_start_test_run_options of this TestCloudStartTestRunOptions.  # noqa: E501
        :rtype: object
        """
        return self._test_cloud_start_test_run_options

    @test_cloud_start_test_run_options.setter
    def test_cloud_start_test_run_options(self, test_cloud_start_test_run_options):
        """Sets the test_cloud_start_test_run_options of this TestCloudStartTestRunOptions.

        Options required to start the test run  # noqa: E501

        :param test_cloud_start_test_run_options: The test_cloud_start_test_run_options of this TestCloudStartTestRunOptions.  # noqa: E501
        :type: object
        """

        self._test_cloud_start_test_run_options = test_cloud_start_test_run_options

    @property
    def test_framework(self):
        """Gets the test_framework of this TestCloudStartTestRunOptions.  # noqa: E501

        Test framework used by tests.  # noqa: E501

        :return: The test_framework of this TestCloudStartTestRunOptions.  # noqa: E501
        :rtype: string
        """
        return self._test_framework

    @test_framework.setter
    def test_framework(self, test_framework):
        """Sets the test_framework of this TestCloudStartTestRunOptions.

        Test framework used by tests.  # noqa: E501

        :param test_framework: The test_framework of this TestCloudStartTestRunOptions.  # noqa: E501
        :type: string
        """
        if test_framework is None:
            raise ValueError("Invalid value for `test_framework`, must not be `None`")  # noqa: E501

        self._test_framework = test_framework

    @property
    def device_selection(self):
        """Gets the device_selection of this TestCloudStartTestRunOptions.  # noqa: E501

        Device selection string.  # noqa: E501

        :return: The device_selection of this TestCloudStartTestRunOptions.  # noqa: E501
        :rtype: string
        """
        return self._device_selection

    @device_selection.setter
    def device_selection(self, device_selection):
        """Sets the device_selection of this TestCloudStartTestRunOptions.

        Device selection string.  # noqa: E501

        :param device_selection: The device_selection of this TestCloudStartTestRunOptions.  # noqa: E501
        :type: string
        """
        if device_selection is None:
            raise ValueError("Invalid value for `device_selection`, must not be `None`")  # noqa: E501

        self._device_selection = device_selection

    @property
    def language(self):
        """Gets the language of this TestCloudStartTestRunOptions.  # noqa: E501

        Language that should be used to run tests.  # noqa: E501

        :return: The language of this TestCloudStartTestRunOptions.  # noqa: E501
        :rtype: string
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TestCloudStartTestRunOptions.

        Language that should be used to run tests.  # noqa: E501

        :param language: The language of this TestCloudStartTestRunOptions.  # noqa: E501
        :type: string
        """

        self._language = language

    @property
    def locale(self):
        """Gets the locale of this TestCloudStartTestRunOptions.  # noqa: E501

        Locale that should be used to run tests.  # noqa: E501

        :return: The locale of this TestCloudStartTestRunOptions.  # noqa: E501
        :rtype: string
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this TestCloudStartTestRunOptions.

        Locale that should be used to run tests.  # noqa: E501

        :param locale: The locale of this TestCloudStartTestRunOptions.  # noqa: E501
        :type: string
        """

        self._locale = locale

    @property
    def test_series(self):
        """Gets the test_series of this TestCloudStartTestRunOptions.  # noqa: E501

        Name of the test series.  # noqa: E501

        :return: The test_series of this TestCloudStartTestRunOptions.  # noqa: E501
        :rtype: string
        """
        return self._test_series

    @test_series.setter
    def test_series(self, test_series):
        """Sets the test_series of this TestCloudStartTestRunOptions.

        Name of the test series.  # noqa: E501

        :param test_series: The test_series of this TestCloudStartTestRunOptions.  # noqa: E501
        :type: string
        """

        self._test_series = test_series

    @property
    def test_parameters(self):
        """Gets the test_parameters of this TestCloudStartTestRunOptions.  # noqa: E501

        A JSON dictionary with additional test parameters  # noqa: E501

        :return: The test_parameters of this TestCloudStartTestRunOptions.  # noqa: E501
        :rtype: object
        """
        return self._test_parameters

    @test_parameters.setter
    def test_parameters(self, test_parameters):
        """Sets the test_parameters of this TestCloudStartTestRunOptions.

        A JSON dictionary with additional test parameters  # noqa: E501

        :param test_parameters: The test_parameters of this TestCloudStartTestRunOptions.  # noqa: E501
        :type: object
        """

        self._test_parameters = test_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCloudStartTestRunOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
