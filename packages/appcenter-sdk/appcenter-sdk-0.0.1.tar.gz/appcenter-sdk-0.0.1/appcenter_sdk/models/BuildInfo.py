# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class BuildInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'branch': 'string',
        'commit_hash': 'string',
        'commit_message': 'string'
    }

    attribute_map = {
        'branch': 'branch',
        'commit_hash': 'commit_hash',
        'commit_message': 'commit_message'
    }

    def __init__(self, branch=None, commit_hash=None, commit_message=None):  # noqa: E501
        """BuildInfo - a model defined in Swagger"""  # noqa: E501
        self._branch = None
        self._commit_hash = None
        self._commit_message = None
        self.discriminator = None
        if branch is not None:
            self.branch = branch
        if commit_hash is not None:
            self.commit_hash = commit_hash
        if commit_message is not None:
            self.commit_message = commit_message

    @property
    def branch(self):
        """Gets the branch of this BuildInfo.  # noqa: E501

        The branch name of the build producing the release  # noqa: E501

        :return: The branch of this BuildInfo.  # noqa: E501
        :rtype: string
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this BuildInfo.

        The branch name of the build producing the release  # noqa: E501

        :param branch: The branch of this BuildInfo.  # noqa: E501
        :type: string
        """

        self._branch = branch

    @property
    def commit_hash(self):
        """Gets the commit_hash of this BuildInfo.  # noqa: E501

        The commit hash of the build producing the release  # noqa: E501

        :return: The commit_hash of this BuildInfo.  # noqa: E501
        :rtype: string
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this BuildInfo.

        The commit hash of the build producing the release  # noqa: E501

        :param commit_hash: The commit_hash of this BuildInfo.  # noqa: E501
        :type: string
        """

        self._commit_hash = commit_hash

    @property
    def commit_message(self):
        """Gets the commit_message of this BuildInfo.  # noqa: E501

        The commit message of the build producing the release  # noqa: E501

        :return: The commit_message of this BuildInfo.  # noqa: E501
        :rtype: string
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this BuildInfo.

        The commit message of the build producing the release  # noqa: E501

        :param commit_message: The commit_message of this BuildInfo.  # noqa: E501
        :type: string
        """

        self._commit_message = commit_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuildInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
