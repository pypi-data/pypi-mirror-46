# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ApiTokenGetUserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    appcenter = "appcenter"
    hockeyapp = "hockeyapp"
    codepush = "codepush"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token_id': 'string',
        'token_scope': 'array',
        'user_email': 'string',
        'user_id': 'string',
        'user_origin': 'string'
    }

    attribute_map = {
        'token_id': 'token_id',
        'token_scope': 'token_scope',
        'user_email': 'user_email',
        'user_id': 'user_id',
        'user_origin': 'user_origin'
    }

    def __init__(self, token_id=None, token_scope=None, user_email=None, user_id=None, user_origin=None):  # noqa: E501
        """ApiTokenGetUserResponse - a model defined in Swagger"""  # noqa: E501
        self._token_id = None
        self._token_scope = None
        self._user_email = None
        self._user_id = None
        self._user_origin = None
        self.discriminator = None
        self.token_id = token_id
        self.token_scope = token_scope
        self.user_email = user_email
        self.user_id = user_id
        self.user_origin = user_origin

    @property
    def token_id(self):
        """Gets the token_id of this ApiTokenGetUserResponse.  # noqa: E501

        The token's unique id (UUID)  # noqa: E501

        :return: The token_id of this ApiTokenGetUserResponse.  # noqa: E501
        :rtype: string
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ApiTokenGetUserResponse.

        The token's unique id (UUID)  # noqa: E501

        :param token_id: The token_id of this ApiTokenGetUserResponse.  # noqa: E501
        :type: string
        """
        if token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")  # noqa: E501

        self._token_id = token_id

    @property
    def token_scope(self):
        """Gets the token_scope of this ApiTokenGetUserResponse.  # noqa: E501

        The token's scope. A list of allowed roles.  # noqa: E501

        :return: The token_scope of this ApiTokenGetUserResponse.  # noqa: E501
        :rtype: array
        """
        return self._token_scope

    @token_scope.setter
    def token_scope(self, token_scope):
        """Sets the token_scope of this ApiTokenGetUserResponse.

        The token's scope. A list of allowed roles.  # noqa: E501

        :param token_scope: The token_scope of this ApiTokenGetUserResponse.  # noqa: E501
        :type: array
        """
        if token_scope is None:
            raise ValueError("Invalid value for `token_scope`, must not be `None`")  # noqa: E501

        self._token_scope = token_scope

    @property
    def user_email(self):
        """Gets the user_email of this ApiTokenGetUserResponse.  # noqa: E501

        The user email  # noqa: E501

        :return: The user_email of this ApiTokenGetUserResponse.  # noqa: E501
        :rtype: string
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ApiTokenGetUserResponse.

        The user email  # noqa: E501

        :param user_email: The user_email of this ApiTokenGetUserResponse.  # noqa: E501
        :type: string
        """
        if user_email is None:
            raise ValueError("Invalid value for `user_email`, must not be `None`")  # noqa: E501

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this ApiTokenGetUserResponse.  # noqa: E501

        The unique id (UUID) of the user  # noqa: E501

        :return: The user_id of this ApiTokenGetUserResponse.  # noqa: E501
        :rtype: string
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ApiTokenGetUserResponse.

        The unique id (UUID) of the user  # noqa: E501

        :param user_id: The user_id of this ApiTokenGetUserResponse.  # noqa: E501
        :type: string
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_origin(self):
        """Gets the user_origin of this ApiTokenGetUserResponse.  # noqa: E501

        The creation origin of the user who created this api token  # noqa: E501

        :return: The user_origin of this ApiTokenGetUserResponse.  # noqa: E501
        :rtype: string
        """
        return self._user_origin

    @user_origin.setter
    def user_origin(self, user_origin):
        """Sets the user_origin of this ApiTokenGetUserResponse.

        The creation origin of the user who created this api token  # noqa: E501

        :param user_origin: The user_origin of this ApiTokenGetUserResponse.  # noqa: E501
        :type: string
        """
        if user_origin is None:
            raise ValueError("Invalid value for `user_origin`, must not be `None`")  # noqa: E501
        allowed_values = [undefinedundefinedundefined]  # noqa: E501

        self._user_origin = user_origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiTokenGetUserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
