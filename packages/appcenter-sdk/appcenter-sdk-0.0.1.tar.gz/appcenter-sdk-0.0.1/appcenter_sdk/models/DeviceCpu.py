# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class DeviceCpu(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frequency': 'string',
        'core': 'string',
        'text': 'string'
    }

    attribute_map = {
        'frequency': 'frequency',
        'core': 'core',
        'text': 'text'
    }

    def __init__(self, frequency=None, core=None, text=None):  # noqa: E501
        """DeviceCpu - a model defined in Swagger"""  # noqa: E501
        self._frequency = None
        self._core = None
        self._text = None
        self.discriminator = None
        if frequency is not None:
            self.frequency = frequency
        if core is not None:
            self.core = core
        if text is not None:
            self.text = text

    @property
    def frequency(self):
        """Gets the frequency of this DeviceCpu.  # noqa: E501


        :return: The frequency of this DeviceCpu.  # noqa: E501
        :rtype: string
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this DeviceCpu.


        :param frequency: The frequency of this DeviceCpu.  # noqa: E501
        :type: string
        """

        self._frequency = frequency

    @property
    def core(self):
        """Gets the core of this DeviceCpu.  # noqa: E501


        :return: The core of this DeviceCpu.  # noqa: E501
        :rtype: string
        """
        return self._core

    @core.setter
    def core(self, core):
        """Sets the core of this DeviceCpu.


        :param core: The core of this DeviceCpu.  # noqa: E501
        :type: string
        """

        self._core = core

    @property
    def text(self):
        """Gets the text of this DeviceCpu.  # noqa: E501


        :return: The text of this DeviceCpu.  # noqa: E501
        :rtype: string
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DeviceCpu.


        :param text: The text of this DeviceCpu.  # noqa: E501
        :type: string
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCpu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
