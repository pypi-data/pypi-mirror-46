# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class StoresReleaseDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    intune = "intune"
    googleplay = "googleplay"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'number',
        'status': 'string',
        'app_name': 'string',
        'app_display_name': 'string',
        'version': 'string',
        'short_version': 'string',
        'release_notes': 'string',
        'size': 'number',
        'min_os': 'string',
        'android_min_api_level': 'string',
        'bundle_identifier': 'string',
        'fingerprint': 'string',
        'uploaded_at': 'string',
        'download_url': 'string',
        'install_url': 'string',
        'distribution_stores': 'array'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'app_name': 'app_name',
        'app_display_name': 'app_display_name',
        'version': 'version',
        'short_version': 'short_version',
        'release_notes': 'release_notes',
        'size': 'size',
        'min_os': 'min_os',
        'android_min_api_level': 'android_min_api_level',
        'bundle_identifier': 'bundle_identifier',
        'fingerprint': 'fingerprint',
        'uploaded_at': 'uploaded_at',
        'download_url': 'download_url',
        'install_url': 'install_url',
        'distribution_stores': 'distribution_stores'
    }

    def __init__(self, id=None, status=None, app_name=None, app_display_name=None, version=None, short_version=None, release_notes=None, size=None, min_os=None, android_min_api_level=None, bundle_identifier=None, fingerprint=None, uploaded_at=None, download_url=None, install_url=None, distribution_stores=None):  # noqa: E501
        """StoresReleaseDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._app_name = None
        self._app_display_name = None
        self._version = None
        self._short_version = None
        self._release_notes = None
        self._size = None
        self._min_os = None
        self._android_min_api_level = None
        self._bundle_identifier = None
        self._fingerprint = None
        self._uploaded_at = None
        self._download_url = None
        self._install_url = None
        self._distribution_stores = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if app_name is not None:
            self.app_name = app_name
        if app_display_name is not None:
            self.app_display_name = app_display_name
        if version is not None:
            self.version = version
        if short_version is not None:
            self.short_version = short_version
        if release_notes is not None:
            self.release_notes = release_notes
        if size is not None:
            self.size = size
        if min_os is not None:
            self.min_os = min_os
        if android_min_api_level is not None:
            self.android_min_api_level = android_min_api_level
        if bundle_identifier is not None:
            self.bundle_identifier = bundle_identifier
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if download_url is not None:
            self.download_url = download_url
        if install_url is not None:
            self.install_url = install_url
        if distribution_stores is not None:
            self.distribution_stores = distribution_stores

    @property
    def id(self):
        """Gets the id of this StoresReleaseDetails.  # noqa: E501

        ID identifying this unique release.  # noqa: E501

        :return: The id of this StoresReleaseDetails.  # noqa: E501
        :rtype: number
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoresReleaseDetails.

        ID identifying this unique release.  # noqa: E501

        :param id: The id of this StoresReleaseDetails.  # noqa: E501
        :type: number
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this StoresReleaseDetails.  # noqa: E501

        OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
The release state.<br>
<b>available</b>: The uploaded release has been distributed.<br>
<b>unavailable</b>: The uploaded release is not visible to the user. <br>
  # noqa: E501

        :return: The status of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StoresReleaseDetails.

        OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
The release state.<br>
<b>available</b>: The uploaded release has been distributed.<br>
<b>unavailable</b>: The uploaded release is not visible to the user. <br>
  # noqa: E501

        :param status: The status of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._status = status

    @property
    def app_name(self):
        """Gets the app_name of this StoresReleaseDetails.  # noqa: E501

        The app's name (extracted from the uploaded release).  # noqa: E501

        :return: The app_name of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this StoresReleaseDetails.

        The app's name (extracted from the uploaded release).  # noqa: E501

        :param app_name: The app_name of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._app_name = app_name

    @property
    def app_display_name(self):
        """Gets the app_display_name of this StoresReleaseDetails.  # noqa: E501

        The app's display name.  # noqa: E501

        :return: The app_display_name of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this StoresReleaseDetails.

        The app's display name.  # noqa: E501

        :param app_display_name: The app_display_name of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._app_display_name = app_display_name

    @property
    def version(self):
        """Gets the version of this StoresReleaseDetails.  # noqa: E501

        The release's version.<br>
For iOS: CFBundleVersion from info.plist.
For Android: android:versionCode from AppManifest.xml.
  # noqa: E501

        :return: The version of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StoresReleaseDetails.

        The release's version.<br>
For iOS: CFBundleVersion from info.plist.
For Android: android:versionCode from AppManifest.xml.
  # noqa: E501

        :param version: The version of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._version = version

    @property
    def short_version(self):
        """Gets the short_version of this StoresReleaseDetails.  # noqa: E501

        The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.
For Android: android:versionName from AppManifest.xml.
  # noqa: E501

        :return: The short_version of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this StoresReleaseDetails.

        The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.
For Android: android:versionName from AppManifest.xml.
  # noqa: E501

        :param short_version: The short_version of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._short_version = short_version

    @property
    def release_notes(self):
        """Gets the release_notes of this StoresReleaseDetails.  # noqa: E501

        The release's release notes.  # noqa: E501

        :return: The release_notes of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this StoresReleaseDetails.

        The release's release notes.  # noqa: E501

        :param release_notes: The release_notes of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._release_notes = release_notes

    @property
    def size(self):
        """Gets the size of this StoresReleaseDetails.  # noqa: E501

        The release's size in bytes.  # noqa: E501

        :return: The size of this StoresReleaseDetails.  # noqa: E501
        :rtype: number
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StoresReleaseDetails.

        The release's size in bytes.  # noqa: E501

        :param size: The size of this StoresReleaseDetails.  # noqa: E501
        :type: number
        """

        self._size = size

    @property
    def min_os(self):
        """Gets the min_os of this StoresReleaseDetails.  # noqa: E501

        The release's minimum required operating system.  # noqa: E501

        :return: The min_os of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._min_os

    @min_os.setter
    def min_os(self, min_os):
        """Sets the min_os of this StoresReleaseDetails.

        The release's minimum required operating system.  # noqa: E501

        :param min_os: The min_os of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._min_os = min_os

    @property
    def android_min_api_level(self):
        """Gets the android_min_api_level of this StoresReleaseDetails.  # noqa: E501

        The release's minimum required Android API level.  # noqa: E501

        :return: The android_min_api_level of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._android_min_api_level

    @android_min_api_level.setter
    def android_min_api_level(self, android_min_api_level):
        """Sets the android_min_api_level of this StoresReleaseDetails.

        The release's minimum required Android API level.  # noqa: E501

        :param android_min_api_level: The android_min_api_level of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._android_min_api_level = android_min_api_level

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this StoresReleaseDetails.  # noqa: E501

        The identifier of the apps bundle.  # noqa: E501

        :return: The bundle_identifier of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this StoresReleaseDetails.

        The identifier of the apps bundle.  # noqa: E501

        :param bundle_identifier: The bundle_identifier of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._bundle_identifier = bundle_identifier

    @property
    def fingerprint(self):
        """Gets the fingerprint of this StoresReleaseDetails.  # noqa: E501

        MD5 checksum of the release binary.  # noqa: E501

        :return: The fingerprint of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this StoresReleaseDetails.

        MD5 checksum of the release binary.  # noqa: E501

        :param fingerprint: The fingerprint of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._fingerprint = fingerprint

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this StoresReleaseDetails.  # noqa: E501

        UTC time in ISO 8601 format of the uploaded time.  # noqa: E501

        :return: The uploaded_at of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this StoresReleaseDetails.

        UTC time in ISO 8601 format of the uploaded time.  # noqa: E501

        :param uploaded_at: The uploaded_at of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._uploaded_at = uploaded_at

    @property
    def download_url(self):
        """Gets the download_url of this StoresReleaseDetails.  # noqa: E501

        The URL that hosts the binary for this release.  # noqa: E501

        :return: The download_url of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this StoresReleaseDetails.

        The URL that hosts the binary for this release.  # noqa: E501

        :param download_url: The download_url of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """

        self._download_url = download_url

    @property
    def install_url(self):
        """Gets the install_url of this StoresReleaseDetails.  # noqa: E501

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`  # noqa: E501

        :return: The install_url of this StoresReleaseDetails.  # noqa: E501
        :rtype: string
        """
        return self._install_url

    @install_url.setter
    def install_url(self, install_url):
        """Sets the install_url of this StoresReleaseDetails.

        The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`  # noqa: E501

        :param install_url: The install_url of this StoresReleaseDetails.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._install_url = install_url

    @property
    def distribution_stores(self):
        """Gets the distribution_stores of this StoresReleaseDetails.  # noqa: E501

        a list of distribution stores that are associated with this release.  # noqa: E501

        :return: The distribution_stores of this StoresReleaseDetails.  # noqa: E501
        :rtype: array
        """
        return self._distribution_stores

    @distribution_stores.setter
    def distribution_stores(self, distribution_stores):
        """Sets the distribution_stores of this StoresReleaseDetails.

        a list of distribution stores that are associated with this release.  # noqa: E501

        :param distribution_stores: The distribution_stores of this StoresReleaseDetails.  # noqa: E501
        :type: array
        """

        self._distribution_stores = distribution_stores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoresReleaseDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
