# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AlertWebhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    newCrashGroupCreated = "newCrashGroupCreated"
    newAppReleased = "newAppReleased"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'name': 'string',
        'url': 'string',
        'enabled': 'boolean',
        'event_types': 'array'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'url': 'url',
        'enabled': 'enabled',
        'event_types': 'event_types'
    }

    def __init__(self, id=None, name=None, url=None, enabled=None, event_types=None):  # noqa: E501
        """AlertWebhook - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._url = None
        self._enabled = None
        self._event_types = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.url = url
        if enabled is not None:
            self.enabled = enabled
        self.event_types = event_types

    @property
    def id(self):
        """Gets the id of this AlertWebhook.  # noqa: E501

        The unique id (UUID) of the webhook  # noqa: E501

        :return: The id of this AlertWebhook.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertWebhook.

        The unique id (UUID) of the webhook  # noqa: E501

        :param id: The id of this AlertWebhook.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AlertWebhook.  # noqa: E501

        display name of the webhook  # noqa: E501

        :return: The name of this AlertWebhook.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertWebhook.

        display name of the webhook  # noqa: E501

        :param name: The name of this AlertWebhook.  # noqa: E501
        :type: string
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this AlertWebhook.  # noqa: E501

        target url of the webhook  # noqa: E501

        :return: The url of this AlertWebhook.  # noqa: E501
        :rtype: string
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AlertWebhook.

        target url of the webhook  # noqa: E501

        :param url: The url of this AlertWebhook.  # noqa: E501
        :type: string
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def enabled(self):
        """Gets the enabled of this AlertWebhook.  # noqa: E501

        Allows eanble/disable webhook  # noqa: E501

        :return: The enabled of this AlertWebhook.  # noqa: E501
        :rtype: boolean
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AlertWebhook.

        Allows eanble/disable webhook  # noqa: E501

        :param enabled: The enabled of this AlertWebhook.  # noqa: E501
        :type: boolean
        """

        self._enabled = enabled

    @property
    def event_types(self):
        """Gets the event_types of this AlertWebhook.  # noqa: E501

        Event types enabled for webhook  # noqa: E501

        :return: The event_types of this AlertWebhook.  # noqa: E501
        :rtype: array
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this AlertWebhook.

        Event types enabled for webhook  # noqa: E501

        :param event_types: The event_types of this AlertWebhook.  # noqa: E501
        :type: array
        """
        if event_types is None:
            raise ValueError("Invalid value for `event_types`, must not be `None`")  # noqa: E501

        self._event_types = event_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertWebhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
