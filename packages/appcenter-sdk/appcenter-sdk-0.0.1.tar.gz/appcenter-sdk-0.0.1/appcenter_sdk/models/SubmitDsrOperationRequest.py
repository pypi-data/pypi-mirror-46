# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class SubmitDsrOperationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    Delete = "Delete"
    Purge = "Purge"
    UndoDelete = "UndoDelete"
    Export = "Export"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request': 'string',
        'account_id': 'string',
        'app_id': 'string',
        'operation_id': 'string',
        'request_id': 'string'
    }

    attribute_map = {
        'request': 'request',
        'account_id': 'account_id',
        'app_id': 'app_id',
        'operation_id': 'operation_id',
        'request_id': 'request_id'
    }

    def __init__(self, request=None, account_id=None, app_id=None, operation_id=None, request_id=None):  # noqa: E501
        """SubmitDsrOperationRequest - a model defined in Swagger"""  # noqa: E501
        self._request = None
        self._account_id = None
        self._app_id = None
        self._operation_id = None
        self._request_id = None
        self.discriminator = None
        if request is not None:
            self.request = request
        if account_id is not None:
            self.account_id = account_id
        if app_id is not None:
            self.app_id = app_id
        if operation_id is not None:
            self.operation_id = operation_id
        if request_id is not None:
            self.request_id = request_id

    @property
    def request(self):
        """Gets the request of this SubmitDsrOperationRequest.  # noqa: E501


        :return: The request of this SubmitDsrOperationRequest.  # noqa: E501
        :rtype: string
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this SubmitDsrOperationRequest.


        :param request: The request of this SubmitDsrOperationRequest.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, undefined, undefined, ]  # noqa: E501

        self._request = request

    @property
    def account_id(self):
        """Gets the account_id of this SubmitDsrOperationRequest.  # noqa: E501


        :return: The account_id of this SubmitDsrOperationRequest.  # noqa: E501
        :rtype: string
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SubmitDsrOperationRequest.


        :param account_id: The account_id of this SubmitDsrOperationRequest.  # noqa: E501
        :type: string
        """

        self._account_id = account_id

    @property
    def app_id(self):
        """Gets the app_id of this SubmitDsrOperationRequest.  # noqa: E501


        :return: The app_id of this SubmitDsrOperationRequest.  # noqa: E501
        :rtype: string
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SubmitDsrOperationRequest.


        :param app_id: The app_id of this SubmitDsrOperationRequest.  # noqa: E501
        :type: string
        """

        self._app_id = app_id

    @property
    def operation_id(self):
        """Gets the operation_id of this SubmitDsrOperationRequest.  # noqa: E501

        The DSR operation ID provided by the GDPR coordinator. Used for tracking only.  # noqa: E501

        :return: The operation_id of this SubmitDsrOperationRequest.  # noqa: E501
        :rtype: string
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this SubmitDsrOperationRequest.

        The DSR operation ID provided by the GDPR coordinator. Used for tracking only.  # noqa: E501

        :param operation_id: The operation_id of this SubmitDsrOperationRequest.  # noqa: E501
        :type: string
        """

        self._operation_id = operation_id

    @property
    def request_id(self):
        """Gets the request_id of this SubmitDsrOperationRequest.  # noqa: E501

        Request ID provided by the GDPR coordinator. Used for tracking.  # noqa: E501

        :return: The request_id of this SubmitDsrOperationRequest.  # noqa: E501
        :rtype: string
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SubmitDsrOperationRequest.

        Request ID provided by the GDPR coordinator. Used for tracking.  # noqa: E501

        :param request_id: The request_id of this SubmitDsrOperationRequest.  # noqa: E501
        :type: string
        """

        self._request_id = request_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmitDsrOperationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
