# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AggregatedBillingInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    Enabled = "Enabled"
    Disabled = "Disabled"
    NotSet = "NotSet"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'string',
        'timestamp': 'string',
        'id': 'string',
        'billing_plans': 'object',
        'usage': 'object',
        'azure_subscription_id': 'string',
        'azure_subscription_state': 'string'
    }

    attribute_map = {
        'version': 'version',
        'timestamp': 'timestamp',
        'id': 'id',
        'billing_plans': 'billing_plans',
        'usage': 'usage',
        'azure_subscription_id': 'azure_subscription_id',
        'azure_subscription_state': 'azure_subscription_state'
    }

    def __init__(self, version=None, timestamp=None, id=None, billing_plans=None, usage=None, azure_subscription_id=None, azure_subscription_state=None):  # noqa: E501
        """AggregatedBillingInformation - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._timestamp = None
        self._id = None
        self._billing_plans = None
        self._usage = None
        self._azure_subscription_id = None
        self._azure_subscription_state = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if timestamp is not None:
            self.timestamp = timestamp
        if id is not None:
            self.id = id
        if billing_plans is not None:
            self.billing_plans = billing_plans
        if usage is not None:
            self.usage = usage
        if azure_subscription_id is not None:
            self.azure_subscription_id = azure_subscription_id
        if azure_subscription_state is not None:
            self.azure_subscription_state = azure_subscription_state

    @property
    def version(self):
        """Gets the version of this AggregatedBillingInformation.  # noqa: E501

        Version of the Billing Information schema  # noqa: E501

        :return: The version of this AggregatedBillingInformation.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AggregatedBillingInformation.

        Version of the Billing Information schema  # noqa: E501

        :param version: The version of this AggregatedBillingInformation.  # noqa: E501
        :type: string
        """

        self._version = version

    @property
    def timestamp(self):
        """Gets the timestamp of this AggregatedBillingInformation.  # noqa: E501

        The ISO 8601 datetime of last modification  # noqa: E501

        :return: The timestamp of this AggregatedBillingInformation.  # noqa: E501
        :rtype: string
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AggregatedBillingInformation.

        The ISO 8601 datetime of last modification  # noqa: E501

        :param timestamp: The timestamp of this AggregatedBillingInformation.  # noqa: E501
        :type: string
        """

        self._timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this AggregatedBillingInformation.  # noqa: E501

        ID of the user or organization  # noqa: E501

        :return: The id of this AggregatedBillingInformation.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AggregatedBillingInformation.

        ID of the user or organization  # noqa: E501

        :param id: The id of this AggregatedBillingInformation.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def billing_plans(self):
        """Gets the billing_plans of this AggregatedBillingInformation.  # noqa: E501

        Billing Plans section in the Billing Information  # noqa: E501

        :return: The billing_plans of this AggregatedBillingInformation.  # noqa: E501
        :rtype: object
        """
        return self._billing_plans

    @billing_plans.setter
    def billing_plans(self, billing_plans):
        """Sets the billing_plans of this AggregatedBillingInformation.

        Billing Plans section in the Billing Information  # noqa: E501

        :param billing_plans: The billing_plans of this AggregatedBillingInformation.  # noqa: E501
        :type: object
        """

        self._billing_plans = billing_plans

    @property
    def usage(self):
        """Gets the usage of this AggregatedBillingInformation.  # noqa: E501

        Usage section in the Billing Information  # noqa: E501

        :return: The usage of this AggregatedBillingInformation.  # noqa: E501
        :rtype: object
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AggregatedBillingInformation.

        Usage section in the Billing Information  # noqa: E501

        :param usage: The usage of this AggregatedBillingInformation.  # noqa: E501
        :type: object
        """

        self._usage = usage

    @property
    def azure_subscription_id(self):
        """Gets the azure_subscription_id of this AggregatedBillingInformation.  # noqa: E501

        Unique identifier for the Azure subscription used for billing  # noqa: E501

        :return: The azure_subscription_id of this AggregatedBillingInformation.  # noqa: E501
        :rtype: string
        """
        return self._azure_subscription_id

    @azure_subscription_id.setter
    def azure_subscription_id(self, azure_subscription_id):
        """Sets the azure_subscription_id of this AggregatedBillingInformation.

        Unique identifier for the Azure subscription used for billing  # noqa: E501

        :param azure_subscription_id: The azure_subscription_id of this AggregatedBillingInformation.  # noqa: E501
        :type: string
        """

        self._azure_subscription_id = azure_subscription_id

    @property
    def azure_subscription_state(self):
        """Gets the azure_subscription_state of this AggregatedBillingInformation.  # noqa: E501

        State of the Azure subscription used for billing  # noqa: E501

        :return: The azure_subscription_state of this AggregatedBillingInformation.  # noqa: E501
        :rtype: string
        """
        return self._azure_subscription_state

    @azure_subscription_state.setter
    def azure_subscription_state(self, azure_subscription_state):
        """Sets the azure_subscription_state of this AggregatedBillingInformation.

        State of the Azure subscription used for billing  # noqa: E501

        :param azure_subscription_state: The azure_subscription_state of this AggregatedBillingInformation.  # noqa: E501
        :type: string
        """
        allowed_values = [undefinedundefinedundefined]  # noqa: E501

        self._azure_subscription_state = azure_subscription_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregatedBillingInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
