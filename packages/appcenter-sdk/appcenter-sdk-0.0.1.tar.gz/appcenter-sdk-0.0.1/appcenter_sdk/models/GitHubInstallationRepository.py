# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class GitHubInstallationRepository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'string',
        'description': 'string',
        'clone_url': 'string',
        'default_branch': 'string',
        'language': 'string',
        'updated_at': 'string',
        'fork': 'boolean'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'clone_url': 'clone_url',
        'default_branch': 'default_branch',
        'language': 'language',
        'updated_at': 'updated_at',
        'fork': 'fork'
    }

    def __init__(self, name=None, description=None, clone_url=None, default_branch=None, language=None, updated_at=None, fork=None):  # noqa: E501
        """GitHubInstallationRepository - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._clone_url = None
        self._default_branch = None
        self._language = None
        self._updated_at = None
        self._fork = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if clone_url is not None:
            self.clone_url = clone_url
        if default_branch is not None:
            self.default_branch = default_branch
        if language is not None:
            self.language = language
        if updated_at is not None:
            self.updated_at = updated_at
        if fork is not None:
            self.fork = fork

    @property
    def name(self):
        """Gets the name of this GitHubInstallationRepository.  # noqa: E501

        The repository name  # noqa: E501

        :return: The name of this GitHubInstallationRepository.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GitHubInstallationRepository.

        The repository name  # noqa: E501

        :param name: The name of this GitHubInstallationRepository.  # noqa: E501
        :type: string
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GitHubInstallationRepository.  # noqa: E501

        The discription of repository  # noqa: E501

        :return: The description of this GitHubInstallationRepository.  # noqa: E501
        :rtype: string
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GitHubInstallationRepository.

        The discription of repository  # noqa: E501

        :param description: The description of this GitHubInstallationRepository.  # noqa: E501
        :type: string
        """

        self._description = description

    @property
    def clone_url(self):
        """Gets the clone_url of this GitHubInstallationRepository.  # noqa: E501

        URL used to clone the repository  # noqa: E501

        :return: The clone_url of this GitHubInstallationRepository.  # noqa: E501
        :rtype: string
        """
        return self._clone_url

    @clone_url.setter
    def clone_url(self, clone_url):
        """Sets the clone_url of this GitHubInstallationRepository.

        URL used to clone the repository  # noqa: E501

        :param clone_url: The clone_url of this GitHubInstallationRepository.  # noqa: E501
        :type: string
        """

        self._clone_url = clone_url

    @property
    def default_branch(self):
        """Gets the default_branch of this GitHubInstallationRepository.  # noqa: E501

        The default branch for the repo  # noqa: E501

        :return: The default_branch of this GitHubInstallationRepository.  # noqa: E501
        :rtype: string
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this GitHubInstallationRepository.

        The default branch for the repo  # noqa: E501

        :param default_branch: The default_branch of this GitHubInstallationRepository.  # noqa: E501
        :type: string
        """

        self._default_branch = default_branch

    @property
    def language(self):
        """Gets the language of this GitHubInstallationRepository.  # noqa: E501

        The language in the repository  # noqa: E501

        :return: The language of this GitHubInstallationRepository.  # noqa: E501
        :rtype: string
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GitHubInstallationRepository.

        The language in the repository  # noqa: E501

        :param language: The language of this GitHubInstallationRepository.  # noqa: E501
        :type: string
        """

        self._language = language

    @property
    def updated_at(self):
        """Gets the updated_at of this GitHubInstallationRepository.  # noqa: E501

        The repository updated time  # noqa: E501

        :return: The updated_at of this GitHubInstallationRepository.  # noqa: E501
        :rtype: string
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GitHubInstallationRepository.

        The repository updated time  # noqa: E501

        :param updated_at: The updated_at of this GitHubInstallationRepository.  # noqa: E501
        :type: string
        """

        self._updated_at = updated_at

    @property
    def fork(self):
        """Gets the fork of this GitHubInstallationRepository.  # noqa: E501

        Whether the repository is a fork  # noqa: E501

        :return: The fork of this GitHubInstallationRepository.  # noqa: E501
        :rtype: boolean
        """
        return self._fork

    @fork.setter
    def fork(self, fork):
        """Sets the fork of this GitHubInstallationRepository.

        Whether the repository is a fork  # noqa: E501

        :param fork: The fork of this GitHubInstallationRepository.  # noqa: E501
        :type: boolean
        """

        self._fork = fork

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GitHubInstallationRepository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
