# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ExternalStoreResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    production = "production"
    alpha = "alpha"
    beta = "beta"
    testflight-internal = "testflight-internal"
    testflight-external = "testflight-external"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'name': 'string',
        'type': 'string',
        'track': 'string',
        'intune_details': 'array',
        'service_connection_id': 'string',
        'created_by': 'string'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'track': 'track',
        'intune_details': 'intune_details',
        'service_connection_id': 'service_connection_id',
        'created_by': 'created_by'
    }

    def __init__(self, id=None, name=None, type=None, track=None, intune_details=None, service_connection_id=None, created_by=None):  # noqa: E501
        """ExternalStoreResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._track = None
        self._intune_details = None
        self._service_connection_id = None
        self._created_by = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if track is not None:
            self.track = track
        if intune_details is not None:
            self.intune_details = intune_details
        if service_connection_id is not None:
            self.service_connection_id = service_connection_id
        if created_by is not None:
            self.created_by = created_by

    @property
    def id(self):
        """Gets the id of this ExternalStoreResponse.  # noqa: E501

        Store id  # noqa: E501

        :return: The id of this ExternalStoreResponse.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalStoreResponse.

        Store id  # noqa: E501

        :param id: The id of this ExternalStoreResponse.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ExternalStoreResponse.  # noqa: E501

        Store Name  # noqa: E501

        :return: The name of this ExternalStoreResponse.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExternalStoreResponse.

        Store Name  # noqa: E501

        :param name: The name of this ExternalStoreResponse.  # noqa: E501
        :type: string
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ExternalStoreResponse.  # noqa: E501

        Store Type  # noqa: E501

        :return: The type of this ExternalStoreResponse.  # noqa: E501
        :rtype: string
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExternalStoreResponse.

        Store Type  # noqa: E501

        :param type: The type of this ExternalStoreResponse.  # noqa: E501
        :type: string
        """

        self._type = type

    @property
    def track(self):
        """Gets the track of this ExternalStoreResponse.  # noqa: E501

        Store track  # noqa: E501

        :return: The track of this ExternalStoreResponse.  # noqa: E501
        :rtype: string
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this ExternalStoreResponse.

        Store track  # noqa: E501

        :param track: The track of this ExternalStoreResponse.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, undefined, undefined, undefined, ]  # noqa: E501

        self._track = track

    @property
    def intune_details(self):
        """Gets the intune_details of this ExternalStoreResponse.  # noqa: E501

        store details for intune  # noqa: E501

        :return: The intune_details of this ExternalStoreResponse.  # noqa: E501
        :rtype: array
        """
        return self._intune_details

    @intune_details.setter
    def intune_details(self, intune_details):
        """Sets the intune_details of this ExternalStoreResponse.

        store details for intune  # noqa: E501

        :param intune_details: The intune_details of this ExternalStoreResponse.  # noqa: E501
        :type: array
        """

        self._intune_details = intune_details

    @property
    def service_connection_id(self):
        """Gets the service_connection_id of this ExternalStoreResponse.  # noqa: E501

        Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.  # noqa: E501

        :return: The service_connection_id of this ExternalStoreResponse.  # noqa: E501
        :rtype: string
        """
        return self._service_connection_id

    @service_connection_id.setter
    def service_connection_id(self, service_connection_id):
        """Sets the service_connection_id of this ExternalStoreResponse.

        Id for the shared service connection. In case of Apple / GooglePlay stores, this connection will be used to connect to the Apple / Google stores in App Center.  # noqa: E501

        :param service_connection_id: The service_connection_id of this ExternalStoreResponse.  # noqa: E501
        :type: string
        """

        self._service_connection_id = service_connection_id

    @property
    def created_by(self):
        """Gets the created_by of this ExternalStoreResponse.  # noqa: E501

        user id of the user who created the store.  # noqa: E501

        :return: The created_by of this ExternalStoreResponse.  # noqa: E501
        :rtype: string
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ExternalStoreResponse.

        user id of the user who created the store.  # noqa: E501

        :param created_by: The created_by of this ExternalStoreResponse.  # noqa: E501
        :type: string
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalStoreResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
