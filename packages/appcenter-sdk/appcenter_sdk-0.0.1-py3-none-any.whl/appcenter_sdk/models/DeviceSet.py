# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class DeviceSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_set': 'object',
        'id': 'string',
        'manufacturer_count': 'number',
        'name': 'string',
        'slug': 'string',
        'device_set_owner': 'object',
        'os_version_count': 'number',
        'device_configurations': 'array'
    }

    attribute_map = {
        'device_set': 'device_set',
        'id': 'id',
        'manufacturer_count': 'manufacturer_count',
        'name': 'name',
        'slug': 'slug',
        'device_set_owner': 'device_set_owner',
        'os_version_count': 'os_version_count',
        'device_configurations': 'device_configurations'
    }

    def __init__(self, device_set=None, id=None, manufacturer_count=None, name=None, slug=None, device_set_owner=None, os_version_count=None, device_configurations=None):  # noqa: E501
        """DeviceSet - a model defined in Swagger"""  # noqa: E501
        self._device_set = None
        self._id = None
        self._manufacturer_count = None
        self._name = None
        self._slug = None
        self._device_set_owner = None
        self._os_version_count = None
        self._device_configurations = None
        self.discriminator = None
        if device_set is not None:
            self.device_set = device_set
        self.id = id
        if manufacturer_count is not None:
            self.manufacturer_count = manufacturer_count
        self.name = name
        if slug is not None:
            self.slug = slug
        if device_set_owner is not None:
            self.device_set_owner = device_set_owner
        if os_version_count is not None:
            self.os_version_count = os_version_count
        if device_configurations is not None:
            self.device_configurations = device_configurations

    @property
    def device_set(self):
        """Gets the device_set of this DeviceSet.  # noqa: E501

        The name and devices of the device set  # noqa: E501

        :return: The device_set of this DeviceSet.  # noqa: E501
        :rtype: object
        """
        return self._device_set

    @device_set.setter
    def device_set(self, device_set):
        """Sets the device_set of this DeviceSet.

        The name and devices of the device set  # noqa: E501

        :param device_set: The device_set of this DeviceSet.  # noqa: E501
        :type: object
        """

        self._device_set = device_set

    @property
    def id(self):
        """Gets the id of this DeviceSet.  # noqa: E501

        Identifier of the device set  # noqa: E501

        :return: The id of this DeviceSet.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceSet.

        Identifier of the device set  # noqa: E501

        :param id: The id of this DeviceSet.  # noqa: E501
        :type: string
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def manufacturer_count(self):
        """Gets the manufacturer_count of this DeviceSet.  # noqa: E501

        The number of manufacturers in the device set's device selection  # noqa: E501

        :return: The manufacturer_count of this DeviceSet.  # noqa: E501
        :rtype: number
        """
        return self._manufacturer_count

    @manufacturer_count.setter
    def manufacturer_count(self, manufacturer_count):
        """Sets the manufacturer_count of this DeviceSet.

        The number of manufacturers in the device set's device selection  # noqa: E501

        :param manufacturer_count: The manufacturer_count of this DeviceSet.  # noqa: E501
        :type: number
        """

        self._manufacturer_count = manufacturer_count

    @property
    def name(self):
        """Gets the name of this DeviceSet.  # noqa: E501

        Name of the device set  # noqa: E501

        :return: The name of this DeviceSet.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceSet.

        Name of the device set  # noqa: E501

        :param name: The name of this DeviceSet.  # noqa: E501
        :type: string
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this DeviceSet.  # noqa: E501

        Slug of the device set  # noqa: E501

        :return: The slug of this DeviceSet.  # noqa: E501
        :rtype: string
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DeviceSet.

        Slug of the device set  # noqa: E501

        :param slug: The slug of this DeviceSet.  # noqa: E501
        :type: string
        """

        self._slug = slug

    @property
    def device_set_owner(self):
        """Gets the device_set_owner of this DeviceSet.  # noqa: E501

        The owner of a device set  # noqa: E501

        :return: The device_set_owner of this DeviceSet.  # noqa: E501
        :rtype: object
        """
        return self._device_set_owner

    @device_set_owner.setter
    def device_set_owner(self, device_set_owner):
        """Sets the device_set_owner of this DeviceSet.

        The owner of a device set  # noqa: E501

        :param device_set_owner: The device_set_owner of this DeviceSet.  # noqa: E501
        :type: object
        """

        self._device_set_owner = device_set_owner

    @property
    def os_version_count(self):
        """Gets the os_version_count of this DeviceSet.  # noqa: E501

        The number of os versions in the device set's device selection  # noqa: E501

        :return: The os_version_count of this DeviceSet.  # noqa: E501
        :rtype: number
        """
        return self._os_version_count

    @os_version_count.setter
    def os_version_count(self, os_version_count):
        """Sets the os_version_count of this DeviceSet.

        The number of os versions in the device set's device selection  # noqa: E501

        :param os_version_count: The os_version_count of this DeviceSet.  # noqa: E501
        :type: number
        """

        self._os_version_count = os_version_count

    @property
    def device_configurations(self):
        """Gets the device_configurations of this DeviceSet.  # noqa: E501


        :return: The device_configurations of this DeviceSet.  # noqa: E501
        :rtype: array
        """
        return self._device_configurations

    @device_configurations.setter
    def device_configurations(self, device_configurations):
        """Sets the device_configurations of this DeviceSet.


        :param device_configurations: The device_configurations of this DeviceSet.  # noqa: E501
        :type: array
        """

        self._device_configurations = device_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
