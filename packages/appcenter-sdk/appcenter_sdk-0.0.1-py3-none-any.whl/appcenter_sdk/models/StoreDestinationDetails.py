# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class StoreDestinationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    intune = "intune"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dest_publish_id': 'string',
        'store_type': 'string',
        'app_id': 'string'
    }

    attribute_map = {
        'dest_publish_id': 'dest_publish_id',
        'store_type': 'store_type',
        'app_id': 'app_id'
    }

    def __init__(self, dest_publish_id=None, store_type=None, app_id=None):  # noqa: E501
        """StoreDestinationDetails - a model defined in Swagger"""  # noqa: E501
        self._dest_publish_id = None
        self._store_type = None
        self._app_id = None
        self.discriminator = None
        if dest_publish_id is not None:
            self.dest_publish_id = dest_publish_id
        if store_type is not None:
            self.store_type = store_type
        if app_id is not None:
            self.app_id = app_id

    @property
    def dest_publish_id(self):
        """Gets the dest_publish_id of this StoreDestinationDetails.  # noqa: E501

        destination ID identifying a unique id in distribution store.  # noqa: E501

        :return: The dest_publish_id of this StoreDestinationDetails.  # noqa: E501
        :rtype: string
        """
        return self._dest_publish_id

    @dest_publish_id.setter
    def dest_publish_id(self, dest_publish_id):
        """Sets the dest_publish_id of this StoreDestinationDetails.

        destination ID identifying a unique id in distribution store.  # noqa: E501

        :param dest_publish_id: The dest_publish_id of this StoreDestinationDetails.  # noqa: E501
        :type: string
        """

        self._dest_publish_id = dest_publish_id

    @property
    def store_type(self):
        """Gets the store_type of this StoreDestinationDetails.  # noqa: E501

        type of store.  # noqa: E501

        :return: The store_type of this StoreDestinationDetails.  # noqa: E501
        :rtype: string
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type):
        """Sets the store_type of this StoreDestinationDetails.

        type of store.  # noqa: E501

        :param store_type: The store_type of this StoreDestinationDetails.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, ]  # noqa: E501

        self._store_type = store_type

    @property
    def app_id(self):
        """Gets the app_id of this StoreDestinationDetails.  # noqa: E501

        app id of application.  # noqa: E501

        :return: The app_id of this StoreDestinationDetails.  # noqa: E501
        :rtype: string
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this StoreDestinationDetails.

        app id of application.  # noqa: E501

        :param app_id: The app_id of this StoreDestinationDetails.  # noqa: E501
        :type: string
        """

        self._app_id = app_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreDestinationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
