# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class TestGDPRFileSetFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'string',
        'hash_file_id': 'string',
        'app_upload_id': 'string',
        'hash_file_url': 'string'
    }

    attribute_map = {
        'path': 'path',
        'hash_file_id': 'hash_file_id',
        'app_upload_id': 'app_upload_id',
        'hash_file_url': 'hash_file_url'
    }

    def __init__(self, path=None, hash_file_id=None, app_upload_id=None, hash_file_url=None):  # noqa: E501
        """TestGDPRFileSetFile - a model defined in Swagger"""  # noqa: E501
        self._path = None
        self._hash_file_id = None
        self._app_upload_id = None
        self._hash_file_url = None
        self.discriminator = None
        if path is not None:
            self.path = path
        if hash_file_id is not None:
            self.hash_file_id = hash_file_id
        if app_upload_id is not None:
            self.app_upload_id = app_upload_id
        if hash_file_url is not None:
            self.hash_file_url = hash_file_url

    @property
    def path(self):
        """Gets the path of this TestGDPRFileSetFile.  # noqa: E501


        :return: The path of this TestGDPRFileSetFile.  # noqa: E501
        :rtype: string
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TestGDPRFileSetFile.


        :param path: The path of this TestGDPRFileSetFile.  # noqa: E501
        :type: string
        """

        self._path = path

    @property
    def hash_file_id(self):
        """Gets the hash_file_id of this TestGDPRFileSetFile.  # noqa: E501


        :return: The hash_file_id of this TestGDPRFileSetFile.  # noqa: E501
        :rtype: string
        """
        return self._hash_file_id

    @hash_file_id.setter
    def hash_file_id(self, hash_file_id):
        """Sets the hash_file_id of this TestGDPRFileSetFile.


        :param hash_file_id: The hash_file_id of this TestGDPRFileSetFile.  # noqa: E501
        :type: string
        """

        self._hash_file_id = hash_file_id

    @property
    def app_upload_id(self):
        """Gets the app_upload_id of this TestGDPRFileSetFile.  # noqa: E501


        :return: The app_upload_id of this TestGDPRFileSetFile.  # noqa: E501
        :rtype: string
        """
        return self._app_upload_id

    @app_upload_id.setter
    def app_upload_id(self, app_upload_id):
        """Sets the app_upload_id of this TestGDPRFileSetFile.


        :param app_upload_id: The app_upload_id of this TestGDPRFileSetFile.  # noqa: E501
        :type: string
        """

        self._app_upload_id = app_upload_id

    @property
    def hash_file_url(self):
        """Gets the hash_file_url of this TestGDPRFileSetFile.  # noqa: E501


        :return: The hash_file_url of this TestGDPRFileSetFile.  # noqa: E501
        :rtype: string
        """
        return self._hash_file_url

    @hash_file_url.setter
    def hash_file_url(self, hash_file_url):
        """Sets the hash_file_url of this TestGDPRFileSetFile.


        :param hash_file_url: The hash_file_url of this TestGDPRFileSetFile.  # noqa: E501
        :type: string
        """

        self._hash_file_url = hash_file_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestGDPRFileSetFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
