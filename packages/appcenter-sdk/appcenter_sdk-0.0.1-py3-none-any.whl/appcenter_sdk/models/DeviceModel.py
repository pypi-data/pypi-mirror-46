# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class DeviceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'string',
        'manufacturer': 'string',
        'model': 'string',
        'platform': 'string',
        'dimensions': '',
        'resolution': '',
        'release_date': 'string',
        'form_factor': 'string',
        'screen_size': '',
        'cpu': '',
        'memory': '',
        'screen_rotation': 'number',
        'device_frame': '',
        'availability_count': 'number'
    }

    attribute_map = {
        'name': 'name',
        'manufacturer': 'manufacturer',
        'model': 'model',
        'platform': 'platform',
        'dimensions': 'dimensions',
        'resolution': 'resolution',
        'release_date': 'release_date',
        'form_factor': 'form_factor',
        'screen_size': 'screen_size',
        'cpu': 'cpu',
        'memory': 'memory',
        'screen_rotation': 'screen_rotation',
        'device_frame': 'device_frame',
        'availability_count': 'availability_count'
    }

    def __init__(self, name=None, manufacturer=None, model=None, platform=None, dimensions=None, resolution=None, release_date=None, form_factor=None, screen_size=None, cpu=None, memory=None, screen_rotation=None, device_frame=None, availability_count=None):  # noqa: E501
        """DeviceModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._manufacturer = None
        self._model = None
        self._platform = None
        self._dimensions = None
        self._resolution = None
        self._release_date = None
        self._form_factor = None
        self._screen_size = None
        self._cpu = None
        self._memory = None
        self._screen_rotation = None
        self._device_frame = None
        self._availability_count = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if model is not None:
            self.model = model
        if platform is not None:
            self.platform = platform
        if dimensions is not None:
            self.dimensions = dimensions
        if resolution is not None:
            self.resolution = resolution
        if release_date is not None:
            self.release_date = release_date
        if form_factor is not None:
            self.form_factor = form_factor
        if screen_size is not None:
            self.screen_size = screen_size
        if cpu is not None:
            self.cpu = cpu
        if memory is not None:
            self.memory = memory
        if screen_rotation is not None:
            self.screen_rotation = screen_rotation
        if device_frame is not None:
            self.device_frame = device_frame
        if availability_count is not None:
            self.availability_count = availability_count

    @property
    def name(self):
        """Gets the name of this DeviceModel.  # noqa: E501


        :return: The name of this DeviceModel.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceModel.


        :param name: The name of this DeviceModel.  # noqa: E501
        :type: string
        """

        self._name = name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DeviceModel.  # noqa: E501


        :return: The manufacturer of this DeviceModel.  # noqa: E501
        :rtype: string
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DeviceModel.


        :param manufacturer: The manufacturer of this DeviceModel.  # noqa: E501
        :type: string
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this DeviceModel.  # noqa: E501


        :return: The model of this DeviceModel.  # noqa: E501
        :rtype: string
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceModel.


        :param model: The model of this DeviceModel.  # noqa: E501
        :type: string
        """

        self._model = model

    @property
    def platform(self):
        """Gets the platform of this DeviceModel.  # noqa: E501


        :return: The platform of this DeviceModel.  # noqa: E501
        :rtype: string
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeviceModel.


        :param platform: The platform of this DeviceModel.  # noqa: E501
        :type: string
        """

        self._platform = platform

    @property
    def dimensions(self):
        """Gets the dimensions of this DeviceModel.  # noqa: E501

        Physical device dimensions  # noqa: E501

        :return: The dimensions of this DeviceModel.  # noqa: E501
        :rtype: 
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this DeviceModel.

        Physical device dimensions  # noqa: E501

        :param dimensions: The dimensions of this DeviceModel.  # noqa: E501
        :type: 
        """

        self._dimensions = dimensions

    @property
    def resolution(self):
        """Gets the resolution of this DeviceModel.  # noqa: E501

        Device screen resolution  # noqa: E501

        :return: The resolution of this DeviceModel.  # noqa: E501
        :rtype: 
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this DeviceModel.

        Device screen resolution  # noqa: E501

        :param resolution: The resolution of this DeviceModel.  # noqa: E501
        :type: 
        """

        self._resolution = resolution

    @property
    def release_date(self):
        """Gets the release_date of this DeviceModel.  # noqa: E501


        :return: The release_date of this DeviceModel.  # noqa: E501
        :rtype: string
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this DeviceModel.


        :param release_date: The release_date of this DeviceModel.  # noqa: E501
        :type: string
        """

        self._release_date = release_date

    @property
    def form_factor(self):
        """Gets the form_factor of this DeviceModel.  # noqa: E501


        :return: The form_factor of this DeviceModel.  # noqa: E501
        :rtype: string
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this DeviceModel.


        :param form_factor: The form_factor of this DeviceModel.  # noqa: E501
        :type: string
        """

        self._form_factor = form_factor

    @property
    def screen_size(self):
        """Gets the screen_size of this DeviceModel.  # noqa: E501

        Physical device screen dimensions  # noqa: E501

        :return: The screen_size of this DeviceModel.  # noqa: E501
        :rtype: 
        """
        return self._screen_size

    @screen_size.setter
    def screen_size(self, screen_size):
        """Sets the screen_size of this DeviceModel.

        Physical device screen dimensions  # noqa: E501

        :param screen_size: The screen_size of this DeviceModel.  # noqa: E501
        :type: 
        """

        self._screen_size = screen_size

    @property
    def cpu(self):
        """Gets the cpu of this DeviceModel.  # noqa: E501

        CPU data for device  # noqa: E501

        :return: The cpu of this DeviceModel.  # noqa: E501
        :rtype: 
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this DeviceModel.

        CPU data for device  # noqa: E501

        :param cpu: The cpu of this DeviceModel.  # noqa: E501
        :type: 
        """

        self._cpu = cpu

    @property
    def memory(self):
        """Gets the memory of this DeviceModel.  # noqa: E501

        Memory data for device  # noqa: E501

        :return: The memory of this DeviceModel.  # noqa: E501
        :rtype: 
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this DeviceModel.

        Memory data for device  # noqa: E501

        :param memory: The memory of this DeviceModel.  # noqa: E501
        :type: 
        """

        self._memory = memory

    @property
    def screen_rotation(self):
        """Gets the screen_rotation of this DeviceModel.  # noqa: E501


        :return: The screen_rotation of this DeviceModel.  # noqa: E501
        :rtype: number
        """
        return self._screen_rotation

    @screen_rotation.setter
    def screen_rotation(self, screen_rotation):
        """Sets the screen_rotation of this DeviceModel.


        :param screen_rotation: The screen_rotation of this DeviceModel.  # noqa: E501
        :type: number
        """

        self._screen_rotation = screen_rotation

    @property
    def device_frame(self):
        """Gets the device_frame of this DeviceModel.  # noqa: E501


        :return: The device_frame of this DeviceModel.  # noqa: E501
        :rtype: 
        """
        return self._device_frame

    @device_frame.setter
    def device_frame(self, device_frame):
        """Sets the device_frame of this DeviceModel.


        :param device_frame: The device_frame of this DeviceModel.  # noqa: E501
        :type: 
        """

        self._device_frame = device_frame

    @property
    def availability_count(self):
        """Gets the availability_count of this DeviceModel.  # noqa: E501


        :return: The availability_count of this DeviceModel.  # noqa: E501
        :rtype: number
        """
        return self._availability_count

    @availability_count.setter
    def availability_count(self, availability_count):
        """Sets the availability_count of this DeviceModel.


        :param availability_count: The availability_count of this DeviceModel.  # noqa: E501
        :type: number
        """

        self._availability_count = availability_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
