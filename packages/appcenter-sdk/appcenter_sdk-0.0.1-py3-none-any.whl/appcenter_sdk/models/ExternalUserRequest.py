# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ExternalUserRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_invitation': 'string',
        'tester_invitation': 'string',
        'organization_invitation': 'string',
        'avatar_url': 'string',
        'display_name': 'string',
        'email': 'string',
        'name': 'string'
    }

    attribute_map = {
        'app_invitation': 'app_invitation',
        'tester_invitation': 'tester_invitation',
        'organization_invitation': 'organization_invitation',
        'avatar_url': 'avatar_url',
        'display_name': 'display_name',
        'email': 'email',
        'name': 'name'
    }

    def __init__(self, app_invitation=None, tester_invitation=None, organization_invitation=None, avatar_url=None, display_name=None, email=None, name=None):  # noqa: E501
        """ExternalUserRequest - a model defined in Swagger"""  # noqa: E501
        self._app_invitation = None
        self._tester_invitation = None
        self._organization_invitation = None
        self._avatar_url = None
        self._display_name = None
        self._email = None
        self._name = None
        self.discriminator = None
        if app_invitation is not None:
            self.app_invitation = app_invitation
        if tester_invitation is not None:
            self.tester_invitation = tester_invitation
        if organization_invitation is not None:
            self.organization_invitation = organization_invitation
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if display_name is not None:
            self.display_name = display_name
        self.email = email
        if name is not None:
            self.name = name

    @property
    def app_invitation(self):
        """Gets the app_invitation of this ExternalUserRequest.  # noqa: E501

        The token of the app invitation which lead to signup  # noqa: E501

        :return: The app_invitation of this ExternalUserRequest.  # noqa: E501
        :rtype: string
        """
        return self._app_invitation

    @app_invitation.setter
    def app_invitation(self, app_invitation):
        """Sets the app_invitation of this ExternalUserRequest.

        The token of the app invitation which lead to signup  # noqa: E501

        :param app_invitation: The app_invitation of this ExternalUserRequest.  # noqa: E501
        :type: string
        """

        self._app_invitation = app_invitation

    @property
    def tester_invitation(self):
        """Gets the tester_invitation of this ExternalUserRequest.  # noqa: E501

        The token of the test invitation which lead to signup  # noqa: E501

        :return: The tester_invitation of this ExternalUserRequest.  # noqa: E501
        :rtype: string
        """
        return self._tester_invitation

    @tester_invitation.setter
    def tester_invitation(self, tester_invitation):
        """Sets the tester_invitation of this ExternalUserRequest.

        The token of the test invitation which lead to signup  # noqa: E501

        :param tester_invitation: The tester_invitation of this ExternalUserRequest.  # noqa: E501
        :type: string
        """

        self._tester_invitation = tester_invitation

    @property
    def organization_invitation(self):
        """Gets the organization_invitation of this ExternalUserRequest.  # noqa: E501

        The token of the organization invitation which lead to signup  # noqa: E501

        :return: The organization_invitation of this ExternalUserRequest.  # noqa: E501
        :rtype: string
        """
        return self._organization_invitation

    @organization_invitation.setter
    def organization_invitation(self, organization_invitation):
        """Sets the organization_invitation of this ExternalUserRequest.

        The token of the organization invitation which lead to signup  # noqa: E501

        :param organization_invitation: The organization_invitation of this ExternalUserRequest.  # noqa: E501
        :type: string
        """

        self._organization_invitation = organization_invitation

    @property
    def avatar_url(self):
        """Gets the avatar_url of this ExternalUserRequest.  # noqa: E501

        The avatar URL of the user  # noqa: E501

        :return: The avatar_url of this ExternalUserRequest.  # noqa: E501
        :rtype: string
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this ExternalUserRequest.

        The avatar URL of the user  # noqa: E501

        :param avatar_url: The avatar_url of this ExternalUserRequest.  # noqa: E501
        :type: string
        """

        self._avatar_url = avatar_url

    @property
    def display_name(self):
        """Gets the display_name of this ExternalUserRequest.  # noqa: E501

        The full name of the user. Might for example be first and last name  # noqa: E501

        :return: The display_name of this ExternalUserRequest.  # noqa: E501
        :rtype: string
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ExternalUserRequest.

        The full name of the user. Might for example be first and last name  # noqa: E501

        :param display_name: The display_name of this ExternalUserRequest.  # noqa: E501
        :type: string
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this ExternalUserRequest.  # noqa: E501

        The email address of the user  # noqa: E501

        :return: The email of this ExternalUserRequest.  # noqa: E501
        :rtype: string
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ExternalUserRequest.

        The email address of the user  # noqa: E501

        :param email: The email of this ExternalUserRequest.  # noqa: E501
        :type: string
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def name(self):
        """Gets the name of this ExternalUserRequest.  # noqa: E501

        The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the `display_name` value  # noqa: E501

        :return: The name of this ExternalUserRequest.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExternalUserRequest.

        The unique name that is used to identify the user. If no explicit value is given, a default will be auto-generated from the `display_name` value  # noqa: E501

        :param name: The name of this ExternalUserRequest.  # noqa: E501
        :type: string
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalUserRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
