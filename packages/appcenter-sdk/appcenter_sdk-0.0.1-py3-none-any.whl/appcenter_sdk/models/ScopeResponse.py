# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ScopeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'app_name': 'string',
        'scope': 'string',
        'url': 'string'
    }

    attribute_map = {
        'id': 'id',
        'app_name': 'app_name',
        'scope': 'scope',
        'url': 'url'
    }

    def __init__(self, id=None, app_name=None, scope=None, url=None):  # noqa: E501
        """ScopeResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._app_name = None
        self._scope = None
        self._url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if app_name is not None:
            self.app_name = app_name
        if scope is not None:
            self.scope = scope
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this ScopeResponse.  # noqa: E501


        :return: The id of this ScopeResponse.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScopeResponse.


        :param id: The id of this ScopeResponse.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def app_name(self):
        """Gets the app_name of this ScopeResponse.  # noqa: E501


        :return: The app_name of this ScopeResponse.  # noqa: E501
        :rtype: string
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ScopeResponse.


        :param app_name: The app_name of this ScopeResponse.  # noqa: E501
        :type: string
        """

        self._app_name = app_name

    @property
    def scope(self):
        """Gets the scope of this ScopeResponse.  # noqa: E501


        :return: The scope of this ScopeResponse.  # noqa: E501
        :rtype: string
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ScopeResponse.


        :param scope: The scope of this ScopeResponse.  # noqa: E501
        :type: string
        """

        self._scope = scope

    @property
    def url(self):
        """Gets the url of this ScopeResponse.  # noqa: E501


        :return: The url of this ScopeResponse.  # noqa: E501
        :rtype: string
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ScopeResponse.


        :param url: The url of this ScopeResponse.  # noqa: E501
        :type: string
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScopeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
