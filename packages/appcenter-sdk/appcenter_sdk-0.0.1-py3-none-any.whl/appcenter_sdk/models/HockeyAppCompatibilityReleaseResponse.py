# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class HockeyAppCompatibilityReleaseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'integer',
        'shortversion': 'string',
        'version': 'string',
        'uploaded_at': 'string',
        'appsize': 'integer',
        'notes': 'string',
        'mandatory': 'boolean',
        'external': 'boolean',
        'device_family': 'string',
        'minimum_os_version': 'string'
    }

    attribute_map = {
        'id': 'id',
        'shortversion': 'shortversion',
        'version': 'version',
        'uploaded_at': 'uploaded_at',
        'appsize': 'appsize',
        'notes': 'notes',
        'mandatory': 'mandatory',
        'external': 'external',
        'device_family': 'device_family',
        'minimum_os_version': 'minimum_os_version'
    }

    def __init__(self, id=None, shortversion=None, version=None, uploaded_at=None, appsize=None, notes=None, mandatory=None, external=None, device_family=None, minimum_os_version=None):  # noqa: E501
        """HockeyAppCompatibilityReleaseResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._shortversion = None
        self._version = None
        self._uploaded_at = None
        self._appsize = None
        self._notes = None
        self._mandatory = None
        self._external = None
        self._device_family = None
        self._minimum_os_version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if shortversion is not None:
            self.shortversion = shortversion
        if version is not None:
            self.version = version
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if appsize is not None:
            self.appsize = appsize
        if notes is not None:
            self.notes = notes
        if mandatory is not None:
            self.mandatory = mandatory
        if external is not None:
            self.external = external
        if device_family is not None:
            self.device_family = device_family
        if minimum_os_version is not None:
            self.minimum_os_version = minimum_os_version

    @property
    def id(self):
        """Gets the id of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The id of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HockeyAppCompatibilityReleaseResponse.


        :param id: The id of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: integer
        """

        self._id = id

    @property
    def shortversion(self):
        """Gets the shortversion of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The shortversion of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._shortversion

    @shortversion.setter
    def shortversion(self, shortversion):
        """Sets the shortversion of this HockeyAppCompatibilityReleaseResponse.


        :param shortversion: The shortversion of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: string
        """

        self._shortversion = shortversion

    @property
    def version(self):
        """Gets the version of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The version of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HockeyAppCompatibilityReleaseResponse.


        :param version: The version of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: string
        """

        self._version = version

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The uploaded_at of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this HockeyAppCompatibilityReleaseResponse.


        :param uploaded_at: The uploaded_at of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: string
        """

        self._uploaded_at = uploaded_at

    @property
    def appsize(self):
        """Gets the appsize of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The appsize of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: integer
        """
        return self._appsize

    @appsize.setter
    def appsize(self, appsize):
        """Sets the appsize of this HockeyAppCompatibilityReleaseResponse.


        :param appsize: The appsize of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: integer
        """

        self._appsize = appsize

    @property
    def notes(self):
        """Gets the notes of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The notes of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this HockeyAppCompatibilityReleaseResponse.


        :param notes: The notes of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: string
        """

        self._notes = notes

    @property
    def mandatory(self):
        """Gets the mandatory of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The mandatory of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this HockeyAppCompatibilityReleaseResponse.


        :param mandatory: The mandatory of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: boolean
        """

        self._mandatory = mandatory

    @property
    def external(self):
        """Gets the external of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The external of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this HockeyAppCompatibilityReleaseResponse.


        :param external: The external of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: boolean
        """

        self._external = external

    @property
    def device_family(self):
        """Gets the device_family of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The device_family of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this HockeyAppCompatibilityReleaseResponse.


        :param device_family: The device_family of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: string
        """

        self._device_family = device_family

    @property
    def minimum_os_version(self):
        """Gets the minimum_os_version of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501


        :return: The minimum_os_version of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :rtype: string
        """
        return self._minimum_os_version

    @minimum_os_version.setter
    def minimum_os_version(self, minimum_os_version):
        """Sets the minimum_os_version of this HockeyAppCompatibilityReleaseResponse.


        :param minimum_os_version: The minimum_os_version of this HockeyAppCompatibilityReleaseResponse.  # noqa: E501
        :type: string
        """

        self._minimum_os_version = minimum_os_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HockeyAppCompatibilityReleaseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
