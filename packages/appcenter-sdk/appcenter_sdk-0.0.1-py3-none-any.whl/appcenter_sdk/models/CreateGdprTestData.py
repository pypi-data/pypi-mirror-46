# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class CreateGdprTestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'string',
        'account_id': 'string',
        'user_name': 'string',
        'user_email': 'string',
        'app_name': 'string'
    }

    attribute_map = {
        'app_id': 'app_id',
        'account_id': 'account_id',
        'user_name': 'user_name',
        'user_email': 'user_email',
        'app_name': 'app_name'
    }

    def __init__(self, app_id=None, account_id=None, user_name=None, user_email=None, app_name=None):  # noqa: E501
        """CreateGdprTestData - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._account_id = None
        self._user_name = None
        self._user_email = None
        self._app_name = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if account_id is not None:
            self.account_id = account_id
        if user_name is not None:
            self.user_name = user_name
        if user_email is not None:
            self.user_email = user_email
        if app_name is not None:
            self.app_name = app_name

    @property
    def app_id(self):
        """Gets the app_id of this CreateGdprTestData.  # noqa: E501


        :return: The app_id of this CreateGdprTestData.  # noqa: E501
        :rtype: string
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CreateGdprTestData.


        :param app_id: The app_id of this CreateGdprTestData.  # noqa: E501
        :type: string
        """

        self._app_id = app_id

    @property
    def account_id(self):
        """Gets the account_id of this CreateGdprTestData.  # noqa: E501


        :return: The account_id of this CreateGdprTestData.  # noqa: E501
        :rtype: string
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateGdprTestData.


        :param account_id: The account_id of this CreateGdprTestData.  # noqa: E501
        :type: string
        """

        self._account_id = account_id

    @property
    def user_name(self):
        """Gets the user_name of this CreateGdprTestData.  # noqa: E501


        :return: The user_name of this CreateGdprTestData.  # noqa: E501
        :rtype: string
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CreateGdprTestData.


        :param user_name: The user_name of this CreateGdprTestData.  # noqa: E501
        :type: string
        """

        self._user_name = user_name

    @property
    def user_email(self):
        """Gets the user_email of this CreateGdprTestData.  # noqa: E501


        :return: The user_email of this CreateGdprTestData.  # noqa: E501
        :rtype: string
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this CreateGdprTestData.


        :param user_email: The user_email of this CreateGdprTestData.  # noqa: E501
        :type: string
        """

        self._user_email = user_email

    @property
    def app_name(self):
        """Gets the app_name of this CreateGdprTestData.  # noqa: E501


        :return: The app_name of this CreateGdprTestData.  # noqa: E501
        :rtype: string
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this CreateGdprTestData.


        :param app_name: The app_name of this CreateGdprTestData.  # noqa: E501
        :type: string
        """

        self._app_name = app_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateGdprTestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
