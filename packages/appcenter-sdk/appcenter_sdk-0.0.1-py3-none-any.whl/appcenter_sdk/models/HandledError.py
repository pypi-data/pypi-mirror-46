# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class HandledError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_id': 'string',
        'timestamp': 'string',
        'device_name': 'string',
        'os_version': 'string',
        'os_type': 'string',
        'country': 'string',
        'language': 'string',
        'user_id': 'string'
    }

    attribute_map = {
        'error_id': 'error_id',
        'timestamp': 'timestamp',
        'device_name': 'device_name',
        'os_version': 'os_version',
        'os_type': 'os_type',
        'country': 'country',
        'language': 'language',
        'user_id': 'user_id'
    }

    def __init__(self, error_id=None, timestamp=None, device_name=None, os_version=None, os_type=None, country=None, language=None, user_id=None):  # noqa: E501
        """HandledError - a model defined in Swagger"""  # noqa: E501
        self._error_id = None
        self._timestamp = None
        self._device_name = None
        self._os_version = None
        self._os_type = None
        self._country = None
        self._language = None
        self._user_id = None
        self.discriminator = None
        if error_id is not None:
            self.error_id = error_id
        if timestamp is not None:
            self.timestamp = timestamp
        if device_name is not None:
            self.device_name = device_name
        if os_version is not None:
            self.os_version = os_version
        if os_type is not None:
            self.os_type = os_type
        if country is not None:
            self.country = country
        if language is not None:
            self.language = language
        if user_id is not None:
            self.user_id = user_id

    @property
    def error_id(self):
        """Gets the error_id of this HandledError.  # noqa: E501


        :return: The error_id of this HandledError.  # noqa: E501
        :rtype: string
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id):
        """Sets the error_id of this HandledError.


        :param error_id: The error_id of this HandledError.  # noqa: E501
        :type: string
        """

        self._error_id = error_id

    @property
    def timestamp(self):
        """Gets the timestamp of this HandledError.  # noqa: E501


        :return: The timestamp of this HandledError.  # noqa: E501
        :rtype: string
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this HandledError.


        :param timestamp: The timestamp of this HandledError.  # noqa: E501
        :type: string
        """

        self._timestamp = timestamp

    @property
    def device_name(self):
        """Gets the device_name of this HandledError.  # noqa: E501


        :return: The device_name of this HandledError.  # noqa: E501
        :rtype: string
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this HandledError.


        :param device_name: The device_name of this HandledError.  # noqa: E501
        :type: string
        """

        self._device_name = device_name

    @property
    def os_version(self):
        """Gets the os_version of this HandledError.  # noqa: E501


        :return: The os_version of this HandledError.  # noqa: E501
        :rtype: string
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this HandledError.


        :param os_version: The os_version of this HandledError.  # noqa: E501
        :type: string
        """

        self._os_version = os_version

    @property
    def os_type(self):
        """Gets the os_type of this HandledError.  # noqa: E501


        :return: The os_type of this HandledError.  # noqa: E501
        :rtype: string
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this HandledError.


        :param os_type: The os_type of this HandledError.  # noqa: E501
        :type: string
        """

        self._os_type = os_type

    @property
    def country(self):
        """Gets the country of this HandledError.  # noqa: E501


        :return: The country of this HandledError.  # noqa: E501
        :rtype: string
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this HandledError.


        :param country: The country of this HandledError.  # noqa: E501
        :type: string
        """

        self._country = country

    @property
    def language(self):
        """Gets the language of this HandledError.  # noqa: E501


        :return: The language of this HandledError.  # noqa: E501
        :rtype: string
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this HandledError.


        :param language: The language of this HandledError.  # noqa: E501
        :type: string
        """

        self._language = language

    @property
    def user_id(self):
        """Gets the user_id of this HandledError.  # noqa: E501


        :return: The user_id of this HandledError.  # noqa: E501
        :rtype: string
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this HandledError.


        :param user_id: The user_id of this HandledError.  # noqa: E501
        :type: string
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HandledError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
