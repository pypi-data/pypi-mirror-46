# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class MessageEnvelope(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'string',
        'message_type': 'string',
        'message': 'object'
    }

    attribute_map = {
        'message_id': 'message_id',
        'message_type': 'message_type',
        'message': 'message'
    }

    def __init__(self, message_id=None, message_type=None, message=None):  # noqa: E501
        """MessageEnvelope - a model defined in Swagger"""  # noqa: E501
        self._message_id = None
        self._message_type = None
        self._message = None
        self.discriminator = None
        if message_id is not None:
            self.message_id = message_id
        if message_type is not None:
            self.message_type = message_type
        if message is not None:
            self.message = message

    @property
    def message_id(self):
        """Gets the message_id of this MessageEnvelope.  # noqa: E501

        Unique id of the message  # noqa: E501

        :return: The message_id of this MessageEnvelope.  # noqa: E501
        :rtype: string
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this MessageEnvelope.

        Unique id of the message  # noqa: E501

        :param message_id: The message_id of this MessageEnvelope.  # noqa: E501
        :type: string
        """

        self._message_id = message_id

    @property
    def message_type(self):
        """Gets the message_type of this MessageEnvelope.  # noqa: E501

        Type of the message  # noqa: E501

        :return: The message_type of this MessageEnvelope.  # noqa: E501
        :rtype: string
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this MessageEnvelope.

        Type of the message  # noqa: E501

        :param message_type: The message_type of this MessageEnvelope.  # noqa: E501
        :type: string
        """

        self._message_type = message_type

    @property
    def message(self):
        """Gets the message of this MessageEnvelope.  # noqa: E501

        Body of the message  # noqa: E501

        :return: The message of this MessageEnvelope.  # noqa: E501
        :rtype: object
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessageEnvelope.

        Body of the message  # noqa: E501

        :param message: The message of this MessageEnvelope.  # noqa: E501
        :type: object
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageEnvelope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
