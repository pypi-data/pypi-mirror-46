# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class ProvisioningProfileResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    adhoc = "adhoc"
    enterprise = "enterprise"
    other = "other"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provisioning_profile_type': 'string',
        'udids': 'array',
        'provisioning_profile_name': 'string',
        'team_identifier': 'string',
        'provisioning_bundle_id': 'string',
        'appex_profiles': 'array'
    }

    attribute_map = {
        'provisioning_profile_type': 'provisioning_profile_type',
        'udids': 'udids',
        'provisioning_profile_name': 'provisioning_profile_name',
        'team_identifier': 'team_identifier',
        'provisioning_bundle_id': 'provisioning_bundle_id',
        'appex_profiles': 'appex_profiles'
    }

    def __init__(self, provisioning_profile_type=None, udids=None, provisioning_profile_name=None, team_identifier=None, provisioning_bundle_id=None, appex_profiles=None):  # noqa: E501
        """ProvisioningProfileResponse - a model defined in Swagger"""  # noqa: E501
        self._provisioning_profile_type = None
        self._udids = None
        self._provisioning_profile_name = None
        self._team_identifier = None
        self._provisioning_bundle_id = None
        self._appex_profiles = None
        self.discriminator = None
        self.provisioning_profile_type = provisioning_profile_type
        if udids is not None:
            self.udids = udids
        if provisioning_profile_name is not None:
            self.provisioning_profile_name = provisioning_profile_name
        if team_identifier is not None:
            self.team_identifier = team_identifier
        if provisioning_bundle_id is not None:
            self.provisioning_bundle_id = provisioning_bundle_id
        if appex_profiles is not None:
            self.appex_profiles = appex_profiles

    @property
    def provisioning_profile_type(self):
        """Gets the provisioning_profile_type of this ProvisioningProfileResponse.  # noqa: E501


        :return: The provisioning_profile_type of this ProvisioningProfileResponse.  # noqa: E501
        :rtype: string
        """
        return self._provisioning_profile_type

    @provisioning_profile_type.setter
    def provisioning_profile_type(self, provisioning_profile_type):
        """Sets the provisioning_profile_type of this ProvisioningProfileResponse.


        :param provisioning_profile_type: The provisioning_profile_type of this ProvisioningProfileResponse.  # noqa: E501
        :type: string
        """
        if provisioning_profile_type is None:
            raise ValueError("Invalid value for `provisioning_profile_type`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, undefined, ]  # noqa: E501

        self._provisioning_profile_type = provisioning_profile_type

    @property
    def udids(self):
        """Gets the udids of this ProvisioningProfileResponse.  # noqa: E501


        :return: The udids of this ProvisioningProfileResponse.  # noqa: E501
        :rtype: array
        """
        return self._udids

    @udids.setter
    def udids(self, udids):
        """Sets the udids of this ProvisioningProfileResponse.


        :param udids: The udids of this ProvisioningProfileResponse.  # noqa: E501
        :type: array
        """

        self._udids = udids

    @property
    def provisioning_profile_name(self):
        """Gets the provisioning_profile_name of this ProvisioningProfileResponse.  # noqa: E501

        The name of the provisioning profile.  # noqa: E501

        :return: The provisioning_profile_name of this ProvisioningProfileResponse.  # noqa: E501
        :rtype: string
        """
        return self._provisioning_profile_name

    @provisioning_profile_name.setter
    def provisioning_profile_name(self, provisioning_profile_name):
        """Sets the provisioning_profile_name of this ProvisioningProfileResponse.

        The name of the provisioning profile.  # noqa: E501

        :param provisioning_profile_name: The provisioning_profile_name of this ProvisioningProfileResponse.  # noqa: E501
        :type: string
        """

        self._provisioning_profile_name = provisioning_profile_name

    @property
    def team_identifier(self):
        """Gets the team_identifier of this ProvisioningProfileResponse.  # noqa: E501

        The team identifier.  # noqa: E501

        :return: The team_identifier of this ProvisioningProfileResponse.  # noqa: E501
        :rtype: string
        """
        return self._team_identifier

    @team_identifier.setter
    def team_identifier(self, team_identifier):
        """Sets the team_identifier of this ProvisioningProfileResponse.

        The team identifier.  # noqa: E501

        :param team_identifier: The team_identifier of this ProvisioningProfileResponse.  # noqa: E501
        :type: string
        """

        self._team_identifier = team_identifier

    @property
    def provisioning_bundle_id(self):
        """Gets the provisioning_bundle_id of this ProvisioningProfileResponse.  # noqa: E501

        The bundle identifier associated with the profile.  # noqa: E501

        :return: The provisioning_bundle_id of this ProvisioningProfileResponse.  # noqa: E501
        :rtype: string
        """
        return self._provisioning_bundle_id

    @provisioning_bundle_id.setter
    def provisioning_bundle_id(self, provisioning_bundle_id):
        """Sets the provisioning_bundle_id of this ProvisioningProfileResponse.

        The bundle identifier associated with the profile.  # noqa: E501

        :param provisioning_bundle_id: The provisioning_bundle_id of this ProvisioningProfileResponse.  # noqa: E501
        :type: string
        """

        self._provisioning_bundle_id = provisioning_bundle_id

    @property
    def appex_profiles(self):
        """Gets the appex_profiles of this ProvisioningProfileResponse.  # noqa: E501

        Array of provisioning profiles for any app extensions  # noqa: E501

        :return: The appex_profiles of this ProvisioningProfileResponse.  # noqa: E501
        :rtype: array
        """
        return self._appex_profiles

    @appex_profiles.setter
    def appex_profiles(self, appex_profiles):
        """Sets the appex_profiles of this ProvisioningProfileResponse.

        Array of provisioning profiles for any app extensions  # noqa: E501

        :param appex_profiles: The appex_profiles of this ProvisioningProfileResponse.  # noqa: E501
        :type: array
        """

        self._appex_profiles = appex_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisioningProfileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
