# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class Audience(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    Calculating = "Calculating"
    Ready = "Ready"
    Disabled = "Disabled"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'boolean',
        'custom_properties': 'object',
        'estimated_total_count': 'integer',
        'timestamp': 'string'
    }

    attribute_map = {
        'enabled': 'enabled',
        'custom_properties': 'custom_properties',
        'estimated_total_count': 'estimated_total_count',
        'timestamp': 'timestamp'
    }

    def __init__(self, enabled=true, custom_properties=None, estimated_total_count=None, timestamp=None):  # noqa: E501
        """Audience - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._custom_properties = None
        self._estimated_total_count = None
        self._timestamp = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if custom_properties is not None:
            self.custom_properties = custom_properties
        if estimated_total_count is not None:
            self.estimated_total_count = estimated_total_count
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def enabled(self):
        """Gets the enabled of this Audience.  # noqa: E501


        :return: The enabled of this Audience.  # noqa: E501
        :rtype: boolean
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Audience.


        :param enabled: The enabled of this Audience.  # noqa: E501
        :type: boolean
        """

        self._enabled = enabled

    @property
    def custom_properties(self):
        """Gets the custom_properties of this Audience.  # noqa: E501

        Custom properties used in the definition.  # noqa: E501

        :return: The custom_properties of this Audience.  # noqa: E501
        :rtype: object
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this Audience.

        Custom properties used in the definition.  # noqa: E501

        :param custom_properties: The custom_properties of this Audience.  # noqa: E501
        :type: object
        """

        self._custom_properties = custom_properties

    @property
    def estimated_total_count(self):
        """Gets the estimated_total_count of this Audience.  # noqa: E501

        Estimated total audience size.  # noqa: E501

        :return: The estimated_total_count of this Audience.  # noqa: E501
        :rtype: integer
        """
        return self._estimated_total_count

    @estimated_total_count.setter
    def estimated_total_count(self, estimated_total_count):
        """Sets the estimated_total_count of this Audience.

        Estimated total audience size.  # noqa: E501

        :param estimated_total_count: The estimated_total_count of this Audience.  # noqa: E501
        :type: integer
        """

        self._estimated_total_count = estimated_total_count

    @property
    def timestamp(self):
        """Gets the timestamp of this Audience.  # noqa: E501

        Date the audience was last refreshed.  # noqa: E501

        :return: The timestamp of this Audience.  # noqa: E501
        :rtype: string
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Audience.

        Date the audience was last refreshed.  # noqa: E501

        :param timestamp: The timestamp of this Audience.  # noqa: E501
        :type: string
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Audience):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
