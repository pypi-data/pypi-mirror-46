# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AlertingBugtrackerSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    github = "github"
    vsts = "vsts"
    jira = "jira"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'callback_url': 'string',
        'owner_name': 'string',
        'type': 'string'
    }

    attribute_map = {
        'callback_url': 'callback_url',
        'owner_name': 'owner_name',
        'type': 'type'
    }

    def __init__(self, callback_url=None, owner_name=None, type=None):  # noqa: E501
        """AlertingBugtrackerSettings - a model defined in Swagger"""  # noqa: E501
        self._callback_url = None
        self._owner_name = None
        self._type = None
        self.discriminator = None
        if callback_url is not None:
            self.callback_url = callback_url
        self.owner_name = owner_name
        self.type = type

    @property
    def callback_url(self):
        """Gets the callback_url of this AlertingBugtrackerSettings.  # noqa: E501


        :return: The callback_url of this AlertingBugtrackerSettings.  # noqa: E501
        :rtype: string
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this AlertingBugtrackerSettings.


        :param callback_url: The callback_url of this AlertingBugtrackerSettings.  # noqa: E501
        :type: string
        """

        self._callback_url = callback_url

    @property
    def owner_name(self):
        """Gets the owner_name of this AlertingBugtrackerSettings.  # noqa: E501


        :return: The owner_name of this AlertingBugtrackerSettings.  # noqa: E501
        :rtype: string
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this AlertingBugtrackerSettings.


        :param owner_name: The owner_name of this AlertingBugtrackerSettings.  # noqa: E501
        :type: string
        """
        if owner_name is None:
            raise ValueError("Invalid value for `owner_name`, must not be `None`")  # noqa: E501

        self._owner_name = owner_name

    @property
    def type(self):
        """Gets the type of this AlertingBugtrackerSettings.  # noqa: E501

        type of bugtracker  # noqa: E501

        :return: The type of this AlertingBugtrackerSettings.  # noqa: E501
        :rtype: string
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertingBugtrackerSettings.

        type of bugtracker  # noqa: E501

        :param type: The type of this AlertingBugtrackerSettings.  # noqa: E501
        :type: string
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = [undefinedundefinedundefined]  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertingBugtrackerSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
