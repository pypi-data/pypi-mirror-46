# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class NotificationConfigAppleTokenResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    production = "production"
    sandbox = "sandbox"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_id': 'string',
        'id': 'string',
        'prefix': 'string',
        'endpoint_type': 'string'
    }

    attribute_map = {
        'key_id': 'key_id',
        'id': 'id',
        'prefix': 'prefix',
        'endpoint_type': 'endpoint_type'
    }

    def __init__(self, key_id=None, id=None, prefix=None, endpoint_type=None):  # noqa: E501
        """NotificationConfigAppleTokenResult - a model defined in Swagger"""  # noqa: E501
        self._key_id = None
        self._id = None
        self._prefix = None
        self._endpoint_type = None
        self.discriminator = None
        self.key_id = key_id
        self.id = id
        self.prefix = prefix
        self.endpoint_type = endpoint_type

    @property
    def key_id(self):
        """Gets the key_id of this NotificationConfigAppleTokenResult.  # noqa: E501

        A 10-character key identifier (kid).  # noqa: E501

        :return: The key_id of this NotificationConfigAppleTokenResult.  # noqa: E501
        :rtype: string
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this NotificationConfigAppleTokenResult.

        A 10-character key identifier (kid).  # noqa: E501

        :param key_id: The key_id of this NotificationConfigAppleTokenResult.  # noqa: E501
        :type: string
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")  # noqa: E501

        self._key_id = key_id

    @property
    def id(self):
        """Gets the id of this NotificationConfigAppleTokenResult.  # noqa: E501

        Application ID.  # noqa: E501

        :return: The id of this NotificationConfigAppleTokenResult.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationConfigAppleTokenResult.

        Application ID.  # noqa: E501

        :param id: The id of this NotificationConfigAppleTokenResult.  # noqa: E501
        :type: string
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def prefix(self):
        """Gets the prefix of this NotificationConfigAppleTokenResult.  # noqa: E501

        Application Prefix.  # noqa: E501

        :return: The prefix of this NotificationConfigAppleTokenResult.  # noqa: E501
        :rtype: string
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this NotificationConfigAppleTokenResult.

        Application Prefix.  # noqa: E501

        :param prefix: The prefix of this NotificationConfigAppleTokenResult.  # noqa: E501
        :type: string
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this NotificationConfigAppleTokenResult.  # noqa: E501

        Type of endpoint the certificate or token are associated with  # noqa: E501

        :return: The endpoint_type of this NotificationConfigAppleTokenResult.  # noqa: E501
        :rtype: string
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this NotificationConfigAppleTokenResult.

        Type of endpoint the certificate or token are associated with  # noqa: E501

        :param endpoint_type: The endpoint_type of this NotificationConfigAppleTokenResult.  # noqa: E501
        :type: string
        """
        if endpoint_type is None:
            raise ValueError("Invalid value for `endpoint_type`, must not be `None`")  # noqa: E501
        allowed_values = [undefinedundefined]  # noqa: E501

        self._endpoint_type = endpoint_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationConfigAppleTokenResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
