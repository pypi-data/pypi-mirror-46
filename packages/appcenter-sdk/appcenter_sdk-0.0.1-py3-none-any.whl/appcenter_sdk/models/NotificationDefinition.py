# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class NotificationDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    audiences_target = "audiences_target"
    devices_target = "devices_target"
    user_ids_target = "user_ids_target"
    account_ids_target = "account_ids_target"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_target': 'object',
        'notification_content': 'object'
    }

    attribute_map = {
        'notification_target': 'notification_target',
        'notification_content': 'notification_content'
    }

    def __init__(self, notification_target=None, notification_content=None):  # noqa: E501
        """NotificationDefinition - a model defined in Swagger"""  # noqa: E501
        self._notification_target = None
        self._notification_content = None
        self.discriminator = None
        if notification_target is not None:
            self.notification_target = notification_target
        self.notification_content = notification_content

    @property
    def notification_target(self):
        """Gets the notification_target of this NotificationDefinition.  # noqa: E501

        Type of Notification target (audiences, devices, user ids or account ids). The object must include the correct properties for the specified target type.  # noqa: E501

        :return: The notification_target of this NotificationDefinition.  # noqa: E501
        :rtype: object
        """
        return self._notification_target

    @notification_target.setter
    def notification_target(self, notification_target):
        """Sets the notification_target of this NotificationDefinition.

        Type of Notification target (audiences, devices, user ids or account ids). The object must include the correct properties for the specified target type.  # noqa: E501

        :param notification_target: The notification_target of this NotificationDefinition.  # noqa: E501
        :type: object
        """

        self._notification_target = notification_target

    @property
    def notification_content(self):
        """Gets the notification_content of this NotificationDefinition.  # noqa: E501

        Notification definition object  # noqa: E501

        :return: The notification_content of this NotificationDefinition.  # noqa: E501
        :rtype: object
        """
        return self._notification_content

    @notification_content.setter
    def notification_content(self, notification_content):
        """Sets the notification_content of this NotificationDefinition.

        Notification definition object  # noqa: E501

        :param notification_content: The notification_content of this NotificationDefinition.  # noqa: E501
        :type: object
        """
        if notification_content is None:
            raise ValueError("Invalid value for `notification_content`, must not be `None`")  # noqa: E501

        self._notification_content = notification_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
