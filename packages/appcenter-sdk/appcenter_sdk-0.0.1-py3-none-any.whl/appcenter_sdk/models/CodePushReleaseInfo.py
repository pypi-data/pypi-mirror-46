# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class CodePushReleaseInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_binary_range': 'string',
        'description': 'string',
        'is_disabled': 'boolean',
        'is_mandatory': 'boolean',
        'rollout': 'integer'
    }

    attribute_map = {
        'target_binary_range': 'target_binary_range',
        'description': 'description',
        'is_disabled': 'is_disabled',
        'is_mandatory': 'is_mandatory',
        'rollout': 'rollout'
    }

    def __init__(self, target_binary_range=None, description=None, is_disabled=None, is_mandatory=None, rollout=None):  # noqa: E501
        """CodePushReleaseInfo - a model defined in Swagger"""  # noqa: E501
        self._target_binary_range = None
        self._description = None
        self._is_disabled = None
        self._is_mandatory = None
        self._rollout = None
        self.discriminator = None
        if target_binary_range is not None:
            self.target_binary_range = target_binary_range
        if description is not None:
            self.description = description
        if is_disabled is not None:
            self.is_disabled = is_disabled
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if rollout is not None:
            self.rollout = rollout

    @property
    def target_binary_range(self):
        """Gets the target_binary_range of this CodePushReleaseInfo.  # noqa: E501


        :return: The target_binary_range of this CodePushReleaseInfo.  # noqa: E501
        :rtype: string
        """
        return self._target_binary_range

    @target_binary_range.setter
    def target_binary_range(self, target_binary_range):
        """Sets the target_binary_range of this CodePushReleaseInfo.


        :param target_binary_range: The target_binary_range of this CodePushReleaseInfo.  # noqa: E501
        :type: string
        """

        self._target_binary_range = target_binary_range

    @property
    def description(self):
        """Gets the description of this CodePushReleaseInfo.  # noqa: E501


        :return: The description of this CodePushReleaseInfo.  # noqa: E501
        :rtype: string
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodePushReleaseInfo.


        :param description: The description of this CodePushReleaseInfo.  # noqa: E501
        :type: string
        """

        self._description = description

    @property
    def is_disabled(self):
        """Gets the is_disabled of this CodePushReleaseInfo.  # noqa: E501


        :return: The is_disabled of this CodePushReleaseInfo.  # noqa: E501
        :rtype: boolean
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this CodePushReleaseInfo.


        :param is_disabled: The is_disabled of this CodePushReleaseInfo.  # noqa: E501
        :type: boolean
        """

        self._is_disabled = is_disabled

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this CodePushReleaseInfo.  # noqa: E501


        :return: The is_mandatory of this CodePushReleaseInfo.  # noqa: E501
        :rtype: boolean
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this CodePushReleaseInfo.


        :param is_mandatory: The is_mandatory of this CodePushReleaseInfo.  # noqa: E501
        :type: boolean
        """

        self._is_mandatory = is_mandatory

    @property
    def rollout(self):
        """Gets the rollout of this CodePushReleaseInfo.  # noqa: E501


        :return: The rollout of this CodePushReleaseInfo.  # noqa: E501
        :rtype: integer
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout):
        """Sets the rollout of this CodePushReleaseInfo.


        :param rollout: The rollout of this CodePushReleaseInfo.  # noqa: E501
        :type: integer
        """

        self._rollout = rollout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodePushReleaseInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
