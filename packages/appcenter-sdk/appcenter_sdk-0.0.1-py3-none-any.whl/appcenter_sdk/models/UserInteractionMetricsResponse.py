# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class UserInteractionMetricsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'less_than_100_apps': 'boolean',
        'has_more_than_1_release': 'boolean'
    }

    attribute_map = {
        'less_than_100_apps': 'less_than_100_apps',
        'has_more_than_1_release': 'has_more_than_1_release'
    }

    def __init__(self, less_than_100_apps=None, has_more_than_1_release=None):  # noqa: E501
        """UserInteractionMetricsResponse - a model defined in Swagger"""  # noqa: E501
        self._less_than_100_apps = None
        self._has_more_than_1_release = None
        self.discriminator = None
        if less_than_100_apps is not None:
            self.less_than_100_apps = less_than_100_apps
        if has_more_than_1_release is not None:
            self.has_more_than_1_release = has_more_than_1_release

    @property
    def less_than_100_apps(self):
        """Gets the less_than_100_apps of this UserInteractionMetricsResponse.  # noqa: E501

        check if the user has less than 100 apps.  # noqa: E501

        :return: The less_than_100_apps of this UserInteractionMetricsResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._less_than_100_apps

    @less_than_100_apps.setter
    def less_than_100_apps(self, less_than_100_apps):
        """Sets the less_than_100_apps of this UserInteractionMetricsResponse.

        check if the user has less than 100 apps.  # noqa: E501

        :param less_than_100_apps: The less_than_100_apps of this UserInteractionMetricsResponse.  # noqa: E501
        :type: boolean
        """

        self._less_than_100_apps = less_than_100_apps

    @property
    def has_more_than_1_release(self):
        """Gets the has_more_than_1_release of this UserInteractionMetricsResponse.  # noqa: E501

        check if the user's whole apps has more than 1 releases.  # noqa: E501

        :return: The has_more_than_1_release of this UserInteractionMetricsResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._has_more_than_1_release

    @has_more_than_1_release.setter
    def has_more_than_1_release(self, has_more_than_1_release):
        """Sets the has_more_than_1_release of this UserInteractionMetricsResponse.

        check if the user's whole apps has more than 1 releases.  # noqa: E501

        :param has_more_than_1_release: The has_more_than_1_release of this UserInteractionMetricsResponse.  # noqa: E501
        :type: boolean
        """

        self._has_more_than_1_release = has_more_than_1_release

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInteractionMetricsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
