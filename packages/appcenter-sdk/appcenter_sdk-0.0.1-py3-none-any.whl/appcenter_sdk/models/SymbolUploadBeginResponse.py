# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class SymbolUploadBeginResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol_upload_id': 'string',
        'upload_url': 'string',
        'expiration_date': 'string'
    }

    attribute_map = {
        'symbol_upload_id': 'symbol_upload_id',
        'upload_url': 'upload_url',
        'expiration_date': 'expiration_date'
    }

    def __init__(self, symbol_upload_id=None, upload_url=None, expiration_date=None):  # noqa: E501
        """SymbolUploadBeginResponse - a model defined in Swagger"""  # noqa: E501
        self._symbol_upload_id = None
        self._upload_url = None
        self._expiration_date = None
        self.discriminator = None
        self.symbol_upload_id = symbol_upload_id
        self.upload_url = upload_url
        self.expiration_date = expiration_date

    @property
    def symbol_upload_id(self):
        """Gets the symbol_upload_id of this SymbolUploadBeginResponse.  # noqa: E501

        The id for the current upload  # noqa: E501

        :return: The symbol_upload_id of this SymbolUploadBeginResponse.  # noqa: E501
        :rtype: string
        """
        return self._symbol_upload_id

    @symbol_upload_id.setter
    def symbol_upload_id(self, symbol_upload_id):
        """Sets the symbol_upload_id of this SymbolUploadBeginResponse.

        The id for the current upload  # noqa: E501

        :param symbol_upload_id: The symbol_upload_id of this SymbolUploadBeginResponse.  # noqa: E501
        :type: string
        """
        if symbol_upload_id is None:
            raise ValueError("Invalid value for `symbol_upload_id`, must not be `None`")  # noqa: E501

        self._symbol_upload_id = symbol_upload_id

    @property
    def upload_url(self):
        """Gets the upload_url of this SymbolUploadBeginResponse.  # noqa: E501

        The URL where the client needs to upload the symbol blob to  # noqa: E501

        :return: The upload_url of this SymbolUploadBeginResponse.  # noqa: E501
        :rtype: string
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this SymbolUploadBeginResponse.

        The URL where the client needs to upload the symbol blob to  # noqa: E501

        :param upload_url: The upload_url of this SymbolUploadBeginResponse.  # noqa: E501
        :type: string
        """
        if upload_url is None:
            raise ValueError("Invalid value for `upload_url`, must not be `None`")  # noqa: E501

        self._upload_url = upload_url

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SymbolUploadBeginResponse.  # noqa: E501

        Describes how long the upload_url is valid  # noqa: E501

        :return: The expiration_date of this SymbolUploadBeginResponse.  # noqa: E501
        :rtype: string
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SymbolUploadBeginResponse.

        Describes how long the upload_url is valid  # noqa: E501

        :param expiration_date: The expiration_date of this SymbolUploadBeginResponse.  # noqa: E501
        :type: string
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SymbolUploadBeginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
