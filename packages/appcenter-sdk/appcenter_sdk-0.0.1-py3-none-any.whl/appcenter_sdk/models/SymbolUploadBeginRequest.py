# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class SymbolUploadBeginRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    Apple = "Apple"
    Breakpad = "Breakpad"
    AndroidProguard = "AndroidProguard"
    UWP = "UWP"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol_type': 'string',
        'client_callback': 'string',
        'file_name': 'string',
        'build': 'string',
        'version': 'string'
    }

    attribute_map = {
        'symbol_type': 'symbol_type',
        'client_callback': 'client_callback',
        'file_name': 'file_name',
        'build': 'build',
        'version': 'version'
    }

    def __init__(self, symbol_type=None, client_callback=None, file_name=None, build=None, version=None):  # noqa: E501
        """SymbolUploadBeginRequest - a model defined in Swagger"""  # noqa: E501
        self._symbol_type = None
        self._client_callback = None
        self._file_name = None
        self._build = None
        self._version = None
        self.discriminator = None
        self.symbol_type = symbol_type
        if client_callback is not None:
            self.client_callback = client_callback
        if file_name is not None:
            self.file_name = file_name
        if build is not None:
            self.build = build
        if version is not None:
            self.version = version

    @property
    def symbol_type(self):
        """Gets the symbol_type of this SymbolUploadBeginRequest.  # noqa: E501

        The type of the symbol for the current symbol upload  # noqa: E501

        :return: The symbol_type of this SymbolUploadBeginRequest.  # noqa: E501
        :rtype: string
        """
        return self._symbol_type

    @symbol_type.setter
    def symbol_type(self, symbol_type):
        """Sets the symbol_type of this SymbolUploadBeginRequest.

        The type of the symbol for the current symbol upload  # noqa: E501

        :param symbol_type: The symbol_type of this SymbolUploadBeginRequest.  # noqa: E501
        :type: string
        """
        if symbol_type is None:
            raise ValueError("Invalid value for `symbol_type`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, undefined, undefined, ]  # noqa: E501

        self._symbol_type = symbol_type

    @property
    def client_callback(self):
        """Gets the client_callback of this SymbolUploadBeginRequest.  # noqa: E501

        The callback URL that the client can optionally provide to get status updates for the current symbol upload  # noqa: E501

        :return: The client_callback of this SymbolUploadBeginRequest.  # noqa: E501
        :rtype: string
        """
        return self._client_callback

    @client_callback.setter
    def client_callback(self, client_callback):
        """Sets the client_callback of this SymbolUploadBeginRequest.

        The callback URL that the client can optionally provide to get status updates for the current symbol upload  # noqa: E501

        :param client_callback: The client_callback of this SymbolUploadBeginRequest.  # noqa: E501
        :type: string
        """

        self._client_callback = client_callback

    @property
    def file_name(self):
        """Gets the file_name of this SymbolUploadBeginRequest.  # noqa: E501

        The file name for the symbol upload  # noqa: E501

        :return: The file_name of this SymbolUploadBeginRequest.  # noqa: E501
        :rtype: string
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SymbolUploadBeginRequest.

        The file name for the symbol upload  # noqa: E501

        :param file_name: The file_name of this SymbolUploadBeginRequest.  # noqa: E501
        :type: string
        """

        self._file_name = file_name

    @property
    def build(self):
        """Gets the build of this SymbolUploadBeginRequest.  # noqa: E501

        The build number. Optional for Apple. Required for Android.  # noqa: E501

        :return: The build of this SymbolUploadBeginRequest.  # noqa: E501
        :rtype: string
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this SymbolUploadBeginRequest.

        The build number. Optional for Apple. Required for Android.  # noqa: E501

        :param build: The build of this SymbolUploadBeginRequest.  # noqa: E501
        :type: string
        """

        self._build = build

    @property
    def version(self):
        """Gets the version of this SymbolUploadBeginRequest.  # noqa: E501

        The version number. Optional for Apple. Required for Android.  # noqa: E501

        :return: The version of this SymbolUploadBeginRequest.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SymbolUploadBeginRequest.

        The version number. Optional for Apple. Required for Android.  # noqa: E501

        :param version: The version of this SymbolUploadBeginRequest.  # noqa: E501
        :type: string
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SymbolUploadBeginRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
