# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class SymbolUpload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    User = "User"
    System = "System"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol_upload_id': 'string',
        'app_id': 'string',
        'user': '',
        'status': 'string',
        'symbol_type': 'string',
        'symbols_uploaded': 'array',
        'origin': 'string',
        'file_name': 'string',
        'file_size': 'number',
        'timestamp': 'string'
    }

    attribute_map = {
        'symbol_upload_id': 'symbol_upload_id',
        'app_id': 'app_id',
        'user': 'user',
        'status': 'status',
        'symbol_type': 'symbol_type',
        'symbols_uploaded': 'symbols_uploaded',
        'origin': 'origin',
        'file_name': 'file_name',
        'file_size': 'file_size',
        'timestamp': 'timestamp'
    }

    def __init__(self, symbol_upload_id=None, app_id=None, user=None, status=None, symbol_type=None, symbols_uploaded=None, origin=None, file_name=None, file_size=None, timestamp=None):  # noqa: E501
        """SymbolUpload - a model defined in Swagger"""  # noqa: E501
        self._symbol_upload_id = None
        self._app_id = None
        self._user = None
        self._status = None
        self._symbol_type = None
        self._symbols_uploaded = None
        self._origin = None
        self._file_name = None
        self._file_size = None
        self._timestamp = None
        self.discriminator = None
        self.symbol_upload_id = symbol_upload_id
        self.app_id = app_id
        if user is not None:
            self.user = user
        self.status = status
        self.symbol_type = symbol_type
        if symbols_uploaded is not None:
            self.symbols_uploaded = symbols_uploaded
        if origin is not None:
            self.origin = origin
        if file_name is not None:
            self.file_name = file_name
        if file_size is not None:
            self.file_size = file_size
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def symbol_upload_id(self):
        """Gets the symbol_upload_id of this SymbolUpload.  # noqa: E501

        The id for the current symbol upload  # noqa: E501

        :return: The symbol_upload_id of this SymbolUpload.  # noqa: E501
        :rtype: string
        """
        return self._symbol_upload_id

    @symbol_upload_id.setter
    def symbol_upload_id(self, symbol_upload_id):
        """Sets the symbol_upload_id of this SymbolUpload.

        The id for the current symbol upload  # noqa: E501

        :param symbol_upload_id: The symbol_upload_id of this SymbolUpload.  # noqa: E501
        :type: string
        """
        if symbol_upload_id is None:
            raise ValueError("Invalid value for `symbol_upload_id`, must not be `None`")  # noqa: E501

        self._symbol_upload_id = symbol_upload_id

    @property
    def app_id(self):
        """Gets the app_id of this SymbolUpload.  # noqa: E501

        The application that this symbol upload belongs to  # noqa: E501

        :return: The app_id of this SymbolUpload.  # noqa: E501
        :rtype: string
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SymbolUpload.

        The application that this symbol upload belongs to  # noqa: E501

        :param app_id: The app_id of this SymbolUpload.  # noqa: E501
        :type: string
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def user(self):
        """Gets the user of this SymbolUpload.  # noqa: E501


        :return: The user of this SymbolUpload.  # noqa: E501
        :rtype: 
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SymbolUpload.


        :param user: The user of this SymbolUpload.  # noqa: E501
        :type: 
        """

        self._user = user

    @property
    def status(self):
        """Gets the status of this SymbolUpload.  # noqa: E501

        The current status for the symbol upload  # noqa: E501

        :return: The status of this SymbolUpload.  # noqa: E501
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SymbolUpload.

        The current status for the symbol upload  # noqa: E501

        :param status: The status of this SymbolUpload.  # noqa: E501
        :type: string
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._status = status

    @property
    def symbol_type(self):
        """Gets the symbol_type of this SymbolUpload.  # noqa: E501

        The type of the symbol for the current symbol upload  # noqa: E501

        :return: The symbol_type of this SymbolUpload.  # noqa: E501
        :rtype: string
        """
        return self._symbol_type

    @symbol_type.setter
    def symbol_type(self, symbol_type):
        """Sets the symbol_type of this SymbolUpload.

        The type of the symbol for the current symbol upload  # noqa: E501

        :param symbol_type: The symbol_type of this SymbolUpload.  # noqa: E501
        :type: string
        """
        if symbol_type is None:
            raise ValueError("Invalid value for `symbol_type`, must not be `None`")  # noqa: E501
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._symbol_type = symbol_type

    @property
    def symbols_uploaded(self):
        """Gets the symbols_uploaded of this SymbolUpload.  # noqa: E501

        The symbols found in the upload  # noqa: E501

        :return: The symbols_uploaded of this SymbolUpload.  # noqa: E501
        :rtype: array
        """
        return self._symbols_uploaded

    @symbols_uploaded.setter
    def symbols_uploaded(self, symbols_uploaded):
        """Sets the symbols_uploaded of this SymbolUpload.

        The symbols found in the upload  # noqa: E501

        :param symbols_uploaded: The symbols_uploaded of this SymbolUpload.  # noqa: E501
        :type: array
        """

        self._symbols_uploaded = symbols_uploaded

    @property
    def origin(self):
        """Gets the origin of this SymbolUpload.  # noqa: E501

        The origin of the symbol upload  # noqa: E501

        :return: The origin of this SymbolUpload.  # noqa: E501
        :rtype: string
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SymbolUpload.

        The origin of the symbol upload  # noqa: E501

        :param origin: The origin of this SymbolUpload.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, ]  # noqa: E501

        self._origin = origin

    @property
    def file_name(self):
        """Gets the file_name of this SymbolUpload.  # noqa: E501

        The file name for the symbol upload  # noqa: E501

        :return: The file_name of this SymbolUpload.  # noqa: E501
        :rtype: string
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SymbolUpload.

        The file name for the symbol upload  # noqa: E501

        :param file_name: The file_name of this SymbolUpload.  # noqa: E501
        :type: string
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this SymbolUpload.  # noqa: E501

        The size of the file in Mebibytes  # noqa: E501

        :return: The file_size of this SymbolUpload.  # noqa: E501
        :rtype: number
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this SymbolUpload.

        The size of the file in Mebibytes  # noqa: E501

        :param file_size: The file_size of this SymbolUpload.  # noqa: E501
        :type: number
        """

        self._file_size = file_size

    @property
    def timestamp(self):
        """Gets the timestamp of this SymbolUpload.  # noqa: E501

        When the symbol upload was committed, or last transaction time if not committed  # noqa: E501

        :return: The timestamp of this SymbolUpload.  # noqa: E501
        :rtype: string
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SymbolUpload.

        When the symbol upload was committed, or last transaction time if not committed  # noqa: E501

        :param timestamp: The timestamp of this SymbolUpload.  # noqa: E501
        :type: string
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SymbolUpload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
