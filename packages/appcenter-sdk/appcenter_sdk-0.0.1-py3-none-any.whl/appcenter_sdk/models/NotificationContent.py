# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class NotificationContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'string',
        'title': 'string',
        'body': 'string',
        'custom_data': 'object'
    }

    attribute_map = {
        'name': 'name',
        'title': 'title',
        'body': 'body',
        'custom_data': 'custom_data'
    }

    def __init__(self, name=None, title=None, body=None, custom_data=None):  # noqa: E501
        """NotificationContent - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._title = None
        self._body = None
        self._custom_data = None
        self.discriminator = None
        self.name = name
        if title is not None:
            self.title = title
        self.body = body
        if custom_data is not None:
            self.custom_data = custom_data

    @property
    def name(self):
        """Gets the name of this NotificationContent.  # noqa: E501

        Notification name  # noqa: E501

        :return: The name of this NotificationContent.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationContent.

        Notification name  # noqa: E501

        :param name: The name of this NotificationContent.  # noqa: E501
        :type: string
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this NotificationContent.  # noqa: E501

        Notification title  # noqa: E501

        :return: The title of this NotificationContent.  # noqa: E501
        :rtype: string
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NotificationContent.

        Notification title  # noqa: E501

        :param title: The title of this NotificationContent.  # noqa: E501
        :type: string
        """

        self._title = title

    @property
    def body(self):
        """Gets the body of this NotificationContent.  # noqa: E501

        Notification body  # noqa: E501

        :return: The body of this NotificationContent.  # noqa: E501
        :rtype: string
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this NotificationContent.

        Notification body  # noqa: E501

        :param body: The body of this NotificationContent.  # noqa: E501
        :type: string
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def custom_data(self):
        """Gets the custom_data of this NotificationContent.  # noqa: E501

        Notification custom data (such as badge, color, sound, etc.)  # noqa: E501

        :return: The custom_data of this NotificationContent.  # noqa: E501
        :rtype: object
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this NotificationContent.

        Notification custom data (such as badge, color, sound, etc.)  # noqa: E501

        :param custom_data: The custom_data of this NotificationContent.  # noqa: E501
        :type: object
        """

        self._custom_data = custom_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
