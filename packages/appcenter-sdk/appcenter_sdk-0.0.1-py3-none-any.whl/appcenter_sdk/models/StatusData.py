# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class StatusData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'string',
        'storetype': 'string',
        'track': 'string',
        'version': 'string'
    }

    attribute_map = {
        'status': 'status',
        'storetype': 'storetype',
        'track': 'track',
        'version': 'version'
    }

    def __init__(self, status=None, storetype=None, track=None, version=None):  # noqa: E501
        """StatusData - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._storetype = None
        self._track = None
        self._version = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if storetype is not None:
            self.storetype = storetype
        if track is not None:
            self.track = track
        if version is not None:
            self.version = version

    @property
    def status(self):
        """Gets the status of this StatusData.  # noqa: E501

        status from store  # noqa: E501

        :return: The status of this StatusData.  # noqa: E501
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusData.

        status from store  # noqa: E501

        :param status: The status of this StatusData.  # noqa: E501
        :type: string
        """

        self._status = status

    @property
    def storetype(self):
        """Gets the storetype of this StatusData.  # noqa: E501

        store type  # noqa: E501

        :return: The storetype of this StatusData.  # noqa: E501
        :rtype: string
        """
        return self._storetype

    @storetype.setter
    def storetype(self, storetype):
        """Sets the storetype of this StatusData.

        store type  # noqa: E501

        :param storetype: The storetype of this StatusData.  # noqa: E501
        :type: string
        """

        self._storetype = storetype

    @property
    def track(self):
        """Gets the track of this StatusData.  # noqa: E501

        track information from store  # noqa: E501

        :return: The track of this StatusData.  # noqa: E501
        :rtype: string
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this StatusData.

        track information from store  # noqa: E501

        :param track: The track of this StatusData.  # noqa: E501
        :type: string
        """

        self._track = track

    @property
    def version(self):
        """Gets the version of this StatusData.  # noqa: E501

        version of the app from store  # noqa: E501

        :return: The version of this StatusData.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StatusData.

        version of the app from store  # noqa: E501

        :param version: The version of this StatusData.  # noqa: E501
        :type: string
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
