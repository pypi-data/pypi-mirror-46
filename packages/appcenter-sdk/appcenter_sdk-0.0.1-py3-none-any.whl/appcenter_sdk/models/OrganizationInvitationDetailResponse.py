# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class OrganizationInvitationDetailResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    appcenter = "appcenter"
    hockeyapp = "hockeyapp"
    codepush = "codepush"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'organization': '',
        'email': 'string',
        'invited_by': '',
        'is_existing_user': 'boolean',
        'role': 'string'
    }

    attribute_map = {
        'id': 'id',
        'organization': 'organization',
        'email': 'email',
        'invited_by': 'invited_by',
        'is_existing_user': 'is_existing_user',
        'role': 'role'
    }

    def __init__(self, id=None, organization=None, email=None, invited_by=None, is_existing_user=None, role=None):  # noqa: E501
        """OrganizationInvitationDetailResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._organization = None
        self._email = None
        self._invited_by = None
        self._is_existing_user = None
        self._role = None
        self.discriminator = None
        self.id = id
        self.organization = organization
        self.email = email
        self.invited_by = invited_by
        self.is_existing_user = is_existing_user
        if role is not None:
            self.role = role

    @property
    def id(self):
        """Gets the id of this OrganizationInvitationDetailResponse.  # noqa: E501

        The unique ID (UUID) of the invitation  # noqa: E501

        :return: The id of this OrganizationInvitationDetailResponse.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationInvitationDetailResponse.

        The unique ID (UUID) of the invitation  # noqa: E501

        :param id: The id of this OrganizationInvitationDetailResponse.  # noqa: E501
        :type: string
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def organization(self):
        """Gets the organization of this OrganizationInvitationDetailResponse.  # noqa: E501


        :return: The organization of this OrganizationInvitationDetailResponse.  # noqa: E501
        :rtype: 
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrganizationInvitationDetailResponse.


        :param organization: The organization of this OrganizationInvitationDetailResponse.  # noqa: E501
        :type: 
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def email(self):
        """Gets the email of this OrganizationInvitationDetailResponse.  # noqa: E501

        The email address of the invited user  # noqa: E501

        :return: The email of this OrganizationInvitationDetailResponse.  # noqa: E501
        :rtype: string
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationInvitationDetailResponse.

        The email address of the invited user  # noqa: E501

        :param email: The email of this OrganizationInvitationDetailResponse.  # noqa: E501
        :type: string
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def invited_by(self):
        """Gets the invited_by of this OrganizationInvitationDetailResponse.  # noqa: E501


        :return: The invited_by of this OrganizationInvitationDetailResponse.  # noqa: E501
        :rtype: 
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this OrganizationInvitationDetailResponse.


        :param invited_by: The invited_by of this OrganizationInvitationDetailResponse.  # noqa: E501
        :type: 
        """
        if invited_by is None:
            raise ValueError("Invalid value for `invited_by`, must not be `None`")  # noqa: E501

        self._invited_by = invited_by

    @property
    def is_existing_user(self):
        """Gets the is_existing_user of this OrganizationInvitationDetailResponse.  # noqa: E501

        Indicates whether the invited user already exists  # noqa: E501

        :return: The is_existing_user of this OrganizationInvitationDetailResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._is_existing_user

    @is_existing_user.setter
    def is_existing_user(self, is_existing_user):
        """Sets the is_existing_user of this OrganizationInvitationDetailResponse.

        Indicates whether the invited user already exists  # noqa: E501

        :param is_existing_user: The is_existing_user of this OrganizationInvitationDetailResponse.  # noqa: E501
        :type: boolean
        """
        if is_existing_user is None:
            raise ValueError("Invalid value for `is_existing_user`, must not be `None`")  # noqa: E501

        self._is_existing_user = is_existing_user

    @property
    def role(self):
        """Gets the role of this OrganizationInvitationDetailResponse.  # noqa: E501

        The role assigned to the invited user  # noqa: E501

        :return: The role of this OrganizationInvitationDetailResponse.  # noqa: E501
        :rtype: string
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrganizationInvitationDetailResponse.

        The role assigned to the invited user  # noqa: E501

        :param role: The role of this OrganizationInvitationDetailResponse.  # noqa: E501
        :type: string
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationInvitationDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
