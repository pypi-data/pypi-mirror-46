# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class FileAsset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'string',
        'location': 'string',
        'token': 'string',
        'upload_domain': 'string',
        'upload_window_location': 'string',
        'url_encoded_token': 'string'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'token': 'token',
        'upload_domain': 'upload_domain',
        'upload_window_location': 'upload_window_location',
        'url_encoded_token': 'url_encoded_token'
    }

    def __init__(self, id=None, location=None, token=None, upload_domain=None, upload_window_location=None, url_encoded_token=None):  # noqa: E501
        """FileAsset - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._location = None
        self._token = None
        self._upload_domain = None
        self._upload_window_location = None
        self._url_encoded_token = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if token is not None:
            self.token = token
        if upload_domain is not None:
            self.upload_domain = upload_domain
        if upload_window_location is not None:
            self.upload_window_location = upload_window_location
        if url_encoded_token is not None:
            self.url_encoded_token = url_encoded_token

    @property
    def id(self):
        """Gets the id of this FileAsset.  # noqa: E501


        :return: The id of this FileAsset.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileAsset.


        :param id: The id of this FileAsset.  # noqa: E501
        :type: string
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this FileAsset.  # noqa: E501


        :return: The location of this FileAsset.  # noqa: E501
        :rtype: string
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FileAsset.


        :param location: The location of this FileAsset.  # noqa: E501
        :type: string
        """

        self._location = location

    @property
    def token(self):
        """Gets the token of this FileAsset.  # noqa: E501


        :return: The token of this FileAsset.  # noqa: E501
        :rtype: string
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this FileAsset.


        :param token: The token of this FileAsset.  # noqa: E501
        :type: string
        """

        self._token = token

    @property
    def upload_domain(self):
        """Gets the upload_domain of this FileAsset.  # noqa: E501


        :return: The upload_domain of this FileAsset.  # noqa: E501
        :rtype: string
        """
        return self._upload_domain

    @upload_domain.setter
    def upload_domain(self, upload_domain):
        """Sets the upload_domain of this FileAsset.


        :param upload_domain: The upload_domain of this FileAsset.  # noqa: E501
        :type: string
        """

        self._upload_domain = upload_domain

    @property
    def upload_window_location(self):
        """Gets the upload_window_location of this FileAsset.  # noqa: E501


        :return: The upload_window_location of this FileAsset.  # noqa: E501
        :rtype: string
        """
        return self._upload_window_location

    @upload_window_location.setter
    def upload_window_location(self, upload_window_location):
        """Sets the upload_window_location of this FileAsset.


        :param upload_window_location: The upload_window_location of this FileAsset.  # noqa: E501
        :type: string
        """

        self._upload_window_location = upload_window_location

    @property
    def url_encoded_token(self):
        """Gets the url_encoded_token of this FileAsset.  # noqa: E501


        :return: The url_encoded_token of this FileAsset.  # noqa: E501
        :rtype: string
        """
        return self._url_encoded_token

    @url_encoded_token.setter
    def url_encoded_token(self, url_encoded_token):
        """Sets the url_encoded_token of this FileAsset.


        :param url_encoded_token: The url_encoded_token of this FileAsset.  # noqa: E501
        :type: string
        """

        self._url_encoded_token = url_encoded_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileAsset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
