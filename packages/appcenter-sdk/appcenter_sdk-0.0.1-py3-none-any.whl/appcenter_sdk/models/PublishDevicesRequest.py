# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class PublishDevicesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'string',
        'password': 'string',
        'account_service_connection_id': 'string',
        'publish_all_devices': 'boolean',
        'devices': 'array'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'account_service_connection_id': 'account_service_connection_id',
        'publish_all_devices': 'publish_all_devices',
        'devices': 'devices'
    }

    def __init__(self, username=None, password=None, account_service_connection_id=None, publish_all_devices=None, devices=None):  # noqa: E501
        """PublishDevicesRequest - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._password = None
        self._account_service_connection_id = None
        self._publish_all_devices = None
        self._devices = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if account_service_connection_id is not None:
            self.account_service_connection_id = account_service_connection_id
        if publish_all_devices is not None:
            self.publish_all_devices = publish_all_devices
        if devices is not None:
            self.devices = devices

    @property
    def username(self):
        """Gets the username of this PublishDevicesRequest.  # noqa: E501

        The username for the Apple Developer account to publish the devices to.  # noqa: E501

        :return: The username of this PublishDevicesRequest.  # noqa: E501
        :rtype: string
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PublishDevicesRequest.

        The username for the Apple Developer account to publish the devices to.  # noqa: E501

        :param username: The username of this PublishDevicesRequest.  # noqa: E501
        :type: string
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this PublishDevicesRequest.  # noqa: E501

        The password for the Apple Developer account to publish the devices to.  # noqa: E501

        :return: The password of this PublishDevicesRequest.  # noqa: E501
        :rtype: string
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PublishDevicesRequest.

        The password for the Apple Developer account to publish the devices to.  # noqa: E501

        :param password: The password of this PublishDevicesRequest.  # noqa: E501
        :type: string
        """

        self._password = password

    @property
    def account_service_connection_id(self):
        """Gets the account_service_connection_id of this PublishDevicesRequest.  # noqa: E501

        The service_connection_id of the stored Apple credentials instead of username, password.  # noqa: E501

        :return: The account_service_connection_id of this PublishDevicesRequest.  # noqa: E501
        :rtype: string
        """
        return self._account_service_connection_id

    @account_service_connection_id.setter
    def account_service_connection_id(self, account_service_connection_id):
        """Sets the account_service_connection_id of this PublishDevicesRequest.

        The service_connection_id of the stored Apple credentials instead of username, password.  # noqa: E501

        :param account_service_connection_id: The account_service_connection_id of this PublishDevicesRequest.  # noqa: E501
        :type: string
        """

        self._account_service_connection_id = account_service_connection_id

    @property
    def publish_all_devices(self):
        """Gets the publish_all_devices of this PublishDevicesRequest.  # noqa: E501

        When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.  # noqa: E501

        :return: The publish_all_devices of this PublishDevicesRequest.  # noqa: E501
        :rtype: boolean
        """
        return self._publish_all_devices

    @publish_all_devices.setter
    def publish_all_devices(self, publish_all_devices):
        """Sets the publish_all_devices of this PublishDevicesRequest.

        When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.  # noqa: E501

        :param publish_all_devices: The publish_all_devices of this PublishDevicesRequest.  # noqa: E501
        :type: boolean
        """

        self._publish_all_devices = publish_all_devices

    @property
    def devices(self):
        """Gets the devices of this PublishDevicesRequest.  # noqa: E501

        Array of device UDID's to be published to the Apple Developer account.  # noqa: E501

        :return: The devices of this PublishDevicesRequest.  # noqa: E501
        :rtype: array
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this PublishDevicesRequest.

        Array of device UDID's to be published to the Apple Developer account.  # noqa: E501

        :param devices: The devices of this PublishDevicesRequest.  # noqa: E501
        :type: array
        """

        self._devices = devices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublishDevicesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
