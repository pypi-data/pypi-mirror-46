# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class CodePushStatusMetricMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_key': 'string',
        'label': 'string',
        'app_version': 'string',
        'previous_deployment_key': 'string',
        'previous_label_or_app_version': 'string',
        'status': 'string',
        'client_unique_id': 'string'
    }

    attribute_map = {
        'deployment_key': 'deployment_key',
        'label': 'label',
        'app_version': 'app_version',
        'previous_deployment_key': 'previous_deployment_key',
        'previous_label_or_app_version': 'previous_label_or_app_version',
        'status': 'status',
        'client_unique_id': 'client_unique_id'
    }

    def __init__(self, deployment_key=None, label=None, app_version=None, previous_deployment_key=None, previous_label_or_app_version=None, status=None, client_unique_id=None):  # noqa: E501
        """CodePushStatusMetricMetadata - a model defined in Swagger"""  # noqa: E501
        self._deployment_key = None
        self._label = None
        self._app_version = None
        self._previous_deployment_key = None
        self._previous_label_or_app_version = None
        self._status = None
        self._client_unique_id = None
        self.discriminator = None
        self.deployment_key = deployment_key
        if label is not None:
            self.label = label
        if app_version is not None:
            self.app_version = app_version
        if previous_deployment_key is not None:
            self.previous_deployment_key = previous_deployment_key
        if previous_label_or_app_version is not None:
            self.previous_label_or_app_version = previous_label_or_app_version
        if status is not None:
            self.status = status
        if client_unique_id is not None:
            self.client_unique_id = client_unique_id

    @property
    def deployment_key(self):
        """Gets the deployment_key of this CodePushStatusMetricMetadata.  # noqa: E501


        :return: The deployment_key of this CodePushStatusMetricMetadata.  # noqa: E501
        :rtype: string
        """
        return self._deployment_key

    @deployment_key.setter
    def deployment_key(self, deployment_key):
        """Sets the deployment_key of this CodePushStatusMetricMetadata.


        :param deployment_key: The deployment_key of this CodePushStatusMetricMetadata.  # noqa: E501
        :type: string
        """
        if deployment_key is None:
            raise ValueError("Invalid value for `deployment_key`, must not be `None`")  # noqa: E501

        self._deployment_key = deployment_key

    @property
    def label(self):
        """Gets the label of this CodePushStatusMetricMetadata.  # noqa: E501


        :return: The label of this CodePushStatusMetricMetadata.  # noqa: E501
        :rtype: string
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CodePushStatusMetricMetadata.


        :param label: The label of this CodePushStatusMetricMetadata.  # noqa: E501
        :type: string
        """

        self._label = label

    @property
    def app_version(self):
        """Gets the app_version of this CodePushStatusMetricMetadata.  # noqa: E501


        :return: The app_version of this CodePushStatusMetricMetadata.  # noqa: E501
        :rtype: string
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this CodePushStatusMetricMetadata.


        :param app_version: The app_version of this CodePushStatusMetricMetadata.  # noqa: E501
        :type: string
        """

        self._app_version = app_version

    @property
    def previous_deployment_key(self):
        """Gets the previous_deployment_key of this CodePushStatusMetricMetadata.  # noqa: E501


        :return: The previous_deployment_key of this CodePushStatusMetricMetadata.  # noqa: E501
        :rtype: string
        """
        return self._previous_deployment_key

    @previous_deployment_key.setter
    def previous_deployment_key(self, previous_deployment_key):
        """Sets the previous_deployment_key of this CodePushStatusMetricMetadata.


        :param previous_deployment_key: The previous_deployment_key of this CodePushStatusMetricMetadata.  # noqa: E501
        :type: string
        """

        self._previous_deployment_key = previous_deployment_key

    @property
    def previous_label_or_app_version(self):
        """Gets the previous_label_or_app_version of this CodePushStatusMetricMetadata.  # noqa: E501


        :return: The previous_label_or_app_version of this CodePushStatusMetricMetadata.  # noqa: E501
        :rtype: string
        """
        return self._previous_label_or_app_version

    @previous_label_or_app_version.setter
    def previous_label_or_app_version(self, previous_label_or_app_version):
        """Sets the previous_label_or_app_version of this CodePushStatusMetricMetadata.


        :param previous_label_or_app_version: The previous_label_or_app_version of this CodePushStatusMetricMetadata.  # noqa: E501
        :type: string
        """

        self._previous_label_or_app_version = previous_label_or_app_version

    @property
    def status(self):
        """Gets the status of this CodePushStatusMetricMetadata.  # noqa: E501


        :return: The status of this CodePushStatusMetricMetadata.  # noqa: E501
        :rtype: string
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodePushStatusMetricMetadata.


        :param status: The status of this CodePushStatusMetricMetadata.  # noqa: E501
        :type: string
        """

        self._status = status

    @property
    def client_unique_id(self):
        """Gets the client_unique_id of this CodePushStatusMetricMetadata.  # noqa: E501


        :return: The client_unique_id of this CodePushStatusMetricMetadata.  # noqa: E501
        :rtype: string
        """
        return self._client_unique_id

    @client_unique_id.setter
    def client_unique_id(self, client_unique_id):
        """Sets the client_unique_id of this CodePushStatusMetricMetadata.


        :param client_unique_id: The client_unique_id of this CodePushStatusMetricMetadata.  # noqa: E501
        :type: string
        """

        self._client_unique_id = client_unique_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodePushStatusMetricMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
