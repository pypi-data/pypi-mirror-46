# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class DistributionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    store = "store"
    group = "group"
    tester = "tester"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destinations': 'array',
        'release_notes': 'string',
        'mandatory_update': 'boolean',
        'notify_testers': 'boolean'
    }

    attribute_map = {
        'destinations': 'destinations',
        'release_notes': 'release_notes',
        'mandatory_update': 'mandatory_update',
        'notify_testers': 'notify_testers'
    }

    def __init__(self, destinations=None, release_notes=None, mandatory_update=None, notify_testers=true):  # noqa: E501
        """DistributionRequest - a model defined in Swagger"""  # noqa: E501
        self._destinations = None
        self._release_notes = None
        self._mandatory_update = None
        self._notify_testers = None
        self.discriminator = None
        if destinations is not None:
            self.destinations = destinations
        if release_notes is not None:
            self.release_notes = release_notes
        if mandatory_update is not None:
            self.mandatory_update = mandatory_update
        if notify_testers is not None:
            self.notify_testers = notify_testers

    @property
    def destinations(self):
        """Gets the destinations of this DistributionRequest.  # noqa: E501

        Array of objects {id:string, type:string} with "id" being the distribution group ID, store ID, or tester email, and "type" being "group", "store", or "tester"  # noqa: E501

        :return: The destinations of this DistributionRequest.  # noqa: E501
        :rtype: array
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this DistributionRequest.

        Array of objects {id:string, type:string} with "id" being the distribution group ID, store ID, or tester email, and "type" being "group", "store", or "tester"  # noqa: E501

        :param destinations: The destinations of this DistributionRequest.  # noqa: E501
        :type: array
        """

        self._destinations = destinations

    @property
    def release_notes(self):
        """Gets the release_notes of this DistributionRequest.  # noqa: E501

        The release notes  # noqa: E501

        :return: The release_notes of this DistributionRequest.  # noqa: E501
        :rtype: string
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this DistributionRequest.

        The release notes  # noqa: E501

        :param release_notes: The release_notes of this DistributionRequest.  # noqa: E501
        :type: string
        """

        self._release_notes = release_notes

    @property
    def mandatory_update(self):
        """Gets the mandatory_update of this DistributionRequest.  # noqa: E501


        :return: The mandatory_update of this DistributionRequest.  # noqa: E501
        :rtype: boolean
        """
        return self._mandatory_update

    @mandatory_update.setter
    def mandatory_update(self, mandatory_update):
        """Sets the mandatory_update of this DistributionRequest.


        :param mandatory_update: The mandatory_update of this DistributionRequest.  # noqa: E501
        :type: boolean
        """

        self._mandatory_update = mandatory_update

    @property
    def notify_testers(self):
        """Gets the notify_testers of this DistributionRequest.  # noqa: E501


        :return: The notify_testers of this DistributionRequest.  # noqa: E501
        :rtype: boolean
        """
        return self._notify_testers

    @notify_testers.setter
    def notify_testers(self, notify_testers):
        """Sets the notify_testers of this DistributionRequest.


        :param notify_testers: The notify_testers of this DistributionRequest.  # noqa: E501
        :type: boolean
        """

        self._notify_testers = notify_testers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
