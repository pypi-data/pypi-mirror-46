# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AppleMappingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_connection_id': 'string',
        'apple_id': 'string',
        'bundle_identifier': 'string',
        'team_identifier': 'string'
    }

    attribute_map = {
        'service_connection_id': 'service_connection_id',
        'apple_id': 'apple_id',
        'bundle_identifier': 'bundle_identifier',
        'team_identifier': 'team_identifier'
    }

    def __init__(self, service_connection_id=None, apple_id=None, bundle_identifier=None, team_identifier=None):  # noqa: E501
        """AppleMappingRequest - a model defined in Swagger"""  # noqa: E501
        self._service_connection_id = None
        self._apple_id = None
        self._bundle_identifier = None
        self._team_identifier = None
        self.discriminator = None
        self.service_connection_id = service_connection_id
        if apple_id is not None:
            self.apple_id = apple_id
        if bundle_identifier is not None:
            self.bundle_identifier = bundle_identifier
        self.team_identifier = team_identifier

    @property
    def service_connection_id(self):
        """Gets the service_connection_id of this AppleMappingRequest.  # noqa: E501

        Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.  # noqa: E501

        :return: The service_connection_id of this AppleMappingRequest.  # noqa: E501
        :rtype: string
        """
        return self._service_connection_id

    @service_connection_id.setter
    def service_connection_id(self, service_connection_id):
        """Sets the service_connection_id of this AppleMappingRequest.

        Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.  # noqa: E501

        :param service_connection_id: The service_connection_id of this AppleMappingRequest.  # noqa: E501
        :type: string
        """
        if service_connection_id is None:
            raise ValueError("Invalid value for `service_connection_id`, must not be `None`")  # noqa: E501

        self._service_connection_id = service_connection_id

    @property
    def apple_id(self):
        """Gets the apple_id of this AppleMappingRequest.  # noqa: E501

        ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided  # noqa: E501

        :return: The apple_id of this AppleMappingRequest.  # noqa: E501
        :rtype: string
        """
        return self._apple_id

    @apple_id.setter
    def apple_id(self, apple_id):
        """Sets the apple_id of this AppleMappingRequest.

        ID of the apple application in apple store, takes precedence over bundle_identifier when both are provided  # noqa: E501

        :param apple_id: The apple_id of this AppleMappingRequest.  # noqa: E501
        :type: string
        """

        self._apple_id = apple_id

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this AppleMappingRequest.  # noqa: E501

        Bundle Identifier of the apple package  # noqa: E501

        :return: The bundle_identifier of this AppleMappingRequest.  # noqa: E501
        :rtype: string
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this AppleMappingRequest.

        Bundle Identifier of the apple package  # noqa: E501

        :param bundle_identifier: The bundle_identifier of this AppleMappingRequest.  # noqa: E501
        :type: string
        """

        self._bundle_identifier = bundle_identifier

    @property
    def team_identifier(self):
        """Gets the team_identifier of this AppleMappingRequest.  # noqa: E501

        ID of the Team associated with the app in apple store  # noqa: E501

        :return: The team_identifier of this AppleMappingRequest.  # noqa: E501
        :rtype: string
        """
        return self._team_identifier

    @team_identifier.setter
    def team_identifier(self, team_identifier):
        """Sets the team_identifier of this AppleMappingRequest.

        ID of the Team associated with the app in apple store  # noqa: E501

        :param team_identifier: The team_identifier of this AppleMappingRequest.  # noqa: E501
        :type: string
        """
        if team_identifier is None:
            raise ValueError("Invalid value for `team_identifier`, must not be `None`")  # noqa: E501

        self._team_identifier = team_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleMappingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
