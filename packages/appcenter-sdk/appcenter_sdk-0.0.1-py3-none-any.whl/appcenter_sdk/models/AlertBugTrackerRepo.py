# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AlertBugTrackerRepo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'string',
        'url': 'string',
        'id': 'string',
        'description': 'string',
        'private': 'boolean',
        'owner': 'object'
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'id': 'id',
        'description': 'description',
        'private': 'private',
        'owner': 'owner'
    }

    def __init__(self, name=None, url=None, id=None, description=None, private=None, owner=None):  # noqa: E501
        """AlertBugTrackerRepo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._url = None
        self._id = None
        self._description = None
        self._private = None
        self._owner = None
        self.discriminator = None
        self.name = name
        self.url = url
        self.id = id
        if description is not None:
            self.description = description
        if private is not None:
            self.private = private
        if owner is not None:
            self.owner = owner

    @property
    def name(self):
        """Gets the name of this AlertBugTrackerRepo.  # noqa: E501


        :return: The name of this AlertBugTrackerRepo.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertBugTrackerRepo.


        :param name: The name of this AlertBugTrackerRepo.  # noqa: E501
        :type: string
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this AlertBugTrackerRepo.  # noqa: E501


        :return: The url of this AlertBugTrackerRepo.  # noqa: E501
        :rtype: string
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AlertBugTrackerRepo.


        :param url: The url of this AlertBugTrackerRepo.  # noqa: E501
        :type: string
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def id(self):
        """Gets the id of this AlertBugTrackerRepo.  # noqa: E501


        :return: The id of this AlertBugTrackerRepo.  # noqa: E501
        :rtype: string
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertBugTrackerRepo.


        :param id: The id of this AlertBugTrackerRepo.  # noqa: E501
        :type: string
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this AlertBugTrackerRepo.  # noqa: E501


        :return: The description of this AlertBugTrackerRepo.  # noqa: E501
        :rtype: string
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertBugTrackerRepo.


        :param description: The description of this AlertBugTrackerRepo.  # noqa: E501
        :type: string
        """

        self._description = description

    @property
    def private(self):
        """Gets the private of this AlertBugTrackerRepo.  # noqa: E501


        :return: The private of this AlertBugTrackerRepo.  # noqa: E501
        :rtype: boolean
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this AlertBugTrackerRepo.


        :param private: The private of this AlertBugTrackerRepo.  # noqa: E501
        :type: boolean
        """

        self._private = private

    @property
    def owner(self):
        """Gets the owner of this AlertBugTrackerRepo.  # noqa: E501

        Repository owner object  # noqa: E501

        :return: The owner of this AlertBugTrackerRepo.  # noqa: E501
        :rtype: object
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AlertBugTrackerRepo.

        Repository owner object  # noqa: E501

        :param owner: The owner of this AlertBugTrackerRepo.  # noqa: E501
        :type: object
        """

        self._owner = owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertBugTrackerRepo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
