# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class LogContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    event = "event"
    page = "page"
    start_session = "start_session"
    error = "error"
    push_installation = "push_installation"
    start_service = "start_service"
    custom_properties = "custom_properties"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exceeded_max_limit': 'boolean',
        'last_received_log_timestamp': 'string',
        'logs': 'array'
    }

    attribute_map = {
        'exceeded_max_limit': 'exceeded_max_limit',
        'last_received_log_timestamp': 'last_received_log_timestamp',
        'logs': 'logs'
    }

    def __init__(self, exceeded_max_limit=None, last_received_log_timestamp=None, logs=None):  # noqa: E501
        """LogContainer - a model defined in Swagger"""  # noqa: E501
        self._exceeded_max_limit = None
        self._last_received_log_timestamp = None
        self._logs = None
        self.discriminator = None
        if exceeded_max_limit is not None:
            self.exceeded_max_limit = exceeded_max_limit
        if last_received_log_timestamp is not None:
            self.last_received_log_timestamp = last_received_log_timestamp
        self.logs = logs

    @property
    def exceeded_max_limit(self):
        """Gets the exceeded_max_limit of this LogContainer.  # noqa: E501

        indicates if the number of available logs are more than the max allowed return limit(100).  # noqa: E501

        :return: The exceeded_max_limit of this LogContainer.  # noqa: E501
        :rtype: boolean
        """
        return self._exceeded_max_limit

    @exceeded_max_limit.setter
    def exceeded_max_limit(self, exceeded_max_limit):
        """Sets the exceeded_max_limit of this LogContainer.

        indicates if the number of available logs are more than the max allowed return limit(100).  # noqa: E501

        :param exceeded_max_limit: The exceeded_max_limit of this LogContainer.  # noqa: E501
        :type: boolean
        """

        self._exceeded_max_limit = exceeded_max_limit

    @property
    def last_received_log_timestamp(self):
        """Gets the last_received_log_timestamp of this LogContainer.  # noqa: E501

        the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.  # noqa: E501

        :return: The last_received_log_timestamp of this LogContainer.  # noqa: E501
        :rtype: string
        """
        return self._last_received_log_timestamp

    @last_received_log_timestamp.setter
    def last_received_log_timestamp(self, last_received_log_timestamp):
        """Sets the last_received_log_timestamp of this LogContainer.

        the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.  # noqa: E501

        :param last_received_log_timestamp: The last_received_log_timestamp of this LogContainer.  # noqa: E501
        :type: string
        """

        self._last_received_log_timestamp = last_received_log_timestamp

    @property
    def logs(self):
        """Gets the logs of this LogContainer.  # noqa: E501

        the list of logs  # noqa: E501

        :return: The logs of this LogContainer.  # noqa: E501
        :rtype: array
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this LogContainer.

        the list of logs  # noqa: E501

        :param logs: The logs of this LogContainer.  # noqa: E501
        :type: array
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
