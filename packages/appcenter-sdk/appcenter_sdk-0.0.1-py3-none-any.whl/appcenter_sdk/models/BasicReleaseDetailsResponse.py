# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class BasicReleaseDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    group = "group"
    store = "store"
    tester = "tester"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'integer',
        'version': 'string',
        'short_version': 'string',
        'enabled': 'boolean',
        'uploaded_at': 'string',
        'destination_type': 'string',
        'distribution_groups': 'array',
        'distribution_stores': 'array',
        'destinations': 'array',
        'build': 'object'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'short_version': 'short_version',
        'enabled': 'enabled',
        'uploaded_at': 'uploaded_at',
        'destination_type': 'destination_type',
        'distribution_groups': 'distribution_groups',
        'distribution_stores': 'distribution_stores',
        'destinations': 'destinations',
        'build': 'build'
    }

    def __init__(self, id=None, version=None, short_version=None, enabled=None, uploaded_at=None, destination_type=None, distribution_groups=None, distribution_stores=None, destinations=None, build=None):  # noqa: E501
        """BasicReleaseDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version = None
        self._short_version = None
        self._enabled = None
        self._uploaded_at = None
        self._destination_type = None
        self._distribution_groups = None
        self._distribution_stores = None
        self._destinations = None
        self._build = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if version is not None:
            self.version = version
        if short_version is not None:
            self.short_version = short_version
        if enabled is not None:
            self.enabled = enabled
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at
        if destination_type is not None:
            self.destination_type = destination_type
        if distribution_groups is not None:
            self.distribution_groups = distribution_groups
        if distribution_stores is not None:
            self.distribution_stores = distribution_stores
        if destinations is not None:
            self.destinations = destinations
        if build is not None:
            self.build = build

    @property
    def id(self):
        """Gets the id of this BasicReleaseDetailsResponse.  # noqa: E501

        ID identifying this unique release.  # noqa: E501

        :return: The id of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: integer
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasicReleaseDetailsResponse.

        ID identifying this unique release.  # noqa: E501

        :param id: The id of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: integer
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this BasicReleaseDetailsResponse.  # noqa: E501

        The release's version.<br>
For iOS: CFBundleVersion from info.plist.<br>
For Android: android:versionCode from AppManifest.xml.
  # noqa: E501

        :return: The version of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BasicReleaseDetailsResponse.

        The release's version.<br>
For iOS: CFBundleVersion from info.plist.<br>
For Android: android:versionCode from AppManifest.xml.
  # noqa: E501

        :param version: The version of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._version = version

    @property
    def short_version(self):
        """Gets the short_version of this BasicReleaseDetailsResponse.  # noqa: E501

        The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.<br>
For Android: android:versionName from AppManifest.xml.
  # noqa: E501

        :return: The short_version of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._short_version

    @short_version.setter
    def short_version(self, short_version):
        """Sets the short_version of this BasicReleaseDetailsResponse.

        The release's short version.<br>
For iOS: CFBundleShortVersionString from info.plist.<br>
For Android: android:versionName from AppManifest.xml.
  # noqa: E501

        :param short_version: The short_version of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._short_version = short_version

    @property
    def enabled(self):
        """Gets the enabled of this BasicReleaseDetailsResponse.  # noqa: E501

        This value determines the whether a release currently is enabled or disabled.  # noqa: E501

        :return: The enabled of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: boolean
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BasicReleaseDetailsResponse.

        This value determines the whether a release currently is enabled or disabled.  # noqa: E501

        :param enabled: The enabled of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: boolean
        """

        self._enabled = enabled

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this BasicReleaseDetailsResponse.  # noqa: E501

        UTC time in ISO 8601 format of the uploaded time.  # noqa: E501

        :return: The uploaded_at of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this BasicReleaseDetailsResponse.

        UTC time in ISO 8601 format of the uploaded time.  # noqa: E501

        :param uploaded_at: The uploaded_at of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: string
        """

        self._uploaded_at = uploaded_at

    @property
    def destination_type(self):
        """Gets the destination_type of this BasicReleaseDetailsResponse.  # noqa: E501

        OBSOLETE. Will be removed in next version. The destination type.<br>
<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
  # noqa: E501

        :return: The destination_type of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: string
        """
        return self._destination_type

    @destination_type.setter
    def destination_type(self, destination_type):
        """Sets the destination_type of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. The destination type.<br>
<b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
<b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
  # noqa: E501

        :param destination_type: The destination_type of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, undefined, undefined, ]  # noqa: E501

        self._destination_type = destination_type

    @property
    def distribution_groups(self):
        """Gets the distribution_groups of this BasicReleaseDetailsResponse.  # noqa: E501

        OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.  # noqa: E501

        :return: The distribution_groups of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: array
        """
        return self._distribution_groups

    @distribution_groups.setter
    def distribution_groups(self, distribution_groups):
        """Sets the distribution_groups of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.  # noqa: E501

        :param distribution_groups: The distribution_groups of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: array
        """

        self._distribution_groups = distribution_groups

    @property
    def distribution_stores(self):
        """Gets the distribution_stores of this BasicReleaseDetailsResponse.  # noqa: E501

        OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.  # noqa: E501

        :return: The distribution_stores of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: array
        """
        return self._distribution_stores

    @distribution_stores.setter
    def distribution_stores(self, distribution_stores):
        """Sets the distribution_stores of this BasicReleaseDetailsResponse.

        OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.  # noqa: E501

        :param distribution_stores: The distribution_stores of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: array
        """

        self._distribution_stores = distribution_stores

    @property
    def destinations(self):
        """Gets the destinations of this BasicReleaseDetailsResponse.  # noqa: E501

        A list of distribution groups or stores.  # noqa: E501

        :return: The destinations of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: array
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this BasicReleaseDetailsResponse.

        A list of distribution groups or stores.  # noqa: E501

        :param destinations: The destinations of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: array
        """

        self._destinations = destinations

    @property
    def build(self):
        """Gets the build of this BasicReleaseDetailsResponse.  # noqa: E501

        Contains metadata about the build that produced the release being uploaded  # noqa: E501

        :return: The build of this BasicReleaseDetailsResponse.  # noqa: E501
        :rtype: object
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this BasicReleaseDetailsResponse.

        Contains metadata about the build that produced the release being uploaded  # noqa: E501

        :param build: The build of this BasicReleaseDetailsResponse.  # noqa: E501
        :type: object
        """

        self._build = build

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicReleaseDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
