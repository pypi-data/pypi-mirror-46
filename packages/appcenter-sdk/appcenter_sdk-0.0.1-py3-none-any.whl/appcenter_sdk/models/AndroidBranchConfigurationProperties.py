# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class AndroidBranchConfigurationProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gradle_wrapper_path': 'string',
        'module': 'string',
        'build_variant': 'string',
        'run_tests': 'boolean',
        'run_lint': 'boolean',
        'is_root': 'boolean',
        'automatic_signing': 'boolean',
        'keystore_password': 'string',
        'key_alias': 'string',
        'key_password': 'string',
        'keystore_filename': 'string',
        'keystore_encoded': 'string'
    }

    attribute_map = {
        'gradle_wrapper_path': 'gradle_wrapper_path',
        'module': 'module',
        'build_variant': 'build_variant',
        'run_tests': 'run_tests',
        'run_lint': 'run_lint',
        'is_root': 'is_root',
        'automatic_signing': 'automatic_signing',
        'keystore_password': 'keystore_password',
        'key_alias': 'key_alias',
        'key_password': 'key_password',
        'keystore_filename': 'keystore_filename',
        'keystore_encoded': 'keystore_encoded'
    }

    def __init__(self, gradle_wrapper_path=None, module=None, build_variant=None, run_tests=true, run_lint=true, is_root=true, automatic_signing=true, keystore_password=None, key_alias=None, key_password=None, keystore_filename=None, keystore_encoded=None):  # noqa: E501
        """AndroidBranchConfigurationProperties - a model defined in Swagger"""  # noqa: E501
        self._gradle_wrapper_path = None
        self._module = None
        self._build_variant = None
        self._run_tests = None
        self._run_lint = None
        self._is_root = None
        self._automatic_signing = None
        self._keystore_password = None
        self._key_alias = None
        self._key_password = None
        self._keystore_filename = None
        self._keystore_encoded = None
        self.discriminator = None
        if gradle_wrapper_path is not None:
            self.gradle_wrapper_path = gradle_wrapper_path
        self.module = module
        if build_variant is not None:
            self.build_variant = build_variant
        if run_tests is not None:
            self.run_tests = run_tests
        if run_lint is not None:
            self.run_lint = run_lint
        if is_root is not None:
            self.is_root = is_root
        if automatic_signing is not None:
            self.automatic_signing = automatic_signing
        if keystore_password is not None:
            self.keystore_password = keystore_password
        if key_alias is not None:
            self.key_alias = key_alias
        if key_password is not None:
            self.key_password = key_password
        if keystore_filename is not None:
            self.keystore_filename = keystore_filename
        if keystore_encoded is not None:
            self.keystore_encoded = keystore_encoded

    @property
    def gradle_wrapper_path(self):
        """Gets the gradle_wrapper_path of this AndroidBranchConfigurationProperties.  # noqa: E501

        Path to the Gradle wrapper script  # noqa: E501

        :return: The gradle_wrapper_path of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: string
        """
        return self._gradle_wrapper_path

    @gradle_wrapper_path.setter
    def gradle_wrapper_path(self, gradle_wrapper_path):
        """Sets the gradle_wrapper_path of this AndroidBranchConfigurationProperties.

        Path to the Gradle wrapper script  # noqa: E501

        :param gradle_wrapper_path: The gradle_wrapper_path of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: string
        """

        self._gradle_wrapper_path = gradle_wrapper_path

    @property
    def module(self):
        """Gets the module of this AndroidBranchConfigurationProperties.  # noqa: E501

        The Gradle module to build  # noqa: E501

        :return: The module of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: string
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this AndroidBranchConfigurationProperties.

        The Gradle module to build  # noqa: E501

        :param module: The module of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: string
        """
        if module is None:
            raise ValueError("Invalid value for `module`, must not be `None`")  # noqa: E501

        self._module = module

    @property
    def build_variant(self):
        """Gets the build_variant of this AndroidBranchConfigurationProperties.  # noqa: E501

        The Android build variant to build  # noqa: E501

        :return: The build_variant of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: string
        """
        return self._build_variant

    @build_variant.setter
    def build_variant(self, build_variant):
        """Sets the build_variant of this AndroidBranchConfigurationProperties.

        The Android build variant to build  # noqa: E501

        :param build_variant: The build_variant of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: string
        """

        self._build_variant = build_variant

    @property
    def run_tests(self):
        """Gets the run_tests of this AndroidBranchConfigurationProperties.  # noqa: E501

        Whether to run unit tests during the build (default)  # noqa: E501

        :return: The run_tests of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: boolean
        """
        return self._run_tests

    @run_tests.setter
    def run_tests(self, run_tests):
        """Sets the run_tests of this AndroidBranchConfigurationProperties.

        Whether to run unit tests during the build (default)  # noqa: E501

        :param run_tests: The run_tests of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: boolean
        """

        self._run_tests = run_tests

    @property
    def run_lint(self):
        """Gets the run_lint of this AndroidBranchConfigurationProperties.  # noqa: E501

        Whether to run lint checks during the build (default)  # noqa: E501

        :return: The run_lint of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: boolean
        """
        return self._run_lint

    @run_lint.setter
    def run_lint(self, run_lint):
        """Sets the run_lint of this AndroidBranchConfigurationProperties.

        Whether to run lint checks during the build (default)  # noqa: E501

        :param run_lint: The run_lint of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: boolean
        """

        self._run_lint = run_lint

    @property
    def is_root(self):
        """Gets the is_root of this AndroidBranchConfigurationProperties.  # noqa: E501

        Whether it is the root module or not  # noqa: E501

        :return: The is_root of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: boolean
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """Sets the is_root of this AndroidBranchConfigurationProperties.

        Whether it is the root module or not  # noqa: E501

        :param is_root: The is_root of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: boolean
        """

        self._is_root = is_root

    @property
    def automatic_signing(self):
        """Gets the automatic_signing of this AndroidBranchConfigurationProperties.  # noqa: E501

        Whether to apply automatic signing or not  # noqa: E501

        :return: The automatic_signing of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: boolean
        """
        return self._automatic_signing

    @automatic_signing.setter
    def automatic_signing(self, automatic_signing):
        """Sets the automatic_signing of this AndroidBranchConfigurationProperties.

        Whether to apply automatic signing or not  # noqa: E501

        :param automatic_signing: The automatic_signing of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: boolean
        """

        self._automatic_signing = automatic_signing

    @property
    def keystore_password(self):
        """Gets the keystore_password of this AndroidBranchConfigurationProperties.  # noqa: E501

        The password of the keystore  # noqa: E501

        :return: The keystore_password of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: string
        """
        return self._keystore_password

    @keystore_password.setter
    def keystore_password(self, keystore_password):
        """Sets the keystore_password of this AndroidBranchConfigurationProperties.

        The password of the keystore  # noqa: E501

        :param keystore_password: The keystore_password of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: string
        """

        self._keystore_password = keystore_password

    @property
    def key_alias(self):
        """Gets the key_alias of this AndroidBranchConfigurationProperties.  # noqa: E501

        The key alias  # noqa: E501

        :return: The key_alias of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: string
        """
        return self._key_alias

    @key_alias.setter
    def key_alias(self, key_alias):
        """Sets the key_alias of this AndroidBranchConfigurationProperties.

        The key alias  # noqa: E501

        :param key_alias: The key_alias of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: string
        """

        self._key_alias = key_alias

    @property
    def key_password(self):
        """Gets the key_password of this AndroidBranchConfigurationProperties.  # noqa: E501

        The key password  # noqa: E501

        :return: The key_password of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: string
        """
        return self._key_password

    @key_password.setter
    def key_password(self, key_password):
        """Sets the key_password of this AndroidBranchConfigurationProperties.

        The key password  # noqa: E501

        :param key_password: The key_password of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: string
        """

        self._key_password = key_password

    @property
    def keystore_filename(self):
        """Gets the keystore_filename of this AndroidBranchConfigurationProperties.  # noqa: E501

        The name of the keystore file  # noqa: E501

        :return: The keystore_filename of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: string
        """
        return self._keystore_filename

    @keystore_filename.setter
    def keystore_filename(self, keystore_filename):
        """Sets the keystore_filename of this AndroidBranchConfigurationProperties.

        The name of the keystore file  # noqa: E501

        :param keystore_filename: The keystore_filename of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: string
        """

        self._keystore_filename = keystore_filename

    @property
    def keystore_encoded(self):
        """Gets the keystore_encoded of this AndroidBranchConfigurationProperties.  # noqa: E501

        The keystore encoded value  # noqa: E501

        :return: The keystore_encoded of this AndroidBranchConfigurationProperties.  # noqa: E501
        :rtype: string
        """
        return self._keystore_encoded

    @keystore_encoded.setter
    def keystore_encoded(self, keystore_encoded):
        """Sets the keystore_encoded of this AndroidBranchConfigurationProperties.

        The keystore encoded value  # noqa: E501

        :param keystore_encoded: The keystore_encoded of this AndroidBranchConfigurationProperties.  # noqa: E501
        :type: string
        """

        self._keystore_encoded = keystore_encoded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidBranchConfigurationProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
