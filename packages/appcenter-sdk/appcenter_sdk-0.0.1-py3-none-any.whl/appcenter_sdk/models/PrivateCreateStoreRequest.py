# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class PrivateCreateStoreRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    intune = "intune"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'string',
        'name': 'string',
        'intune_details': ''
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'intune_details': 'intune_details'
    }

    def __init__(self, type=None, name=None, intune_details=None):  # noqa: E501
        """PrivateCreateStoreRequest - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._intune_details = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if intune_details is not None:
            self.intune_details = intune_details

    @property
    def type(self):
        """Gets the type of this PrivateCreateStoreRequest.  # noqa: E501

        store Type  # noqa: E501

        :return: The type of this PrivateCreateStoreRequest.  # noqa: E501
        :rtype: string
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrivateCreateStoreRequest.

        store Type  # noqa: E501

        :param type: The type of this PrivateCreateStoreRequest.  # noqa: E501
        :type: string
        """
        allowed_values = [undefined, ]  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this PrivateCreateStoreRequest.  # noqa: E501

        name of the store.  # noqa: E501

        :return: The name of this PrivateCreateStoreRequest.  # noqa: E501
        :rtype: string
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateCreateStoreRequest.

        name of the store.  # noqa: E501

        :param name: The name of this PrivateCreateStoreRequest.  # noqa: E501
        :type: string
        """

        self._name = name

    @property
    def intune_details(self):
        """Gets the intune_details of this PrivateCreateStoreRequest.  # noqa: E501


        :return: The intune_details of this PrivateCreateStoreRequest.  # noqa: E501
        :rtype: 
        """
        return self._intune_details

    @intune_details.setter
    def intune_details(self, intune_details):
        """Sets the intune_details of this PrivateCreateStoreRequest.


        :param intune_details: The intune_details of this PrivateCreateStoreRequest.  # noqa: E501
        :type: 
        """

        self._intune_details = intune_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateCreateStoreRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
