# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

import pprint
import re  # noqa: F401

import six


class HockeyAppMigrationRelease(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    0 = "0"
    1 = "1"
    2 = "2"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'number',
        'shortversion': 'string',
        'version': 'string',
        'appsize': 'integer',
        'minimum_os_version': 'string',
        'md5_fingerprint': 'string',
        'created_at': 'string',
        'build_url': 'string',
        'bundle_identifier': 'string',
        'device_family': 'string',
        'languages': 'array',
        'uuids': 'object',
        'is_external_build': 'boolean',
        'mandatory': 'boolean',
        'status': 'integer',
        'notes': 'string',
        'distribution_group_ids': 'array',
        'distribution_user_ids': 'array',
        'provisioning_profiles': 'array'
    }

    attribute_map = {
        'id': 'id',
        'shortversion': 'shortversion',
        'version': 'version',
        'appsize': 'appsize',
        'minimum_os_version': 'minimum_os_version',
        'md5_fingerprint': 'md5_fingerprint',
        'created_at': 'created_at',
        'build_url': 'build_url',
        'bundle_identifier': 'bundle_identifier',
        'device_family': 'device_family',
        'languages': 'languages',
        'uuids': 'uuids',
        'is_external_build': 'is_external_build',
        'mandatory': 'mandatory',
        'status': 'status',
        'notes': 'notes',
        'distribution_group_ids': 'distribution_group_ids',
        'distribution_user_ids': 'distribution_user_ids',
        'provisioning_profiles': 'provisioning_profiles'
    }

    def __init__(self, id=None, shortversion=None, version=None, appsize=None, minimum_os_version=None, md5_fingerprint=None, created_at=None, build_url=None, bundle_identifier=None, device_family=None, languages=None, uuids=None, is_external_build=None, mandatory=None, status=None, notes=None, distribution_group_ids=None, distribution_user_ids=None, provisioning_profiles=None):  # noqa: E501
        """HockeyAppMigrationRelease - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._shortversion = None
        self._version = None
        self._appsize = None
        self._minimum_os_version = None
        self._md5_fingerprint = None
        self._created_at = None
        self._build_url = None
        self._bundle_identifier = None
        self._device_family = None
        self._languages = None
        self._uuids = None
        self._is_external_build = None
        self._mandatory = None
        self._status = None
        self._notes = None
        self._distribution_group_ids = None
        self._distribution_user_ids = None
        self._provisioning_profiles = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if shortversion is not None:
            self.shortversion = shortversion
        if version is not None:
            self.version = version
        if appsize is not None:
            self.appsize = appsize
        if minimum_os_version is not None:
            self.minimum_os_version = minimum_os_version
        if md5_fingerprint is not None:
            self.md5_fingerprint = md5_fingerprint
        if created_at is not None:
            self.created_at = created_at
        if build_url is not None:
            self.build_url = build_url
        if bundle_identifier is not None:
            self.bundle_identifier = bundle_identifier
        if device_family is not None:
            self.device_family = device_family
        if languages is not None:
            self.languages = languages
        if uuids is not None:
            self.uuids = uuids
        if is_external_build is not None:
            self.is_external_build = is_external_build
        if mandatory is not None:
            self.mandatory = mandatory
        if status is not None:
            self.status = status
        if notes is not None:
            self.notes = notes
        if distribution_group_ids is not None:
            self.distribution_group_ids = distribution_group_ids
        if distribution_user_ids is not None:
            self.distribution_user_ids = distribution_user_ids
        if provisioning_profiles is not None:
            self.provisioning_profiles = provisioning_profiles

    @property
    def id(self):
        """Gets the id of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The id of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: number
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HockeyAppMigrationRelease.


        :param id: The id of this HockeyAppMigrationRelease.  # noqa: E501
        :type: number
        """

        self._id = id

    @property
    def shortversion(self):
        """Gets the shortversion of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The shortversion of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._shortversion

    @shortversion.setter
    def shortversion(self, shortversion):
        """Sets the shortversion of this HockeyAppMigrationRelease.


        :param shortversion: The shortversion of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._shortversion = shortversion

    @property
    def version(self):
        """Gets the version of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The version of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HockeyAppMigrationRelease.


        :param version: The version of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._version = version

    @property
    def appsize(self):
        """Gets the appsize of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The appsize of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: integer
        """
        return self._appsize

    @appsize.setter
    def appsize(self, appsize):
        """Sets the appsize of this HockeyAppMigrationRelease.


        :param appsize: The appsize of this HockeyAppMigrationRelease.  # noqa: E501
        :type: integer
        """

        self._appsize = appsize

    @property
    def minimum_os_version(self):
        """Gets the minimum_os_version of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The minimum_os_version of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._minimum_os_version

    @minimum_os_version.setter
    def minimum_os_version(self, minimum_os_version):
        """Sets the minimum_os_version of this HockeyAppMigrationRelease.


        :param minimum_os_version: The minimum_os_version of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._minimum_os_version = minimum_os_version

    @property
    def md5_fingerprint(self):
        """Gets the md5_fingerprint of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The md5_fingerprint of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._md5_fingerprint

    @md5_fingerprint.setter
    def md5_fingerprint(self, md5_fingerprint):
        """Sets the md5_fingerprint of this HockeyAppMigrationRelease.


        :param md5_fingerprint: The md5_fingerprint of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._md5_fingerprint = md5_fingerprint

    @property
    def created_at(self):
        """Gets the created_at of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The created_at of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this HockeyAppMigrationRelease.


        :param created_at: The created_at of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._created_at = created_at

    @property
    def build_url(self):
        """Gets the build_url of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The build_url of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._build_url

    @build_url.setter
    def build_url(self, build_url):
        """Sets the build_url of this HockeyAppMigrationRelease.


        :param build_url: The build_url of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._build_url = build_url

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The bundle_identifier of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this HockeyAppMigrationRelease.


        :param bundle_identifier: The bundle_identifier of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._bundle_identifier = bundle_identifier

    @property
    def device_family(self):
        """Gets the device_family of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The device_family of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """Sets the device_family of this HockeyAppMigrationRelease.


        :param device_family: The device_family of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._device_family = device_family

    @property
    def languages(self):
        """Gets the languages of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The languages of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: array
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this HockeyAppMigrationRelease.


        :param languages: The languages of this HockeyAppMigrationRelease.  # noqa: E501
        :type: array
        """

        self._languages = languages

    @property
    def uuids(self):
        """Gets the uuids of this HockeyAppMigrationRelease.  # noqa: E501

        For iOS apps, a dictionary of UUIDs for architectures (in format `{"armv7": "353df799-d450-3308-8492-928ecf1ebf53", "arm64": "e67c0e93-b6d6-3f5a-b3a7-68d2b215bf27"}`)  # noqa: E501

        :return: The uuids of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: object
        """
        return self._uuids

    @uuids.setter
    def uuids(self, uuids):
        """Sets the uuids of this HockeyAppMigrationRelease.

        For iOS apps, a dictionary of UUIDs for architectures (in format `{"armv7": "353df799-d450-3308-8492-928ecf1ebf53", "arm64": "e67c0e93-b6d6-3f5a-b3a7-68d2b215bf27"}`)  # noqa: E501

        :param uuids: The uuids of this HockeyAppMigrationRelease.  # noqa: E501
        :type: object
        """

        self._uuids = uuids

    @property
    def is_external_build(self):
        """Gets the is_external_build of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The is_external_build of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: boolean
        """
        return self._is_external_build

    @is_external_build.setter
    def is_external_build(self, is_external_build):
        """Sets the is_external_build of this HockeyAppMigrationRelease.


        :param is_external_build: The is_external_build of this HockeyAppMigrationRelease.  # noqa: E501
        :type: boolean
        """

        self._is_external_build = is_external_build

    @property
    def mandatory(self):
        """Gets the mandatory of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The mandatory of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: boolean
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this HockeyAppMigrationRelease.


        :param mandatory: The mandatory of this HockeyAppMigrationRelease.  # noqa: E501
        :type: boolean
        """

        self._mandatory = mandatory

    @property
    def status(self):
        """Gets the status of this HockeyAppMigrationRelease.  # noqa: E501

        The status of the release in HockeyApp. Maps to HockeyAppSchema.AppVersionStatus. Possible values: Deleted = -1, New = 0, Inactive = 1, Active = 2, Hidden = 3, SonomaActive = 4  # noqa: E501

        :return: The status of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: integer
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HockeyAppMigrationRelease.

        The status of the release in HockeyApp. Maps to HockeyAppSchema.AppVersionStatus. Possible values: Deleted = -1, New = 0, Inactive = 1, Active = 2, Hidden = 3, SonomaActive = 4  # noqa: E501

        :param status: The status of this HockeyAppMigrationRelease.  # noqa: E501
        :type: integer
        """

        self._status = status

    @property
    def notes(self):
        """Gets the notes of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The notes of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: string
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this HockeyAppMigrationRelease.


        :param notes: The notes of this HockeyAppMigrationRelease.  # noqa: E501
        :type: string
        """

        self._notes = notes

    @property
    def distribution_group_ids(self):
        """Gets the distribution_group_ids of this HockeyAppMigrationRelease.  # noqa: E501

        List of DistributionGroup IDs the release is distributed to  # noqa: E501

        :return: The distribution_group_ids of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: array
        """
        return self._distribution_group_ids

    @distribution_group_ids.setter
    def distribution_group_ids(self, distribution_group_ids):
        """Sets the distribution_group_ids of this HockeyAppMigrationRelease.

        List of DistributionGroup IDs the release is distributed to  # noqa: E501

        :param distribution_group_ids: The distribution_group_ids of this HockeyAppMigrationRelease.  # noqa: E501
        :type: array
        """

        self._distribution_group_ids = distribution_group_ids

    @property
    def distribution_user_ids(self):
        """Gets the distribution_user_ids of this HockeyAppMigrationRelease.  # noqa: E501

        List of User IDs the release is distributed to  # noqa: E501

        :return: The distribution_user_ids of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: array
        """
        return self._distribution_user_ids

    @distribution_user_ids.setter
    def distribution_user_ids(self, distribution_user_ids):
        """Sets the distribution_user_ids of this HockeyAppMigrationRelease.

        List of User IDs the release is distributed to  # noqa: E501

        :param distribution_user_ids: The distribution_user_ids of this HockeyAppMigrationRelease.  # noqa: E501
        :type: array
        """

        self._distribution_user_ids = distribution_user_ids

    @property
    def provisioning_profiles(self):
        """Gets the provisioning_profiles of this HockeyAppMigrationRelease.  # noqa: E501


        :return: The provisioning_profiles of this HockeyAppMigrationRelease.  # noqa: E501
        :rtype: array
        """
        return self._provisioning_profiles

    @provisioning_profiles.setter
    def provisioning_profiles(self, provisioning_profiles):
        """Sets the provisioning_profiles of this HockeyAppMigrationRelease.


        :param provisioning_profiles: The provisioning_profiles of this HockeyAppMigrationRelease.  # noqa: E501
        :type: array
        """

        self._provisioning_profiles = provisioning_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HockeyAppMigrationRelease):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
