# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter_sdk.api_client import ApiClient


class analyticsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def Devices_BlockLogs(self, install_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Devices_BlockLogs  # noqa: E501

        **Warning, this operation is not reversible.**

 A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.
  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Devices_BlockLogs(install_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string install_id: The id of the device (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: string
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Devices_BlockLogs_with_http_info(install_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Devices_BlockLogs_with_http_info(install_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Devices_BlockLogs_with_http_info(self, install_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Devices_BlockLogs  # noqa: E501

        **Warning, this operation is not reversible.**

 A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.
  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Devices_BlockLogs_with_http_info(install_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string install_id: The id of the device (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: string
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['install_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Devices_BlockLogs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'install_id' is set
        if ('install_id' not in params or
                params['install_id'] is None):
            raise ValueError("Missing the required parameter `install_id` when calling `Devices_BlockLogs`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Devices_BlockLogs`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Devices_BlockLogs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'install_id' in params:
            path_params['install_id'] = params['install_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='string',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def App_BlockLogs(self, owner_name, app_name, **kwargs):  # noqa: E501
        """App_BlockLogs  # noqa: E501

        **Warning, this operation is not reversible.** 

A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.
  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.App_BlockLogs(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: string
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.App_BlockLogs_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.App_BlockLogs_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def App_BlockLogs_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """App_BlockLogs  # noqa: E501

        **Warning, this operation is not reversible.** 

A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.
  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.App_BlockLogs_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: string
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method App_BlockLogs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `App_BlockLogs`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `App_BlockLogs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='string',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Crashes_ListSessionLogs(self, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Crashes_ListSessionLogs  # noqa: E501

        Get session logs by crash ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Crashes_ListSessionLogs(crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_id: The id of the a crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string date: Date of data requested(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Crashes_ListSessionLogs_with_http_info(crash_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Crashes_ListSessionLogs_with_http_info(crash_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Crashes_ListSessionLogs_with_http_info(self, crash_id, owner_name, app_name, **kwargs):  # noqa: E501
        """Crashes_ListSessionLogs  # noqa: E501

        Get session logs by crash ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Crashes_ListSessionLogs_with_http_info(crash_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_id: The id of the a crash (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string date: Date of data requested(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_id', 'owner_name', 'app_name', 'date']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Crashes_ListSessionLogs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_id' is set
        if ('crash_id' not in params or
                params['crash_id'] is None):
            raise ValueError("Missing the required parameter `crash_id` when calling `Crashes_ListSessionLogs`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Crashes_ListSessionLogs`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Crashes_ListSessionLogs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_id' in params:
            path_params['crash_id'] = params['crash_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'date' in params:
            query_params.append(('date', params['date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_Versions(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_Versions  # noqa: E501

        Count of active versions in the time range ordered by version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_Versions(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_Versions_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_Versions_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_Versions_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_Versions  # noqa: E501

        Count of active versions in the time range ordered by version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_Versions_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', '$top', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_Versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_Versions`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_Versions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_Versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_PerDeviceCounts(self, start, interval, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_PerDeviceCounts  # noqa: E501

        Count of sessions per device in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_PerDeviceCounts(start, interval, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string interval: Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D). (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_PerDeviceCounts_with_http_info(start, interval, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_PerDeviceCounts_with_http_info(start, interval, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_PerDeviceCounts_with_http_info(self, start, interval, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_PerDeviceCounts  # noqa: E501

        Count of sessions per device in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_PerDeviceCounts_with_http_info(start, interval, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string interval: Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D). (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'interval', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_PerDeviceCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_PerDeviceCounts`")  # noqa: E501
        # verify the required parameter 'interval' is set
        if ('interval' not in params or
                params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `Analytics_PerDeviceCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_PerDeviceCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_PerDeviceCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_SessionDurationsDistribution(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_SessionDurationsDistribution  # noqa: E501

        Gets session duration .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_SessionDurationsDistribution(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_SessionDurationsDistribution_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_SessionDurationsDistribution_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_SessionDurationsDistribution_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_SessionDurationsDistribution  # noqa: E501

        Gets session duration .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_SessionDurationsDistribution_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_SessionDurationsDistribution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_SessionDurationsDistribution`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_SessionDurationsDistribution`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_SessionDurationsDistribution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_SessionCounts(self, start, interval, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_SessionCounts  # noqa: E501

        Count of sessions in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_SessionCounts(start, interval, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string interval: Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D). (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_SessionCounts_with_http_info(start, interval, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_SessionCounts_with_http_info(start, interval, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_SessionCounts_with_http_info(self, start, interval, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_SessionCounts  # noqa: E501

        Count of sessions in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_SessionCounts_with_http_info(start, interval, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string interval: Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D). (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'interval', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_SessionCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_SessionCounts`")  # noqa: E501
        # verify the required parameter 'interval' is set
        if ('interval' not in params or
                params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `Analytics_SessionCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_SessionCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_SessionCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_PlaceCounts(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_PlaceCounts  # noqa: E501

        Places in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_PlaceCounts(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_PlaceCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_PlaceCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_PlaceCounts_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_PlaceCounts  # noqa: E501

        Places in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_PlaceCounts_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', '$top', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_PlaceCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_PlaceCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_PlaceCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_PlaceCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/places', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_OperatingSystemCounts(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_OperatingSystemCounts  # noqa: E501

        OSes in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_OperatingSystemCounts(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_OperatingSystemCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_OperatingSystemCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_OperatingSystemCounts_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_OperatingSystemCounts  # noqa: E501

        OSes in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_OperatingSystemCounts_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', '$top', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_OperatingSystemCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_OperatingSystemCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_OperatingSystemCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_OperatingSystemCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/oses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_ModelCounts(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ModelCounts  # noqa: E501

        models in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ModelCounts(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_ModelCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_ModelCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_ModelCounts_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ModelCounts  # noqa: E501

        models in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ModelCounts_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', '$top', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_ModelCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_ModelCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_ModelCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_ModelCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_LogFlow(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_LogFlow  # noqa: E501

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_LogFlow(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_LogFlow_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_LogFlow_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_LogFlow_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_LogFlow  # noqa: E501

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_LogFlow_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'start']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_LogFlow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_LogFlow`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_LogFlow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_LanguageCounts(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_LanguageCounts  # noqa: E501

        languages in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_LanguageCounts(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_LanguageCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_LanguageCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_LanguageCounts_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_LanguageCounts  # noqa: E501

        languages in the time range  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_LanguageCounts_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', '$top', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_LanguageCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_LanguageCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_LanguageCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_LanguageCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/languages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_GenericLogFlow(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_GenericLogFlow  # noqa: E501

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_GenericLogFlow(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_GenericLogFlow_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_GenericLogFlow_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_GenericLogFlow_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_GenericLogFlow  # noqa: E501

        Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_GenericLogFlow_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string start: Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'start']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_GenericLogFlow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_GenericLogFlow`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_GenericLogFlow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_EventPropertyCounts(self, event_name, event_property_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventPropertyCounts  # noqa: E501

        Event properties value counts during the time range in descending order.  Limited up to 5 values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventPropertyCounts(event_name, event_property_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string event_property_name: The id of the event property (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :param integer $top: The number of property values to return(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_EventPropertyCounts_with_http_info(event_name, event_property_name, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_EventPropertyCounts_with_http_info(event_name, event_property_name, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_EventPropertyCounts_with_http_info(self, event_name, event_property_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventPropertyCounts  # noqa: E501

        Event properties value counts during the time range in descending order.  Limited up to 5 values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventPropertyCounts_with_http_info(event_name, event_property_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string event_property_name: The id of the event property (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :param integer $top: The number of property values to return(optional, default to )
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'event_property_name', 'start', 'owner_name', 'app_name', 'end', 'versions', '$top']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_EventPropertyCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `Analytics_EventPropertyCounts`")  # noqa: E501
        # verify the required parameter 'event_property_name' is set
        if ('event_property_name' not in params or
                params['event_property_name'] is None):
            raise ValueError("Missing the required parameter `event_property_name` when calling `Analytics_EventPropertyCounts`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_EventPropertyCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_EventPropertyCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_EventPropertyCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['event_name'] = params['event_name']  # noqa: E501
        if 'event_property_name' in params:
            path_params['event_property_name'] = params['event_property_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_EventProperties(self, event_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventProperties  # noqa: E501

        Event properties.  Up to the first 5 received properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventProperties(event_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_EventProperties_with_http_info(event_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_EventProperties_with_http_info(event_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_EventProperties_with_http_info(self, event_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventProperties  # noqa: E501

        Event properties.  Up to the first 5 received properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventProperties_with_http_info(event_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_EventProperties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `Analytics_EventProperties`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_EventProperties`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_EventProperties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['event_name'] = params['event_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_EventCount(self, event_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventCount  # noqa: E501

        Count of events by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventCount(event_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_EventCount_with_http_info(event_name, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_EventCount_with_http_info(event_name, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_EventCount_with_http_info(self, event_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventCount  # noqa: E501

        Count of events by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventCount_with_http_info(event_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'start', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_EventCount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `Analytics_EventCount`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_EventCount`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_EventCount`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_EventCount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['event_name'] = params['event_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_EventDeviceCount(self, event_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventDeviceCount  # noqa: E501

        Count of devices for an event by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventDeviceCount(event_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_EventDeviceCount_with_http_info(event_name, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_EventDeviceCount_with_http_info(event_name, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_EventDeviceCount_with_http_info(self, event_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventDeviceCount  # noqa: E501

        Count of devices for an event by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventDeviceCount_with_http_info(event_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'start', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_EventDeviceCount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `Analytics_EventDeviceCount`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_EventDeviceCount`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_EventDeviceCount`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_EventDeviceCount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['event_name'] = params['event_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_EventPerSessionCount(self, event_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventPerSessionCount  # noqa: E501

        Count of events per session by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventPerSessionCount(event_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_EventPerSessionCount_with_http_info(event_name, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_EventPerSessionCount_with_http_info(event_name, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_EventPerSessionCount_with_http_info(self, event_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventPerSessionCount  # noqa: E501

        Count of events per session by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventPerSessionCount_with_http_info(event_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'start', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_EventPerSessionCount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `Analytics_EventPerSessionCount`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_EventPerSessionCount`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_EventPerSessionCount`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_EventPerSessionCount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['event_name'] = params['event_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_EventPerDeviceCount(self, event_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventPerDeviceCount  # noqa: E501

        Count of events per device by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventPerDeviceCount(event_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_EventPerDeviceCount_with_http_info(event_name, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_EventPerDeviceCount_with_http_info(event_name, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_EventPerDeviceCount_with_http_info(self, event_name, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventPerDeviceCount  # noqa: E501

        Count of events per device by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventPerDeviceCount_with_http_info(event_name, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'start', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_EventPerDeviceCount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `Analytics_EventPerDeviceCount`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_EventPerDeviceCount`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_EventPerDeviceCount`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_EventPerDeviceCount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['event_name'] = params['event_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_EventsDelete(self, event_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventsDelete  # noqa: E501

        Delete the set of Events with the specified event names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventsDelete(event_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_EventsDelete_with_http_info(event_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_EventsDelete_with_http_info(event_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_EventsDelete_with_http_info(self, event_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventsDelete  # noqa: E501

        Delete the set of Events with the specified event names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventsDelete_with_http_info(event_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_EventsDelete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `Analytics_EventsDelete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_EventsDelete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_EventsDelete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['event_name'] = params['event_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_Events(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_Events  # noqa: E501

        Count of active events in the time range ordered by event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_Events(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :param array event_name: to select the specific events(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :param integer $skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.(optional)
        :param string $inlinecount: Controls whether or not to include a count of all the items across all pages.(optional)
        :param string $orderby: controls the sorting order and sorting based on which column(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_Events_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_Events_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_Events_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_Events  # noqa: E501

        Count of active events in the time range ordered by event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_Events_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :param array event_name: to select the specific events(optional)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :param integer $skip: The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.(optional)
        :param string $inlinecount: Controls whether or not to include a count of all the items across all pages.(optional, default to )
        :param string $orderby: controls the sorting order and sorting based on which column(optional, default to )
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', 'versions', 'event_name', '$top', '$skip', '$inlinecount', '$orderby']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_Events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_Events`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_Events`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_Events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501
        if 'event_name' in params:
            query_params.append(('event_name', params['event_name']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501
        if '$skip' in params:
            query_params.append(('$skip', params['$skip']))  # noqa: E501
        if '$inlinecount' in params:
            query_params.append(('$inlinecount', params['$inlinecount']))  # noqa: E501
        if '$orderby' in params:
            query_params.append(('$orderby', params['$orderby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_EventsDeleteLogs(self, event_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventsDeleteLogs  # noqa: E501

        Delete the set of Events with the specified event names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventsDeleteLogs(event_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_EventsDeleteLogs_with_http_info(event_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_EventsDeleteLogs_with_http_info(event_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_EventsDeleteLogs_with_http_info(self, event_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_EventsDeleteLogs  # noqa: E501

        Delete the set of Events with the specified event names  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_EventsDeleteLogs_with_http_info(event_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string event_name: The id of the event (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_EventsDeleteLogs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `Analytics_EventsDeleteLogs`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_EventsDeleteLogs`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_EventsDeleteLogs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['event_name'] = params['event_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_DistributionReleaseCounts(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Analytics_DistributionReleaseCounts  # noqa: E501

        Count of total downloads for the provided distribution releases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_DistributionReleaseCounts(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The releases to retrieve. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_DistributionReleaseCounts_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_DistributionReleaseCounts_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def Analytics_DistributionReleaseCounts_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Analytics_DistributionReleaseCounts  # noqa: E501

        Count of total downloads for the provided distribution releases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_DistributionReleaseCounts_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The releases to retrieve. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_DistributionReleaseCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_DistributionReleaseCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_DistributionReleaseCounts`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `Analytics_DistributionReleaseCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_CrashFreeDevicePercentages(self, start, version, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_CrashFreeDevicePercentages  # noqa: E501

        Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashFreeDevicePercentages(start, version, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string version: (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_CrashFreeDevicePercentages_with_http_info(start, version, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_CrashFreeDevicePercentages_with_http_info(start, version, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_CrashFreeDevicePercentages_with_http_info(self, start, version, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_CrashFreeDevicePercentages  # noqa: E501

        Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashFreeDevicePercentages_with_http_info(start, version, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string version: (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'version', 'owner_name', 'app_name', 'end']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_CrashFreeDevicePercentages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_CrashFreeDevicePercentages`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `Analytics_CrashFreeDevicePercentages`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_CrashFreeDevicePercentages`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_CrashFreeDevicePercentages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_CrashGroupTotals(self, crash_group_id, version, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupTotals(crash_group_id, version, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: The id of the crash group (required)
        :param string version: (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_CrashGroupTotals_with_http_info(crash_group_id, version, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_CrashGroupTotals_with_http_info(crash_group_id, version, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_CrashGroupTotals_with_http_info(self, crash_group_id, version, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupTotals_with_http_info(crash_group_id, version, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: The id of the crash group (required)
        :param string version: (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'version', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_CrashGroupTotals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `Analytics_CrashGroupTotals`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `Analytics_CrashGroupTotals`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_CrashGroupTotals`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_CrashGroupTotals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_CrashGroupOperatingSystemCounts(self, crash_group_id, version, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        top OSes of the selected crash group with selected version. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupOperatingSystemCounts(crash_group_id, version, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: The id of the crash group (required)
        :param string version: (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_CrashGroupOperatingSystemCounts_with_http_info(crash_group_id, version, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_CrashGroupOperatingSystemCounts_with_http_info(crash_group_id, version, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_CrashGroupOperatingSystemCounts_with_http_info(self, crash_group_id, version, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        top OSes of the selected crash group with selected version. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupOperatingSystemCounts_with_http_info(crash_group_id, version, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: The id of the crash group (required)
        :param string version: (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'version', 'owner_name', 'app_name', '$top']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_CrashGroupOperatingSystemCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `Analytics_CrashGroupOperatingSystemCounts`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `Analytics_CrashGroupOperatingSystemCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_CrashGroupOperatingSystemCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_CrashGroupOperatingSystemCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_CrashGroupModelCounts(self, crash_group_id, version, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        top models of the selected crash group with selected version. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupModelCounts(crash_group_id, version, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: The id of the crash group (required)
        :param string version: (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_CrashGroupModelCounts_with_http_info(crash_group_id, version, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_CrashGroupModelCounts_with_http_info(crash_group_id, version, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_CrashGroupModelCounts_with_http_info(self, crash_group_id, version, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        top models of the selected crash group with selected version. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupModelCounts_with_http_info(crash_group_id, version, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: The id of the crash group (required)
        :param string version: (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param integer $top: The maximum number of results to return. (0 will fetch all results)(optional, default to )
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'version', 'owner_name', 'app_name', '$top']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_CrashGroupModelCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `Analytics_CrashGroupModelCounts`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `Analytics_CrashGroupModelCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_CrashGroupModelCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_CrashGroupModelCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if '$top' in params:
            query_params.append(('$top', params['$top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_CrashGroupCounts(self, crash_group_id, version, start, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupCounts(crash_group_id, version, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: The id of the crash group (required)
        :param string version: (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_CrashGroupCounts_with_http_info(crash_group_id, version, start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_CrashGroupCounts_with_http_info(crash_group_id, version, start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_CrashGroupCounts_with_http_info(self, crash_group_id, version, start, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupCounts_with_http_info(crash_group_id, version, start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string crash_group_id: The id of the crash group (required)
        :param string version: (required)
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crash_group_id', 'version', 'start', 'owner_name', 'app_name', 'end']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_CrashGroupCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crash_group_id' is set
        if ('crash_group_id' not in params or
                params['crash_group_id'] is None):
            raise ValueError("Missing the required parameter `crash_group_id` when calling `Analytics_CrashGroupCounts`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `Analytics_CrashGroupCounts`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_CrashGroupCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_CrashGroupCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_CrashGroupCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crash_group_id' in params:
            path_params['crash_group_id'] = params['crash_group_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_CrashGroupsTotals(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Analytics_CrashGroupsTotals  # noqa: E501

        Overall crashes and affected users count of the selected crash groups with selected versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupsTotals(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_CrashGroupsTotals_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_CrashGroupsTotals_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def Analytics_CrashGroupsTotals_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Analytics_CrashGroupsTotals  # noqa: E501

        Overall crashes and affected users count of the selected crash groups with selected versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashGroupsTotals_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: (required)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_CrashGroupsTotals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_CrashGroupsTotals`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_CrashGroupsTotals`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `Analytics_CrashGroupsTotals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_CrashCounts(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Count of crashes by day in the time range based the selected versions. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashCounts(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_CrashCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_CrashCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_CrashCounts_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """  # noqa: E501

        Count of crashes by day in the time range based the selected versions. Available for UWP apps only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CrashCounts_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_CrashCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_CrashCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_CrashCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_CrashCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_AudienceNameExists(self, audience_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_AudienceNameExists  # noqa: E501

        Returns whether audience definition exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_AudienceNameExists(audience_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string audience_name: The name of the audience (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_AudienceNameExists_with_http_info(audience_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_AudienceNameExists_with_http_info(audience_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_AudienceNameExists_with_http_info(self, audience_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_AudienceNameExists  # noqa: E501

        Returns whether audience definition exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_AudienceNameExists_with_http_info(audience_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string audience_name: The name of the audience (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['audience_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_AudienceNameExists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'audience_name' is set
        if ('audience_name' not in params or
                params['audience_name'] is None):
            raise ValueError("Missing the required parameter `audience_name` when calling `Analytics_AudienceNameExists`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_AudienceNameExists`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_AudienceNameExists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audience_name' in params:
            path_params['audience_name'] = params['audience_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_DeleteAudience(self, audience_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_DeleteAudience  # noqa: E501

        Deletes audience definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_DeleteAudience(audience_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string audience_name: The name of the audience (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_DeleteAudience_with_http_info(audience_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_DeleteAudience_with_http_info(audience_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_DeleteAudience_with_http_info(self, audience_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_DeleteAudience  # noqa: E501

        Deletes audience definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_DeleteAudience_with_http_info(audience_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string audience_name: The name of the audience (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['audience_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_DeleteAudience" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'audience_name' is set
        if ('audience_name' not in params or
                params['audience_name'] is None):
            raise ValueError("Missing the required parameter `audience_name` when calling `Analytics_DeleteAudience`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_DeleteAudience`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_DeleteAudience`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audience_name' in params:
            path_params['audience_name'] = params['audience_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_GetAudience(self, audience_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_GetAudience  # noqa: E501

        Gets audience definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_GetAudience(audience_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string audience_name: The name of the audience (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_GetAudience_with_http_info(audience_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_GetAudience_with_http_info(audience_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_GetAudience_with_http_info(self, audience_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_GetAudience  # noqa: E501

        Gets audience definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_GetAudience_with_http_info(audience_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string audience_name: The name of the audience (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['audience_name', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_GetAudience" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'audience_name' is set
        if ('audience_name' not in params or
                params['audience_name'] is None):
            raise ValueError("Missing the required parameter `audience_name` when calling `Analytics_GetAudience`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_GetAudience`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_GetAudience`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audience_name' in params:
            path_params['audience_name'] = params['audience_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_CreateOrUpdateAudience(self, audience_name, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Analytics_CreateOrUpdateAudience  # noqa: E501

        Creates or updates audience definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CreateOrUpdateAudience(audience_name, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string audience_name: The name of the audience (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Audience definition (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_CreateOrUpdateAudience_with_http_info(audience_name, owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_CreateOrUpdateAudience_with_http_info(audience_name, owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def Analytics_CreateOrUpdateAudience_with_http_info(self, audience_name, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Analytics_CreateOrUpdateAudience  # noqa: E501

        Creates or updates audience definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_CreateOrUpdateAudience_with_http_info(audience_name, owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string audience_name: The name of the audience (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Audience definition (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['audience_name', 'owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_CreateOrUpdateAudience" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'audience_name' is set
        if ('audience_name' not in params or
                params['audience_name'] is None):
            raise ValueError("Missing the required parameter `audience_name` when calling `Analytics_CreateOrUpdateAudience`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_CreateOrUpdateAudience`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_CreateOrUpdateAudience`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `Analytics_CreateOrUpdateAudience`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audience_name' in params:
            path_params['audience_name'] = params['audience_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_ListDevicePropertyValues(self, property_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ListDevicePropertyValues  # noqa: E501

        Get list of device property values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ListDevicePropertyValues(property_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string property_name: Device property (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string contains: Contains string(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_ListDevicePropertyValues_with_http_info(property_name, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_ListDevicePropertyValues_with_http_info(property_name, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_ListDevicePropertyValues_with_http_info(self, property_name, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ListDevicePropertyValues  # noqa: E501

        Get list of device property values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ListDevicePropertyValues_with_http_info(property_name, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string property_name: Device property (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string contains: Contains string(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_name', 'owner_name', 'app_name', 'contains']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_ListDevicePropertyValues" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_name' is set
        if ('property_name' not in params or
                params['property_name'] is None):
            raise ValueError("Missing the required parameter `property_name` when calling `Analytics_ListDevicePropertyValues`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_ListDevicePropertyValues`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_ListDevicePropertyValues`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'property_name' in params:
            path_params['property_name'] = params['property_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'contains' in params:
            query_params.append(('contains', params['contains']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_ListDeviceProperties(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ListDeviceProperties  # noqa: E501

        Get list of device properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ListDeviceProperties(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_ListDeviceProperties_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_ListDeviceProperties_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_ListDeviceProperties_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ListDeviceProperties  # noqa: E501

        Get list of device properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ListDeviceProperties_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_ListDeviceProperties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_ListDeviceProperties`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_ListDeviceProperties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_ListCustomProperties(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ListCustomProperties  # noqa: E501

        Get list of custom properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ListCustomProperties(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_ListCustomProperties_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_ListCustomProperties_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_ListCustomProperties_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ListCustomProperties  # noqa: E501

        Get list of custom properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ListCustomProperties_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_ListCustomProperties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_ListCustomProperties`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_ListCustomProperties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_TestAudience(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Analytics_TestAudience  # noqa: E501

        Tests audience definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_TestAudience(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Audience definition (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_TestAudience_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_TestAudience_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def Analytics_TestAudience_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """Analytics_TestAudience  # noqa: E501

        Tests audience definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_TestAudience_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: Audience definition (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_TestAudience" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_TestAudience`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_TestAudience`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `Analytics_TestAudience`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_ListAudiences(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ListAudiences  # noqa: E501

        Get list of audiences.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ListAudiences(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean include_disabled: Include disabled audience definitions(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_ListAudiences_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_ListAudiences_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_ListAudiences_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_ListAudiences  # noqa: E501

        Get list of audiences.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_ListAudiences_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param boolean include_disabled: Include disabled audience definitions(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'include_disabled']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_ListAudiences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_ListAudiences`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_ListAudiences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'include_disabled' in params:
            query_params.append(('include_disabled', params['include_disabled']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def Analytics_DeviceCounts(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_DeviceCounts  # noqa: E501

        Count of active devices by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_DeviceCounts(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.Analytics_DeviceCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.Analytics_DeviceCounts_with_http_info(start, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def Analytics_DeviceCounts_with_http_info(self, start, owner_name, app_name, **kwargs):  # noqa: E501
        """Analytics_DeviceCounts  # noqa: E501

        Count of active devices by interval in the time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.Analytics_DeviceCounts_with_http_info(start, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string start: Start date time in data in ISO 8601 date time format (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string end: Last date time in data in ISO 8601 date time format(optional)
        :param array versions:(optional)
        :return: Error
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'owner_name', 'app_name', 'end', 'versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method Analytics_DeviceCounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `Analytics_DeviceCounts`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `Analytics_DeviceCounts`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `Analytics_DeviceCounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Error',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
