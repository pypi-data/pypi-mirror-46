# coding: utf-8

"""
    App Center Client

    Microsoft Visual Studio App Center API  # noqa: E501

    OpenAPI spec version: preview
    Contact: benedetto.abbenanti@gmail.com
    Project Repository: https://github.com/b3nab/appcenter-sdks
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from appcenter_sdk.api_client import ApiClient


class accountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def orgInvitations_reject(self, invitation_token, **kwargs):  # noqa: E501
        """orgInvitations_reject  # noqa: E501

        Rejects a pending organization invitation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_reject(invitation_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param string invitation_token: The app invitation token that was sent to the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.orgInvitations_reject_with_http_info(invitation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.orgInvitations_reject_with_http_info(invitation_token, **kwargs)  # noqa: E501
            return data

    def orgInvitations_reject_with_http_info(self, invitation_token, **kwargs):  # noqa: E501
        """orgInvitations_reject  # noqa: E501

        Rejects a pending organization invitation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_reject_with_http_info(invitation_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param string invitation_token: The app invitation token that was sent to the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgInvitations_reject" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_token' is set
        if ('invitation_token' not in params or
                params['invitation_token'] is None):
            raise ValueError("Missing the required parameter `invitation_token` when calling `orgInvitations_reject`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_token' in params:
            path_params['invitation_token'] = params['invitation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/orgs/{invitation_token}/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgInvitations_accept(self, invitation_token, **kwargs):  # noqa: E501
        """orgInvitations_accept  # noqa: E501

        Accepts a pending organization invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_accept(invitation_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param string invitation_token: The app invitation token that was sent to the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.orgInvitations_accept_with_http_info(invitation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.orgInvitations_accept_with_http_info(invitation_token, **kwargs)  # noqa: E501
            return data

    def orgInvitations_accept_with_http_info(self, invitation_token, **kwargs):  # noqa: E501
        """orgInvitations_accept  # noqa: E501

        Accepts a pending organization invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_accept_with_http_info(invitation_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param string invitation_token: The app invitation token that was sent to the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgInvitations_accept" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_token' is set
        if ('invitation_token' not in params or
                params['invitation_token'] is None):
            raise ValueError("Missing the required parameter `invitation_token` when calling `orgInvitations_accept`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_token' in params:
            path_params['invitation_token'] = params['invitation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/orgs/{invitation_token}/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroupInvitations_acceptAll(self, **kwargs):  # noqa: E501
        """distributionGroupInvitations_acceptAll  # noqa: E501

        Accepts all pending invitations to distribution groups for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroupInvitations_acceptAll(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroupInvitations_acceptAll_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroupInvitations_acceptAll_with_http_info(**kwargs)  # noqa: E501
            return data

    def distributionGroupInvitations_acceptAll_with_http_info(self, **kwargs):  # noqa: E501
        """distributionGroupInvitations_acceptAll  # noqa: E501

        Accepts all pending invitations to distribution groups for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroupInvitations_acceptAll_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroupInvitations_acceptAll" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/distribution_groups/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appInvitations_reject(self, invitation_token, **kwargs):  # noqa: E501
        """appInvitations_reject  # noqa: E501

        Rejects a pending invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_reject(invitation_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param string invitation_token: The app invitation token that was sent to the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.appInvitations_reject_with_http_info(invitation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.appInvitations_reject_with_http_info(invitation_token, **kwargs)  # noqa: E501
            return data

    def appInvitations_reject_with_http_info(self, invitation_token, **kwargs):  # noqa: E501
        """appInvitations_reject  # noqa: E501

        Rejects a pending invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_reject_with_http_info(invitation_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param string invitation_token: The app invitation token that was sent to the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appInvitations_reject" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_token' is set
        if ('invitation_token' not in params or
                params['invitation_token'] is None):
            raise ValueError("Missing the required parameter `invitation_token` when calling `appInvitations_reject`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_token' in params:
            path_params['invitation_token'] = params['invitation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/apps/{invitation_token}/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appInvitations_accept(self, invitation_token, **kwargs):  # noqa: E501
        """appInvitations_accept  # noqa: E501

        Accepts a pending invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_accept(invitation_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param string invitation_token: The app invitation token that was sent to the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.appInvitations_accept_with_http_info(invitation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.appInvitations_accept_with_http_info(invitation_token, **kwargs)  # noqa: E501
            return data

    def appInvitations_accept_with_http_info(self, invitation_token, **kwargs):  # noqa: E501
        """appInvitations_accept  # noqa: E501

        Accepts a pending invitation for the specified user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_accept_with_http_info(invitation_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param string invitation_token: The app invitation token that was sent to the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appInvitations_accept" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_token' is set
        if ('invitation_token' not in params or
                params['invitation_token'] is None):
            raise ValueError("Missing the required parameter `invitation_token` when calling `appInvitations_accept`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_token' in params:
            path_params['invitation_token'] = params['invitation_token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/invitations/apps/{invitation_token}/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sharedconnection_Connections(self, **kwargs):  # noqa: E501
        """sharedconnection_Connections  # noqa: E501

        Gets all service connections of the service type for GDPR export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sharedconnection_Connections(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sharedconnection_Connections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sharedconnection_Connections_with_http_info(**kwargs)  # noqa: E501
            return data

    def sharedconnection_Connections_with_http_info(self, **kwargs):  # noqa: E501
        """sharedconnection_Connections  # noqa: E501

        Gets all service connections of the service type for GDPR export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sharedconnection_Connections_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sharedconnection_Connections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user/export/serviceConnections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorDetails',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_get(self, **kwargs):  # noqa: E501
        """users_get  # noqa: E501

        Returns the user profile data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_get_with_http_info(self, **kwargs):  # noqa: E501
        """users_get  # noqa: E501

        Returns the user profile data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_update(self, body, **kwargs):  # noqa: E501
        """users_update  # noqa: E501

        Updates the user profile and returns the updated user data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_update(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: The data for the created user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def users_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """users_update  # noqa: E501

        Updates the user profile and returns the updated user data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_update_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: The data for the created user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `users_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/user', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_updateOrgRole(self, org_name, user_name, body, **kwargs):  # noqa: E501
        """users_updateOrgRole  # noqa: E501

        Updates the given organization user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_updateOrgRole(org_name, user_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string user_name: The slug name of the user (required)
        :param object body: (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_updateOrgRole_with_http_info(org_name, user_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.users_updateOrgRole_with_http_info(org_name, user_name, body, **kwargs)  # noqa: E501
            return data

    def users_updateOrgRole_with_http_info(self, org_name, user_name, body, **kwargs):  # noqa: E501
        """users_updateOrgRole  # noqa: E501

        Updates the given organization user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_updateOrgRole_with_http_info(org_name, user_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string user_name: The slug name of the user (required)
        :param object body: (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'user_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_updateOrgRole" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `users_updateOrgRole`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `users_updateOrgRole`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `users_updateOrgRole`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/users/{user_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_removeFromOrg(self, org_name, user_name, **kwargs):  # noqa: E501
        """users_removeFromOrg  # noqa: E501

        Removes a user from an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_removeFromOrg(org_name, user_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string user_name: The slug name of the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_removeFromOrg_with_http_info(org_name, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_removeFromOrg_with_http_info(org_name, user_name, **kwargs)  # noqa: E501
            return data

    def users_removeFromOrg_with_http_info(self, org_name, user_name, **kwargs):  # noqa: E501
        """users_removeFromOrg  # noqa: E501

        Removes a user from an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_removeFromOrg_with_http_info(org_name, user_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string user_name: The slug name of the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'user_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_removeFromOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `users_removeFromOrg`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `users_removeFromOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/users/{user_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_listForOrg(self, org_name, **kwargs):  # noqa: E501
        """users_listForOrg  # noqa: E501

        Returns a list of users that belong to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_listForOrg(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def users_listForOrg_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """users_listForOrg  # noqa: E501

        Returns a list of users that belong to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_listForOrg_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_listForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `users_listForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_listAllTestersForOrg(self, org_name, **kwargs):  # noqa: E501
        """distributionGroups_listAllTestersForOrg  # noqa: E501

        Returns a unique list of users including the whole organization members plus testers in any shared group of that org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_listAllTestersForOrg(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_listAllTestersForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_listAllTestersForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_listAllTestersForOrg_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """distributionGroups_listAllTestersForOrg  # noqa: E501

        Returns a unique list of users including the whole organization members plus testers in any shared group of that org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_listAllTestersForOrg_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_listAllTestersForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_listAllTestersForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/testers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_removeUser(self, org_name, team_name, user_name, **kwargs):  # noqa: E501
        """teams_removeUser  # noqa: E501

        Removes a user from a team that is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_removeUser(org_name, team_name, user_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param string user_name: The slug name of the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_removeUser_with_http_info(org_name, team_name, user_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_removeUser_with_http_info(org_name, team_name, user_name, **kwargs)  # noqa: E501
            return data

    def teams_removeUser_with_http_info(self, org_name, team_name, user_name, **kwargs):  # noqa: E501
        """teams_removeUser  # noqa: E501

        Removes a user from a team that is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_removeUser_with_http_info(org_name, team_name, user_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param string user_name: The slug name of the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'user_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_removeUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_removeUser`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_removeUser`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `teams_removeUser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501
        if 'user_name' in params:
            path_params['user_name'] = params['user_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_getUsers(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_getUsers  # noqa: E501

        Returns the users of a team which is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_getUsers(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_getUsers_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_getUsers_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_getUsers_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_getUsers  # noqa: E501

        Returns the users of a team which is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_getUsers_with_http_info(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_getUsers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_getUsers`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_getUsers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_addUser(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_addUser  # noqa: E501

        Adds a new user to a team that is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_addUser(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param object body: The email of the user to add to the team(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_addUser_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_addUser_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_addUser_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_addUser  # noqa: E501

        Adds a new user to a team that is owned by an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_addUser_with_http_info(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param object body: The email of the user to add to the team(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_addUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_addUser`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_addUser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_updatePermissions(self, org_name, team_name, app_name, **kwargs):  # noqa: E501
        """teams_updatePermissions  # noqa: E501

        Updates the permissions the team has to the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_updatePermissions(org_name, team_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param string app_name: The name of the application (required)
        :param object body:(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_updatePermissions_with_http_info(org_name, team_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_updatePermissions_with_http_info(org_name, team_name, app_name, **kwargs)  # noqa: E501
            return data

    def teams_updatePermissions_with_http_info(self, org_name, team_name, app_name, **kwargs):  # noqa: E501
        """teams_updatePermissions  # noqa: E501

        Updates the permissions the team has to the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_updatePermissions_with_http_info(org_name, team_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param string app_name: The name of the application (required)
        :param object body:(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_updatePermissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_updatePermissions`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_updatePermissions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `teams_updatePermissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_removeApp(self, org_name, team_name, app_name, **kwargs):  # noqa: E501
        """teams_removeApp  # noqa: E501

        Removes an app from a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_removeApp(org_name, team_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_removeApp_with_http_info(org_name, team_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_removeApp_with_http_info(org_name, team_name, app_name, **kwargs)  # noqa: E501
            return data

    def teams_removeApp_with_http_info(self, org_name, team_name, app_name, **kwargs):  # noqa: E501
        """teams_removeApp  # noqa: E501

        Removes an app from a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_removeApp_with_http_info(org_name, team_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_removeApp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_removeApp`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_removeApp`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `teams_removeApp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_addApp(self, org_name, team_name, body, **kwargs):  # noqa: E501
        """teams_addApp  # noqa: E501

        Adds an app to a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_addApp(org_name, team_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param object body: The name of the app to be added to the team. The app has to be owned by the organization. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_addApp_with_http_info(org_name, team_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_addApp_with_http_info(org_name, team_name, body, **kwargs)  # noqa: E501
            return data

    def teams_addApp_with_http_info(self, org_name, team_name, body, **kwargs):  # noqa: E501
        """teams_addApp  # noqa: E501

        Adds an app to a team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_addApp_with_http_info(org_name, team_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param object body: The name of the app to be added to the team. The app has to be owned by the organization. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_addApp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_addApp`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_addApp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `teams_addApp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_listApps(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_listApps  # noqa: E501

        Returns the apps a team has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_listApps(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_listApps_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_listApps_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_listApps_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_listApps  # noqa: E501

        Returns the apps a team has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_listApps_with_http_info(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_listApps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_listApps`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_listApps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_getTeam(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_getTeam  # noqa: E501

        Returns the details of a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_getTeam(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_getTeam_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_getTeam_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_getTeam_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_getTeam  # noqa: E501

        Returns the details of a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_getTeam_with_http_info(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_getTeam" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_getTeam`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_getTeam`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_delete(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_delete  # noqa: E501

        Deletes a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_delete(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_delete_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_delete_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_delete_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_delete  # noqa: E501

        Deletes a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_delete_with_http_info(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_delete`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_update(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_update  # noqa: E501

        Updates a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_update(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param object body: The information used to create the team(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_update_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_update_with_http_info(org_name, team_name, **kwargs)  # noqa: E501
            return data

    def teams_update_with_http_info(self, org_name, team_name, **kwargs):  # noqa: E501
        """teams_update  # noqa: E501

        Updates a single team  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_update_with_http_info(org_name, team_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string team_name: The team's name (required)
        :param object body: The information used to create the team(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'team_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_update`")  # noqa: E501
        # verify the required parameter 'team_name' is set
        if ('team_name' not in params or
                params['team_name'] is None):
            raise ValueError("Missing the required parameter `team_name` when calling `teams_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'team_name' in params:
            path_params['team_name'] = params['team_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams/{team_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_listAll(self, org_name, **kwargs):  # noqa: E501
        """teams_listAll  # noqa: E501

        Returns the list of all teams in this org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_listAll(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_listAll_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_listAll_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def teams_listAll_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """teams_listAll  # noqa: E501

        Returns the list of all teams in this org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_listAll_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_listAll" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_listAll`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def teams_createTeam(self, org_name, **kwargs):  # noqa: E501
        """teams_createTeam  # noqa: E501

        Creates a team and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_createTeam(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The information used to create the team(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.teams_createTeam_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.teams_createTeam_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def teams_createTeam_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """teams_createTeam  # noqa: E501

        Creates a team and returns it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.teams_createTeam_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The information used to create the team(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_createTeam" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `teams_createTeam`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/teams', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgInvitations_(self, org_name, email, **kwargs):  # noqa: E501
        """orgInvitations_  # noqa: E501

        Removes a user's invitation to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_(org_name, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string email: The email address of the user to send the password reset mail to. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.orgInvitations__with_http_info(org_name, email, **kwargs)  # noqa: E501
        else:
            (data) = self.orgInvitations__with_http_info(org_name, email, **kwargs)  # noqa: E501
            return data

    def orgInvitations__with_http_info(self, org_name, email, **kwargs):  # noqa: E501
        """orgInvitations_  # noqa: E501

        Removes a user's invitation to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations__with_http_info(org_name, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string email: The email address of the user to send the password reset mail to. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgInvitations_" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `orgInvitations_`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `orgInvitations_`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations/{email}/revoke', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgInvitations_sendNewInvitation(self, org_name, email, **kwargs):  # noqa: E501
        """orgInvitations_sendNewInvitation  # noqa: E501

        Cancels an existing organization invitation for the user and sends a new one  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_sendNewInvitation(org_name, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string email: The email address of the user to send the password reset mail to. (required)
        :param object body: The role of the user to be added(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.orgInvitations_sendNewInvitation_with_http_info(org_name, email, **kwargs)  # noqa: E501
        else:
            (data) = self.orgInvitations_sendNewInvitation_with_http_info(org_name, email, **kwargs)  # noqa: E501
            return data

    def orgInvitations_sendNewInvitation_with_http_info(self, org_name, email, **kwargs):  # noqa: E501
        """orgInvitations_sendNewInvitation  # noqa: E501

        Cancels an existing organization invitation for the user and sends a new one  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_sendNewInvitation_with_http_info(org_name, email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string email: The email address of the user to send the password reset mail to. (required)
        :param object body: The role of the user to be added(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'email', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgInvitations_sendNewInvitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `orgInvitations_sendNewInvitation`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `orgInvitations_sendNewInvitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations/{email}/resend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgInvitations_update(self, org_name, email, body, **kwargs):  # noqa: E501
        """orgInvitations_update  # noqa: E501

        Allows the role of an invited user to be changed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_update(org_name, email, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string email: The email address of the user to send the password reset mail to. (required)
        :param object body: The new role of the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.orgInvitations_update_with_http_info(org_name, email, body, **kwargs)  # noqa: E501
        else:
            (data) = self.orgInvitations_update_with_http_info(org_name, email, body, **kwargs)  # noqa: E501
            return data

    def orgInvitations_update_with_http_info(self, org_name, email, body, **kwargs):  # noqa: E501
        """orgInvitations_update  # noqa: E501

        Allows the role of an invited user to be changed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_update_with_http_info(org_name, email, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string email: The email address of the user to send the password reset mail to. (required)
        :param object body: The new role of the user (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'email', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgInvitations_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `orgInvitations_update`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `orgInvitations_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `orgInvitations_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations/{email}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgInvitations_create(self, org_name, **kwargs):  # noqa: E501
        """orgInvitations_create  # noqa: E501

        Invites a new or existing user to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_create(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The email of the user to invite(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.orgInvitations_create_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.orgInvitations_create_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def orgInvitations_create_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """orgInvitations_create  # noqa: E501

        Invites a new or existing user to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_create_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The email of the user to invite(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgInvitations_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `orgInvitations_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgInvitations_delete(self, org_name, **kwargs):  # noqa: E501
        """orgInvitations_delete  # noqa: E501

        Removes a user's invitation to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_delete(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The email of the user whose invitation should be removed(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.orgInvitations_delete_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.orgInvitations_delete_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def orgInvitations_delete_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """orgInvitations_delete  # noqa: E501

        Removes a user's invitation to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_delete_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The email of the user whose invitation should be removed(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgInvitations_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `orgInvitations_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgInvitations_listPending(self, org_name, **kwargs):  # noqa: E501
        """orgInvitations_listPending  # noqa: E501

        Gets the pending invitations for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_listPending(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.orgInvitations_listPending_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.orgInvitations_listPending_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def orgInvitations_listPending_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """orgInvitations_listPending  # noqa: E501

        Gets the pending invitations for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.orgInvitations_listPending_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgInvitations_listPending" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `orgInvitations_listPending`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/invitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_detailsForOrg(self, org_name, **kwargs):  # noqa: E501
        """distributionGroups_detailsForOrg  # noqa: E501

        Returns a list of distribution groups with details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_detailsForOrg(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param number apps_limit: The max number of apps to include in the response(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_detailsForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_detailsForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_detailsForOrg_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """distributionGroups_detailsForOrg  # noqa: E501

        Returns a list of distribution groups with details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_detailsForOrg_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param number apps_limit: The max number of apps to include in the response(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'apps_limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_detailsForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_detailsForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []
        if 'apps_limit' in params:
            query_params.append(('apps_limit', params['apps_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_resendSharedInvite(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_resendSharedInvite  # noqa: E501

        Resend shared distribution group invite notification to previously invited testers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_resendSharedInvite(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_resendSharedInvite_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_resendSharedInvite_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_resendSharedInvite_with_http_info(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_resendSharedInvite  # noqa: E501

        Resend shared distribution group invite notification to previously invited testers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_resendSharedInvite_with_http_info(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_resendSharedInvite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_resendSharedInvite`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_resendSharedInvite`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_resendSharedInvite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_bulkDeleteUsers(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_bulkDeleteUsers  # noqa: E501

        Delete apps from distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_bulkDeleteUsers(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_bulkDeleteUsers_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_bulkDeleteUsers_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_bulkDeleteUsers_with_http_info(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_bulkDeleteUsers  # noqa: E501

        Delete apps from distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_bulkDeleteUsers_with_http_info(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_bulkDeleteUsers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_bulkDeleteUsers`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_bulkDeleteUsers`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_bulkDeleteUsers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_listUsersForOrg(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_listUsersForOrg  # noqa: E501

        Returns a list of member in the distribution group specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_listUsersForOrg(org_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_listUsersForOrg_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_listUsersForOrg_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_listUsersForOrg_with_http_info(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_listUsersForOrg  # noqa: E501

        Returns a list of member in the distribution group specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_listUsersForOrg_with_http_info(org_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_listUsersForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_listUsersForOrg`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_listUsersForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_addUsersForOrg(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_addUsersForOrg  # noqa: E501

        Accepts an array of user email addresses to get added to the specified group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_addUsersForOrg(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: list of user email addresses that should get added as members to the specified group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_addUsersForOrg_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_addUsersForOrg_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_addUsersForOrg_with_http_info(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_addUsersForOrg  # noqa: E501

        Accepts an array of user email addresses to get added to the specified group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_addUsersForOrg_with_http_info(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: list of user email addresses that should get added as members to the specified group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_addUsersForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_addUsersForOrg`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_addUsersForOrg`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_addUsersForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_bulkDeleteApps(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_bulkDeleteApps  # noqa: E501

        Delete apps from distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_bulkDeleteApps(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_bulkDeleteApps_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_bulkDeleteApps_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_bulkDeleteApps_with_http_info(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_bulkDeleteApps  # noqa: E501

        Delete apps from distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_bulkDeleteApps_with_http_info(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_bulkDeleteApps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_bulkDeleteApps`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_bulkDeleteApps`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_bulkDeleteApps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_getApps(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_getApps  # noqa: E501

        Get apps from a distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_getApps(org_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: array
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_getApps_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_getApps_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_getApps_with_http_info(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_getApps  # noqa: E501

        Get apps from a distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_getApps_with_http_info(org_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: array
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_getApps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_getApps`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_getApps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='array',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_addApps(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_addApps  # noqa: E501

        Add apps to distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_addApps(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The name of the apps to be added to the distribution group. The apps have to be owned by the organization. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_addApps_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_addApps_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_addApps_with_http_info(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_addApps  # noqa: E501

        Add apps to distribution group in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_addApps_with_http_info(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The name of the apps to be added to the distribution group. The apps have to be owned by the organization. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_addApps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_addApps`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_addApps`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_addApps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_getForOrg(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_getForOrg  # noqa: E501

        Returns a single distribution group in org for a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_getForOrg(org_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_getForOrg_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_getForOrg_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_getForOrg_with_http_info(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_getForOrg  # noqa: E501

        Returns a single distribution group in org for a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_getForOrg_with_http_info(org_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_getForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_getForOrg`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_getForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_patchForOrg(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_patchForOrg  # noqa: E501

        Update one given distribution group name in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_patchForOrg(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The attributes to update for the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_patchForOrg_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_patchForOrg_with_http_info(org_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_patchForOrg_with_http_info(self, org_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_patchForOrg  # noqa: E501

        Update one given distribution group name in an org  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_patchForOrg_with_http_info(org_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The attributes to update for the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_patchForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_patchForOrg`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_patchForOrg`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_patchForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_deleteForOrg(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_deleteForOrg  # noqa: E501

        Deletes a single distribution group from an org with a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_deleteForOrg(org_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_deleteForOrg_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_deleteForOrg_with_http_info(org_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_deleteForOrg_with_http_info(self, org_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_deleteForOrg  # noqa: E501

        Deletes a single distribution group from an org with a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_deleteForOrg_with_http_info(org_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_deleteForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_deleteForOrg`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_deleteForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_createForOrg(self, org_name, body, **kwargs):  # noqa: E501
        """distributionGroups_createForOrg  # noqa: E501

        Creates a disribution goup which can be shared across apps under an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_createForOrg(org_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The attributes to update for the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_createForOrg_with_http_info(org_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_createForOrg_with_http_info(org_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_createForOrg_with_http_info(self, org_name, body, **kwargs):  # noqa: E501
        """distributionGroups_createForOrg  # noqa: E501

        Creates a disribution goup which can be shared across apps under an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_createForOrg_with_http_info(org_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The attributes to update for the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_createForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_createForOrg`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_createForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_listForOrg(self, org_name, **kwargs):  # noqa: E501
        """distributionGroups_listForOrg  # noqa: E501

        Returns a list of distribution groups in the org specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_listForOrg(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_listForOrg_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """distributionGroups_listForOrg  # noqa: E501

        Returns a list of distribution groups in the org specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_listForOrg_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_listForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `distributionGroups_listForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/distribution_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azureSubscription_listForOrg(self, org_name, **kwargs):  # noqa: E501
        """azureSubscription_listForOrg  # noqa: E501

        Returns a list of azure subscriptions for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_listForOrg(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.azureSubscription_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.azureSubscription_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def azureSubscription_listForOrg_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """azureSubscription_listForOrg  # noqa: E501

        Returns a list of azure subscriptions for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_listForOrg_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azureSubscription_listForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `azureSubscription_listForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/azure_subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_updateAvatar(self, org_name, **kwargs):  # noqa: E501
        """organization_updateAvatar  # noqa: E501

        Sets the organization avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organization_updateAvatar(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body:(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organization_updateAvatar_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_updateAvatar_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def organization_updateAvatar_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """organization_updateAvatar  # noqa: E501

        Sets the organization avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organization_updateAvatar_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body:(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_updateAvatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organization_updateAvatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/avatar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_deleteAvatar(self, org_name, **kwargs):  # noqa: E501
        """organization_deleteAvatar  # noqa: E501

        Deletes the uploaded organization avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organization_deleteAvatar(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organization_deleteAvatar_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_deleteAvatar_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def organization_deleteAvatar_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """organization_deleteAvatar  # noqa: E501

        Deletes the uploaded organization avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organization_deleteAvatar_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_deleteAvatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organization_deleteAvatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/avatar', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_createForOrg(self, org_name, body, **kwargs):  # noqa: E501
        """apps_createForOrg  # noqa: E501

        Creates a new app for the organization and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_createForOrg(org_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The data for the app (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_createForOrg_with_http_info(org_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_createForOrg_with_http_info(org_name, body, **kwargs)  # noqa: E501
            return data

    def apps_createForOrg_with_http_info(self, org_name, body, **kwargs):  # noqa: E501
        """apps_createForOrg  # noqa: E501

        Creates a new app for the organization and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_createForOrg_with_http_info(org_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The data for the app (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_createForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `apps_createForOrg`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apps_createForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_listForOrg(self, org_name, **kwargs):  # noqa: E501
        """apps_listForOrg  # noqa: E501

        Returns a list of apps for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_listForOrg(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def apps_listForOrg_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """apps_listForOrg  # noqa: E501

        Returns a list of apps for the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_listForOrg_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_listForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `apps_listForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def aadGroup_listForOrg(self, org_name, **kwargs):  # noqa: E501
        """aadGroup_listForOrg  # noqa: E501

        Returns a list of aad groups that belong to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.aadGroup_listForOrg(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.aadGroup_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.aadGroup_listForOrg_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def aadGroup_listForOrg_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """aadGroup_listForOrg  # noqa: E501

        Returns a list of aad groups that belong to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.aadGroup_listForOrg_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aadGroup_listForOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `aadGroup_listForOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/aad_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_addAADGroups(self, org_name, body, **kwargs):  # noqa: E501
        """organization_addAADGroups  # noqa: E501

        Adds aad groups to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organization_addAADGroups(org_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: the AAD group added (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organization_addAADGroups_with_http_info(org_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_addAADGroups_with_http_info(org_name, body, **kwargs)  # noqa: E501
            return data

    def organization_addAADGroups_with_http_info(self, org_name, body, **kwargs):  # noqa: E501
        """organization_addAADGroups  # noqa: E501

        Adds aad groups to an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organization_addAADGroups_with_http_info(org_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: the AAD group added (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_addAADGroups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organization_addAADGroups`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `organization_addAADGroups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}/aad_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_get(self, org_name, **kwargs):  # noqa: E501
        """organizations_get  # noqa: E501

        Returns the details of a single organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_get(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_get_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_get_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def organizations_get_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """organizations_get  # noqa: E501

        Returns the details of a single organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_get_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organizations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_update(self, org_name, body, **kwargs):  # noqa: E501
        """organizations_update  # noqa: E501

        Returns a list of organizations the requesting user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_update(org_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The data for the org (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_update_with_http_info(org_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_update_with_http_info(org_name, body, **kwargs)  # noqa: E501
            return data

    def organizations_update_with_http_info(self, org_name, body, **kwargs):  # noqa: E501
        """organizations_update  # noqa: E501

        Returns a list of organizations the requesting user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_update_with_http_info(org_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :param object body: The data for the org (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organizations_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `organizations_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_delete(self, org_name, **kwargs):  # noqa: E501
        """organizations_delete  # noqa: E501

        Deletes a single organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_delete(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_delete_with_http_info(org_name, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_delete_with_http_info(org_name, **kwargs)  # noqa: E501
            return data

    def organizations_delete_with_http_info(self, org_name, **kwargs):  # noqa: E501
        """organizations_delete  # noqa: E501

        Deletes a single organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_delete_with_http_info(org_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string org_name: The organization's name (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_name' is set
        if ('org_name' not in params or
                params['org_name'] is None):
            raise ValueError("Missing the required parameter `org_name` when calling `organizations_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_name' in params:
            path_params['org_name'] = params['org_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs/{org_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_createOrUpdate(self, body, **kwargs):  # noqa: E501
        """organizations_createOrUpdate  # noqa: E501

        Creates a new organization and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_createOrUpdate(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: The organization data (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_createOrUpdate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_createOrUpdate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def organizations_createOrUpdate_with_http_info(self, body, **kwargs):  # noqa: E501
        """organizations_createOrUpdate  # noqa: E501

        Creates a new organization and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_createOrUpdate_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: The organization data (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_createOrUpdate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `organizations_createOrUpdate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_list(self, **kwargs):  # noqa: E501
        """organizations_list  # noqa: E501

        Returns a list of organizations the requesting user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organizations_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organizations_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def organizations_list_with_http_info(self, **kwargs):  # noqa: E501
        """organizations_list  # noqa: E501

        Returns a list of organizations the requesting user has access to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organizations_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/orgs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitations_sent(self, **kwargs):  # noqa: E501
        """invitations_sent  # noqa: E501

        Returns all invitations sent by the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitations_sent(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitations_sent_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invitations_sent_with_http_info(**kwargs)  # noqa: E501
            return data

    def invitations_sent_with_http_info(self, **kwargs):  # noqa: E501
        """invitations_sent  # noqa: E501

        Returns all invitations sent by the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitations_sent_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitations_sent" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/invitations/sent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azureSubscription_listForUser(self, **kwargs):  # noqa: E501
        """azureSubscription_listForUser  # noqa: E501

        Returns a list of azure subscriptions for the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_listForUser(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.azureSubscription_listForUser_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.azureSubscription_listForUser_with_http_info(**kwargs)  # noqa: E501
            return data

    def azureSubscription_listForUser_with_http_info(self, **kwargs):  # noqa: E501
        """azureSubscription_listForUser  # noqa: E501

        Returns a list of azure subscriptions for the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_listForUser_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azureSubscription_listForUser" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/azure_subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_removeUser(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """apps_removeUser  # noqa: E501

        Removes the user from the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_removeUser(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The user email of the user to delete (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_removeUser_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_removeUser_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def apps_removeUser_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """apps_removeUser  # noqa: E501

        Removes the user from the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_removeUser_with_http_info(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The user email of the user to delete (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_removeUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_removeUser`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_removeUser`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `apps_removeUser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_updateUserPermissions(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """apps_updateUserPermissions  # noqa: E501

        Update user permission for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_updateUserPermissions(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The user email of the user to patch (required)
        :param object body: The value to update the user permission for the app.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_updateUserPermissions_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_updateUserPermissions_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def apps_updateUserPermissions_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """apps_updateUserPermissions  # noqa: E501

        Update user permission for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_updateUserPermissions_with_http_info(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The user email of the user to patch (required)
        :param object body: The value to update the user permission for the app.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_updateUserPermissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_updateUserPermissions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_updateUserPermissions`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `apps_updateUserPermissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/users/{user_email}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """users_list  # noqa: E501

        Returns the users associated with the app specified with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_list(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.users_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def users_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """users_list  # noqa: E501

        Returns the users associated with the app specified with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_list_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `users_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `users_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_transferToOrg(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_transferToOrg  # noqa: E501

        Transfers ownership of an app to a new organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_transferToOrg(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_transferToOrg_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_transferToOrg_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_transferToOrg_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_transferToOrg  # noqa: E501

        Transfers ownership of an app to a new organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_transferToOrg_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_transferToOrg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_transferToOrg`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_transferToOrg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/transfer_to_org', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_transferOwnership(self, owner_name, app_name, destination_owner_name, **kwargs):  # noqa: E501
        """apps_transferOwnership  # noqa: E501

        Transfers ownership of an app to a different user or organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_transferOwnership(owner_name, app_name, destination_owner_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string destination_owner_name: The name of the owner (user or organization) to which the app is being transferred (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_transferOwnership_with_http_info(owner_name, app_name, destination_owner_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_transferOwnership_with_http_info(owner_name, app_name, destination_owner_name, **kwargs)  # noqa: E501
            return data

    def apps_transferOwnership_with_http_info(self, owner_name, app_name, destination_owner_name, **kwargs):  # noqa: E501
        """apps_transferOwnership  # noqa: E501

        Transfers ownership of an app to a different user or organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_transferOwnership_with_http_info(owner_name, app_name, destination_owner_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string destination_owner_name: The name of the owner (user or organization) to which the app is being transferred (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'destination_owner_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_transferOwnership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_transferOwnership`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_transferOwnership`")  # noqa: E501
        # verify the required parameter 'destination_owner_name' is set
        if ('destination_owner_name' not in params or
                params['destination_owner_name'] is None):
            raise ValueError("Missing the required parameter `destination_owner_name` when calling `apps_transferOwnership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'destination_owner_name' in params:
            path_params['destination_owner_name'] = params['destination_owner_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_listTesters(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_listTesters  # noqa: E501

        Returns the testers associated with the app specified with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_listTesters(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_listTesters_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_listTesters_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_listTesters_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_listTesters  # noqa: E501

        Returns the testers associated with the app specified with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_listTesters_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_listTesters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_listTesters`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_listTesters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/testers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_getTeams(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_getTeams  # noqa: E501

        Returns the details of all teams that have access to the app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_getTeams(app_name, owner_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string app_name: The name of the application (required)
        :param string owner_name: The name of the owner (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_getTeams_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_getTeams_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
            return data

    def apps_getTeams_with_http_info(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_getTeams  # noqa: E501

        Returns the details of all teams that have access to the app.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_getTeams_with_http_info(app_name, owner_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string app_name: The name of the application (required)
        :param string owner_name: The name of the owner (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'owner_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_getTeams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_getTeams`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_getTeams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appInvitations_createByEmail(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """appInvitations_createByEmail  # noqa: E501

        Invites a new or existing user to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_createByEmail(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The email of the user to invite (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.appInvitations_createByEmail_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.appInvitations_createByEmail_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def appInvitations_createByEmail_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """appInvitations_createByEmail  # noqa: E501

        Invites a new or existing user to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_createByEmail_with_http_info(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The email of the user to invite (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appInvitations_createByEmail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `appInvitations_createByEmail`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `appInvitations_createByEmail`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `appInvitations_createByEmail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appInvitations_updatePermissions(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """appInvitations_updatePermissions  # noqa: E501

        Update pending invitation permission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_updatePermissions(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The email of the user to invite (required)
        :param object body: The value to update the user permission in the invite.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.appInvitations_updatePermissions_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.appInvitations_updatePermissions_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def appInvitations_updatePermissions_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """appInvitations_updatePermissions  # noqa: E501

        Update pending invitation permission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_updatePermissions_with_http_info(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The email of the user to invite (required)
        :param object body: The value to update the user permission in the invite.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appInvitations_updatePermissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `appInvitations_updatePermissions`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `appInvitations_updatePermissions`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `appInvitations_updatePermissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appInvitations_delete(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """appInvitations_delete  # noqa: E501

        Removes a user's invitation to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_delete(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The email of the user to invite (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.appInvitations_delete_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
        else:
            (data) = self.appInvitations_delete_with_http_info(owner_name, app_name, user_email, **kwargs)  # noqa: E501
            return data

    def appInvitations_delete_with_http_info(self, owner_name, app_name, user_email, **kwargs):  # noqa: E501
        """appInvitations_delete  # noqa: E501

        Removes a user's invitation to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_delete_with_http_info(owner_name, app_name, user_email, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string user_email: The email of the user to invite (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'user_email']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appInvitations_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `appInvitations_delete`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `appInvitations_delete`")  # noqa: E501
        # verify the required parameter 'user_email' is set
        if ('user_email' not in params or
                params['user_email'] is None):
            raise ValueError("Missing the required parameter `user_email` when calling `appInvitations_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'user_email' in params:
            path_params['user_email'] = params['user_email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appInvitations_create(self, owner_name, app_name, **kwargs):  # noqa: E501
        """appInvitations_create  # noqa: E501

        Invites a new or existing user to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_create(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The email of the user to invite(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.appInvitations_create_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.appInvitations_create_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def appInvitations_create_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """appInvitations_create  # noqa: E501

        Invites a new or existing user to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_create_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The email of the user to invite(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appInvitations_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `appInvitations_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `appInvitations_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appInvitations_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """appInvitations_list  # noqa: E501

        Gets the pending invitations for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_list(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.appInvitations_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.appInvitations_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def appInvitations_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """appInvitations_list  # noqa: E501

        Gets the pending invitations for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.appInvitations_list_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appInvitations_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `appInvitations_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `appInvitations_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/invitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_resendInvite(self, owner_name, app_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_resendInvite  # noqa: E501

        Resend distribution group app invite notification to previously invited testers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_resendInvite(owner_name, app_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_resendInvite_with_http_info(owner_name, app_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_resendInvite_with_http_info(owner_name, app_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_resendInvite_with_http_info(self, owner_name, app_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_resendInvite  # noqa: E501

        Resend distribution group app invite notification to previously invited testers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_resendInvite_with_http_info(owner_name, app_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_resendInvite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_resendInvite`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_resendInvite`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_resendInvite`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_resendInvite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_removeUser(self, owner_name, app_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_removeUser  # noqa: E501

        Remove the users from the distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_removeUser(owner_name, app_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_removeUser_with_http_info(owner_name, app_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_removeUser_with_http_info(owner_name, app_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_removeUser_with_http_info(self, owner_name, app_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_removeUser  # noqa: E501

        Remove the users from the distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_removeUser_with_http_info(owner_name, app_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_removeUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_removeUser`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_removeUser`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_removeUser`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_removeUser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_listUsers(self, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_listUsers  # noqa: E501

        Returns a list of member details in the distribution group specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_listUsers(owner_name, app_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param boolean exclude_pending_invitations: Whether to exclude pending invitations in the response(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_listUsers_with_http_info(owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_listUsers_with_http_info(owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_listUsers_with_http_info(self, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_listUsers  # noqa: E501

        Returns a list of member details in the distribution group specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_listUsers_with_http_info(owner_name, app_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param boolean exclude_pending_invitations: Whether to exclude pending invitations in the response(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'distribution_group_name', 'exclude_pending_invitations']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_listUsers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_listUsers`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_listUsers`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_listUsers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []
        if 'exclude_pending_invitations' in params:
            query_params.append(('exclude_pending_invitations', params['exclude_pending_invitations']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_addUser(self, owner_name, app_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_addUser  # noqa: E501

        Adds the members to the specified distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_addUser(owner_name, app_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_addUser_with_http_info(owner_name, app_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_addUser_with_http_info(owner_name, app_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_addUser_with_http_info(self, owner_name, app_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_addUser  # noqa: E501

        Adds the members to the specified distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_addUser_with_http_info(owner_name, app_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The list of members to add (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_addUser" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_addUser`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_addUser`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_addUser`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_addUser`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_get(self, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_get  # noqa: E501

        Returns a single distribution group for a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_get(owner_name, app_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_get_with_http_info(owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_get_with_http_info(owner_name, app_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_get_with_http_info(self, owner_name, app_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_get  # noqa: E501

        Returns a single distribution group for a given distribution group name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_get_with_http_info(owner_name, app_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_get`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_update(self, owner_name, app_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_update  # noqa: E501

        Updates the attributes of distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_update(owner_name, app_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The attributes to update for the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_update_with_http_info(owner_name, app_name, distribution_group_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_update_with_http_info(owner_name, app_name, distribution_group_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_update_with_http_info(self, owner_name, app_name, distribution_group_name, body, **kwargs):  # noqa: E501
        """distributionGroups_update  # noqa: E501

        Updates the attributes of distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_update_with_http_info(owner_name, app_name, distribution_group_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :param object body: The attributes to update for the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'distribution_group_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_update`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_update`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_delete(self, app_name, owner_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_delete  # noqa: E501

        Deletes a distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_delete(app_name, owner_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string app_name: The name of the application (required)
        :param string owner_name: The name of the owner (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_delete_with_http_info(app_name, owner_name, distribution_group_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_delete_with_http_info(app_name, owner_name, distribution_group_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_delete_with_http_info(self, app_name, owner_name, distribution_group_name, **kwargs):  # noqa: E501
        """distributionGroups_delete  # noqa: E501

        Deletes a distribution group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_delete_with_http_info(app_name, owner_name, distribution_group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string app_name: The name of the application (required)
        :param string owner_name: The name of the owner (required)
        :param string distribution_group_name: The name of the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'owner_name', 'distribution_group_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_delete`")  # noqa: E501
        # verify the required parameter 'distribution_group_name' is set
        if ('distribution_group_name' not in params or
                params['distribution_group_name'] is None):
            raise ValueError("Missing the required parameter `distribution_group_name` when calling `distributionGroups_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'distribution_group_name' in params:
            path_params['distribution_group_name'] = params['distribution_group_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_list(self, owner_name, app_name, **kwargs):  # noqa: E501
        """distributionGroups_list  # noqa: E501

        Returns a list of distribution groups in the app specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_list(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_list_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def distributionGroups_list_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """distributionGroups_list  # noqa: E501

        Returns a list of distribution groups in the app specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_list_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_list`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionGroups_create(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """distributionGroups_create  # noqa: E501

        Creates a new distribution group and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_create(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The attributes to update for the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.distributionGroups_create_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionGroups_create_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def distributionGroups_create_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """distributionGroups_create  # noqa: E501

        Creates a new distribution group and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distributionGroups_create_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The attributes to update for the distribution group (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionGroups_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `distributionGroups_create`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `distributionGroups_create`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributionGroups_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/distribution_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azureSubscription_deleteForApp(self, azure_subscription_id, owner_name, app_name, **kwargs):  # noqa: E501
        """azureSubscription_deleteForApp  # noqa: E501

        Delete the azure subscriptions for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_deleteForApp(azure_subscription_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string azure_subscription_id: The unique ID (UUID) of the azure subscription (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.azureSubscription_deleteForApp_with_http_info(azure_subscription_id, owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.azureSubscription_deleteForApp_with_http_info(azure_subscription_id, owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def azureSubscription_deleteForApp_with_http_info(self, azure_subscription_id, owner_name, app_name, **kwargs):  # noqa: E501
        """azureSubscription_deleteForApp  # noqa: E501

        Delete the azure subscriptions for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_deleteForApp_with_http_info(azure_subscription_id, owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string azure_subscription_id: The unique ID (UUID) of the azure subscription (required)
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['azure_subscription_id', 'owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azureSubscription_deleteForApp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'azure_subscription_id' is set
        if ('azure_subscription_id' not in params or
                params['azure_subscription_id'] is None):
            raise ValueError("Missing the required parameter `azure_subscription_id` when calling `azureSubscription_deleteForApp`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `azureSubscription_deleteForApp`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `azureSubscription_deleteForApp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'azure_subscription_id' in params:
            path_params['azure_subscription_id'] = params['azure_subscription_id']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azureSubscription_listForApp(self, owner_name, app_name, **kwargs):  # noqa: E501
        """azureSubscription_listForApp  # noqa: E501

        Returns a list of azure subscriptions for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_listForApp(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.azureSubscription_listForApp_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.azureSubscription_listForApp_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def azureSubscription_listForApp_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """azureSubscription_listForApp  # noqa: E501

        Returns a list of azure subscriptions for the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_listForApp_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azureSubscription_listForApp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `azureSubscription_listForApp`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `azureSubscription_listForApp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def azureSubscription_linkForApp(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """azureSubscription_linkForApp  # noqa: E501

        Link azure subscription to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_linkForApp(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The azure subscription data needed to be link to the app. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.azureSubscription_linkForApp_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.azureSubscription_linkForApp_with_http_info(owner_name, app_name, body, **kwargs)  # noqa: E501
            return data

    def azureSubscription_linkForApp_with_http_info(self, owner_name, app_name, body, **kwargs):  # noqa: E501
        """azureSubscription_linkForApp  # noqa: E501

        Link azure subscription to an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.azureSubscription_linkForApp_with_http_info(owner_name, app_name, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body: The azure subscription data needed to be link to the app. (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method azureSubscription_linkForApp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `azureSubscription_linkForApp`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `azureSubscription_linkForApp`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `azureSubscription_linkForApp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_updateAvatar(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_updateAvatar  # noqa: E501

        Sets the app avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_updateAvatar(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body:(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_updateAvatar_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_updateAvatar_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_updateAvatar_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_updateAvatar  # noqa: E501

        Sets the app avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_updateAvatar_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :param object body:(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_updateAvatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_updateAvatar`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_updateAvatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/avatar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_deleteAvatar(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_deleteAvatar  # noqa: E501

        Deletes the uploaded app avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_deleteAvatar(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_deleteAvatar_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_deleteAvatar_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_deleteAvatar_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_deleteAvatar  # noqa: E501

        Deletes the uploaded app avatar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_deleteAvatar_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_deleteAvatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_deleteAvatar`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_deleteAvatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}/avatar', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_get  # noqa: E501

        Return a specific app with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_get(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_get_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_with_http_info(owner_name, app_name, **kwargs)  # noqa: E501
            return data

    def apps_get_with_http_info(self, owner_name, app_name, **kwargs):  # noqa: E501
        """apps_get  # noqa: E501

        Return a specific app with the given app name which belongs to the given owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_get_with_http_info(owner_name, app_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string owner_name: The name of the owner (required)
        :param string app_name: The name of the application (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_name', 'app_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_get`")  # noqa: E501
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_update(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_update  # noqa: E501

        Partially updates a single app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_update(app_name, owner_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string app_name: The name of the application (required)
        :param string owner_name: The name of the owner (required)
        :param object body: The partial data for the app(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_update_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_update_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
            return data

    def apps_update_with_http_info(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_update  # noqa: E501

        Partially updates a single app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_update_with_http_info(app_name, owner_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string app_name: The name of the application (required)
        :param string owner_name: The name of the owner (required)
        :param object body: The partial data for the app(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'owner_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_update`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_delete(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_delete  # noqa: E501

        Delete an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_delete(app_name, owner_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string app_name: The name of the application (required)
        :param string owner_name: The name of the owner (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_delete_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_delete_with_http_info(app_name, owner_name, **kwargs)  # noqa: E501
            return data

    def apps_delete_with_http_info(self, app_name, owner_name, **kwargs):  # noqa: E501
        """apps_delete  # noqa: E501

        Delete an app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_delete_with_http_info(app_name, owner_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param string app_name: The name of the application (required)
        :param string owner_name: The name of the owner (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_name', 'owner_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_name' is set
        if ('app_name' not in params or
                params['app_name'] is None):
            raise ValueError("Missing the required parameter `app_name` when calling `apps_delete`")  # noqa: E501
        # verify the required parameter 'owner_name' is set
        if ('owner_name' not in params or
                params['owner_name'] is None):
            raise ValueError("Missing the required parameter `owner_name` when calling `apps_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_name' in params:
            path_params['app_name'] = params['app_name']  # noqa: E501
        if 'owner_name' in params:
            path_params['owner_name'] = params['owner_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps/{owner_name}/{app_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_create(self, body, **kwargs):  # noqa: E501
        """apps_create  # noqa: E501

        Creates a new app and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_create(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: The data for the app (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def apps_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """apps_create  # noqa: E501

        Creates a new app and returns it to the caller  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_create_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: The data for the app (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apps_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_list(self, **kwargs):  # noqa: E501
        """apps_list  # noqa: E501

        Returns a list of apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param string $orderBy: The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apps_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apps_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def apps_list_with_http_info(self, **kwargs):  # noqa: E501
        """apps_list  # noqa: E501

        Returns a list of apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apps_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param string $orderBy: The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order.(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['$orderBy']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '$orderBy' in params:
            query_params.append(('$orderBy', params['$orderBy']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiTokens_delete(self, api_token_id, **kwargs):  # noqa: E501
        """apiTokens_delete  # noqa: E501

        Delete the api_token object with the specific id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apiTokens_delete(api_token_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param string api_token_id: The unique ID (UUID) of the api token (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apiTokens_delete_with_http_info(api_token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.apiTokens_delete_with_http_info(api_token_id, **kwargs)  # noqa: E501
            return data

    def apiTokens_delete_with_http_info(self, api_token_id, **kwargs):  # noqa: E501
        """apiTokens_delete  # noqa: E501

        Delete the api_token object with the specific id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apiTokens_delete_with_http_info(api_token_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param string api_token_id: The unique ID (UUID) of the api token (required)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_token_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiTokens_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_token_id' is set
        if ('api_token_id' not in params or
                params['api_token_id'] is None):
            raise ValueError("Missing the required parameter `api_token_id` when calling `apiTokens_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_token_id' in params:
            path_params['api_token_id'] = params['api_token_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/api_tokens/{api_token_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiTokens_list(self, **kwargs):  # noqa: E501
        """apiTokens_list  # noqa: E501

        Returns api tokens for the authenticated user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apiTokens_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apiTokens_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiTokens_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiTokens_list_with_http_info(self, **kwargs):  # noqa: E501
        """apiTokens_list  # noqa: E501

        Returns api tokens for the authenticated user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apiTokens_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiTokens_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/api_tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apiTokens_new(self, **kwargs):  # noqa: E501
        """apiTokens_new  # noqa: E501

        Creates a new API token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apiTokens_new(async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: Description of the token(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.apiTokens_new_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apiTokens_new_with_http_info(**kwargs)  # noqa: E501
            return data

    def apiTokens_new_with_http_info(self, **kwargs):  # noqa: E501
        """apiTokens_new  # noqa: E501

        Creates a new API token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.apiTokens_new_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param object body: Description of the token(optional)
        :return: ErrorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apiTokens_new" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/v0.1/api_tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ErrorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
