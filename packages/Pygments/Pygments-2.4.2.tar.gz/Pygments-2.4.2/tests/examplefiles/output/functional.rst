(lp0
(ccopy_reg
_reconstructor
p1
(cpygments.token
_TokenType
p2
c__builtin__
tuple
p3
(S'Generic'
p4
S'Heading'
p5
tp6
tp7
Rp8
(dp9
S'parent'
p10
g1
(g2
g3
(g4
tp11
tp12
Rp13
(dp14
g10
g1
(g2
g3
(ttp15
Rp16
(dp17
S'Number'
p18
g1
(g2
g3
(S'Literal'
p19
g18
tp20
tp21
Rp22
(dp23
S'Integer'
p24
g1
(g2
g3
(g19
g18
g24
tp25
tp26
Rp27
(dp28
g10
g22
sS'Long'
p29
g1
(g2
g3
(g19
g18
g24
g29
tp30
tp31
Rp32
(dp33
g10
g27
sS'subtypes'
p34
c__builtin__
set
p35
((lp36
tp37
Rp38
sbsg34
g35
((lp39
g32
atp40
Rp41
sbsg10
g1
(g2
g3
(g19
tp42
tp43
Rp44
(dp45
S'Scalar'
p46
g1
(g2
g3
(g19
g46
tp47
tp48
Rp49
(dp50
g10
g44
sg34
g35
((lp51
g1
(g2
g3
(g19
g46
S'Plain'
p52
tp53
tp54
Rp55
(dp56
g10
g49
sg34
g35
((lp57
tp58
Rp59
sbatp60
Rp61
sg52
g55
sbsg18
g22
sg10
g16
sS'Other'
p62
g1
(g2
g3
(g19
g62
tp63
tp64
Rp65
(dp66
g10
g44
sg34
g35
((lp67
tp68
Rp69
sbsS'Char'
p70
g1
(g2
g3
(g19
g70
tp71
tp72
Rp73
(dp74
g10
g44
sg34
g35
((lp75
tp76
Rp77
sbsS'String'
p78
g1
(g2
g3
(g19
g78
tp79
tp80
Rp81
(dp82
g70
g1
(g2
g3
(g19
g78
g70
tp83
tp84
Rp85
(dp86
g10
g81
sg34
g35
((lp87
tp88
Rp89
sbsS'Backtick'
p90
g1
(g2
g3
(g19
g78
g90
tp91
tp92
Rp93
(dp94
g10
g81
sg34
g35
((lp95
tp96
Rp97
sbsS'Heredoc'
p98
g1
(g2
g3
(g19
g78
g98
tp99
tp100
Rp101
(dp102
g10
g81
sg34
g35
((lp103
tp104
Rp105
sbsS'Symbol'
p106
g1
(g2
g3
(g19
g78
g106
tp107
tp108
Rp109
(dp110
g10
g81
sg34
g35
((lp111
tp112
Rp113
sbsS'Interpol'
p114
g1
(g2
g3
(g19
g78
g114
tp115
tp116
Rp117
(dp118
g10
g81
sg34
g35
((lp119
tp120
Rp121
sbsS'Delimiter'
p122
g1
(g2
g3
(g19
g78
g122
tp123
tp124
Rp125
(dp126
g10
g81
sg34
g35
((lp127
tp128
Rp129
sbsS'Boolean'
p130
g1
(g2
g3
(g19
g78
g130
tp131
tp132
Rp133
(dp134
g10
g81
sg34
g35
((lp135
tp136
Rp137
sbsS'Character'
p138
g1
(g2
g3
(g19
g78
g138
tp139
tp140
Rp141
(dp142
g10
g81
sg34
g35
((lp143
tp144
Rp145
sbsS'Double'
p146
g1
(g2
g3
(g19
g78
g146
tp147
tp148
Rp149
(dp150
g10
g81
sg34
g35
((lp151
tp152
Rp153
sbsS'Delimeter'
p154
g1
(g2
g3
(g19
g78
g154
tp155
tp156
Rp157
(dp158
g10
g81
sg34
g35
((lp159
tp160
Rp161
sbsS'Atom'
p162
g1
(g2
g3
(g19
g78
g162
tp163
tp164
Rp165
(dp166
g10
g81
sg34
g35
((lp167
tp168
Rp169
sbsS'Affix'
p170
g1
(g2
g3
(g19
g78
g170
tp171
tp172
Rp173
(dp174
g10
g81
sg34
g35
((lp175
tp176
Rp177
sbsS'Name'
p178
g1
(g2
g3
(g19
g78
g178
tp179
tp180
Rp181
(dp182
g10
g81
sg34
g35
((lp183
tp184
Rp185
sbsS'Regex'
p186
g1
(g2
g3
(g19
g78
g186
tp187
tp188
Rp189
(dp190
g10
g81
sg34
g35
((lp191
tp192
Rp193
sbsS'Interp'
p194
g1
(g2
g3
(g19
g78
g194
tp195
tp196
Rp197
(dp198
g10
g81
sg34
g35
((lp199
tp200
Rp201
sbsS'Escape'
p202
g1
(g2
g3
(g19
g78
g202
tp203
tp204
Rp205
(dp206
g10
g81
sg34
g35
((lp207
tp208
Rp209
sbsg34
g35
((lp210
g125
ag109
ag189
ag1
(g2
g3
(g19
g78
S'Doc'
p211
tp212
tp213
Rp214
(dp215
g10
g81
sg34
g35
((lp216
tp217
Rp218
sbag141
ag133
ag149
ag117
ag165
ag157
ag181
ag205
ag1
(g2
g3
(g19
g78
S'Single'
p219
tp220
tp221
Rp222
(dp223
g10
g81
sg34
g35
((lp224
tp225
Rp226
sbag1
(g2
g3
(g19
g78
g62
tp227
tp228
Rp229
(dp230
g10
g81
sg34
g35
((lp231
tp232
Rp233
sbag197
ag93
ag173
ag1
(g2
g3
(g19
g78
S'Moment'
p234
tp235
tp236
Rp237
(dp238
g10
g81
sg34
g35
((lp239
tp240
Rp241
sbag85
ag101
atp242
Rp243
sg219
g222
sg234
g237
sg10
g44
sg62
g229
sg211
g214
sbsg34
g35
((lp244
g81
ag73
ag65
ag1
(g2
g3
(g19
S'Date'
p245
tp246
tp247
Rp248
(dp249
g10
g44
sg34
g35
((lp250
tp251
Rp252
sbag49
ag22
atp253
Rp254
sg245
g248
sbsS'Bin'
p255
g1
(g2
g3
(g19
g18
g255
tp256
tp257
Rp258
(dp259
g10
g22
sg34
g35
((lp260
tp261
Rp262
sbsS'Radix'
p263
g1
(g2
g3
(g19
g18
g263
tp264
tp265
Rp266
(dp267
g10
g22
sg34
g35
((lp268
tp269
Rp270
sbsS'Oct'
p271
g1
(g2
g3
(g19
g18
g271
tp272
tp273
Rp274
(dp275
g10
g22
sg34
g35
((lp276
tp277
Rp278
sbsS'Dec'
p279
g1
(g2
g3
(g19
g18
g279
tp280
tp281
Rp282
(dp283
g10
g22
sg34
g35
((lp284
tp285
Rp286
sbsS'Hex'
p287
g1
(g2
g3
(g19
g18
g287
tp288
tp289
Rp290
(dp291
g10
g22
sg34
g35
((lp292
tp293
Rp294
sbsg34
g35
((lp295
g27
ag266
ag282
ag1
(g2
g3
(g19
g18
S'Decimal'
p296
tp297
tp298
Rp299
(dp300
g10
g22
sg34
g35
((lp301
tp302
Rp303
sbag258
ag1
(g2
g3
(g19
g18
S'Float'
p304
tp305
tp306
Rp307
(dp308
g10
g22
sg34
g35
((lp309
tp310
Rp311
sbag274
ag290
atp312
Rp313
sg296
g299
sg304
g307
sbsg4
g13
sS'Operator'
p314
g1
(g2
g3
(g314
tp315
tp316
Rp317
(dp318
g10
g16
sS'DBS'
p319
g1
(g2
g3
(g314
g319
tp320
tp321
Rp322
(dp323
g10
g317
sg34
g35
((lp324
tp325
Rp326
sbsg34
g35
((lp327
g322
ag1
(g2
g3
(g314
S'Word'
p328
tp329
tp330
Rp331
(dp332
g10
g317
sg34
g35
((lp333
tp334
Rp335
sbatp336
Rp337
sg328
g331
sbsg78
g81
sg178
g1
(g2
g3
(g178
tp338
tp339
Rp340
(dp341
S'Variable'
p342
g1
(g2
g3
(g178
g342
tp343
tp344
Rp345
(dp346
g10
g340
sS'Class'
p347
g1
(g2
g3
(g178
g342
g347
tp348
tp349
Rp350
(dp351
g10
g345
sg34
g35
((lp352
tp353
Rp354
sbsS'Anonymous'
p355
g1
(g2
g3
(g178
g342
g355
tp356
tp357
Rp358
(dp359
g10
g345
sg34
g35
((lp360
tp361
Rp362
sbsS'Instance'
p363
g1
(g2
g3
(g178
g342
g363
tp364
tp365
Rp366
(dp367
g10
g345
sg34
g35
((lp368
tp369
Rp370
sbsS'Global'
p371
g1
(g2
g3
(g178
g342
g371
tp372
tp373
Rp374
(dp375
g10
g345
sg34
g35
((lp376
tp377
Rp378
sbsg34
g35
((lp379
g358
ag366
ag1
(g2
g3
(g178
g342
S'Magic'
p380
tp381
tp382
Rp383
(dp384
g10
g345
sg34
g35
((lp385
tp386
Rp387
sbag374
ag350
atp388
Rp389
sg380
g383
sbsg314
g1
(g2
g3
(g178
g314
tp390
tp391
Rp392
(dp393
g10
g340
sg34
g35
((lp394
tp395
Rp396
sbsS'Decorator'
p397
g1
(g2
g3
(g178
g397
tp398
tp399
Rp400
(dp401
g10
g340
sg34
g35
((lp402
tp403
Rp404
sbsS'Entity'
p405
g1
(g2
g3
(g178
g405
tp406
tp407
Rp408
(dp409
g10
g340
sg319
g1
(g2
g3
(g178
g405
g319
tp410
tp411
Rp412
(dp413
g10
g408
sg34
g35
((lp414
tp415
Rp416
sbsg34
g35
((lp417
g412
atp418
Rp419
sbsg106
g1
(g2
g3
(g178
g106
tp420
tp421
Rp422
(dp423
g10
g340
sg34
g35
((lp424
tp425
Rp426
sbsS'Property'
p427
g1
(g2
g3
(g178
g427
tp428
tp429
Rp430
(dp431
g10
g340
sg34
g35
((lp432
tp433
Rp434
sbsS'Pseudo'
p435
g1
(g2
g3
(g178
g435
tp436
tp437
Rp438
(dp439
g10
g340
sg34
g35
((lp440
tp441
Rp442
sbsS'Type'
p443
g1
(g2
g3
(g178
g443
tp444
tp445
Rp446
(dp447
g10
g340
sg34
g35
((lp448
tp449
Rp450
sbsS'Classes'
p451
g1
(g2
g3
(g178
g451
tp452
tp453
Rp454
(dp455
g10
g340
sg34
g35
((lp456
tp457
Rp458
sbsS'Tag'
p459
g1
(g2
g3
(g178
g459
tp460
tp461
Rp462
(dp463
g10
g340
sg34
g35
((lp464
tp465
Rp466
sbsS'Constant'
p467
g1
(g2
g3
(g178
g467
tp468
tp469
Rp470
(dp471
g10
g340
sg34
g35
((lp472
tp473
Rp474
sbsS'Function'
p475
g1
(g2
g3
(g178
g475
tp476
tp477
Rp478
(dp479
g10
g340
sg34
g35
((lp480
g1
(g2
g3
(g178
g475
g380
tp481
tp482
Rp483
(dp484
g10
g478
sg34
g35
((lp485
tp486
Rp487
sbatp488
Rp489
sg380
g483
sbsS'Blubb'
p490
g1
(g2
g3
(g178
g490
tp491
tp492
Rp493
(dp494
g10
g340
sg34
g35
((lp495
tp496
Rp497
sbsS'Label'
p498
g1
(g2
g3
(g178
g498
tp499
tp500
Rp501
(dp502
g10
g340
sg34
g35
((lp503
tp504
Rp505
sbsS'Field'
p506
g1
(g2
g3
(g178
g506
tp507
tp508
Rp509
(dp510
g10
g340
sg34
g35
((lp511
tp512
Rp513
sbsS'Exception'
p514
g1
(g2
g3
(g178
g514
tp515
tp516
Rp517
(dp518
g10
g340
sg34
g35
((lp519
tp520
Rp521
sbsS'Namespace'
p522
g1
(g2
g3
(g178
g522
tp523
tp524
Rp525
(dp526
g10
g340
sg34
g35
((lp527
tp528
Rp529
sbsg34
g35
((lp530
g400
ag493
ag438
ag408
ag345
ag517
ag430
ag462
ag478
ag454
ag1
(g2
g3
(g178
g347
tp531
tp532
Rp533
(dp534
g10
g340
sg319
g1
(g2
g3
(g178
g347
g319
tp535
tp536
Rp537
(dp538
g10
g533
sg34
g35
((lp539
tp540
Rp541
sbsg34
g35
((lp542
g1
(g2
g3
(g178
g347
S'Start'
p543
tp544
tp545
Rp546
(dp547
g10
g533
sg34
g35
((lp548
tp549
Rp550
sbag537
atp551
Rp552
sg543
g546
sbag1
(g2
g3
(g178
g62
tp553
tp554
Rp555
(dp556
g10
g340
sS'Member'
p557
g1
(g2
g3
(g178
g62
g557
tp558
tp559
Rp560
(dp561
g10
g555
sg34
g35
((lp562
tp563
Rp564
sbsg34
g35
((lp565
g560
atp566
Rp567
sbag501
ag392
ag525
ag1
(g2
g3
(g178
S'Attribute'
p568
tp569
tp570
Rp571
(dp572
g10
g340
sg342
g1
(g2
g3
(g178
g568
g342
tp573
tp574
Rp575
(dp576
g10
g571
sg34
g35
((lp577
tp578
Rp579
sbsg34
g35
((lp580
g575
atp581
Rp582
sbag470
ag1
(g2
g3
(g178
S'Builtin'
p583
tp584
tp585
Rp586
(dp587
g10
g340
sg443
g1
(g2
g3
(g178
g583
g443
tp588
tp589
Rp590
(dp591
g10
g586
sg34
g35
((lp592
tp593
Rp594
sbsg34
g35
((lp595
g1
(g2
g3
(g178
g583
g435
tp596
tp597
Rp598
(dp599
g10
g586
sg34
g35
((lp600
tp601
Rp602
sbag590
atp603
Rp604
sg435
g598
sbag509
ag446
ag422
atp605
Rp606
sg10
g16
sg347
g533
sg583
g586
sg568
g571
sg62
g555
sbsS'Punctuation'
p607
g1
(g2
g3
(g607
tp608
tp609
Rp610
(dp611
g10
g16
sg34
g35
((lp612
g1
(g2
g3
(g607
S'Indicator'
p613
tp614
tp615
Rp616
(dp617
g10
g610
sg34
g35
((lp618
tp619
Rp620
sbatp621
Rp622
sg613
g616
sbsS'Comment'
p623
g1
(g2
g3
(g623
tp624
tp625
Rp626
(dp627
S'Multi'
p628
g1
(g2
g3
(g623
g628
tp629
tp630
Rp631
(dp632
g10
g626
sg34
g35
((lp633
tp634
Rp635
sbsg10
g16
sS'Special'
p636
g1
(g2
g3
(g623
g636
tp637
tp638
Rp639
(dp640
g10
g626
sg34
g35
((lp641
tp642
Rp643
sbsS'Hashbang'
p644
g1
(g2
g3
(g623
g644
tp645
tp646
Rp647
(dp648
g10
g626
sg34
g35
((lp649
tp650
Rp651
sbsS'Preproc'
p652
g1
(g2
g3
(g623
g652
tp653
tp654
Rp655
(dp656
g10
g626
sg34
g35
((lp657
tp658
Rp659
sbsg219
g1
(g2
g3
(g623
g219
tp660
tp661
Rp662
(dp663
g10
g626
sg34
g35
((lp664
tp665
Rp666
sbsS'Directive'
p667
g1
(g2
g3
(g623
g667
tp668
tp669
Rp670
(dp671
g10
g626
sg34
g35
((lp672
tp673
Rp674
sbsg211
g1
(g2
g3
(g623
g211
tp675
tp676
Rp677
(dp678
g10
g626
sg34
g35
((lp679
tp680
Rp681
sbsS'Singleline'
p682
g1
(g2
g3
(g623
g682
tp683
tp684
Rp685
(dp686
g10
g626
sg34
g35
((lp687
tp688
Rp689
sbsS'Multiline'
p690
g1
(g2
g3
(g623
g690
tp691
tp692
Rp693
(dp694
g10
g626
sg34
g35
((lp695
tp696
Rp697
sbsg34
g35
((lp698
g677
ag670
ag647
ag631
ag685
ag655
ag693
ag662
ag1
(g2
g3
(g623
S'PreprocFile'
p699
tp700
tp701
Rp702
(dp703
g10
g626
sg34
g35
((lp704
tp705
Rp706
sbag1
(g2
g3
(g623
S'SingleLine'
p707
tp708
tp709
Rp710
(dp711
g10
g626
sg34
g35
((lp712
tp713
Rp714
sbag639
atp715
Rp716
sg699
g702
sg707
g710
sbsg19
g44
sg62
g1
(g2
g3
(g62
tp717
tp718
Rp719
(dp720
g10
g16
sg34
g35
((lp721
tp722
Rp723
sbsS'Error'
p724
g1
(g2
g3
(g724
tp725
tp726
Rp727
(dp728
g10
g16
sg34
g35
((lp729
tp730
Rp731
sbsS'Token'
p732
g16
sg202
g1
(g2
g3
(g202
tp733
tp734
Rp735
(dp736
g10
g16
sg34
g35
((lp737
tp738
Rp739
sbsg34
g35
((lp740
g340
ag719
ag1
(g2
g3
(S'Keyword'
p741
tp742
tp743
Rp744
(dp745
g10
g16
sg443
g1
(g2
g3
(g741
g443
tp746
tp747
Rp748
(dp749
g10
g744
sg34
g35
((lp750
tp751
Rp752
sbsS'Control'
p753
g1
(g2
g3
(g741
g753
tp754
tp755
Rp756
(dp757
g10
g744
sg34
g35
((lp758
tp759
Rp760
sbsg467
g1
(g2
g3
(g741
g467
tp761
tp762
Rp763
(dp764
g10
g744
sg34
g35
((lp765
tp766
Rp767
sbsg522
g1
(g2
g3
(g741
g522
tp768
tp769
Rp770
(dp771
g10
g744
sg34
g35
((lp772
tp773
Rp774
sbsS'PreProc'
p775
g1
(g2
g3
(g741
g775
tp776
tp777
Rp778
(dp779
g10
g744
sg34
g35
((lp780
tp781
Rp782
sbsg435
g1
(g2
g3
(g741
g435
tp783
tp784
Rp785
(dp786
g10
g744
sg34
g35
((lp787
tp788
Rp789
sbsS'Reserved'
p790
g1
(g2
g3
(g741
g790
tp791
tp792
Rp793
(dp794
g10
g744
sg34
g35
((lp795
tp796
Rp797
sbsg34
g35
((lp798
g770
ag1
(g2
g3
(g741
g328
tp799
tp800
Rp801
(dp802
g10
g744
sg34
g35
((lp803
tp804
Rp805
sbag756
ag1
(g2
g3
(g741
S'Declaration'
p806
tp807
tp808
Rp809
(dp810
g10
g744
sg34
g35
((lp811
tp812
Rp813
sbag1
(g2
g3
(g741
g741
tp814
tp815
Rp816
(dp817
g10
g744
sg34
g35
((lp818
tp819
Rp820
sbag785
ag763
ag748
ag793
ag778
atp821
Rp822
sg741
g816
sg806
g809
sg328
g801
sbag13
ag1
(g2
g3
(S'Text'
p823
tp824
tp825
Rp826
(dp827
S'Beer'
p828
g1
(g2
g3
(g823
g828
tp829
tp830
Rp831
(dp832
g10
g826
sg34
g35
((lp833
tp834
Rp835
sbsS'Whitespace'
p836
g1
(g2
g3
(g823
g836
tp837
tp838
Rp839
(dp840
g10
g826
sg34
g35
((lp841
tp842
Rp843
sbsg10
g16
sS'Root'
p844
g1
(g2
g3
(g823
g844
tp845
tp846
Rp847
(dp848
g10
g826
sg34
g35
((lp849
tp850
Rp851
sbsg106
g1
(g2
g3
(g823
g106
tp852
tp853
Rp854
(dp855
g10
g826
sg34
g35
((lp856
tp857
Rp858
sbsg607
g1
(g2
g3
(g823
g607
tp859
tp860
Rp861
(dp862
g10
g826
sg34
g35
((lp863
tp864
Rp865
sbsg34
g35
((lp866
g847
ag854
ag861
ag839
ag831
ag1
(g2
g3
(g823
S'Rag'
p867
tp868
tp869
Rp870
(dp871
g10
g826
sg34
g35
((lp872
tp873
Rp874
sbatp875
Rp876
sg867
g870
sbag317
ag735
ag610
ag626
ag727
ag44
atp877
Rp878
sg741
g744
sg823
g826
sbsS'Deleted'
p879
g1
(g2
g3
(g4
g879
tp880
tp881
Rp882
(dp883
g10
g13
sg34
g35
((lp884
tp885
Rp886
sbsS'Subheading'
p887
g1
(g2
g3
(g4
g887
tp888
tp889
Rp890
(dp891
g10
g13
sg34
g35
((lp892
tp893
Rp894
sbsg5
g8
sS'Emph'
p895
g1
(g2
g3
(g4
g895
tp896
tp897
Rp898
(dp899
g10
g13
sg34
g35
((lp900
tp901
Rp902
sbsS'Prompt'
p903
g1
(g2
g3
(g4
g903
tp904
tp905
Rp906
(dp907
g10
g13
sg34
g35
((lp908
tp909
Rp910
sbsS'Inserted'
p911
g1
(g2
g3
(g4
g911
tp912
tp913
Rp914
(dp915
g10
g13
sg34
g35
((lp916
tp917
Rp918
sbsS'Strong'
p919
g1
(g2
g3
(g4
g919
tp920
tp921
Rp922
(dp923
g10
g13
sg34
g35
((lp924
tp925
Rp926
sbsg724
g1
(g2
g3
(g4
g724
tp927
tp928
Rp929
(dp930
g10
g13
sg34
g35
((lp931
tp932
Rp933
sbsS'Traceback'
p934
g1
(g2
g3
(g4
g934
tp935
tp936
Rp937
(dp938
g10
g13
sg34
g35
((lp939
tp940
Rp941
sbsg34
g35
((lp942
g8
ag890
ag1
(g2
g3
(g4
S'Output'
p943
tp944
tp945
Rp946
(dp947
g10
g13
sg34
g35
((lp948
tp949
Rp950
sbag922
ag898
ag929
ag937
ag914
ag906
ag882
atp951
Rp952
sg943
g946
sbsg34
g35
((lp953
tp954
Rp955
sbVFunctional Programming HOWTO
p956
tp957
a(g826
V\u000a
p958
tp959
a(g8
V================================
p960
tp961
a(g826
V\u000a
p962
tp963
a(g826
V\u000a
p964
tp965
a(g922
V**Version 0.30**
p966
tp967
a(g826
V\u000a
p968
tp969
a(g826
V\u000a
p970
tp971
a(g826
V(This is a first draft.  Please send comments/error
p972
tp973
a(g826
V\u000a
p974
tp975
a(g826
Vreports/suggestions to amk@amk.ca.  This URL is probably not going to
p976
tp977
a(g826
V\u000a
p978
tp979
a(g826
Vbe the final location of the document, so be careful about linking to
p980
tp981
a(g826
V\u000a
p982
tp983
a(g826
Vit -- you may want to add a disclaimer.)
p984
tp985
a(g826
V\u000a
p986
tp987
a(g826
V\u000a
p988
tp989
a(g826
VIn this document, we'll take a tour of Python's features suitable for
p990
tp991
a(g826
V\u000a
p992
tp993
a(g826
Vimplementing programs in a functional style.  After an introduction to
p994
tp995
a(g826
V\u000a
p996
tp997
a(g826
Vthe concepts of functional programming, we'll look at language
p998
tp999
a(g826
V\u000a
p1000
tp1001
a(g826
Vfeatures such as iterators and generators and relevant library modules
p1002
tp1003
a(g826
V\u000a
p1004
tp1005
a(g826
Vsuch as 
p1006
tp1007
a(g81
V``
p1008
tp1009
a(g81
Vitertools
p1010
tp1011
a(g81
V``
p1012
tp1013
a(g826
V and 
p1014
tp1015
a(g81
V``
p1016
tp1017
a(g81
Vfunctools
p1018
tp1019
a(g81
V``
p1020
tp1021
a(g826
V.
p1022
tp1023
a(g826
V\u000a
p1024
tp1025
a(g826
V\u000a
p1026
tp1027
a(g826
V\u000a
p1028
tp1029
a(g610
V..
p1030
tp1031
a(g826
V 
p1032
tp1033
a(g331
Vcontents
p1034
tp1035
a(g610
V::
p1036
tp1037
a(g826
V\u000a
p1038
tp1039
a(g826
V\u000a
p1040
tp1041
a(g8
VIntroduction
p1042
tp1043
a(g826
V\u000a
p1044
tp1045
a(g8
V----------------------
p1046
tp1047
a(g826
V\u000a
p1048
tp1049
a(g826
V\u000a
p1050
tp1051
a(g826
VThis section explains the basic concept of functional programming; if
p1052
tp1053
a(g826
V\u000a
p1054
tp1055
a(g826
Vyou're just interested in learning about Python language features,
p1056
tp1057
a(g826
V\u000a
p1058
tp1059
a(g826
Vskip to the next section.
p1060
tp1061
a(g826
V\u000a
p1062
tp1063
a(g826
V\u000a
p1064
tp1065
a(g826
VProgramming languages support decomposing problems in several different 
p1066
tp1067
a(g826
V\u000a
p1068
tp1069
a(g826
Vways
p1070
tp1071
a(g826
V:
p1072
tp1073
a(g826
V\u000a
p1074
tp1075
a(g826
V\u000a
p1076
tp1077
a(g22
V*
p1078
tp1079
a(g826
V Most programming languages are 
p1080
tp1081
a(g922
V**procedural**
p1082
tp1083
a(g826
g1072
tp1084
a(g826
g1032
tp1085
a(g826
V\u000a
p1086
tp1087
a(g826
V  programs are lists of instructions that tell the computer what to
p1088
tp1089
a(g826
V\u000a
p1090
tp1091
a(g826
V  do with the program's input.
p1092
tp1093
a(g826
V\u000a
p1094
tp1095
a(g826
V  C, Pascal, and even Unix shells are procedural languages.
p1096
tp1097
a(g826
V\u000a
p1098
tp1099
a(g826
V\u000a
p1100
tp1101
a(g22
g1078
tp1102
a(g826
V In 
p1103
tp1104
a(g922
V**declarative**
p1105
tp1106
a(g826
V languages, you write a specification that describes 
p1107
tp1108
a(g826
V\u000a
p1109
tp1110
a(g826
V  the problem to be solved, and the language implementation figures out 
p1111
tp1112
a(g826
V\u000a
p1113
tp1114
a(g826
V  how to perform the computation efficiently.  SQL is the declarative 
p1115
tp1116
a(g826
V\u000a
p1117
tp1118
a(g826
V  language you're most likely to be familiar with; a SQL query describes
p1119
tp1120
a(g826
V\u000a
p1121
tp1122
a(g826
V  the data set you want to retrieve, and the SQL engine decides whether to 
p1123
tp1124
a(g826
V\u000a
p1125
tp1126
a(g826
V  scan tables or use indexes, which subclauses should be performed first,
p1127
tp1128
a(g826
V\u000a
p1129
tp1130
a(g826
V  etc.
p1131
tp1132
a(g826
V\u000a
p1133
tp1134
a(g826
V\u000a
p1135
tp1136
a(g22
g1078
tp1137
a(g826
g1032
tp1138
a(g922
V**Object-oriented**
p1139
tp1140
a(g826
V programs manipulate  collections of objects.
p1141
tp1142
a(g826
V\u000a
p1143
tp1144
a(g826
V  Objects have internal state and support methods that query or modify
p1145
tp1146
a(g826
V\u000a
p1147
tp1148
a(g826
V  this internal state in some way. Smalltalk and Java are
p1149
tp1150
a(g826
V\u000a
p1151
tp1152
a(g826
V  object-oriented languages.  C++ and Python are languages that
p1153
tp1154
a(g826
V\u000a
p1155
tp1156
a(g826
V  support object-oriented programming, but don't force the use 
p1157
tp1158
a(g826
V\u000a
p1159
tp1160
a(g826
V  of object-oriented features.
p1161
tp1162
a(g826
V\u000a
p1163
tp1164
a(g826
V\u000a
p1165
tp1166
a(g22
g1078
tp1167
a(g826
g1032
tp1168
a(g922
V**Functional**
p1169
tp1170
a(g826
V programming decomposes a problem into a set of functions.
p1171
tp1172
a(g826
V\u000a
p1173
tp1174
a(g826
V  Ideally, functions only take inputs and produce outputs, and don't have any 
p1175
tp1176
a(g826
V\u000a
p1177
tp1178
a(g826
V  internal state that affects the output produced for a given input.
p1179
tp1180
a(g826
V\u000a
p1181
tp1182
a(g826
V  Well-known functional languages include the ML family (Standard ML,
p1183
tp1184
a(g826
V\u000a
p1185
tp1186
a(g826
V  OCaml, and other variants) and Haskell.
p1187
tp1188
a(g826
V\u000a
p1189
tp1190
a(g826
V\u000a
p1191
tp1192
a(g826
VThe designers of some computer languages have chosen one approach to 
p1193
tp1194
a(g826
V\u000a
p1195
tp1196
a(g826
Vprogramming that's emphasized.  This often makes it difficult to
p1197
tp1198
a(g826
V\u000a
p1199
tp1200
a(g826
Vwrite programs that use a different approach.  Other languages are
p1201
tp1202
a(g826
V\u000a
p1203
tp1204
a(g826
Vmulti-paradigm languages that support several different approaches.  Lisp,
p1205
tp1206
a(g826
V\u000a
p1207
tp1208
a(g826
VC++, and Python are multi-paradigm; you can write programs or
p1209
tp1210
a(g826
V\u000a
p1211
tp1212
a(g826
Vlibraries that are largely procedural, object-oriented, or functional
p1213
tp1214
a(g826
V\u000a
p1215
tp1216
a(g826
Vin all of these languages.  In a large program, different sections
p1217
tp1218
a(g826
V\u000a
p1219
tp1220
a(g826
Vmight be written using different approaches; the GUI might be object-oriented
p1221
tp1222
a(g826
V\u000a
p1223
tp1224
a(g826
Vwhile the processing logic is procedural or functional, for example.
p1225
tp1226
a(g826
V\u000a
p1227
tp1228
a(g826
V\u000a
p1229
tp1230
a(g826
VIn a functional program, input flows through a set of functions. Each
p1231
tp1232
a(g826
V\u000a
p1233
tp1234
a(g826
Vfunction operates on its input and produces some output.  Functional
p1235
tp1236
a(g826
V\u000a
p1237
tp1238
a(g826
Vstyle frowns upon functions with side effects that modify internal
p1239
tp1240
a(g826
V\u000a
p1241
tp1242
a(g826
Vstate or make other changes that aren't visible in the function's
p1243
tp1244
a(g826
V\u000a
p1245
tp1246
a(g826
Vreturn value.  Functions that have no side effects at all are 
p1247
tp1248
a(g826
V\u000a
p1249
tp1250
a(g826
Vcalled 
p1251
tp1252
a(g922
V**purely functional**
p1253
tp1254
a(g826
g1022
tp1255
a(g826
V\u000a
p1256
tp1257
a(g826
VAvoiding side effects means not using data structures
p1258
tp1259
a(g826
V\u000a
p1260
tp1261
a(g826
Vthat get updated as a program runs; every function's output 
p1262
tp1263
a(g826
V\u000a
p1264
tp1265
a(g826
Vmust only depend on its input.
p1266
tp1267
a(g826
V\u000a
p1268
tp1269
a(g826
V\u000a
p1270
tp1271
a(g826
VSome languages are very strict about purity and don't even have
p1272
tp1273
a(g826
V\u000a
p1274
tp1275
a(g826
Vassignment statements such as 
p1276
tp1277
a(g81
V``
p1278
tp1279
a(g81
Va=3
p1280
tp1281
a(g81
V``
p1282
tp1283
a(g826
V or 
p1284
tp1285
a(g81
V``
p1286
tp1287
a(g81
Vc = a + b
p1288
tp1289
a(g81
V``
p1290
tp1291
a(g826
V, but it's
p1292
tp1293
a(g826
V\u000a
p1294
tp1295
a(g826
Vdifficult to avoid all side effects.  Printing to the screen or
p1296
tp1297
a(g826
V\u000a
p1298
tp1299
a(g826
Vwriting to a disk file are side effects, for example.  For example, in
p1300
tp1301
a(g826
V\u000a
p1302
tp1303
a(g826
VPython a 
p1304
tp1305
a(g81
V``
p1306
tp1307
a(g81
Vprint
p1308
tp1309
a(g81
V``
p1310
tp1311
a(g826
V statement or a 
p1312
tp1313
a(g81
V``
p1314
tp1315
a(g81
Vtime.sleep(1)
p1316
tp1317
a(g81
V``
p1318
tp1319
a(g826
V both return no
p1320
tp1321
a(g826
V\u000a
p1322
tp1323
a(g826
Vuseful value; they're only called for their side effects of sending
p1324
tp1325
a(g826
V\u000a
p1326
tp1327
a(g826
Vsome text to the screen or pausing execution for a second.
p1328
tp1329
a(g826
V\u000a
p1330
tp1331
a(g826
V\u000a
p1332
tp1333
a(g826
VPython programs written in functional style usually won't go to the
p1334
tp1335
a(g826
V\u000a
p1336
tp1337
a(g826
Vextreme of avoiding all I/O or all assignments; instead, they'll
p1338
tp1339
a(g826
V\u000a
p1340
tp1341
a(g826
Vprovide a functional-appearing interface but will use non-functional
p1342
tp1343
a(g826
V\u000a
p1344
tp1345
a(g826
Vfeatures internally.  For example, the implementation of a function
p1346
tp1347
a(g826
V\u000a
p1348
tp1349
a(g826
Vwill still use assignments to local variables, but won't modify global
p1350
tp1351
a(g826
V\u000a
p1352
tp1353
a(g826
Vvariables or have other side effects.
p1354
tp1355
a(g826
V\u000a
p1356
tp1357
a(g826
V\u000a
p1358
tp1359
a(g826
VFunctional programming can be considered the opposite of
p1360
tp1361
a(g826
V\u000a
p1362
tp1363
a(g826
Vobject-oriented programming.  Objects are little capsules containing
p1364
tp1365
a(g826
V\u000a
p1366
tp1367
a(g826
Vsome internal state along with a collection of method calls that let
p1368
tp1369
a(g826
V\u000a
p1370
tp1371
a(g826
Vyou modify this state, and programs consist of making the right set of
p1372
tp1373
a(g826
V\u000a
p1374
tp1375
a(g826
Vstate changes.  Functional programming wants to avoid state changes as
p1376
tp1377
a(g826
V\u000a
p1378
tp1379
a(g826
Vmuch as possible and works with data flowing between functions.  In
p1380
tp1381
a(g826
V\u000a
p1382
tp1383
a(g826
VPython you might combine the two approaches by writing functions that
p1384
tp1385
a(g826
V\u000a
p1386
tp1387
a(g826
Vtake and return instances representing objects in your application
p1388
tp1389
a(g826
V\u000a
p1390
tp1391
a(g826
V(e-mail messages, transactions, etc.).
p1392
tp1393
a(g826
V\u000a
p1394
tp1395
a(g826
V\u000a
p1396
tp1397
a(g826
VFunctional design may seem like an odd constraint to work under.  Why
p1398
tp1399
a(g826
V\u000a
p1400
tp1401
a(g826
Vshould you avoid objects and side effects?  There are theoretical and
p1402
tp1403
a(g826
V\u000a
p1404
tp1405
a(g826
Vpractical advantages to the functional style
p1406
tp1407
a(g826
g1072
tp1408
a(g826
V\u000a
p1409
tp1410
a(g826
V\u000a
p1411
tp1412
a(g22
g1078
tp1413
a(g826
V Formal provability.
p1414
tp1415
a(g826
V\u000a
p1416
tp1417
a(g22
g1078
tp1418
a(g826
V Modularity.
p1419
tp1420
a(g826
V\u000a
p1421
tp1422
a(g22
g1078
tp1423
a(g826
V Composability.
p1424
tp1425
a(g826
V\u000a
p1426
tp1427
a(g22
g1078
tp1428
a(g826
V Ease of debugging and testing.
p1429
tp1430
a(g826
V\u000a
p1431
tp1432
a(g826
V\u000a
p1433
tp1434
a(g8
VFormal provability
p1435
tp1436
a(g826
V\u000a
p1437
tp1438
a(g8
V''''''''''''''''''''''
p1439
tp1440
a(g826
V\u000a
p1441
tp1442
a(g826
V\u000a
p1443
tp1444
a(g826
VA theoretical benefit is that it's easier to construct a mathematical proof
p1445
tp1446
a(g826
V\u000a
p1447
tp1448
a(g826
Vthat a functional program is correct.
p1449
tp1450
a(g826
V\u000a
p1451
tp1452
a(g826
V\u000a
p1453
tp1454
a(g826
VFor a long time researchers have been interested in finding ways to
p1455
tp1456
a(g826
V\u000a
p1457
tp1458
a(g826
Vmathematically prove programs correct.  This is different from testing
p1459
tp1460
a(g826
V\u000a
p1461
tp1462
a(g826
Va program on numerous inputs and concluding that its output is usually
p1463
tp1464
a(g826
V\u000a
p1465
tp1466
a(g826
Vcorrect, or reading a program's source code and concluding that the
p1467
tp1468
a(g826
V\u000a
p1469
tp1470
a(g826
Vcode looks right; the goal is instead a rigorous proof that a program
p1471
tp1472
a(g826
V\u000a
p1473
tp1474
a(g826
Vproduces the right result for all possible inputs.
p1475
tp1476
a(g826
V\u000a
p1477
tp1478
a(g826
V\u000a
p1479
tp1480
a(g826
VThe technique used to prove programs correct is to write down 
p1481
tp1482
a(g826
V\u000a
p1483
tp1484
a(g922
V**invariants**
p1485
tp1486
a(g826
V, properties of the input data and of the program's 
p1487
tp1488
a(g826
V\u000a
p1489
tp1490
a(g826
Vvariables that are always true.  For each line of code, you then show 
p1491
tp1492
a(g826
V\u000a
p1493
tp1494
a(g826
Vthat if invariants X and Y are true 
p1495
tp1496
a(g922
V**before**
p1497
tp1498
a(g826
V the line is executed, 
p1499
tp1500
a(g826
V\u000a
p1501
tp1502
a(g826
Vthe slightly different invariants X' and Y' are true 
p1503
tp1504
a(g922
V**after**
p1505
tp1506
a(g826
V\u000a
p1507
tp1508
a(g826
Vthe line is executed.  This continues until you reach the end of the
p1509
tp1510
a(g826
V\u000a
p1511
tp1512
a(g826
Vprogram, at which point the invariants should match the desired 
p1513
tp1514
a(g826
V\u000a
p1515
tp1516
a(g826
Vconditions on the program's output.
p1517
tp1518
a(g826
V\u000a
p1519
tp1520
a(g826
V\u000a
p1521
tp1522
a(g826
VFunctional programming's avoidance of assignments arose because 
p1523
tp1524
a(g826
V\u000a
p1525
tp1526
a(g826
Vassignments are difficult to handle with this technique; 
p1527
tp1528
a(g826
V\u000a
p1529
tp1530
a(g826
Vassignments can break invariants that were true before the assignment
p1531
tp1532
a(g826
V\u000a
p1533
tp1534
a(g826
Vwithout producing any new invariants that can be propagated onward.
p1535
tp1536
a(g826
V\u000a
p1537
tp1538
a(g826
V\u000a
p1539
tp1540
a(g826
VUnfortunately, proving programs correct is largely impractical and not
p1541
tp1542
a(g826
V\u000a
p1543
tp1544
a(g826
Vrelevant to Python software. Even trivial programs require proofs that
p1545
tp1546
a(g826
V\u000a
p1547
tp1548
a(g826
Vare several pages long; the proof of correctness for a moderately
p1549
tp1550
a(g826
V\u000a
p1551
tp1552
a(g826
Vcomplicated program would be enormous, and few or none of the programs
p1553
tp1554
a(g826
V\u000a
p1555
tp1556
a(g826
Vyou use daily (the Python interpreter, your XML parser, your web
p1557
tp1558
a(g826
V\u000a
p1559
tp1560
a(g826
Vbrowser) could be proven correct.  Even if you wrote down or generated
p1561
tp1562
a(g826
V\u000a
p1563
tp1564
a(g826
Va proof, there would then be the question of verifying the proof;
p1565
tp1566
a(g826
V\u000a
p1567
tp1568
a(g826
Vmaybe there's an error in it, and you wrongly believe you've proved
p1569
tp1570
a(g826
V\u000a
p1571
tp1572
a(g826
Vthe program correct.
p1573
tp1574
a(g826
V\u000a
p1575
tp1576
a(g826
V\u000a
p1577
tp1578
a(g8
VModularity
p1579
tp1580
a(g826
V\u000a
p1581
tp1582
a(g8
V''''''''''''''''''''''
p1583
tp1584
a(g826
V\u000a
p1585
tp1586
a(g826
V\u000a
p1587
tp1588
a(g826
VA more practical benefit of functional programming is that it forces
p1589
tp1590
a(g826
V\u000a
p1591
tp1592
a(g826
Vyou to break apart your problem into small pieces.  Programs are more
p1593
tp1594
a(g826
V\u000a
p1595
tp1596
a(g826
Vmodular as a result.  It's easier to specify and write a small
p1597
tp1598
a(g826
V\u000a
p1599
tp1600
a(g826
Vfunction that does one thing than a large function that performs a
p1601
tp1602
a(g826
V\u000a
p1603
tp1604
a(g826
Vcomplicated transformation.  Small functions are also easier to read
p1605
tp1606
a(g826
V\u000a
p1607
tp1608
a(g826
Vand to check for errors.
p1609
tp1610
a(g826
V\u000a
p1611
tp1612
a(g826
V\u000a
p1613
tp1614
a(g826
V\u000a
p1615
tp1616
a(g8
VEase of debugging and testing 
p1617
tp1618
a(g826
V\u000a
p1619
tp1620
a(g8
V''''''''''''''''''''''''''''''''''
p1621
tp1622
a(g826
V\u000a
p1623
tp1624
a(g826
V\u000a
p1625
tp1626
a(g826
VTesting and debugging a functional-style program is easier.
p1627
tp1628
a(g826
V\u000a
p1629
tp1630
a(g826
V\u000a
p1631
tp1632
a(g826
VDebugging is simplified because functions are generally small and
p1633
tp1634
a(g826
V\u000a
p1635
tp1636
a(g826
Vclearly specified.  When a program doesn't work, each function is an
p1637
tp1638
a(g826
V\u000a
p1639
tp1640
a(g826
Vinterface point where you can check that the data are correct.  You
p1641
tp1642
a(g826
V\u000a
p1643
tp1644
a(g826
Vcan look at the intermediate inputs and outputs to quickly isolate the
p1645
tp1646
a(g826
V\u000a
p1647
tp1648
a(g826
Vfunction that's responsible for a bug.
p1649
tp1650
a(g826
V\u000a
p1651
tp1652
a(g826
V\u000a
p1653
tp1654
a(g826
VTesting is easier because each function is a potential subject for a
p1655
tp1656
a(g826
V\u000a
p1657
tp1658
a(g826
Vunit test.  Functions don't depend on system state that needs to be
p1659
tp1660
a(g826
V\u000a
p1661
tp1662
a(g826
Vreplicated before running a test; instead you only have to synthesize
p1663
tp1664
a(g826
V\u000a
p1665
tp1666
a(g826
Vthe right input and then check that the output matches expectations.
p1667
tp1668
a(g826
V\u000a
p1669
tp1670
a(g826
V\u000a
p1671
tp1672
a(g826
V\u000a
p1673
tp1674
a(g826
V\u000a
p1675
tp1676
a(g8
VComposability
p1677
tp1678
a(g826
V\u000a
p1679
tp1680
a(g8
V''''''''''''''''''''''
p1681
tp1682
a(g826
V\u000a
p1683
tp1684
a(g826
V\u000a
p1685
tp1686
a(g826
VAs you work on a functional-style program, you'll write a number of
p1687
tp1688
a(g826
V\u000a
p1689
tp1690
a(g826
Vfunctions with varying inputs and outputs.  Some of these functions
p1691
tp1692
a(g826
V\u000a
p1693
tp1694
a(g826
Vwill be unavoidably specialized to a particular application, but
p1695
tp1696
a(g826
V\u000a
p1697
tp1698
a(g826
Vothers will be useful in a wide variety of programs.  For example, a
p1699
tp1700
a(g826
V\u000a
p1701
tp1702
a(g826
Vfunction that takes a directory path and returns all the XML files in
p1703
tp1704
a(g826
V\u000a
p1705
tp1706
a(g826
Vthe directory, or a function that takes a filename and returns its
p1707
tp1708
a(g826
V\u000a
p1709
tp1710
a(g826
Vcontents, can be applied to many different situations.
p1711
tp1712
a(g826
V\u000a
p1713
tp1714
a(g826
V\u000a
p1715
tp1716
a(g826
VOver time you'll form a personal library of utilities.  Often you'll
p1717
tp1718
a(g826
V\u000a
p1719
tp1720
a(g826
Vassemble new programs by arranging existing functions in a new
p1721
tp1722
a(g826
V\u000a
p1723
tp1724
a(g826
Vconfiguration and writing a few functions specialized for the current
p1725
tp1726
a(g826
V\u000a
p1727
tp1728
a(g826
Vtask.
p1729
tp1730
a(g826
V\u000a
p1731
tp1732
a(g826
V\u000a
p1733
tp1734
a(g826
V\u000a
p1735
tp1736
a(g826
V\u000a
p1737
tp1738
a(g8
VIterators
p1739
tp1740
a(g826
V\u000a
p1741
tp1742
a(g8
V-----------------------
p1743
tp1744
a(g826
V\u000a
p1745
tp1746
a(g826
V\u000a
p1747
tp1748
a(g826
VI'll start by looking at a Python language feature that's an important
p1749
tp1750
a(g826
V\u000a
p1751
tp1752
a(g826
Vfoundation for writing functional-style programs
p1753
tp1754
a(g826
g1072
tp1755
a(g826
V iterators.
p1756
tp1757
a(g826
V\u000a
p1758
tp1759
a(g826
V\u000a
p1760
tp1761
a(g826
VAn iterator is an object representing a stream of data; this object
p1762
tp1763
a(g826
V\u000a
p1764
tp1765
a(g826
Vreturns the data one element at a time.  A Python iterator must
p1766
tp1767
a(g826
V\u000a
p1768
tp1769
a(g826
Vsupport a method called 
p1770
tp1771
a(g81
V``
p1772
tp1773
a(g81
Vnext()
p1774
tp1775
a(g81
V``
p1776
tp1777
a(g826
V that takes no arguments and always
p1778
tp1779
a(g826
V\u000a
p1780
tp1781
a(g826
Vreturns the next element of the stream.  If there are no more elements
p1782
tp1783
a(g826
V\u000a
p1784
tp1785
a(g826
Vin the stream, 
p1786
tp1787
a(g81
V``
p1788
tp1789
a(g81
Vnext()
p1790
tp1791
a(g81
V``
p1792
tp1793
a(g826
V must raise the 
p1794
tp1795
a(g81
V``
p1796
tp1797
a(g81
VStopIteration
p1798
tp1799
a(g81
V``
p1800
tp1801
a(g826
V exception.
p1802
tp1803
a(g826
V\u000a
p1804
tp1805
a(g826
VIterators don't have to be finite, though; it's perfectly reasonable
p1806
tp1807
a(g826
V\u000a
p1808
tp1809
a(g826
Vto write an iterator that produces an infinite stream of data.
p1810
tp1811
a(g826
V\u000a
p1812
tp1813
a(g826
V\u000a
p1814
tp1815
a(g826
VThe built-in 
p1816
tp1817
a(g81
V``
p1818
tp1819
a(g81
Viter()
p1820
tp1821
a(g81
V``
p1822
tp1823
a(g826
V function takes an arbitrary object and tries
p1824
tp1825
a(g826
V\u000a
p1826
tp1827
a(g826
Vto return an iterator that will return the object's contents or
p1828
tp1829
a(g826
V\u000a
p1830
tp1831
a(g826
Velements, raising 
p1832
tp1833
a(g81
V``
p1834
tp1835
a(g81
VTypeError
p1836
tp1837
a(g81
V``
p1838
tp1839
a(g826
V if the object doesn't support
p1840
tp1841
a(g826
V\u000a
p1842
tp1843
a(g826
Viteration.  Several of Python's built-in data types support iteration,
p1844
tp1845
a(g826
V\u000a
p1846
tp1847
a(g826
Vthe most common being lists and dictionaries.  An object is called 
p1848
tp1849
a(g826
V\u000a
p1850
tp1851
a(g826
Van 
p1852
tp1853
a(g922
V**iterable**
p1854
tp1855
a(g826
V object if you can get an iterator for it.
p1856
tp1857
a(g826
V\u000a
p1858
tp1859
a(g826
V\u000a
p1860
tp1861
a(g826
VYou can experiment with the iteration interface manually
p1862
tp1863
a(g205
V::
p1864
tp1865
a(g826
V\u000a\u000a
p1866
tp1867
a(g81
V    
p1868
tp1869
a(g81
V>>> L = [1,2,3]
p1870
tp1871
a(g826
V\u000a
p1872
tp1873
a(g81
V    >>> it = iter(L)\u000a    >>> print it\u000a    <iterator object at 0x8116870>\u000a    >>> it.next()\u000a    1\u000a    >>> it.next()\u000a    2\u000a    >>> it.next()\u000a    3\u000a    >>> it.next()\u000a    Traceback (most recent call last):\u000a      File "<stdin>", line 1, in ?\u000a    StopIteration\u000a    >>>      \u000a\u000a
p1874
tp1875
a(g826
VPython expects iterable objects in several different contexts, the 
p1876
tp1877
a(g826
V\u000a
p1878
tp1879
a(g826
Vmost important being the 
p1880
tp1881
a(g81
V``
p1882
tp1883
a(g81
Vfor
p1884
tp1885
a(g81
V``
p1886
tp1887
a(g826
V statement.  In the statement 
p1888
tp1889
a(g81
V``
p1890
tp1891
a(g81
Vfor X in Y
p1892
tp1893
a(g81
V``
p1894
tp1895
a(g826
V,
p1896
tp1897
a(g826
V\u000a
p1898
tp1899
a(g826
VY must be an iterator or some object for which 
p1900
tp1901
a(g81
V``
p1902
tp1903
a(g81
Viter()
p1904
tp1905
a(g81
V``
p1906
tp1907
a(g826
V can create 
p1908
tp1909
a(g826
V\u000a
p1910
tp1911
a(g826
Van iterator.  These two statements are equivalent
p1912
tp1913
a(g205
V::
p1914
tp1915
a(g826
V\u000a\u000a
p1916
tp1917
a(g81
V        
p1918
tp1919
a(g81
Vfor i in iter(obj):
p1920
tp1921
a(g826
V\u000a
p1922
tp1923
a(g81
V            print i\u000a\u000a        for i in obj:\u000a            print i\u000a\u000a
p1924
tp1925
a(g826
VIterators can be materialized as lists or tuples by using the
p1926
tp1927
a(g826
V\u000a
p1928
tp1929
a(g81
V``
p1930
tp1931
a(g81
Vlist()
p1932
tp1933
a(g81
V``
p1934
tp1935
a(g826
V or 
p1936
tp1937
a(g81
V``
p1938
tp1939
a(g81
Vtuple()
p1940
tp1941
a(g81
V``
p1942
tp1943
a(g826
V constructor functions
p1944
tp1945
a(g205
V::
p1946
tp1947
a(g826
V\u000a\u000a
p1948
tp1949
a(g81
V    
p1950
tp1951
a(g81
V>>> L = [1,2,3]
p1952
tp1953
a(g826
V\u000a
p1954
tp1955
a(g81
V    >>> iterator = iter(L)\u000a    >>> t = tuple(iterator)\u000a    >>> t\u000a    (1, 2, 3)\u000a\u000a
p1956
tp1957
a(g826
VSequence unpacking also supports iterators
p1958
tp1959
a(g826
g1072
tp1960
a(g826
V if you know an iterator 
p1961
tp1962
a(g826
V\u000a
p1963
tp1964
a(g826
Vwill return N elements, you can unpack them into an N-tuple
p1965
tp1966
a(g205
V::
p1967
tp1968
a(g826
V\u000a\u000a
p1969
tp1970
a(g81
V    
p1971
tp1972
a(g81
V>>> L = [1,2,3]
p1973
tp1974
a(g826
V\u000a
p1975
tp1976
a(g81
V    >>> iterator = iter(L)\u000a    >>> a,b,c = iterator\u000a    >>> a,b,c\u000a    (1, 2, 3)\u000a\u000a
p1977
tp1978
a(g826
VBuilt-in functions such as 
p1979
tp1980
a(g81
V``
p1981
tp1982
a(g81
Vmax()
p1983
tp1984
a(g81
V``
p1985
tp1986
a(g826
V and 
p1987
tp1988
a(g81
V``
p1989
tp1990
a(g81
Vmin()
p1991
tp1992
a(g81
V``
p1993
tp1994
a(g826
V can take a single
p1995
tp1996
a(g826
V\u000a
p1997
tp1998
a(g826
Viterator argument and will return the largest or smallest element.
p1999
tp2000
a(g826
V\u000a
p2001
tp2002
a(g826
VThe 
p2003
tp2004
a(g81
V``
p2005
tp2006
a(g81
V"in"
p2007
tp2008
a(g81
V``
p2009
tp2010
a(g826
V and 
p2011
tp2012
a(g81
V``
p2013
tp2014
a(g81
V"not in"
p2015
tp2016
a(g81
V``
p2017
tp2018
a(g826
V operators also support iterators
p2019
tp2020
a(g826
g1072
tp2021
a(g826
g1032
tp2022
a(g81
V``
p2023
tp2024
a(g81
VX in\u000aiterator
p2025
tp2026
a(g81
V``
p2027
tp2028
a(g826
V is true if X is found in the stream returned by the
p2029
tp2030
a(g826
V\u000a
p2031
tp2032
a(g826
Viterator.  You'll run into obvious problems if the iterator is
p2033
tp2034
a(g826
V\u000a
p2035
tp2036
a(g826
Vinfinite; 
p2037
tp2038
a(g81
V``
p2039
tp2040
a(g81
Vmax()
p2041
tp2042
a(g81
V``
p2043
tp2044
a(g826
V, 
p2045
tp2046
a(g81
V``
p2047
tp2048
a(g81
Vmin()
p2049
tp2050
a(g81
V``
p2051
tp2052
a(g826
V, and 
p2053
tp2054
a(g81
V``
p2055
tp2056
a(g81
V"not in"
p2057
tp2058
a(g81
V``
p2059
tp2060
a(g826
V will never return, and
p2061
tp2062
a(g826
V\u000a
p2063
tp2064
a(g826
Vif the element X never appears in the stream, the 
p2065
tp2066
a(g81
V``
p2067
tp2068
a(g81
V"in"
p2069
tp2070
a(g81
V``
p2071
tp2072
a(g826
V operator
p2073
tp2074
a(g826
V\u000a
p2075
tp2076
a(g826
Vwon't return either.
p2077
tp2078
a(g826
V\u000a
p2079
tp2080
a(g826
V\u000a
p2081
tp2082
a(g826
VNote that you can only go forward in an iterator; there's no way to
p2083
tp2084
a(g826
V\u000a
p2085
tp2086
a(g826
Vget the previous element, reset the iterator, or make a copy of it.
p2087
tp2088
a(g826
V\u000a
p2089
tp2090
a(g826
VIterator objects can optionally provide these additional capabilities,
p2091
tp2092
a(g826
V\u000a
p2093
tp2094
a(g826
Vbut the iterator protocol only specifies the 
p2095
tp2096
a(g81
V``
p2097
tp2098
a(g81
Vnext()
p2099
tp2100
a(g81
V``
p2101
tp2102
a(g826
V method.
p2103
tp2104
a(g826
V\u000a
p2105
tp2106
a(g826
VFunctions may therefore consume all of the iterator's output, and if
p2107
tp2108
a(g826
V\u000a
p2109
tp2110
a(g826
Vyou need to do something different with the same stream, you'll have
p2111
tp2112
a(g826
V\u000a
p2113
tp2114
a(g826
Vto create a new iterator.
p2115
tp2116
a(g826
V\u000a
p2117
tp2118
a(g826
V\u000a
p2119
tp2120
a(g826
V\u000a
p2121
tp2122
a(g826
V\u000a
p2123
tp2124
a(g8
VData Types That Support Iterators
p2125
tp2126
a(g826
V\u000a
p2127
tp2128
a(g8
V'''''''''''''''''''''''''''''''''''
p2129
tp2130
a(g826
V\u000a
p2131
tp2132
a(g826
V\u000a
p2133
tp2134
a(g826
VWe've already seen how lists and tuples support iterators.  In fact,
p2135
tp2136
a(g826
V\u000a
p2137
tp2138
a(g826
Vany Python sequence type, such as strings, will automatically support
p2139
tp2140
a(g826
V\u000a
p2141
tp2142
a(g826
Vcreation of an iterator.
p2143
tp2144
a(g826
V\u000a
p2145
tp2146
a(g826
V\u000a
p2147
tp2148
a(g826
VCalling 
p2149
tp2150
a(g81
V``
p2151
tp2152
a(g81
Viter()
p2153
tp2154
a(g81
V``
p2155
tp2156
a(g826
V on a dictionary returns an iterator that will loop
p2157
tp2158
a(g826
V\u000a
p2159
tp2160
a(g826
Vover the dictionary's keys
p2161
tp2162
a(g205
V::
p2163
tp2164
a(g826
V\u000a\u000a
p2165
tp2166
a(g81
V    
p2167
tp2168
a(g81
V>>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
p2169
tp2170
a(g826
V\u000a
p2171
tp2172
a(g81
V    ...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\u000a    >>> for key in m:\u000a    ...     print key, m[key]\u000a    Mar 3\u000a    Feb 2\u000a    Aug 8\u000a    Sep 9\u000a    May 5\u000a    Jun 6\u000a    Jul 7\u000a    Jan 1\u000a    Apr 4\u000a    Nov 11\u000a    Dec 12\u000a    Oct 10\u000a\u000a
p2173
tp2174
a(g826
VNote that the order is essentially random, because it's based on the
p2175
tp2176
a(g826
V\u000a
p2177
tp2178
a(g826
Vhash ordering of the objects in the dictionary.
p2179
tp2180
a(g826
V\u000a
p2181
tp2182
a(g826
V\u000a
p2183
tp2184
a(g826
VApplying 
p2185
tp2186
a(g81
V``
p2187
tp2188
a(g81
Viter()
p2189
tp2190
a(g81
V``
p2191
tp2192
a(g826
V to a dictionary always loops over the keys, but
p2193
tp2194
a(g826
V\u000a
p2195
tp2196
a(g826
Vdictionaries have methods that return other iterators.  If you want to
p2197
tp2198
a(g826
V\u000a
p2199
tp2200
a(g826
Viterate over keys, values, or key/value pairs, you can explicitly call
p2201
tp2202
a(g826
V\u000a
p2203
tp2204
a(g826
Vthe 
p2205
tp2206
a(g81
V``
p2207
tp2208
a(g81
Viterkeys()
p2209
tp2210
a(g81
V``
p2211
tp2212
a(g826
V, 
p2213
tp2214
a(g81
V``
p2215
tp2216
a(g81
Vitervalues()
p2217
tp2218
a(g81
V``
p2219
tp2220
a(g826
V, or 
p2221
tp2222
a(g81
V``
p2223
tp2224
a(g81
Viteritems()
p2225
tp2226
a(g81
V``
p2227
tp2228
a(g826
V methods to
p2229
tp2230
a(g826
V\u000a
p2231
tp2232
a(g826
Vget an appropriate iterator.
p2233
tp2234
a(g826
V\u000a
p2235
tp2236
a(g826
V\u000a
p2237
tp2238
a(g826
VThe 
p2239
tp2240
a(g81
V``
p2241
tp2242
a(g81
Vdict()
p2243
tp2244
a(g81
V``
p2245
tp2246
a(g826
V constructor can accept an iterator that returns a
p2247
tp2248
a(g826
V\u000a
p2249
tp2250
a(g826
Vfinite stream of 
p2251
tp2252
a(g81
V``
p2253
tp2254
a(g81
V(key, value)
p2255
tp2256
a(g81
V``
p2257
tp2258
a(g826
V tuples
p2259
tp2260
a(g205
V::
p2261
tp2262
a(g826
V\u000a\u000a
p2263
tp2264
a(g81
V    
p2265
tp2266
a(g81
V>>> L = [('Italy', 'Rome'), ('France', 'Paris'), ('US', 'Washington DC')]
p2267
tp2268
a(g826
V\u000a
p2269
tp2270
a(g81
V    >>> dict(iter(L))\u000a    {'Italy': 'Rome', 'US': 'Washington DC', 'France': 'Paris'}\u000a\u000a
p2271
tp2272
a(g826
VFiles also support iteration by calling the 
p2273
tp2274
a(g81
V``
p2275
tp2276
a(g81
Vreadline()
p2277
tp2278
a(g81
V``
p2279
tp2280
a(g826
V\u000a
p2281
tp2282
a(g826
Vmethod until there are no more lines in the file.  This means you can
p2283
tp2284
a(g826
V\u000a
p2285
tp2286
a(g826
Vread each line of a file like this
p2287
tp2288
a(g205
V::
p2289
tp2290
a(g826
V\u000a\u000a
p2291
tp2292
a(g81
V    
p2293
tp2294
a(g81
Vfor line in file:
p2295
tp2296
a(g826
V\u000a
p2297
tp2298
a(g81
V        # do something for each line\u000a        ...\u000a\u000a
p2299
tp2300
a(g826
VSets can take their contents from an iterable and let you iterate over
p2301
tp2302
a(g826
V\u000a
p2303
tp2304
a(g826
Vthe set's elements
p2305
tp2306
a(g205
V::
p2307
tp2308
a(g826
V\u000a\u000a
p2309
tp2310
a(g81
V    
p2311
tp2312
a(g81
VS = set((2, 3, 5, 7, 11, 13))
p2313
tp2314
a(g826
V\u000a
p2315
tp2316
a(g81
V    for i in S:\u000a        print i\u000a\u000a\u000a\u000a
p2317
tp2318
a(g8
VGenerator expressions and list comprehensions
p2319
tp2320
a(g826
V\u000a
p2321
tp2322
a(g8
V----------------------------------------------------
p2323
tp2324
a(g826
V\u000a
p2325
tp2326
a(g826
V\u000a
p2327
tp2328
a(g826
VTwo common operations on an iterator's output are 1) performing some
p2329
tp2330
a(g826
V\u000a
p2331
tp2332
a(g826
Voperation for every element, 2) selecting a subset of elements that
p2333
tp2334
a(g826
V\u000a
p2335
tp2336
a(g826
Vmeet some condition.  For example, given a list of strings, you might
p2337
tp2338
a(g826
V\u000a
p2339
tp2340
a(g826
Vwant to strip off trailing whitespace from each line or extract all
p2341
tp2342
a(g826
V\u000a
p2343
tp2344
a(g826
Vthe strings containing a given substring.
p2345
tp2346
a(g826
V\u000a
p2347
tp2348
a(g826
V\u000a
p2349
tp2350
a(g826
VList comprehensions and generator expressions (short form
p2351
tp2352
a(g826
g1072
tp2353
a(g826
V "listcomps"
p2354
tp2355
a(g826
V\u000a
p2356
tp2357
a(g826
Vand "genexps") are a concise notation for such operations, borrowed
p2358
tp2359
a(g826
V\u000a
p2360
tp2361
a(g826
Vfrom the functional programming language Haskell
p2362
tp2363
a(g826
V\u000a
p2364
tp2365
a(g826
V(http
p2366
tp2367
a(g826
g1072
tp2368
a(g826
V//www.haskell.org).  You can strip all the whitespace from a
p2369
tp2370
a(g826
V\u000a
p2371
tp2372
a(g826
Vstream of strings with the following code
p2373
tp2374
a(g205
V::
p2375
tp2376
a(g826
V\u000a\u000a
p2377
tp2378
a(g81
V        
p2379
tp2380
a(g81
Vline_list = ['  line 1\u005cn', 'line 2  \u005cn', ...]
p2381
tp2382
a(g826
V\u000a
p2383
tp2384
a(g81
V\u000a        # Generator expression -- returns iterator\u000a        stripped_iter = (line.strip() for line in line_list)\u000a\u000a        # List comprehension -- returns list\u000a        stripped_list = [line.strip() for line in line_list]\u000a\u000a
p2385
tp2386
a(g826
VYou can select only certain elements by adding an 
p2387
tp2388
a(g81
V``
p2389
tp2390
a(g81
V"if"
p2391
tp2392
a(g81
V``
p2393
tp2394
a(g826
V condition
p2395
tp2396
a(g205
V::
p2397
tp2398
a(g826
V\u000a\u000a
p2399
tp2400
a(g81
V        
p2401
tp2402
a(g81
Vstripped_list = [line.strip() for line in line_list
p2403
tp2404
a(g826
V\u000a
p2405
tp2406
a(g81
V                         if line != ""]\u000a\u000a
p2407
tp2408
a(g826
VWith a list comprehension, you get back a Python list;
p2409
tp2410
a(g826
V\u000a
p2411
tp2412
a(g81
V``
p2413
tp2414
a(g81
Vstripped_list
p2415
tp2416
a(g81
V``
p2417
tp2418
a(g826
V is a list containing the resulting lines, not an
p2419
tp2420
a(g826
V\u000a
p2421
tp2422
a(g826
Viterator.  Generator expressions return an iterator that computes the
p2423
tp2424
a(g826
V\u000a
p2425
tp2426
a(g826
Vvalues as necessary, not needing to materialize all the values at
p2427
tp2428
a(g826
V\u000a
p2429
tp2430
a(g826
Vonce.  This means that list comprehensions aren't useful if you're
p2431
tp2432
a(g826
V\u000a
p2433
tp2434
a(g826
Vworking with iterators that return an infinite stream or a very large
p2435
tp2436
a(g826
V\u000a
p2437
tp2438
a(g826
Vamount of data.  Generator expressions are preferable in these
p2439
tp2440
a(g826
V\u000a
p2441
tp2442
a(g826
Vsituations.
p2443
tp2444
a(g826
V\u000a
p2445
tp2446
a(g826
V\u000a
p2447
tp2448
a(g826
VGenerator expressions are surrounded by parentheses ("()") and list
p2449
tp2450
a(g826
V\u000a
p2451
tp2452
a(g826
Vcomprehensions are surrounded by square brackets ("
p2453
tp2454
a(g826
V[
p2455
tp2456
a(g826
V]").  Generator
p2457
tp2458
a(g826
V\u000a
p2459
tp2460
a(g826
Vexpressions have the form
p2461
tp2462
a(g205
V::
p2463
tp2464
a(g826
V\u000a\u000a
p2465
tp2466
a(g81
V    
p2467
tp2468
a(g81
V( expression for expr in sequence1 
p2469
tp2470
a(g826
V\u000a
p2471
tp2472
a(g81
V                 if condition1\u000a                 for expr2 in sequence2\u000a                 if condition2\u000a                 for expr3 in sequence3 ...\u000a                 if condition3\u000a                 for exprN in sequenceN\u000a                 if conditionN )\u000a\u000a
p2473
tp2474
a(g826
VAgain, for a list comprehension only the outside brackets are
p2475
tp2476
a(g826
V\u000a
p2477
tp2478
a(g826
Vdifferent (square brackets instead of parentheses).
p2479
tp2480
a(g826
V\u000a
p2481
tp2482
a(g826
V\u000a
p2483
tp2484
a(g826
VThe elements of the generated output will be the successive values of
p2485
tp2486
a(g826
V\u000a
p2487
tp2488
a(g81
V``
p2489
tp2490
a(g81
Vexpression
p2491
tp2492
a(g81
V``
p2493
tp2494
a(g826
V.  The 
p2495
tp2496
a(g81
V``
p2497
tp2498
a(g81
Vif
p2499
tp2500
a(g81
V``
p2501
tp2502
a(g826
V clauses are all optional; if present,
p2503
tp2504
a(g826
V\u000a
p2505
tp2506
a(g81
V``
p2507
tp2508
a(g81
Vexpression
p2509
tp2510
a(g81
V``
p2511
tp2512
a(g826
V is only evaluated and added to the result when
p2513
tp2514
a(g826
V\u000a
p2515
tp2516
a(g81
V``
p2517
tp2518
a(g81
Vcondition
p2519
tp2520
a(g81
V``
p2521
tp2522
a(g826
V is true.
p2523
tp2524
a(g826
V\u000a
p2525
tp2526
a(g826
V\u000a
p2527
tp2528
a(g826
VGenerator expressions always have to be written inside parentheses,
p2529
tp2530
a(g826
V\u000a
p2531
tp2532
a(g826
Vbut the parentheses signalling a function call also count.  If you
p2533
tp2534
a(g826
V\u000a
p2535
tp2536
a(g826
Vwant to create an iterator that will be immediately passed to a
p2537
tp2538
a(g826
V\u000a
p2539
tp2540
a(g826
Vfunction you can write
p2541
tp2542
a(g205
V::
p2543
tp2544
a(g826
V\u000a\u000a
p2545
tp2546
a(g81
V        
p2547
tp2548
a(g81
Vobj_total = sum(obj.count for obj in list_all_objects())
p2549
tp2550
a(g826
V\u000a
p2551
tp2552
a(g81
V\u000a
p2553
tp2554
a(g826
VThe 
p2555
tp2556
a(g81
V``
p2557
tp2558
a(g81
Vfor...in
p2559
tp2560
a(g81
V``
p2561
tp2562
a(g826
V clauses contain the sequences to be iterated over.
p2563
tp2564
a(g826
V\u000a
p2565
tp2566
a(g826
VThe sequences do not have to be the same length, because they are
p2567
tp2568
a(g826
V\u000a
p2569
tp2570
a(g826
Viterated over from left to right, 
p2571
tp2572
a(g922
V**not**
p2573
tp2574
a(g826
V in parallel.  For each
p2575
tp2576
a(g826
V\u000a
p2577
tp2578
a(g826
Velement in 
p2579
tp2580
a(g81
V``
p2581
tp2582
a(g81
Vsequence1
p2583
tp2584
a(g81
V``
p2585
tp2586
a(g826
V, 
p2587
tp2588
a(g81
V``
p2589
tp2590
a(g81
Vsequence2
p2591
tp2592
a(g81
V``
p2593
tp2594
a(g826
V is looped over from the
p2595
tp2596
a(g826
V\u000a
p2597
tp2598
a(g826
Vbeginning.  
p2599
tp2600
a(g81
V``
p2601
tp2602
a(g81
Vsequence3
p2603
tp2604
a(g81
V``
p2605
tp2606
a(g826
V  is then looped over for each 
p2607
tp2608
a(g826
V\u000a
p2609
tp2610
a(g826
Vresulting pair of elements from 
p2611
tp2612
a(g81
V``
p2613
tp2614
a(g81
Vsequence1
p2615
tp2616
a(g81
V``
p2617
tp2618
a(g826
V and 
p2619
tp2620
a(g81
V``
p2621
tp2622
a(g81
Vsequence2
p2623
tp2624
a(g81
V``
p2625
tp2626
a(g826
g1022
tp2627
a(g826
V\u000a
p2628
tp2629
a(g826
V\u000a
p2630
tp2631
a(g826
VTo put it another way, a list comprehension or generator expression is
p2632
tp2633
a(g826
V\u000a
p2634
tp2635
a(g826
Vequivalent to the following Python code
p2636
tp2637
a(g205
V::
p2638
tp2639
a(g826
V\u000a\u000a
p2640
tp2641
a(g81
V    
p2642
tp2643
a(g81
Vfor expr1 in sequence1:
p2644
tp2645
a(g826
V\u000a
p2646
tp2647
a(g81
V        if not (condition1):\u000a            continue   # Skip this element\u000a        for expr2 in sequence2:\u000a            if not (condition2):\u000a                continue    # Skip this element\u000a            ...\u000a            for exprN in sequenceN:\u000a                 if not (conditionN):\u000a                     continue   # Skip this element\u000a\u000a                 # Output the value of \u000a                 # the expression.\u000a\u000a
p2648
tp2649
a(g826
VThis means that when there are multiple 
p2650
tp2651
a(g81
V``
p2652
tp2653
a(g81
Vfor...in
p2654
tp2655
a(g81
V``
p2656
tp2657
a(g826
V clauses but no
p2658
tp2659
a(g826
V\u000a
p2660
tp2661
a(g81
V``
p2662
tp2663
a(g81
Vif
p2664
tp2665
a(g81
V``
p2666
tp2667
a(g826
V clauses, the length of the resulting output will be equal to
p2668
tp2669
a(g826
V\u000a
p2670
tp2671
a(g826
Vthe product of the lengths of all the sequences.  If you have two
p2672
tp2673
a(g826
V\u000a
p2674
tp2675
a(g826
Vlists of length 3, the output list is 9 elements long
p2676
tp2677
a(g205
V::
p2678
tp2679
a(g826
V\u000a\u000a
p2680
tp2681
a(g81
V    
p2682
tp2683
a(g81
Vseq1 = 'abc'
p2684
tp2685
a(g826
V\u000a
p2686
tp2687
a(g81
V    seq2 = (1,2,3)\u000a    >>> [ (x,y) for x in seq1 for y in seq2]\u000a    [('a', 1), ('a', 2), ('a', 3), \u000a     ('b', 1), ('b', 2), ('b', 3), \u000a     ('c', 1), ('c', 2), ('c', 3)]\u000a\u000a
p2688
tp2689
a(g826
VTo avoid introducing an ambiguity into Python's grammar, if
p2690
tp2691
a(g826
V\u000a
p2692
tp2693
a(g81
V``
p2694
tp2695
a(g81
Vexpression
p2696
tp2697
a(g81
V``
p2698
tp2699
a(g826
V is creating a tuple, it must be surrounded with
p2700
tp2701
a(g826
V\u000a
p2702
tp2703
a(g826
Vparentheses.  The first list comprehension below is a syntax error,
p2704
tp2705
a(g826
V\u000a
p2706
tp2707
a(g826
Vwhile the second one is correct
p2708
tp2709
a(g205
V::
p2710
tp2711
a(g826
V\u000a\u000a
p2712
tp2713
a(g81
V    
p2714
tp2715
a(g81
V# Syntax error
p2716
tp2717
a(g826
V\u000a
p2718
tp2719
a(g81
V    [ x,y for x in seq1 for y in seq2]\u000a    # Correct\u000a    [ (x,y) for x in seq1 for y in seq2]\u000a\u000a\u000a
p2720
tp2721
a(g8
VGenerators
p2722
tp2723
a(g826
V\u000a
p2724
tp2725
a(g8
V-----------------------
p2726
tp2727
a(g826
V\u000a
p2728
tp2729
a(g826
V\u000a
p2730
tp2731
a(g826
VGenerators are a special class of functions that simplify the task of
p2732
tp2733
a(g826
V\u000a
p2734
tp2735
a(g826
Vwriting iterators.  Regular functions compute a value and return it,
p2736
tp2737
a(g826
V\u000a
p2738
tp2739
a(g826
Vbut generators return an iterator that returns a stream of values.
p2740
tp2741
a(g826
V\u000a
p2742
tp2743
a(g826
V\u000a
p2744
tp2745
a(g826
VYou're doubtless familiar with how regular function calls work in
p2746
tp2747
a(g826
V\u000a
p2748
tp2749
a(g826
VPython or C.  When you call a function, it gets a private namespace
p2750
tp2751
a(g826
V\u000a
p2752
tp2753
a(g826
Vwhere its local variables are created.  When the function reaches a
p2754
tp2755
a(g826
V\u000a
p2756
tp2757
a(g81
V``
p2758
tp2759
a(g81
Vreturn
p2760
tp2761
a(g81
V``
p2762
tp2763
a(g826
V statement, the local variables are destroyed and the
p2764
tp2765
a(g826
V\u000a
p2766
tp2767
a(g826
Vvalue is returned to the caller.  A later call to the same function
p2768
tp2769
a(g826
V\u000a
p2770
tp2771
a(g826
Vcreates a new private namespace and a fresh set of local
p2772
tp2773
a(g826
V\u000a
p2774
tp2775
a(g826
Vvariables. But, what if the local variables weren't thrown away on
p2776
tp2777
a(g826
V\u000a
p2778
tp2779
a(g826
Vexiting a function?  What if you could later resume the function where
p2780
tp2781
a(g826
V\u000a
p2782
tp2783
a(g826
Vit left off?  This is what generators provide; they can be thought of
p2784
tp2785
a(g826
V\u000a
p2786
tp2787
a(g826
Vas resumable functions.
p2788
tp2789
a(g826
V\u000a
p2790
tp2791
a(g826
V\u000a
p2792
tp2793
a(g826
VHere's the simplest example of a generator function
p2794
tp2795
a(g205
V::
p2796
tp2797
a(g826
V\u000a\u000a
p2798
tp2799
a(g81
V    
p2800
tp2801
a(g81
Vdef generate_ints(N):
p2802
tp2803
a(g826
V\u000a
p2804
tp2805
a(g81
V        for i in range(N):\u000a            yield i\u000a\u000a
p2806
tp2807
a(g826
VAny function containing a 
p2808
tp2809
a(g81
V``
p2810
tp2811
a(g81
Vyield
p2812
tp2813
a(g81
V``
p2814
tp2815
a(g826
V keyword is a generator function;
p2816
tp2817
a(g826
V\u000a
p2818
tp2819
a(g826
Vthis is detected by Python's bytecode compiler which compiles the
p2820
tp2821
a(g826
V\u000a
p2822
tp2823
a(g826
Vfunction specially as a result.
p2824
tp2825
a(g826
V\u000a
p2826
tp2827
a(g826
V\u000a
p2828
tp2829
a(g826
VWhen you call a generator function, it doesn't return a single value;
p2830
tp2831
a(g826
V\u000a
p2832
tp2833
a(g826
Vinstead it returns a generator object that supports the iterator
p2834
tp2835
a(g826
V\u000a
p2836
tp2837
a(g826
Vprotocol.  On executing the 
p2838
tp2839
a(g81
V``
p2840
tp2841
a(g81
Vyield
p2842
tp2843
a(g81
V``
p2844
tp2845
a(g826
V expression, the generator
p2846
tp2847
a(g826
V\u000a
p2848
tp2849
a(g826
Voutputs the value of 
p2850
tp2851
a(g81
V``
p2852
tp2853
a(g81
Vi
p2854
tp2855
a(g81
V``
p2856
tp2857
a(g826
V, similar to a 
p2858
tp2859
a(g81
V``
p2860
tp2861
a(g81
Vreturn
p2862
tp2863
a(g81
V``
p2864
tp2865
a(g826
V\u000a
p2866
tp2867
a(g826
Vstatement.  The big difference between 
p2868
tp2869
a(g81
V``
p2870
tp2871
a(g81
Vyield
p2872
tp2873
a(g81
V``
p2874
tp2875
a(g826
V and a
p2876
tp2877
a(g826
V\u000a
p2878
tp2879
a(g81
V``
p2880
tp2881
a(g81
Vreturn
p2882
tp2883
a(g81
V``
p2884
tp2885
a(g826
V statement is that on reaching a 
p2886
tp2887
a(g81
V``
p2888
tp2889
a(g81
Vyield
p2890
tp2891
a(g81
V``
p2892
tp2893
a(g826
V the
p2894
tp2895
a(g826
V\u000a
p2896
tp2897
a(g826
Vgenerator's state of execution is suspended and local variables are
p2898
tp2899
a(g826
V\u000a
p2900
tp2901
a(g826
Vpreserved.  On the next call to the generator's 
p2902
tp2903
a(g81
V``
p2904
tp2905
a(g81
V.next()
p2906
tp2907
a(g81
V``
p2908
tp2909
a(g826
V method,
p2910
tp2911
a(g826
V\u000a
p2912
tp2913
a(g826
Vthe function will resume executing.  
p2914
tp2915
a(g826
V\u000a
p2916
tp2917
a(g826
V\u000a
p2918
tp2919
a(g826
VHere's a sample usage of the 
p2920
tp2921
a(g81
V``
p2922
tp2923
a(g81
Vgenerate_ints()
p2924
tp2925
a(g81
V``
p2926
tp2927
a(g826
V generator
p2928
tp2929
a(g205
V::
p2930
tp2931
a(g826
V\u000a\u000a
p2932
tp2933
a(g81
V    
p2934
tp2935
a(g81
V>>> gen = generate_ints(3)
p2936
tp2937
a(g826
V\u000a
p2938
tp2939
a(g81
V    >>> gen\u000a    <generator object at 0x8117f90>\u000a    >>> gen.next()\u000a    0\u000a    >>> gen.next()\u000a    1\u000a    >>> gen.next()\u000a    2\u000a    >>> gen.next()\u000a    Traceback (most recent call last):\u000a      File "stdin", line 1, in ?\u000a      File "stdin", line 2, in generate_ints\u000a    StopIteration\u000a\u000a
p2940
tp2941
a(g826
VYou could equally write 
p2942
tp2943
a(g81
V``
p2944
tp2945
a(g81
Vfor i in generate_ints(5)
p2946
tp2947
a(g81
V``
p2948
tp2949
a(g826
V, or
p2950
tp2951
a(g826
V\u000a
p2952
tp2953
a(g81
V``
p2954
tp2955
a(g81
Va,b,c = generate_ints(3)
p2956
tp2957
a(g81
V``
p2958
tp2959
a(g826
g1022
tp2960
a(g826
V\u000a
p2961
tp2962
a(g826
V\u000a
p2963
tp2964
a(g826
VInside a generator function, the 
p2965
tp2966
a(g81
V``
p2967
tp2968
a(g81
Vreturn
p2969
tp2970
a(g81
V``
p2971
tp2972
a(g826
V statement can only be used
p2973
tp2974
a(g826
V\u000a
p2975
tp2976
a(g826
Vwithout a value, and signals the end of the procession of values;
p2977
tp2978
a(g826
V\u000a
p2979
tp2980
a(g826
Vafter executing a 
p2981
tp2982
a(g81
V``
p2983
tp2984
a(g81
Vreturn
p2985
tp2986
a(g81
V``
p2987
tp2988
a(g826
V the generator cannot return any further
p2989
tp2990
a(g826
V\u000a
p2991
tp2992
a(g826
Vvalues.  
p2993
tp2994
a(g81
V``
p2995
tp2996
a(g81
Vreturn
p2997
tp2998
a(g81
V``
p2999
tp3000
a(g826
V with a value, such as 
p3001
tp3002
a(g81
V``
p3003
tp3004
a(g81
Vreturn 5
p3005
tp3006
a(g81
V``
p3007
tp3008
a(g826
V, is a syntax
p3009
tp3010
a(g826
V\u000a
p3011
tp3012
a(g826
Verror inside a generator function.  The end of the generator's results
p3013
tp3014
a(g826
V\u000a
p3015
tp3016
a(g826
Vcan also be indicated by raising 
p3017
tp3018
a(g81
V``
p3019
tp3020
a(g81
VStopIteration
p3021
tp3022
a(g81
V``
p3023
tp3024
a(g826
V manually, or by
p3025
tp3026
a(g826
V\u000a
p3027
tp3028
a(g826
Vjust letting the flow of execution fall off the bottom of the
p3029
tp3030
a(g826
V\u000a
p3031
tp3032
a(g826
Vfunction.
p3033
tp3034
a(g826
V\u000a
p3035
tp3036
a(g826
V\u000a
p3037
tp3038
a(g826
VYou could achieve the effect of generators manually by writing your
p3039
tp3040
a(g826
V\u000a
p3041
tp3042
a(g826
Vown class and storing all the local variables of the generator as
p3043
tp3044
a(g826
V\u000a
p3045
tp3046
a(g826
Vinstance variables.  For example, returning a list of integers could
p3047
tp3048
a(g826
V\u000a
p3049
tp3050
a(g826
Vbe done by setting 
p3051
tp3052
a(g81
V``
p3053
tp3054
a(g81
Vself.count
p3055
tp3056
a(g81
V``
p3057
tp3058
a(g826
V to 0, and having the
p3059
tp3060
a(g826
V\u000a
p3061
tp3062
a(g81
V``
p3063
tp3064
a(g81
Vnext()
p3065
tp3066
a(g81
V``
p3067
tp3068
a(g826
V method increment 
p3069
tp3070
a(g81
V``
p3071
tp3072
a(g81
Vself.count
p3073
tp3074
a(g81
V``
p3075
tp3076
a(g826
V and return it.
p3077
tp3078
a(g826
V\u000a
p3079
tp3080
a(g826
VHowever, for a moderately complicated generator, writing a
p3081
tp3082
a(g826
V\u000a
p3083
tp3084
a(g826
Vcorresponding class can be much messier.
p3085
tp3086
a(g826
V\u000a
p3087
tp3088
a(g826
V\u000a
p3089
tp3090
a(g826
VThe test suite included with Python's library, 
p3091
tp3092
a(g81
V``
p3093
tp3094
a(g81
Vtest_generators.py
p3095
tp3096
a(g81
V``
p3097
tp3098
a(g826
g1896
tp3099
a(g826
V\u000a
p3100
tp3101
a(g826
Vcontains a number of more interesting examples.  Here's one generator
p3102
tp3103
a(g826
V\u000a
p3104
tp3105
a(g826
Vthat implements an in-order traversal of a tree using generators
p3106
tp3107
a(g826
V\u000a
p3108
tp3109
a(g826
Vrecursively.
p3110
tp3111
a(g826
V\u000a
p3112
tp3113
a(g826
V\u000a
p3114
tp3115
a(g205
V::
p3116
tp3117
a(g826
V\u000a\u000a
p3118
tp3119
a(g81
V    
p3120
tp3121
a(g81
V# A recursive generator that generates Tree leaves in in-order.
p3122
tp3123
a(g826
V\u000a
p3124
tp3125
a(g81
V    def inorder(t):\u000a        if t:\u000a            for x in inorder(t.left):\u000a                yield x\u000a\u000a            yield t.label\u000a\u000a            for x in inorder(t.right):\u000a                yield x\u000a\u000a
p3126
tp3127
a(g826
VTwo other examples in 
p3128
tp3129
a(g81
V``
p3130
tp3131
a(g81
Vtest_generators.py
p3132
tp3133
a(g81
V``
p3134
tp3135
a(g826
V produce
p3136
tp3137
a(g826
V\u000a
p3138
tp3139
a(g826
Vsolutions for the N-Queens problem (placing N queens on an NxN
p3140
tp3141
a(g826
V\u000a
p3142
tp3143
a(g826
Vchess board so that no queen threatens another) and the Knight's Tour
p3144
tp3145
a(g826
V\u000a
p3146
tp3147
a(g826
V(finding a route that takes a knight to every square of an NxN chessboard
p3148
tp3149
a(g826
V\u000a
p3150
tp3151
a(g826
Vwithout visiting any square twice).
p3152
tp3153
a(g826
V\u000a
p3154
tp3155
a(g826
V\u000a
p3156
tp3157
a(g826
V\u000a
p3158
tp3159
a(g826
V\u000a
p3160
tp3161
a(g8
VPassing values into a generator
p3162
tp3163
a(g826
V\u000a
p3164
tp3165
a(g8
V''''''''''''''''''''''''''''''''''''''''''''''
p3166
tp3167
a(g826
V\u000a
p3168
tp3169
a(g826
V\u000a
p3170
tp3171
a(g826
VIn Python 2.4 and earlier, generators only produced output.  Once a
p3172
tp3173
a(g826
V\u000a
p3174
tp3175
a(g826
Vgenerator's code was invoked to create an iterator, there was no way to
p3176
tp3177
a(g826
V\u000a
p3178
tp3179
a(g826
Vpass any new information into the function when its execution is
p3180
tp3181
a(g826
V\u000a
p3182
tp3183
a(g826
Vresumed.  You could hack together this ability by making the
p3184
tp3185
a(g826
V\u000a
p3186
tp3187
a(g826
Vgenerator look at a global variable or by passing in some mutable object
p3188
tp3189
a(g826
V\u000a
p3190
tp3191
a(g826
Vthat callers then modify, but these approaches are messy.
p3192
tp3193
a(g826
V\u000a
p3194
tp3195
a(g826
V\u000a
p3196
tp3197
a(g826
VIn Python 2.5 there's a simple way to pass values into a generator.
p3198
tp3199
a(g826
V\u000a
p3200
tp3201
a(g81
V``
p3202
tp3203
a(g81
Vyield
p3204
tp3205
a(g81
V``
p3206
tp3207
a(g826
V became an expression, returning a value that can be assigned
p3208
tp3209
a(g826
V\u000a
p3210
tp3211
a(g826
Vto a variable or otherwise operated on
p3212
tp3213
a(g205
V::
p3214
tp3215
a(g826
V\u000a\u000a
p3216
tp3217
a(g81
V    
p3218
tp3219
a(g81
Vval = (yield i)
p3220
tp3221
a(g826
V\u000a
p3222
tp3223
a(g81
V\u000a
p3224
tp3225
a(g826
VI recommend that you 
p3226
tp3227
a(g922
V**always**
p3228
tp3229
a(g826
V put parentheses around a 
p3230
tp3231
a(g81
V``
p3232
tp3233
a(g81
Vyield
p3234
tp3235
a(g81
V``
p3236
tp3237
a(g826
V\u000a
p3238
tp3239
a(g826
Vexpression when you're doing something with the returned value, as in
p3240
tp3241
a(g826
V\u000a
p3242
tp3243
a(g826
Vthe above example.  The parentheses aren't always necessary, but it's
p3244
tp3245
a(g826
V\u000a
p3246
tp3247
a(g826
Veasier to always add them instead of having to remember when they're
p3248
tp3249
a(g826
V\u000a
p3250
tp3251
a(g826
Vneeded.
p3252
tp3253
a(g826
V\u000a
p3254
tp3255
a(g826
V\u000a
p3256
tp3257
a(g826
V(PEP 342 explains the exact rules, which are that a
p3258
tp3259
a(g826
V\u000a
p3260
tp3261
a(g81
V``
p3262
tp3263
a(g81
Vyield
p3264
tp3265
a(g81
V``
p3266
tp3267
a(g826
V-expression must always be parenthesized except when it
p3268
tp3269
a(g826
V\u000a
p3270
tp3271
a(g826
Voccurs at the top-level expression on the right-hand side of an
p3272
tp3273
a(g826
V\u000a
p3274
tp3275
a(g826
Vassignment.  This means you can write 
p3276
tp3277
a(g81
V``
p3278
tp3279
a(g81
Vval = yield i
p3280
tp3281
a(g81
V``
p3282
tp3283
a(g826
V but have to
p3284
tp3285
a(g826
V\u000a
p3286
tp3287
a(g826
Vuse parentheses when there's an operation, as in 
p3288
tp3289
a(g81
V``
p3290
tp3291
a(g81
Vval = (yield i)\u000a+ 12
p3292
tp3293
a(g81
V``
p3294
tp3295
a(g826
V.)
p3296
tp3297
a(g826
V\u000a
p3298
tp3299
a(g826
V\u000a
p3300
tp3301
a(g826
VValues are sent into a generator by calling its
p3302
tp3303
a(g826
V\u000a
p3304
tp3305
a(g81
V``
p3306
tp3307
a(g81
Vsend(value)
p3308
tp3309
a(g81
V``
p3310
tp3311
a(g826
V method.  This method resumes the 
p3312
tp3313
a(g826
V\u000a
p3314
tp3315
a(g826
Vgenerator's code and the 
p3316
tp3317
a(g81
V``
p3318
tp3319
a(g81
Vyield
p3320
tp3321
a(g81
V``
p3322
tp3323
a(g826
V expression returns the specified
p3324
tp3325
a(g826
V\u000a
p3326
tp3327
a(g826
Vvalue.  If the regular 
p3328
tp3329
a(g81
V``
p3330
tp3331
a(g81
Vnext()
p3332
tp3333
a(g81
V``
p3334
tp3335
a(g826
V method is called, the
p3336
tp3337
a(g826
V\u000a
p3338
tp3339
a(g81
V``
p3340
tp3341
a(g81
Vyield
p3342
tp3343
a(g81
V``
p3344
tp3345
a(g826
V returns 
p3346
tp3347
a(g81
V``
p3348
tp3349
a(g81
VNone
p3350
tp3351
a(g81
V``
p3352
tp3353
a(g826
g1022
tp3354
a(g826
V\u000a
p3355
tp3356
a(g826
V\u000a
p3357
tp3358
a(g826
VHere's a simple counter that increments by 1 and allows changing the
p3359
tp3360
a(g826
V\u000a
p3361
tp3362
a(g826
Vvalue of the internal counter.
p3363
tp3364
a(g826
V\u000a
p3365
tp3366
a(g826
V\u000a
p3367
tp3368
a(g205
V::
p3369
tp3370
a(g826
V\u000a\u000a
p3371
tp3372
a(g81
V    
p3373
tp3374
a(g81
Vdef counter (maximum):
p3375
tp3376
a(g826
V\u000a
p3377
tp3378
a(g81
V        i = 0\u000a        while i < maximum:\u000a            val = (yield i)\u000a            # If value provided, change counter\u000a            if val is not None:\u000a                i = val\u000a            else:\u000a                i += 1\u000a\u000a
p3379
tp3380
a(g826
VAnd here's an example of changing the counter
p3381
tp3382
a(g826
g1072
tp3383
a(g826
V\u000a
p3384
tp3385
a(g826
V\u000a
p3386
tp3387
a(g826
V    >>> it = counter(10)
p3388
tp3389
a(g826
V\u000a
p3390
tp3391
a(g826
V    >>> print it.next()
p3392
tp3393
a(g826
V\u000a
p3394
tp3395
a(g826
V    0
p3396
tp3397
a(g826
V\u000a
p3398
tp3399
a(g826
V    >>> print it.next()
p3400
tp3401
a(g826
V\u000a
p3402
tp3403
a(g826
V    1
p3404
tp3405
a(g826
V\u000a
p3406
tp3407
a(g826
V    >>> print it.send(8)
p3408
tp3409
a(g826
V\u000a
p3410
tp3411
a(g826
V    8
p3412
tp3413
a(g826
V\u000a
p3414
tp3415
a(g826
V    >>> print it.next()
p3416
tp3417
a(g826
V\u000a
p3418
tp3419
a(g826
V    9
p3420
tp3421
a(g826
V\u000a
p3422
tp3423
a(g826
V    >>> print it.next()
p3424
tp3425
a(g826
V\u000a
p3426
tp3427
a(g826
V    Traceback (most recent call last)
p3428
tp3429
a(g826
g1072
tp3430
a(g826
V\u000a
p3431
tp3432
a(g826
V      File 
p3433
tp3434
a(g81
V``
p3435
tp3436
a(g81
Vt.py'', line 15, in ?\u000a        print it.next()\u000a    StopIteration\u000a\u000aBecause 
p3437
tp3438
a(g81
V`
p3439
tp3440
a(g81
g3439
tp3441
a(g81
Vyield
p3442
tp3443
a(g81
V``
p3444
tp3445
a(g826
V will often be returning 
p3446
tp3447
a(g81
V``
p3448
tp3449
a(g81
VNone
p3450
tp3451
a(g81
V``
p3452
tp3453
a(g826
V, you
p3454
tp3455
a(g826
V\u000a
p3456
tp3457
a(g826
Vshould always check for this case.  Don't just use its value in
p3458
tp3459
a(g826
V\u000a
p3460
tp3461
a(g826
Vexpressions unless you're sure that the 
p3462
tp3463
a(g81
V``
p3464
tp3465
a(g81
Vsend()
p3466
tp3467
a(g81
V``
p3468
tp3469
a(g826
V method
p3470
tp3471
a(g826
V\u000a
p3472
tp3473
a(g826
Vwill be the only method used resume your generator function.
p3474
tp3475
a(g826
V\u000a
p3476
tp3477
a(g826
V\u000a
p3478
tp3479
a(g826
VIn addition to 
p3480
tp3481
a(g81
V``
p3482
tp3483
a(g81
Vsend()
p3484
tp3485
a(g81
V``
p3486
tp3487
a(g826
V, there are two other new methods on
p3488
tp3489
a(g826
V\u000a
p3490
tp3491
a(g826
Vgenerators
p3492
tp3493
a(g826
g1072
tp3494
a(g826
V\u000a
p3495
tp3496
a(g826
V\u000a
p3497
tp3498
a(g22
g1078
tp3499
a(g826
g1032
tp3500
a(g81
V``
p3501
tp3502
a(g81
Vthrow(type, value=None, traceback=None)
p3503
tp3504
a(g81
V``
p3505
tp3506
a(g826
V is used to raise an exception inside the
p3507
tp3508
a(g826
V\u000a
p3509
tp3510
a(g826
V  generator; the exception is raised by the 
p3511
tp3512
a(g81
V``
p3513
tp3514
a(g81
Vyield
p3515
tp3516
a(g81
V``
p3517
tp3518
a(g826
V expression
p3519
tp3520
a(g826
V\u000a
p3521
tp3522
a(g826
V  where the generator's execution is paused.
p3523
tp3524
a(g826
V\u000a
p3525
tp3526
a(g826
V\u000a
p3527
tp3528
a(g22
g1078
tp3529
a(g826
g1032
tp3530
a(g81
V``
p3531
tp3532
a(g81
Vclose()
p3533
tp3534
a(g81
V``
p3535
tp3536
a(g826
V raises a 
p3537
tp3538
a(g81
V``
p3539
tp3540
a(g81
VGeneratorExit
p3541
tp3542
a(g81
V``
p3543
tp3544
a(g826
V\u000a
p3545
tp3546
a(g826
V  exception inside the generator to terminate the iteration.  
p3547
tp3548
a(g826
V\u000a
p3549
tp3550
a(g826
V  On receiving this
p3551
tp3552
a(g826
V\u000a
p3553
tp3554
a(g826
V  exception, the generator's code must either raise
p3555
tp3556
a(g826
V\u000a
p3557
tp3558
a(g826
V  
p3559
tp3560
a(g81
V``
p3561
tp3562
a(g81
VGeneratorExit
p3563
tp3564
a(g81
V``
p3565
tp3566
a(g826
V or 
p3567
tp3568
a(g81
V``
p3569
tp3570
a(g81
VStopIteration
p3571
tp3572
a(g81
V``
p3573
tp3574
a(g826
V; catching the 
p3575
tp3576
a(g826
V\u000a
p3577
tp3578
a(g826
V  exception and doing anything else is illegal and will trigger
p3579
tp3580
a(g826
V\u000a
p3581
tp3582
a(g826
V  a 
p3583
tp3584
a(g81
V``
p3585
tp3586
a(g81
VRuntimeError
p3587
tp3588
a(g81
V``
p3589
tp3590
a(g826
V.  
p3591
tp3592
a(g81
V``
p3593
tp3594
a(g81
Vclose()
p3595
tp3596
a(g81
V``
p3597
tp3598
a(g826
V will also be called by 
p3599
tp3600
a(g826
V\u000a
p3601
tp3602
a(g826
V  Python's garbage collector when the generator is garbage-collected.
p3603
tp3604
a(g826
V\u000a
p3605
tp3606
a(g826
V\u000a
p3607
tp3608
a(g826
V  If you need to run cleanup code when a 
p3609
tp3610
a(g81
V``
p3611
tp3612
a(g81
VGeneratorExit
p3613
tp3614
a(g81
V``
p3615
tp3616
a(g826
V occurs,
p3617
tp3618
a(g826
V\u000a
p3619
tp3620
a(g826
V  I suggest using a 
p3621
tp3622
a(g81
V``
p3623
tp3624
a(g81
Vtry: ... finally:
p3625
tp3626
a(g81
V``
p3627
tp3628
a(g826
V suite instead of 
p3629
tp3630
a(g826
V\u000a
p3631
tp3632
a(g826
V  catching 
p3633
tp3634
a(g81
V``
p3635
tp3636
a(g81
VGeneratorExit
p3637
tp3638
a(g81
V``
p3639
tp3640
a(g826
g1022
tp3641
a(g826
V\u000a
p3642
tp3643
a(g826
V\u000a
p3644
tp3645
a(g826
VThe cumulative effect of these changes is to turn generators from
p3646
tp3647
a(g826
V\u000a
p3648
tp3649
a(g826
Vone-way producers of information into both producers and consumers.
p3650
tp3651
a(g826
V\u000a
p3652
tp3653
a(g826
V\u000a
p3654
tp3655
a(g826
VGenerators also become 
p3656
tp3657
a(g922
V**coroutines**
p3658
tp3659
a(g826
V, a more generalized form of
p3660
tp3661
a(g826
V\u000a
p3662
tp3663
a(g826
Vsubroutines.  Subroutines are entered at one point and exited at
p3664
tp3665
a(g826
V\u000a
p3666
tp3667
a(g826
Vanother point (the top of the function, and a 
p3668
tp3669
a(g81
V``
p3670
tp3671
a(g81
Vreturn
p3672
tp3673
a(g81
V``
p3674
tp3675
a(g826
V\u000a
p3676
tp3677
a(g826
Vstatement), but coroutines can be entered, exited, and resumed at
p3678
tp3679
a(g826
V\u000a
p3680
tp3681
a(g826
Vmany different points (the 
p3682
tp3683
a(g81
V``
p3684
tp3685
a(g81
Vyield
p3686
tp3687
a(g81
V``
p3688
tp3689
a(g826
V statements).  
p3690
tp3691
a(g826
V\u000a
p3692
tp3693
a(g826
V\u000a
p3694
tp3695
a(g826
V\u000a
p3696
tp3697
a(g8
VBuilt-in functions
p3698
tp3699
a(g826
V\u000a
p3700
tp3701
a(g8
V----------------------------------------------
p3702
tp3703
a(g826
V\u000a
p3704
tp3705
a(g826
V\u000a
p3706
tp3707
a(g826
VLet's look in more detail at built-in functions often used with iterators.
p3708
tp3709
a(g826
V\u000a
p3710
tp3711
a(g826
V\u000a
p3712
tp3713
a(g826
VTwo Python's built-in functions, 
p3714
tp3715
a(g81
V``
p3716
tp3717
a(g81
Vmap()
p3718
tp3719
a(g81
V``
p3720
tp3721
a(g826
V and 
p3722
tp3723
a(g81
V``
p3724
tp3725
a(g81
Vfilter()
p3726
tp3727
a(g81
V``
p3728
tp3729
a(g826
V, are
p3730
tp3731
a(g826
V\u000a
p3732
tp3733
a(g826
Vsomewhat obsolete; they duplicate the features of list comprehensions
p3734
tp3735
a(g826
V\u000a
p3736
tp3737
a(g826
Vbut return actual lists instead of iterators.  
p3738
tp3739
a(g826
V\u000a
p3740
tp3741
a(g826
V\u000a
p3742
tp3743
a(g81
V``
p3744
tp3745
a(g81
Vmap(f, iterA, iterB, ...)
p3746
tp3747
a(g81
V``
p3748
tp3749
a(g826
V returns a list containing 
p3750
tp3751
a(g81
V``
p3752
tp3753
a(g81
Vf(iterA[0],\u000aiterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ...
p3754
tp3755
a(g81
V``
p3756
tp3757
a(g826
V.  
p3758
tp3759
a(g826
V\u000a
p3760
tp3761
a(g826
V\u000a
p3762
tp3763
a(g205
V::
p3764
tp3765
a(g826
V\u000a\u000a
p3766
tp3767
a(g81
V    
p3768
tp3769
a(g81
Vdef upper(s):
p3770
tp3771
a(g826
V\u000a
p3772
tp3773
a(g81
V        return s.upper()\u000a    map(upper, ['sentence', 'fragment']) =>\u000a      ['SENTENCE', 'FRAGMENT']\u000a\u000a    [upper(s) for s in ['sentence', 'fragment']] =>\u000a      ['SENTENCE', 'FRAGMENT']\u000a\u000a
p3774
tp3775
a(g826
VAs shown above, you can achieve the same effect with a list
p3776
tp3777
a(g826
V\u000a
p3778
tp3779
a(g826
Vcomprehension.  The 
p3780
tp3781
a(g81
V``
p3782
tp3783
a(g81
Vitertools.imap()
p3784
tp3785
a(g81
V``
p3786
tp3787
a(g826
V function does the same thing
p3788
tp3789
a(g826
V\u000a
p3790
tp3791
a(g826
Vbut can handle infinite iterators; it'll be discussed later, in the section on 
p3792
tp3793
a(g826
V\u000a
p3794
tp3795
a(g826
Vthe 
p3796
tp3797
a(g81
V``
p3798
tp3799
a(g81
Vitertools
p3800
tp3801
a(g81
V``
p3802
tp3803
a(g826
V module.
p3804
tp3805
a(g826
V\u000a
p3806
tp3807
a(g826
V\u000a
p3808
tp3809
a(g81
V``
p3810
tp3811
a(g81
Vfilter(predicate, iter)
p3812
tp3813
a(g81
V``
p3814
tp3815
a(g826
V returns a list 
p3816
tp3817
a(g826
V\u000a
p3818
tp3819
a(g826
Vthat contains all the sequence elements that meet a certain condition,
p3820
tp3821
a(g826
V\u000a
p3822
tp3823
a(g826
Vand is similarly duplicated by list comprehensions.
p3824
tp3825
a(g826
V\u000a
p3826
tp3827
a(g826
VA 
p3828
tp3829
a(g922
V**predicate**
p3830
tp3831
a(g826
V is a function that returns the truth value of
p3832
tp3833
a(g826
V\u000a
p3834
tp3835
a(g826
Vsome condition; for use with 
p3836
tp3837
a(g81
V``
p3838
tp3839
a(g81
Vfilter()
p3840
tp3841
a(g81
V``
p3842
tp3843
a(g826
V, the predicate must take a 
p3844
tp3845
a(g826
V\u000a
p3846
tp3847
a(g826
Vsingle value.  
p3848
tp3849
a(g826
V\u000a
p3850
tp3851
a(g826
V\u000a
p3852
tp3853
a(g205
V::
p3854
tp3855
a(g826
V\u000a\u000a
p3856
tp3857
a(g81
V    
p3858
tp3859
a(g81
Vdef is_even(x):
p3860
tp3861
a(g826
V\u000a
p3862
tp3863
a(g81
V        return (x % 2) == 0\u000a\u000a    filter(is_even, range(10)) =>\u000a      [0, 2, 4, 6, 8]\u000a\u000a
p3864
tp3865
a(g826
VThis can also be written as a list comprehension
p3866
tp3867
a(g205
V::
p3868
tp3869
a(g826
V\u000a\u000a
p3870
tp3871
a(g81
V    
p3872
tp3873
a(g81
V>>> [x for x in range(10) if is_even(x)]
p3874
tp3875
a(g826
V\u000a
p3876
tp3877
a(g81
V    [0, 2, 4, 6, 8]\u000a\u000a
p3878
tp3879
a(g81
V``
p3880
tp3881
a(g81
Vfilter()
p3882
tp3883
a(g81
V``
p3884
tp3885
a(g826
V also has a counterpart in the 
p3886
tp3887
a(g81
V``
p3888
tp3889
a(g81
Vitertools
p3890
tp3891
a(g81
V``
p3892
tp3893
a(g826
V module,
p3894
tp3895
a(g826
V\u000a
p3896
tp3897
a(g81
V``
p3898
tp3899
a(g81
Vitertools.ifilter()
p3900
tp3901
a(g81
V``
p3902
tp3903
a(g826
V, that returns an iterator and 
p3904
tp3905
a(g826
V\u000a
p3906
tp3907
a(g826
Vcan therefore handle infinite sequences just as 
p3908
tp3909
a(g81
V``
p3910
tp3911
a(g81
Vitertools.imap()
p3912
tp3913
a(g81
V``
p3914
tp3915
a(g826
V can.
p3916
tp3917
a(g826
V\u000a
p3918
tp3919
a(g826
V\u000a
p3920
tp3921
a(g81
V``
p3922
tp3923
a(g81
Vreduce(func, iter, [initial_value])
p3924
tp3925
a(g81
V``
p3926
tp3927
a(g826
V doesn't have a counterpart in
p3928
tp3929
a(g826
V\u000a
p3930
tp3931
a(g826
Vthe 
p3932
tp3933
a(g81
V``
p3934
tp3935
a(g81
Vitertools
p3936
tp3937
a(g81
V``
p3938
tp3939
a(g826
V module because it cumulatively performs an operation
p3940
tp3941
a(g826
V\u000a
p3942
tp3943
a(g826
Von all the iterable's elements and therefore can't be applied to
p3944
tp3945
a(g826
V\u000a
p3946
tp3947
a(g826
Vinfinite iterables.  
p3948
tp3949
a(g81
V``
p3950
tp3951
a(g81
Vfunc
p3952
tp3953
a(g81
V``
p3954
tp3955
a(g826
V must be a function that takes two elements
p3956
tp3957
a(g826
V\u000a
p3958
tp3959
a(g826
Vand returns a single value.  
p3960
tp3961
a(g81
V``
p3962
tp3963
a(g81
Vreduce()
p3964
tp3965
a(g81
V``
p3966
tp3967
a(g826
V takes the first two elements
p3968
tp3969
a(g826
V\u000a
p3970
tp3971
a(g826
VA and B returned by the iterator and calculates 
p3972
tp3973
a(g81
V``
p3974
tp3975
a(g81
Vfunc(A, B)
p3976
tp3977
a(g81
V``
p3978
tp3979
a(g826
V.  It
p3980
tp3981
a(g826
V\u000a
p3982
tp3983
a(g826
Vthen requests the third element, C, calculates 
p3984
tp3985
a(g81
V``
p3986
tp3987
a(g81
Vfunc(func(A, B),\u000aC)
p3988
tp3989
a(g81
V``
p3990
tp3991
a(g826
V, combines this result with the fourth element returned, and
p3992
tp3993
a(g826
V\u000a
p3994
tp3995
a(g826
Vcontinues until the iterable is exhausted.  If the iterable returns no
p3996
tp3997
a(g826
V\u000a
p3998
tp3999
a(g826
Vvalues at all, a 
p4000
tp4001
a(g81
V``
p4002
tp4003
a(g81
VTypeError
p4004
tp4005
a(g81
V``
p4006
tp4007
a(g826
V exception is raised.  If the initial
p4008
tp4009
a(g826
V\u000a
p4010
tp4011
a(g826
Vvalue is supplied, it's used as a starting point and
p4012
tp4013
a(g826
V\u000a
p4014
tp4015
a(g81
V``
p4016
tp4017
a(g81
Vfunc(initial_value, A)
p4018
tp4019
a(g81
V``
p4020
tp4021
a(g826
V is the first calculation.
p4022
tp4023
a(g826
V\u000a
p4024
tp4025
a(g826
V\u000a
p4026
tp4027
a(g205
V::
p4028
tp4029
a(g826
V\u000a\u000a
p4030
tp4031
a(g81
V    
p4032
tp4033
a(g81
Vimport operator
p4034
tp4035
a(g826
V\u000a
p4036
tp4037
a(g81
V    reduce(operator.concat, ['A', 'BB', 'C']) =>\u000a      'ABBC'\u000a    reduce(operator.concat, []) =>\u000a      TypeError: reduce() of empty sequence with no initial value\u000a    reduce(operator.mul, [1,2,3], 1) =>\u000a      6\u000a    reduce(operator.mul, [], 1) =>\u000a      1\u000a\u000a
p4038
tp4039
a(g826
VIf you use 
p4040
tp4041
a(g81
V``
p4042
tp4043
a(g81
Voperator.add
p4044
tp4045
a(g81
V``
p4046
tp4047
a(g826
V with 
p4048
tp4049
a(g81
V``
p4050
tp4051
a(g81
Vreduce()
p4052
tp4053
a(g81
V``
p4054
tp4055
a(g826
V, you'll add up all the 
p4056
tp4057
a(g826
V\u000a
p4058
tp4059
a(g826
Velements of the iterable.  This case is so common that there's a special
p4060
tp4061
a(g826
V\u000a
p4062
tp4063
a(g826
Vbuilt-in called 
p4064
tp4065
a(g81
V``
p4066
tp4067
a(g81
Vsum()
p4068
tp4069
a(g81
V``
p4070
tp4071
a(g826
V to compute it
p4072
tp4073
a(g205
V::
p4074
tp4075
a(g826
V\u000a\u000a
p4076
tp4077
a(g81
V    
p4078
tp4079
a(g81
Vreduce(operator.add, [1,2,3,4], 0) =>
p4080
tp4081
a(g826
V\u000a
p4082
tp4083
a(g81
V      10\u000a    sum([1,2,3,4]) =>\u000a      10\u000a    sum([]) =>\u000a      0\u000a\u000a
p4084
tp4085
a(g826
VFor many uses of 
p4086
tp4087
a(g81
V``
p4088
tp4089
a(g81
Vreduce()
p4090
tp4091
a(g81
V``
p4092
tp4093
a(g826
V, though, it can be clearer to just write
p4094
tp4095
a(g826
V\u000a
p4096
tp4097
a(g826
Vthe obvious 
p4098
tp4099
a(g81
V``
p4100
tp4101
a(g81
Vfor
p4102
tp4103
a(g81
V``
p4104
tp4105
a(g826
V loop
p4106
tp4107
a(g205
V::
p4108
tp4109
a(g826
V\u000a\u000a
p4110
tp4111
a(g81
V    
p4112
tp4113
a(g81
V# Instead of:
p4114
tp4115
a(g826
V\u000a
p4116
tp4117
a(g81
V    product = reduce(operator.mul, [1,2,3], 1)\u000a\u000a    # You can write:\u000a    product = 1\u000a    for i in [1,2,3]:\u000a        product *= i\u000a\u000a\u000a
p4118
tp4119
a(g81
V``
p4120
tp4121
a(g81
Venumerate(iter)
p4122
tp4123
a(g81
V``
p4124
tp4125
a(g826
V counts off the elements in the iterable, returning
p4126
tp4127
a(g826
V\u000a
p4128
tp4129
a(g826
V2-tuples containing the count and each element.
p4130
tp4131
a(g826
V\u000a
p4132
tp4133
a(g826
V\u000a
p4134
tp4135
a(g205
V::
p4136
tp4137
a(g826
V\u000a\u000a
p4138
tp4139
a(g81
V    
p4140
tp4141
a(g81
Venumerate(['subject', 'verb', 'object']) =>
p4142
tp4143
a(g826
V\u000a
p4144
tp4145
a(g81
V      (0, 'subject'), (1, 'verb'), (2, 'object')\u000a\u000a
p4146
tp4147
a(g81
V``
p4148
tp4149
a(g81
Venumerate()
p4150
tp4151
a(g81
V``
p4152
tp4153
a(g826
V is often used when looping through a list 
p4154
tp4155
a(g826
V\u000a
p4156
tp4157
a(g826
Vand recording the indexes at which certain conditions are met
p4158
tp4159
a(g205
V::
p4160
tp4161
a(g826
V\u000a\u000a
p4162
tp4163
a(g81
V    
p4164
tp4165
a(g81
Vf = open('data.txt', 'r')
p4166
tp4167
a(g826
V\u000a
p4168
tp4169
a(g81
V    for i, line in enumerate(f):\u000a        if line.strip() == '':\u000a            print 'Blank line at line #%i' % i\u000a\u000a
p4170
tp4171
a(g81
V``
p4172
tp4173
a(g81
Vsorted(iterable, [cmp=None], [key=None], [reverse=False)
p4174
tp4175
a(g81
V``
p4176
tp4177
a(g826
g1032
tp4178
a(g826
V\u000a
p4179
tp4180
a(g826
Vcollects all the elements of the iterable into a list, sorts 
p4181
tp4182
a(g826
V\u000a
p4183
tp4184
a(g826
Vthe list, and returns the sorted result.  The 
p4185
tp4186
a(g81
V``
p4187
tp4188
a(g81
Vcmp
p4189
tp4190
a(g81
V``
p4191
tp4192
a(g826
V, 
p4193
tp4194
a(g81
V``
p4195
tp4196
a(g81
Vkey
p4197
tp4198
a(g81
V``
p4199
tp4200
a(g826
V, 
p4201
tp4202
a(g826
V\u000a
p4203
tp4204
a(g826
Vand 
p4205
tp4206
a(g81
V``
p4207
tp4208
a(g81
Vreverse
p4209
tp4210
a(g81
V``
p4211
tp4212
a(g826
V arguments are passed through to the 
p4213
tp4214
a(g826
V\u000a
p4215
tp4216
a(g826
Vconstructed list's 
p4217
tp4218
a(g81
V``
p4219
tp4220
a(g81
V.sort()
p4221
tp4222
a(g81
V``
p4223
tp4224
a(g826
V method.
p4225
tp4226
a(g826
V\u000a
p4227
tp4228
a(g826
V\u000a
p4229
tp4230
a(g205
V::
p4231
tp4232
a(g826
V\u000a\u000a
p4233
tp4234
a(g81
V    
p4235
tp4236
a(g81
Vimport random
p4237
tp4238
a(g826
V\u000a
p4239
tp4240
a(g81
V    # Generate 8 random numbers between [0, 10000)\u000a    rand_list = random.sample(range(10000), 8)\u000a    rand_list =>\u000a      [769, 7953, 9828, 6431, 8442, 9878, 6213, 2207]\u000a    sorted(rand_list) =>\u000a      [769, 2207, 6213, 6431, 7953, 8442, 9828, 9878]\u000a    sorted(rand_list, reverse=True) =>\u000a      [9878, 9828, 8442, 7953, 6431, 6213, 2207, 769]\u000a\u000a
p4241
tp4242
a(g826
V(For a more detailed discussion of sorting, see the Sorting mini-HOWTO
p4243
tp4244
a(g826
V\u000a
p4245
tp4246
a(g826
Vin the Python wiki at http
p4247
tp4248
a(g826
g1072
tp4249
a(g826
V//wiki.python.org/moin/HowTo/Sorting.)
p4250
tp4251
a(g826
V\u000a
p4252
tp4253
a(g826
V\u000a
p4254
tp4255
a(g826
VThe 
p4256
tp4257
a(g81
V``
p4258
tp4259
a(g81
Vany(iter)
p4260
tp4261
a(g81
V``
p4262
tp4263
a(g826
V and 
p4264
tp4265
a(g81
V``
p4266
tp4267
a(g81
Vall(iter)
p4268
tp4269
a(g81
V``
p4270
tp4271
a(g826
V built-ins look at 
p4272
tp4273
a(g826
V\u000a
p4274
tp4275
a(g826
Vthe truth values of an iterable's contents.  
p4276
tp4277
a(g81
V``
p4278
tp4279
a(g81
Vany()
p4280
tp4281
a(g81
V``
p4282
tp4283
a(g826
V returns 
p4284
tp4285
a(g826
V\u000a
p4286
tp4287
a(g826
VTrue if any element in the iterable is a true value, and 
p4288
tp4289
a(g81
V``
p4290
tp4291
a(g81
Vall()
p4292
tp4293
a(g81
V``
p4294
tp4295
a(g826
g1032
tp4296
a(g826
V\u000a
p4297
tp4298
a(g826
Vreturns True if all of the elements are true values
p4299
tp4300
a(g205
V::
p4301
tp4302
a(g826
V\u000a\u000a
p4303
tp4304
a(g81
V    
p4305
tp4306
a(g81
Vany([0,1,0]) =>
p4307
tp4308
a(g826
V\u000a
p4309
tp4310
a(g81
V      True\u000a    any([0,0,0]) =>\u000a      False\u000a    any([1,1,1]) =>\u000a      True\u000a    all([0,1,0]) =>\u000a      False\u000a    all([0,0,0]) => \u000a      False\u000a    all([1,1,1]) =>\u000a      True\u000a\u000a\u000a
p4311
tp4312
a(g8
VSmall functions and the lambda statement
p4313
tp4314
a(g826
V\u000a
p4315
tp4316
a(g8
V----------------------------------------------
p4317
tp4318
a(g826
V\u000a
p4319
tp4320
a(g826
V\u000a
p4321
tp4322
a(g826
VWhen writing functional-style programs, you'll often need little
p4323
tp4324
a(g826
V\u000a
p4325
tp4326
a(g826
Vfunctions that act as predicates or that combine elements in some way.
p4327
tp4328
a(g826
V\u000a
p4329
tp4330
a(g826
V\u000a
p4331
tp4332
a(g826
VIf there's a Python built-in or a module function that's suitable, you
p4333
tp4334
a(g826
V\u000a
p4335
tp4336
a(g826
Vdon't need to define a new function at all
p4337
tp4338
a(g205
V::
p4339
tp4340
a(g826
V\u000a\u000a
p4341
tp4342
a(g81
V        
p4343
tp4344
a(g81
Vstripped_lines = [line.strip() for line in lines]
p4345
tp4346
a(g826
V\u000a
p4347
tp4348
a(g81
V        existing_files = filter(os.path.exists, file_list)\u000a\u000a
p4349
tp4350
a(g826
VIf the function you need doesn't exist, you need to write it.  One way
p4351
tp4352
a(g826
V\u000a
p4353
tp4354
a(g826
Vto write small functions is to use the 
p4355
tp4356
a(g81
V``
p4357
tp4358
a(g81
Vlambda
p4359
tp4360
a(g81
V``
p4361
tp4362
a(g826
V statement.  
p4363
tp4364
a(g81
V``
p4365
tp4366
a(g81
Vlambda
p4367
tp4368
a(g81
V``
p4369
tp4370
a(g826
V\u000a
p4371
tp4372
a(g826
Vtakes a number of parameters and an expression combining these parameters,
p4373
tp4374
a(g826
V\u000a
p4375
tp4376
a(g826
Vand creates a small function that returns the value of the expression
p4377
tp4378
a(g205
V::
p4379
tp4380
a(g826
V\u000a\u000a
p4381
tp4382
a(g81
V        
p4383
tp4384
a(g81
Vlowercase = lambda x: x.lower()
p4385
tp4386
a(g826
V\u000a
p4387
tp4388
a(g81
V\u000a        print_assign = lambda name, value: name + '=' + str(value)\u000a\u000a        adder = lambda x, y: x+y\u000a\u000a
p4389
tp4390
a(g826
VAn alternative is to just use the 
p4391
tp4392
a(g81
V``
p4393
tp4394
a(g81
Vdef
p4395
tp4396
a(g81
V``
p4397
tp4398
a(g826
V statement and define a
p4399
tp4400
a(g826
V\u000a
p4401
tp4402
a(g826
Vfunction in the usual way
p4403
tp4404
a(g205
V::
p4405
tp4406
a(g826
V\u000a\u000a
p4407
tp4408
a(g81
V        
p4409
tp4410
a(g81
Vdef lowercase(x):
p4411
tp4412
a(g826
V\u000a
p4413
tp4414
a(g81
V            return x.lower()\u000a\u000a        def print_assign(name, value):\u000a            return name + '=' + str(value)\u000a\u000a        def adder(x,y):\u000a            return x + y\u000a\u000a
p4415
tp4416
a(g826
VWhich alternative is preferable?  That's a style question; my usual
p4417
tp4418
a(g826
V\u000a
p4419
tp4420
a(g826
Vcourse is to avoid using 
p4421
tp4422
a(g81
V``
p4423
tp4424
a(g81
Vlambda
p4425
tp4426
a(g81
V``
p4427
tp4428
a(g826
g1022
tp4429
a(g826
V\u000a
p4430
tp4431
a(g826
V\u000a
p4432
tp4433
a(g826
VOne reason for my preference is that 
p4434
tp4435
a(g81
V``
p4436
tp4437
a(g81
Vlambda
p4438
tp4439
a(g81
V``
p4440
tp4441
a(g826
V is quite limited in
p4442
tp4443
a(g826
V\u000a
p4444
tp4445
a(g826
Vthe functions it can define.  The result has to be computable as a
p4446
tp4447
a(g826
V\u000a
p4448
tp4449
a(g826
Vsingle expression, which means you can't have multiway
p4450
tp4451
a(g826
V\u000a
p4452
tp4453
a(g81
V``
p4454
tp4455
a(g81
Vif... elif... else
p4456
tp4457
a(g81
V``
p4458
tp4459
a(g826
V comparisons or 
p4460
tp4461
a(g81
V``
p4462
tp4463
a(g81
Vtry... except
p4464
tp4465
a(g81
V``
p4466
tp4467
a(g826
V statements.
p4468
tp4469
a(g826
V\u000a
p4470
tp4471
a(g826
VIf you try to do too much in a 
p4472
tp4473
a(g81
V``
p4474
tp4475
a(g81
Vlambda
p4476
tp4477
a(g81
V``
p4478
tp4479
a(g826
V statement, you'll end up
p4480
tp4481
a(g826
V\u000a
p4482
tp4483
a(g826
Vwith an overly complicated expression that's hard to read.  Quick,
p4484
tp4485
a(g826
V\u000a
p4486
tp4487
a(g826
Vwhat's the following code doing?
p4488
tp4489
a(g826
V\u000a
p4490
tp4491
a(g826
V\u000a
p4492
tp4493
a(g205
V::
p4494
tp4495
a(g826
V\u000a\u000a
p4496
tp4497
a(g81
V    
p4498
tp4499
a(g81
Vtotal = reduce(lambda a, b: (0, a[1] + b[1]), items)[1]
p4500
tp4501
a(g826
V\u000a
p4502
tp4503
a(g81
V\u000a
p4504
tp4505
a(g826
VYou can figure it out, but it takes time to disentangle the expression
p4506
tp4507
a(g826
V\u000a
p4508
tp4509
a(g826
Vto figure out what's going on.  Using a short nested
p4510
tp4511
a(g826
V\u000a
p4512
tp4513
a(g81
V``
p4514
tp4515
a(g81
Vdef
p4516
tp4517
a(g81
V``
p4518
tp4519
a(g826
V statements makes things a little bit better
p4520
tp4521
a(g205
V::
p4522
tp4523
a(g826
V\u000a\u000a
p4524
tp4525
a(g81
V    
p4526
tp4527
a(g81
Vdef combine (a, b):
p4528
tp4529
a(g826
V\u000a
p4530
tp4531
a(g81
V        return 0, a[1] + b[1]\u000a\u000a    total = reduce(combine, items)[1]\u000a\u000a
p4532
tp4533
a(g826
VBut it would be best of all if I had simply used a 
p4534
tp4535
a(g81
V``
p4536
tp4537
a(g81
Vfor
p4538
tp4539
a(g81
V``
p4540
tp4541
a(g826
V loop
p4542
tp4543
a(g205
V::
p4544
tp4545
a(g826
V\u000a\u000a
p4546
tp4547
a(g81
V     
p4548
tp4549
a(g81
Vtotal = 0
p4550
tp4551
a(g826
V\u000a
p4552
tp4553
a(g81
V     for a, b in items:\u000a         total += b\u000a\u000a
p4554
tp4555
a(g826
VOr the 
p4556
tp4557
a(g81
V``
p4558
tp4559
a(g81
Vsum()
p4560
tp4561
a(g81
V``
p4562
tp4563
a(g826
V built-in and a generator expression
p4564
tp4565
a(g205
V::
p4566
tp4567
a(g826
V\u000a\u000a
p4568
tp4569
a(g81
V     
p4570
tp4571
a(g81
Vtotal = sum(b for a,b in items)
p4572
tp4573
a(g826
V\u000a
p4574
tp4575
a(g81
V\u000a
p4576
tp4577
a(g826
VMany uses of 
p4578
tp4579
a(g81
V``
p4580
tp4581
a(g81
Vreduce()
p4582
tp4583
a(g81
V``
p4584
tp4585
a(g826
V are clearer when written as 
p4586
tp4587
a(g81
V``
p4588
tp4589
a(g81
Vfor
p4590
tp4591
a(g81
V``
p4592
tp4593
a(g826
V loops.
p4594
tp4595
a(g826
V\u000a
p4596
tp4597
a(g826
V\u000a
p4598
tp4599
a(g826
VFredrik Lundh once suggested the following set of rules for refactoring 
p4600
tp4601
a(g826
V\u000a
p4602
tp4603
a(g826
Vuses of 
p4604
tp4605
a(g81
V``
p4606
tp4607
a(g81
Vlambda
p4608
tp4609
a(g81
V``
p4610
tp4611
a(g826
g1072
tp4612
a(g826
V\u000a
p4613
tp4614
a(g826
V\u000a
p4615
tp4616
a(g22
V1)
p4617
tp4618
a(g826
V Write a lambda function.
p4619
tp4620
a(g826
V\u000a
p4621
tp4622
a(g22
V2)
p4623
tp4624
a(g826
V Write a comment explaining what the heck that lambda does.
p4625
tp4626
a(g826
V\u000a
p4627
tp4628
a(g22
V3)
p4629
tp4630
a(g826
V Study the comment for a while, and think of a name that captures
p4631
tp4632
a(g826
V\u000a
p4633
tp4634
a(g826
V   the essence of the comment.
p4635
tp4636
a(g826
V\u000a
p4637
tp4638
a(g22
V4)
p4639
tp4640
a(g826
V Convert the lambda to a def statement, using that name.
p4641
tp4642
a(g826
V\u000a
p4643
tp4644
a(g22
V5)
p4645
tp4646
a(g826
V Remove the comment.
p4647
tp4648
a(g826
V\u000a
p4649
tp4650
a(g826
V\u000a
p4651
tp4652
a(g826
VI really like these rules, but you're free to disagree that this 
p4653
tp4654
a(g826
V\u000a
p4655
tp4656
a(g826
Vlambda-free style is better.
p4657
tp4658
a(g826
V\u000a
p4659
tp4660
a(g826
V\u000a
p4661
tp4662
a(g826
V\u000a
p4663
tp4664
a(g8
VThe itertools module
p4665
tp4666
a(g826
V\u000a
p4667
tp4668
a(g8
V-----------------------
p4669
tp4670
a(g826
V\u000a
p4671
tp4672
a(g826
V\u000a
p4673
tp4674
a(g826
VThe 
p4675
tp4676
a(g81
V``
p4677
tp4678
a(g81
Vitertools
p4679
tp4680
a(g81
V``
p4681
tp4682
a(g826
V module contains a number of commonly-used iterators
p4683
tp4684
a(g826
V\u000a
p4685
tp4686
a(g826
Vas well as functions for combining several iterators.  This section
p4687
tp4688
a(g826
V\u000a
p4689
tp4690
a(g826
Vwill introduce the module's contents by showing small examples.
p4691
tp4692
a(g826
V\u000a
p4693
tp4694
a(g826
V\u000a
p4695
tp4696
a(g826
VThe module's functions fall into a few broad classes
p4697
tp4698
a(g826
g1072
tp4699
a(g826
V\u000a
p4700
tp4701
a(g826
V\u000a
p4702
tp4703
a(g22
g1078
tp4704
a(g826
V Functions that create a new iterator based on an existing iterator.
p4705
tp4706
a(g826
V\u000a
p4707
tp4708
a(g22
g1078
tp4709
a(g826
V Functions for treating an iterator's elements as function arguments.
p4710
tp4711
a(g826
V\u000a
p4712
tp4713
a(g22
g1078
tp4714
a(g826
V Functions for selecting portions of an iterator's output.
p4715
tp4716
a(g826
V\u000a
p4717
tp4718
a(g22
g1078
tp4719
a(g826
V A function for grouping an iterator's output.
p4720
tp4721
a(g826
V\u000a
p4722
tp4723
a(g826
V\u000a
p4724
tp4725
a(g8
VCreating new iterators
p4726
tp4727
a(g826
V\u000a
p4728
tp4729
a(g8
V''''''''''''''''''''''
p4730
tp4731
a(g826
V\u000a
p4732
tp4733
a(g826
V\u000a
p4734
tp4735
a(g81
V``
p4736
tp4737
a(g81
Vitertools.count(n)
p4738
tp4739
a(g81
V``
p4740
tp4741
a(g826
V returns an infinite stream of
p4742
tp4743
a(g826
V\u000a
p4744
tp4745
a(g826
Vintegers, increasing by 1 each time.  You can optionally supply the
p4746
tp4747
a(g826
V\u000a
p4748
tp4749
a(g826
Vstarting number, which defaults to 0
p4750
tp4751
a(g205
V::
p4752
tp4753
a(g826
V\u000a\u000a
p4754
tp4755
a(g81
V        
p4756
tp4757
a(g81
Vitertools.count() =>
p4758
tp4759
a(g826
V\u000a
p4760
tp4761
a(g81
V          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...\u000a        itertools.count(10) =>\u000a          10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...\u000a\u000a
p4762
tp4763
a(g81
V``
p4764
tp4765
a(g81
Vitertools.cycle(iter)
p4766
tp4767
a(g81
V``
p4768
tp4769
a(g826
V saves a copy of the contents of a provided
p4770
tp4771
a(g826
V\u000a
p4772
tp4773
a(g826
Viterable and returns a new iterator that returns its elements from
p4774
tp4775
a(g826
V\u000a
p4776
tp4777
a(g826
Vfirst to last.  The new iterator will repeat these elements infinitely.
p4778
tp4779
a(g826
V\u000a
p4780
tp4781
a(g826
V\u000a
p4782
tp4783
a(g205
V::
p4784
tp4785
a(g826
V\u000a\u000a
p4786
tp4787
a(g81
V        
p4788
tp4789
a(g81
Vitertools.cycle([1,2,3,4,5]) =>
p4790
tp4791
a(g826
V\u000a
p4792
tp4793
a(g81
V          1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...\u000a\u000a
p4794
tp4795
a(g81
V``
p4796
tp4797
a(g81
Vitertools.repeat(elem, [n])
p4798
tp4799
a(g81
V``
p4800
tp4801
a(g826
V returns the provided element 
p4802
tp4803
a(g81
V``
p4804
tp4805
a(g81
Vn
p4806
tp4807
a(g81
V``
p4808
tp4809
a(g826
V\u000a
p4810
tp4811
a(g826
Vtimes, or returns the element endlessly if 
p4812
tp4813
a(g81
V``
p4814
tp4815
a(g81
g4806
tp4816
a(g81
V``
p4817
tp4818
a(g826
V is not provided.
p4819
tp4820
a(g826
V\u000a
p4821
tp4822
a(g826
V\u000a
p4823
tp4824
a(g205
V::
p4825
tp4826
a(g826
V\u000a\u000a
p4827
tp4828
a(g81
V    
p4829
tp4830
a(g81
Vitertools.repeat('abc') =>
p4831
tp4832
a(g826
V\u000a
p4833
tp4834
a(g81
V      abc, abc, abc, abc, abc, abc, abc, abc, abc, abc, ...\u000a    itertools.repeat('abc', 5) =>\u000a      abc, abc, abc, abc, abc\u000a\u000a
p4835
tp4836
a(g81
V``
p4837
tp4838
a(g81
Vitertools.chain(iterA, iterB, ...)
p4839
tp4840
a(g81
V``
p4841
tp4842
a(g826
V takes an arbitrary number of
p4843
tp4844
a(g826
V\u000a
p4845
tp4846
a(g826
Viterables as input, and returns all the elements of the first
p4847
tp4848
a(g826
V\u000a
p4849
tp4850
a(g826
Viterator, then all the elements of the second, and so on, until all of
p4851
tp4852
a(g826
V\u000a
p4853
tp4854
a(g826
Vthe iterables have been exhausted.
p4855
tp4856
a(g826
V\u000a
p4857
tp4858
a(g826
V\u000a
p4859
tp4860
a(g205
V::
p4861
tp4862
a(g826
V\u000a\u000a
p4863
tp4864
a(g81
V    
p4865
tp4866
a(g81
Vitertools.chain(['a', 'b', 'c'], (1, 2, 3)) =>
p4867
tp4868
a(g826
V\u000a
p4869
tp4870
a(g81
V      a, b, c, 1, 2, 3\u000a\u000a
p4871
tp4872
a(g81
V``
p4873
tp4874
a(g81
Vitertools.izip(iterA, iterB, ...)
p4875
tp4876
a(g81
V``
p4877
tp4878
a(g826
V takes one element from each iterable
p4879
tp4880
a(g826
V\u000a
p4881
tp4882
a(g826
Vand returns them in a tuple
p4883
tp4884
a(g205
V::
p4885
tp4886
a(g826
V\u000a\u000a
p4887
tp4888
a(g81
V    
p4889
tp4890
a(g81
Vitertools.izip(['a', 'b', 'c'], (1, 2, 3)) =>
p4891
tp4892
a(g826
V\u000a
p4893
tp4894
a(g81
V      ('a', 1), ('b', 2), ('c', 3)\u000a\u000a
p4895
tp4896
a(g826
VIt's similiar to the built-in 
p4897
tp4898
a(g81
V``
p4899
tp4900
a(g81
Vzip()
p4901
tp4902
a(g81
V``
p4903
tp4904
a(g826
V function, but doesn't
p4905
tp4906
a(g826
V\u000a
p4907
tp4908
a(g826
Vconstruct an in-memory list and exhaust all the input iterators before
p4909
tp4910
a(g826
V\u000a
p4911
tp4912
a(g826
Vreturning; instead tuples are constructed and returned only if they're
p4913
tp4914
a(g826
V\u000a
p4915
tp4916
a(g826
Vrequested.  (The technical term for this behaviour is 
p4917
tp4918
a(g826
V\u000a
p4919
tp4920
a(g81
V`lazy evaluation 
p4921
tp4922
a(g117
V<http://en.wikipedia.org/wiki/Lazy_evaluation>
p4923
tp4924
a(g81
V`__
p4925
tp4926
a(g826
V.)
p4927
tp4928
a(g826
V\u000a
p4929
tp4930
a(g826
V\u000a
p4931
tp4932
a(g826
VThis iterator is intended to be used with iterables that are all of
p4933
tp4934
a(g826
V\u000a
p4935
tp4936
a(g826
Vthe same length.  If the iterables are of different lengths, the
p4937
tp4938
a(g826
V\u000a
p4939
tp4940
a(g826
Vresulting stream will be the same length as the shortest iterable.
p4941
tp4942
a(g826
V\u000a
p4943
tp4944
a(g826
V\u000a
p4945
tp4946
a(g205
V::
p4947
tp4948
a(g826
V\u000a\u000a
p4949
tp4950
a(g81
V    
p4951
tp4952
a(g81
Vitertools.izip(['a', 'b'], (1, 2, 3)) =>
p4953
tp4954
a(g826
V\u000a
p4955
tp4956
a(g81
V      ('a', 1), ('b', 2)\u000a\u000a
p4957
tp4958
a(g826
VYou should avoid doing this, though, because an element may be taken
p4959
tp4960
a(g826
V\u000a
p4961
tp4962
a(g826
Vfrom the longer iterators and discarded.  This means you can't go on
p4963
tp4964
a(g826
V\u000a
p4965
tp4966
a(g826
Vto use the iterators further because you risk skipping a discarded
p4967
tp4968
a(g826
V\u000a
p4969
tp4970
a(g826
Velement.
p4971
tp4972
a(g826
V\u000a
p4973
tp4974
a(g826
V\u000a
p4975
tp4976
a(g81
V``
p4977
tp4978
a(g81
Vitertools.islice(iter, [start], stop, [step])
p4979
tp4980
a(g81
V``
p4981
tp4982
a(g826
V returns a stream
p4983
tp4984
a(g826
V\u000a
p4985
tp4986
a(g826
Vthat's a slice of the iterator.  With a single 
p4987
tp4988
a(g81
V``
p4989
tp4990
a(g81
Vstop
p4991
tp4992
a(g81
V``
p4993
tp4994
a(g826
V argument, 
p4995
tp4996
a(g826
V\u000a
p4997
tp4998
a(g826
Vit will return the first 
p4999
tp5000
a(g81
V``
p5001
tp5002
a(g81
Vstop
p5003
tp5004
a(g81
V``
p5005
tp5006
a(g826
V\u000a
p5007
tp5008
a(g826
Velements.  If you supply a starting index, you'll get 
p5009
tp5010
a(g81
V``
p5011
tp5012
a(g81
Vstop-start
p5013
tp5014
a(g81
V``
p5015
tp5016
a(g826
V\u000a
p5017
tp5018
a(g826
Velements, and if you supply a value for 
p5019
tp5020
a(g81
V``
p5021
tp5022
a(g81
Vstep
p5023
tp5024
a(g81
V``
p5025
tp5026
a(g826
V, elements will be
p5027
tp5028
a(g826
V\u000a
p5029
tp5030
a(g826
Vskipped accordingly.  Unlike Python's string and list slicing, you
p5031
tp5032
a(g826
V\u000a
p5033
tp5034
a(g826
Vcan't use negative values for 
p5035
tp5036
a(g81
V``
p5037
tp5038
a(g81
Vstart
p5039
tp5040
a(g81
V``
p5041
tp5042
a(g826
V, 
p5043
tp5044
a(g81
V``
p5045
tp5046
a(g81
Vstop
p5047
tp5048
a(g81
V``
p5049
tp5050
a(g826
V, or 
p5051
tp5052
a(g81
V``
p5053
tp5054
a(g81
Vstep
p5055
tp5056
a(g81
V``
p5057
tp5058
a(g826
g1022
tp5059
a(g826
V\u000a
p5060
tp5061
a(g826
V\u000a
p5062
tp5063
a(g205
V::
p5064
tp5065
a(g826
V\u000a\u000a
p5066
tp5067
a(g81
V    
p5068
tp5069
a(g81
Vitertools.islice(range(10), 8) =>
p5070
tp5071
a(g826
V\u000a
p5072
tp5073
a(g81
V      0, 1, 2, 3, 4, 5, 6, 7\u000a    itertools.islice(range(10), 2, 8) =>\u000a      2, 3, 4, 5, 6, 7\u000a    itertools.islice(range(10), 2, 8, 2) =>\u000a      2, 4, 6\u000a\u000a
p5074
tp5075
a(g81
V``
p5076
tp5077
a(g81
Vitertools.tee(iter, [n])
p5078
tp5079
a(g81
V``
p5080
tp5081
a(g826
V replicates an iterator; it returns 
p5082
tp5083
a(g81
V``
p5084
tp5085
a(g81
g4806
tp5086
a(g81
V``
p5087
tp5088
a(g826
V\u000a
p5089
tp5090
a(g826
Vindependent iterators that will all return the contents of the source
p5091
tp5092
a(g826
V\u000a
p5093
tp5094
a(g826
Viterator.  If you don't supply a value for 
p5095
tp5096
a(g81
V``
p5097
tp5098
a(g81
g4806
tp5099
a(g81
V``
p5100
tp5101
a(g826
V, the default is 2.
p5102
tp5103
a(g826
V\u000a
p5104
tp5105
a(g826
VReplicating iterators requires saving some of the contents of the source
p5106
tp5107
a(g826
V\u000a
p5108
tp5109
a(g826
Viterator, so this can consume significant memory if the iterator is large
p5110
tp5111
a(g826
V\u000a
p5112
tp5113
a(g826
Vand one of the new iterators is consumed more than the others.
p5114
tp5115
a(g826
V\u000a
p5116
tp5117
a(g826
V\u000a
p5118
tp5119
a(g205
V::
p5120
tp5121
a(g826
V\u000a\u000a
p5122
tp5123
a(g81
V        
p5124
tp5125
a(g81
Vitertools.tee( itertools.count() ) =>
p5126
tp5127
a(g826
V\u000a
p5128
tp5129
a(g81
V           iterA, iterB\u000a\u000a        where iterA ->\u000a           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...\u000a\u000a        and   iterB ->\u000a           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...\u000a\u000a\u000a
p5130
tp5131
a(g8
VCalling functions on elements
p5132
tp5133
a(g826
V\u000a
p5134
tp5135
a(g8
V'''''''''''''''''''''''''''''
p5136
tp5137
a(g826
V\u000a
p5138
tp5139
a(g826
V\u000a
p5140
tp5141
a(g826
VTwo functions are used for calling other functions on the contents of an
p5142
tp5143
a(g826
V\u000a
p5144
tp5145
a(g826
Viterable.
p5146
tp5147
a(g826
V\u000a
p5148
tp5149
a(g826
V\u000a
p5150
tp5151
a(g81
V``
p5152
tp5153
a(g81
Vitertools.imap(f, iterA, iterB, ...)
p5154
tp5155
a(g81
V``
p5156
tp5157
a(g826
V returns 
p5158
tp5159
a(g826
V\u000a
p5160
tp5161
a(g826
Va stream containing 
p5162
tp5163
a(g81
V``
p5164
tp5165
a(g81
Vf(iterA[0], iterB[0]), f(iterA[1], iterB[1]),\u000af(iterA[2], iterB[2]), ...
p5166
tp5167
a(g81
V``
p5168
tp5169
a(g205
V::
p5170
tp5171
a(g826
V\u000a\u000a
p5172
tp5173
a(g81
V    
p5174
tp5175
a(g81
Vitertools.imap(operator.add, [5, 6, 5], [1, 2, 3]) =>
p5176
tp5177
a(g826
V\u000a
p5178
tp5179
a(g81
V      6, 8, 8\u000a\u000a
p5180
tp5181
a(g826
VThe 
p5182
tp5183
a(g81
V``
p5184
tp5185
a(g81
Voperator
p5186
tp5187
a(g81
V``
p5188
tp5189
a(g826
V module contains a set of functions 
p5190
tp5191
a(g826
V\u000a
p5192
tp5193
a(g826
Vcorresponding to Python's operators.  Some examples are 
p5194
tp5195
a(g826
V\u000a
p5196
tp5197
a(g81
V``
p5198
tp5199
a(g81
Voperator.add(a, b)
p5200
tp5201
a(g81
V``
p5202
tp5203
a(g826
V (adds two values), 
p5204
tp5205
a(g826
V\u000a
p5206
tp5207
a(g81
V``
p5208
tp5209
a(g81
Voperator.ne(a, b)
p5210
tp5211
a(g81
V``
p5212
tp5213
a(g826
V (same as 
p5214
tp5215
a(g81
V``
p5216
tp5217
a(g81
Va!=b
p5218
tp5219
a(g81
V``
p5220
tp5221
a(g826
V),
p5222
tp5223
a(g826
V\u000a
p5224
tp5225
a(g826
Vand 
p5226
tp5227
a(g826
V\u000a
p5228
tp5229
a(g81
V``
p5230
tp5231
a(g81
Voperator.attrgetter('id')
p5232
tp5233
a(g81
V``
p5234
tp5235
a(g826
V (returns a callable that
p5236
tp5237
a(g826
V\u000a
p5238
tp5239
a(g826
Vfetches the 
p5240
tp5241
a(g81
V``
p5242
tp5243
a(g81
V"id"
p5244
tp5245
a(g81
V``
p5246
tp5247
a(g826
V attribute).
p5248
tp5249
a(g826
V\u000a
p5250
tp5251
a(g826
V\u000a
p5252
tp5253
a(g81
V``
p5254
tp5255
a(g81
Vitertools.starmap(func, iter)
p5256
tp5257
a(g81
V``
p5258
tp5259
a(g826
V assumes that the iterable will 
p5260
tp5261
a(g826
V\u000a
p5262
tp5263
a(g826
Vreturn a stream of tuples, and calls 
p5264
tp5265
a(g81
V``
p5266
tp5267
a(g81
Vf()
p5268
tp5269
a(g81
V``
p5270
tp5271
a(g826
V using these tuples as the 
p5272
tp5273
a(g826
V\u000a
p5274
tp5275
a(g826
Varguments
p5276
tp5277
a(g205
V::
p5278
tp5279
a(g826
V\u000a\u000a
p5280
tp5281
a(g81
V    
p5282
tp5283
a(g81
Vitertools.starmap(os.path.join, 
p5284
tp5285
a(g826
V\u000a
p5286
tp5287
a(g81
V                      [('/usr', 'bin', 'java'), ('/bin', 'python'),\u000a                       ('/usr', 'bin', 'perl'),('/usr', 'bin', 'ruby')])\u000a    =>\u000a      /usr/bin/java, /bin/python, /usr/bin/perl, /usr/bin/ruby\u000a\u000a\u000a
p5288
tp5289
a(g8
VSelecting elements
p5290
tp5291
a(g826
V\u000a
p5292
tp5293
a(g8
V''''''''''''''''''
p5294
tp5295
a(g826
V\u000a
p5296
tp5297
a(g826
V\u000a
p5298
tp5299
a(g826
VAnother group of functions chooses a subset of an iterator's elements
p5300
tp5301
a(g826
V\u000a
p5302
tp5303
a(g826
Vbased on a predicate.
p5304
tp5305
a(g826
V\u000a
p5306
tp5307
a(g826
V\u000a
p5308
tp5309
a(g81
V``
p5310
tp5311
a(g81
Vitertools.ifilter(predicate, iter)
p5312
tp5313
a(g81
V``
p5314
tp5315
a(g826
V returns all the elements for
p5316
tp5317
a(g826
V\u000a
p5318
tp5319
a(g826
Vwhich the predicate returns true
p5320
tp5321
a(g205
V::
p5322
tp5323
a(g826
V\u000a\u000a
p5324
tp5325
a(g81
V    
p5326
tp5327
a(g81
Vdef is_even(x):
p5328
tp5329
a(g826
V\u000a
p5330
tp5331
a(g81
V        return (x % 2) == 0\u000a\u000a    itertools.ifilter(is_even, itertools.count()) =>\u000a      0, 2, 4, 6, 8, 10, 12, 14, ...\u000a\u000a
p5332
tp5333
a(g81
V``
p5334
tp5335
a(g81
Vitertools.ifilterfalse(predicate, iter)
p5336
tp5337
a(g81
V``
p5338
tp5339
a(g826
V is the opposite, 
p5340
tp5341
a(g826
V\u000a
p5342
tp5343
a(g826
Vreturning all elements for which the predicate returns false
p5344
tp5345
a(g205
V::
p5346
tp5347
a(g826
V\u000a\u000a
p5348
tp5349
a(g81
V    
p5350
tp5351
a(g81
Vitertools.ifilterfalse(is_even, itertools.count()) =>
p5352
tp5353
a(g826
V\u000a
p5354
tp5355
a(g81
V      1, 3, 5, 7, 9, 11, 13, 15, ...\u000a\u000a
p5356
tp5357
a(g81
V``
p5358
tp5359
a(g81
Vitertools.takewhile(predicate, iter)
p5360
tp5361
a(g81
V``
p5362
tp5363
a(g826
V returns elements for as long
p5364
tp5365
a(g826
V\u000a
p5366
tp5367
a(g826
Vas the predicate returns true.  Once the predicate returns false, 
p5368
tp5369
a(g826
V\u000a
p5370
tp5371
a(g826
Vthe iterator will signal the end of its results.
p5372
tp5373
a(g826
V\u000a
p5374
tp5375
a(g826
V\u000a
p5376
tp5377
a(g205
V::
p5378
tp5379
a(g826
V\u000a\u000a
p5380
tp5381
a(g81
V    
p5382
tp5383
a(g81
Vdef less_than_10(x):
p5384
tp5385
a(g826
V\u000a
p5386
tp5387
a(g81
V        return (x < 10)\u000a\u000a    itertools.takewhile(less_than_10, itertools.count()) =>\u000a      0, 1, 2, 3, 4, 5, 6, 7, 8, 9\u000a\u000a    itertools.takewhile(is_even, itertools.count()) =>\u000a      0\u000a\u000a
p5388
tp5389
a(g81
V``
p5390
tp5391
a(g81
Vitertools.dropwhile(predicate, iter)
p5392
tp5393
a(g81
V``
p5394
tp5395
a(g826
V discards elements while the
p5396
tp5397
a(g826
V\u000a
p5398
tp5399
a(g826
Vpredicate returns true, and then returns the rest of the iterable's
p5400
tp5401
a(g826
V\u000a
p5402
tp5403
a(g826
Vresults.
p5404
tp5405
a(g826
V\u000a
p5406
tp5407
a(g826
V\u000a
p5408
tp5409
a(g205
V::
p5410
tp5411
a(g826
V\u000a\u000a
p5412
tp5413
a(g81
V    
p5414
tp5415
a(g81
Vitertools.dropwhile(less_than_10, itertools.count()) =>
p5416
tp5417
a(g826
V\u000a
p5418
tp5419
a(g81
V      10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...\u000a\u000a    itertools.dropwhile(is_even, itertools.count()) =>\u000a      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...\u000a\u000a\u000a
p5420
tp5421
a(g8
VGrouping elements
p5422
tp5423
a(g826
V\u000a
p5424
tp5425
a(g8
V'''''''''''''''''
p5426
tp5427
a(g826
V\u000a
p5428
tp5429
a(g826
V\u000a
p5430
tp5431
a(g826
VThe last function I'll discuss, 
p5432
tp5433
a(g81
V``
p5434
tp5435
a(g81
Vitertools.groupby(iter,\u000akey_func=None)
p5436
tp5437
a(g81
V``
p5438
tp5439
a(g826
V, is the most complicated.  
p5440
tp5441
a(g81
V``
p5442
tp5443
a(g81
Vkey_func(elem)
p5444
tp5445
a(g81
V``
p5446
tp5447
a(g826
V is a
p5448
tp5449
a(g826
V\u000a
p5450
tp5451
a(g826
Vfunction that can compute a key value for each element returned by the
p5452
tp5453
a(g826
V\u000a
p5454
tp5455
a(g826
Viterable.  If you don't supply a key function, the key is simply each
p5456
tp5457
a(g826
V\u000a
p5458
tp5459
a(g826
Velement itself.
p5460
tp5461
a(g826
V\u000a
p5462
tp5463
a(g826
V\u000a
p5464
tp5465
a(g81
V``
p5466
tp5467
a(g81
Vgroupby()
p5468
tp5469
a(g81
V``
p5470
tp5471
a(g826
V collects all the consecutive elements from the
p5472
tp5473
a(g826
V\u000a
p5474
tp5475
a(g826
Vunderlying iterable that have the same key value, and returns a stream
p5476
tp5477
a(g826
V\u000a
p5478
tp5479
a(g826
Vof 2-tuples containing a key value and an iterator for the elements
p5480
tp5481
a(g826
V\u000a
p5482
tp5483
a(g826
Vwith that key.  
p5484
tp5485
a(g826
V\u000a
p5486
tp5487
a(g826
V\u000a
p5488
tp5489
a(g205
V::
p5490
tp5491
a(g826
V\u000a\u000a
p5492
tp5493
a(g81
V    
p5494
tp5495
a(g81
Vcity_list = [('Decatur', 'AL'), ('Huntsville', 'AL'), ('Selma', 'AL'), 
p5496
tp5497
a(g826
V\u000a
p5498
tp5499
a(g81
V                 ('Anchorage', 'AK'), ('Nome', 'AK'),\u000a                 ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ'), \u000a                 ...\u000a                ]\u000a\u000a    def get_state ((city, state)):\u000a        return state\u000a\u000a    itertools.groupby(city_list, get_state) =>\u000a      ('AL', iterator-1),\u000a      ('AK', iterator-2),\u000a      ('AZ', iterator-3), ...\u000a\u000a    where\u000a    iterator-1 =>\u000a      ('Decatur', 'AL'), ('Huntsville', 'AL'), ('Selma', 'AL')\u000a    iterator-2 => \u000a      ('Anchorage', 'AK'), ('Nome', 'AK')\u000a    iterator-3 =>\u000a      ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ')\u000a\u000a
p5500
tp5501
a(g81
V``
p5502
tp5503
a(g81
Vgroupby()
p5504
tp5505
a(g81
V``
p5506
tp5507
a(g826
V assumes that the underlying iterable's contents will
p5508
tp5509
a(g826
V\u000a
p5510
tp5511
a(g826
Valready be sorted based on the key.  Note that the returned iterators
p5512
tp5513
a(g826
V\u000a
p5514
tp5515
a(g826
Valso use the underlying iterable, so you have to consume the results
p5516
tp5517
a(g826
V\u000a
p5518
tp5519
a(g826
Vof iterator-1 before requesting iterator-2 and its corresponding key.
p5520
tp5521
a(g826
V\u000a
p5522
tp5523
a(g826
V\u000a
p5524
tp5525
a(g826
V\u000a
p5526
tp5527
a(g8
VThe functools module
p5528
tp5529
a(g826
V\u000a
p5530
tp5531
a(g8
V----------------------------------------------
p5532
tp5533
a(g826
V\u000a
p5534
tp5535
a(g826
V\u000a
p5536
tp5537
a(g826
VThe 
p5538
tp5539
a(g81
V``
p5540
tp5541
a(g81
Vfunctools
p5542
tp5543
a(g81
V``
p5544
tp5545
a(g826
V module in Python 2.5 contains some higher-order
p5546
tp5547
a(g826
V\u000a
p5548
tp5549
a(g826
Vfunctions.  A 
p5550
tp5551
a(g922
V**higher-order function**
p5552
tp5553
a(g826
V takes one or more functions as
p5554
tp5555
a(g826
V\u000a
p5556
tp5557
a(g826
Vinput and returns a new function.  The most useful tool in this module
p5558
tp5559
a(g826
V\u000a
p5560
tp5561
a(g826
Vis the 
p5562
tp5563
a(g81
V``
p5564
tp5565
a(g81
Vpartial()
p5566
tp5567
a(g81
V``
p5568
tp5569
a(g826
V function.
p5570
tp5571
a(g826
V\u000a
p5572
tp5573
a(g826
V\u000a
p5574
tp5575
a(g826
VFor programs written in a functional style, you'll sometimes want to
p5576
tp5577
a(g826
V\u000a
p5578
tp5579
a(g826
Vconstruct variants of existing functions that have some of the
p5580
tp5581
a(g826
V\u000a
p5582
tp5583
a(g826
Vparameters filled in.  Consider a Python function 
p5584
tp5585
a(g81
V``
p5586
tp5587
a(g81
Vf(a, b, c)
p5588
tp5589
a(g81
V``
p5590
tp5591
a(g826
V; you
p5592
tp5593
a(g826
V\u000a
p5594
tp5595
a(g826
Vmay wish to create a new function 
p5596
tp5597
a(g81
V``
p5598
tp5599
a(g81
Vg(b, c)
p5600
tp5601
a(g81
V``
p5602
tp5603
a(g826
V that's equivalent to
p5604
tp5605
a(g826
V\u000a
p5606
tp5607
a(g81
V``
p5608
tp5609
a(g81
Vf(1, b, c)
p5610
tp5611
a(g81
V``
p5612
tp5613
a(g826
V; you're filling in a value for one of 
p5614
tp5615
a(g81
V``
p5616
tp5617
a(g81
Vf()
p5618
tp5619
a(g81
V``
p5620
tp5621
a(g826
V's parameters.  
p5622
tp5623
a(g826
V\u000a
p5624
tp5625
a(g826
VThis is called "partial function application".
p5626
tp5627
a(g826
V\u000a
p5628
tp5629
a(g826
V\u000a
p5630
tp5631
a(g826
VThe constructor for 
p5632
tp5633
a(g81
V``
p5634
tp5635
a(g81
Vpartial
p5636
tp5637
a(g81
V``
p5638
tp5639
a(g826
V takes the arguments 
p5640
tp5641
a(g81
V``
p5642
tp5643
a(g81
V(function, arg1,\u000aarg2, ... kwarg1=value1, kwarg2=value2)
p5644
tp5645
a(g81
V``
p5646
tp5647
a(g826
V.  The resulting object is
p5648
tp5649
a(g826
V\u000a
p5650
tp5651
a(g826
Vcallable, so you can just call it to invoke 
p5652
tp5653
a(g81
V``
p5654
tp5655
a(g81
Vfunction
p5656
tp5657
a(g81
V``
p5658
tp5659
a(g826
V with the
p5660
tp5661
a(g826
V\u000a
p5662
tp5663
a(g826
Vfilled-in arguments.
p5664
tp5665
a(g826
V\u000a
p5666
tp5667
a(g826
V\u000a
p5668
tp5669
a(g826
VHere's a small but realistic example
p5670
tp5671
a(g205
V::
p5672
tp5673
a(g826
V\u000a\u000a
p5674
tp5675
a(g81
V    
p5676
tp5677
a(g81
Vimport functools
p5678
tp5679
a(g826
V\u000a
p5680
tp5681
a(g81
V\u000a    def log (message, subsystem):\u000a        "Write the contents of 'message' to the specified subsystem."\u000a        print '%s: %s' % (subsystem, message)\u000a        ...\u000a\u000a    server_log = functools.partial(log, subsystem='server')\u000a    server_log('Unable to open socket')\u000a\u000a\u000a
p5682
tp5683
a(g8
VThe operator module
p5684
tp5685
a(g826
V\u000a
p5686
tp5687
a(g8
V-------------------
p5688
tp5689
a(g826
V\u000a
p5690
tp5691
a(g826
V\u000a
p5692
tp5693
a(g826
VThe 
p5694
tp5695
a(g81
V``
p5696
tp5697
a(g81
Voperator
p5698
tp5699
a(g81
V``
p5700
tp5701
a(g826
V module was mentioned earlier.  It contains a set of
p5702
tp5703
a(g826
V\u000a
p5704
tp5705
a(g826
Vfunctions corresponding to Python's operators.  These functions 
p5706
tp5707
a(g826
V\u000a
p5708
tp5709
a(g826
Vare often useful in functional-style code because they save you 
p5710
tp5711
a(g826
V\u000a
p5712
tp5713
a(g826
Vfrom writing trivial functions that perform a single operation.
p5714
tp5715
a(g826
V\u000a
p5716
tp5717
a(g826
V\u000a
p5718
tp5719
a(g826
VSome of the functions in this module are
p5720
tp5721
a(g826
g1072
tp5722
a(g826
V\u000a
p5723
tp5724
a(g826
V\u000a
p5725
tp5726
a(g22
g1078
tp5727
a(g826
V Math operations
p5728
tp5729
a(g826
g1072
tp5730
a(g826
g1032
tp5731
a(g81
V``
p5732
tp5733
a(g81
Vadd()
p5734
tp5735
a(g81
V``
p5736
tp5737
a(g826
V, 
p5738
tp5739
a(g81
V``
p5740
tp5741
a(g81
Vsub()
p5742
tp5743
a(g81
V``
p5744
tp5745
a(g826
V, 
p5746
tp5747
a(g81
V``
p5748
tp5749
a(g81
Vmul()
p5750
tp5751
a(g81
V``
p5752
tp5753
a(g826
V, 
p5754
tp5755
a(g81
V``
p5756
tp5757
a(g81
Vdiv()
p5758
tp5759
a(g81
V``
p5760
tp5761
a(g826
V, 
p5762
tp5763
a(g81
V``
p5764
tp5765
a(g81
Vfloordiv()
p5766
tp5767
a(g81
V``
p5768
tp5769
a(g826
g1896
tp5770
a(g826
V\u000a
p5771
tp5772
a(g826
V  
p5773
tp5774
a(g81
V``
p5775
tp5776
a(g81
Vabs()
p5777
tp5778
a(g81
V``
p5779
tp5780
a(g826
V, ...
p5781
tp5782
a(g826
V\u000a
p5783
tp5784
a(g22
g1078
tp5785
a(g826
V Logical operations
p5786
tp5787
a(g826
g1072
tp5788
a(g826
g1032
tp5789
a(g81
V``
p5790
tp5791
a(g81
Vnot_()
p5792
tp5793
a(g81
V``
p5794
tp5795
a(g826
V, 
p5796
tp5797
a(g81
V``
p5798
tp5799
a(g81
Vtruth()
p5800
tp5801
a(g81
V``
p5802
tp5803
a(g826
g1022
tp5804
a(g826
V\u000a
p5805
tp5806
a(g22
g1078
tp5807
a(g826
V Bitwise operations
p5808
tp5809
a(g826
g1072
tp5810
a(g826
g1032
tp5811
a(g81
V``
p5812
tp5813
a(g81
Vand_()
p5814
tp5815
a(g81
V``
p5816
tp5817
a(g826
V, 
p5818
tp5819
a(g81
V``
p5820
tp5821
a(g81
Vor_()
p5822
tp5823
a(g81
V``
p5824
tp5825
a(g826
V, 
p5826
tp5827
a(g81
V``
p5828
tp5829
a(g81
Vinvert()
p5830
tp5831
a(g81
V``
p5832
tp5833
a(g826
g1022
tp5834
a(g826
V\u000a
p5835
tp5836
a(g22
g1078
tp5837
a(g826
V Comparisons
p5838
tp5839
a(g826
g1072
tp5840
a(g826
g1032
tp5841
a(g81
V``
p5842
tp5843
a(g81
Veq()
p5844
tp5845
a(g81
V``
p5846
tp5847
a(g826
V, 
p5848
tp5849
a(g81
V``
p5850
tp5851
a(g81
Vne()
p5852
tp5853
a(g81
V``
p5854
tp5855
a(g826
V, 
p5856
tp5857
a(g81
V``
p5858
tp5859
a(g81
Vlt()
p5860
tp5861
a(g81
V``
p5862
tp5863
a(g826
V, 
p5864
tp5865
a(g81
V``
p5866
tp5867
a(g81
Vle()
p5868
tp5869
a(g81
V``
p5870
tp5871
a(g826
V, 
p5872
tp5873
a(g81
V``
p5874
tp5875
a(g81
Vgt()
p5876
tp5877
a(g81
V``
p5878
tp5879
a(g826
V, and 
p5880
tp5881
a(g81
V``
p5882
tp5883
a(g81
Vge()
p5884
tp5885
a(g81
V``
p5886
tp5887
a(g826
g1022
tp5888
a(g826
V\u000a
p5889
tp5890
a(g22
g1078
tp5891
a(g826
V Object identity
p5892
tp5893
a(g826
g1072
tp5894
a(g826
g1032
tp5895
a(g81
V``
p5896
tp5897
a(g81
Vis_()
p5898
tp5899
a(g81
V``
p5900
tp5901
a(g826
V, 
p5902
tp5903
a(g81
V``
p5904
tp5905
a(g81
Vis_not()
p5906
tp5907
a(g81
V``
p5908
tp5909
a(g826
g1022
tp5910
a(g826
V\u000a
p5911
tp5912
a(g826
V\u000a
p5913
tp5914
a(g826
VConsult 
p5915
tp5916
a(g81
V`the operator module's documentation 
p5917
tp5918
a(g117
V<http://docs.python.org/lib/module-operator.html>
p5919
tp5920
a(g81
V`__
p5921
tp5922
a(g826
V for a complete
p5923
tp5924
a(g826
V\u000a
p5925
tp5926
a(g826
Vlist.
p5927
tp5928
a(g826
V\u000a
p5929
tp5930
a(g826
V\u000a
p5931
tp5932
a(g826
V\u000a
p5933
tp5934
a(g826
V\u000a
p5935
tp5936
a(g8
VThe functional module
p5937
tp5938
a(g826
V\u000a
p5939
tp5940
a(g8
V---------------------
p5941
tp5942
a(g826
V\u000a
p5943
tp5944
a(g826
V\u000a
p5945
tp5946
a(g826
VCollin Winter's 
p5947
tp5948
a(g81
V`functional module 
p5949
tp5950
a(g117
V<http://oakwinter.com/code/functional/>
p5951
tp5952
a(g81
V`__
p5953
tp5954
a(g826
g1032
tp5955
a(g826
V\u000a
p5956
tp5957
a(g826
Vprovides a number of more
p5958
tp5959
a(g826
V\u000a
p5960
tp5961
a(g826
Vadvanced tools for functional programming. It also reimplements
p5962
tp5963
a(g826
V\u000a
p5964
tp5965
a(g826
Vseveral Python built-ins, trying to make them more intuitive to those
p5966
tp5967
a(g826
V\u000a
p5968
tp5969
a(g826
Vused to functional programming in other languages.
p5970
tp5971
a(g826
V\u000a
p5972
tp5973
a(g826
V\u000a
p5974
tp5975
a(g826
VThis section contains an introduction to some of the most important
p5976
tp5977
a(g826
V\u000a
p5978
tp5979
a(g826
Vfunctions in 
p5980
tp5981
a(g81
V``
p5982
tp5983
a(g81
Vfunctional
p5984
tp5985
a(g81
V``
p5986
tp5987
a(g826
V; full documentation can be found at 
p5988
tp5989
a(g826
g3439
tp5990
a(g826
Vthe
p5991
tp5992
a(g826
V\u000a
p5993
tp5994
a(g826
Vproject's website <http
p5995
tp5996
a(g826
g1072
tp5997
a(g826
V//oakwinter.com/code/functional/documentation/>
p5998
tp5999
a(g826
g3439
tp6000
a(g826
V__.
p6001
tp6002
a(g826
V\u000a
p6003
tp6004
a(g826
V\u000a
p6005
tp6006
a(g81
V``
p6007
tp6008
a(g81
Vcompose(outer, inner, unpack=False)
p6009
tp6010
a(g81
V``
p6011
tp6012
a(g826
V\u000a
p6013
tp6014
a(g826
V\u000a
p6015
tp6016
a(g826
VThe 
p6017
tp6018
a(g81
V``
p6019
tp6020
a(g81
Vcompose()
p6021
tp6022
a(g81
V``
p6023
tp6024
a(g826
V function implements function composition.
p6025
tp6026
a(g826
V\u000a
p6027
tp6028
a(g826
VIn other words, it returns a wrapper around the 
p6029
tp6030
a(g81
V``
p6031
tp6032
a(g81
Vouter
p6033
tp6034
a(g81
V``
p6035
tp6036
a(g826
V and 
p6037
tp6038
a(g81
V``
p6039
tp6040
a(g81
Vinner
p6041
tp6042
a(g81
V``
p6043
tp6044
a(g826
V callables, such
p6045
tp6046
a(g826
V\u000a
p6047
tp6048
a(g826
Vthat the return value from 
p6049
tp6050
a(g81
V``
p6051
tp6052
a(g81
Vinner
p6053
tp6054
a(g81
V``
p6055
tp6056
a(g826
V is fed directly to 
p6057
tp6058
a(g81
V``
p6059
tp6060
a(g81
Vouter
p6061
tp6062
a(g81
V``
p6063
tp6064
a(g826
V.  That is,
p6065
tp6066
a(g826
V\u000a
p6067
tp6068
a(g826
V\u000a
p6069
tp6070
a(g205
V::
p6071
tp6072
a(g826
V\u000a\u000a
p6073
tp6074
a(g81
V        
p6075
tp6076
a(g81
V>>> def add(a, b):
p6077
tp6078
a(g826
V\u000a
p6079
tp6080
a(g81
V        ...     return a + b\u000a        ...\u000a        >>> def double(a):\u000a        ...     return 2 * a\u000a        ...\u000a        >>> compose(double, add)(5, 6)\u000a        22\u000a\u000a
p6081
tp6082
a(g826
Vis equivalent to
p6083
tp6084
a(g826
V\u000a
p6085
tp6086
a(g826
V\u000a
p6087
tp6088
a(g205
V::
p6089
tp6090
a(g826
V\u000a\u000a
p6091
tp6092
a(g81
V        
p6093
tp6094
a(g81
V>>> double(add(5, 6))
p6095
tp6096
a(g826
V\u000a
p6097
tp6098
a(g81
V        22\u000a                    \u000a
p6099
tp6100
a(g826
VThe 
p6101
tp6102
a(g81
V``
p6103
tp6104
a(g81
Vunpack
p6105
tp6106
a(g81
V``
p6107
tp6108
a(g826
V keyword is provided to work around the fact that Python functions are not always
p6109
tp6110
a(g826
V\u000a
p6111
tp6112
a(g81
V`fully curried 
p6113
tp6114
a(g117
V<http://en.wikipedia.org/wiki/Currying>
p6115
tp6116
a(g81
V`__
p6117
tp6118
a(g826
g1022
tp6119
a(g826
V\u000a
p6120
tp6121
a(g826
VBy default, it is expected that the 
p6122
tp6123
a(g81
V``
p6124
tp6125
a(g81
Vinner
p6126
tp6127
a(g81
V``
p6128
tp6129
a(g826
V function will return a single object and that the 
p6130
tp6131
a(g81
V``
p6132
tp6133
a(g81
Vouter
p6134
tp6135
a(g81
V``
p6136
tp6137
a(g826
V\u000a
p6138
tp6139
a(g826
Vfunction will take a single argument. Setting the 
p6140
tp6141
a(g81
V``
p6142
tp6143
a(g81
Vunpack
p6144
tp6145
a(g81
V``
p6146
tp6147
a(g826
V argument causes 
p6148
tp6149
a(g81
V``
p6150
tp6151
a(g81
Vcompose
p6152
tp6153
a(g81
V``
p6154
tp6155
a(g826
V to expect a
p6156
tp6157
a(g826
V\u000a
p6158
tp6159
a(g826
Vtuple from 
p6160
tp6161
a(g81
V``
p6162
tp6163
a(g81
Vinner
p6164
tp6165
a(g81
V``
p6166
tp6167
a(g826
V which will be expanded before being passed to 
p6168
tp6169
a(g81
V``
p6170
tp6171
a(g81
Vouter
p6172
tp6173
a(g81
V``
p6174
tp6175
a(g826
V. Put simply,
p6176
tp6177
a(g826
V\u000a
p6178
tp6179
a(g826
V\u000a
p6180
tp6181
a(g205
V::
p6182
tp6183
a(g826
V\u000a\u000a
p6184
tp6185
a(g81
V        
p6186
tp6187
a(g81
Vcompose(f, g)(5, 6)
p6188
tp6189
a(g826
V\u000a
p6190
tp6191
a(g81
V                    \u000a
p6192
tp6193
a(g826
Vis equivalent to
p6194
tp6195
a(g205
V::
p6196
tp6197
a(g826
V\u000a\u000a
p6198
tp6199
a(g81
V        
p6200
tp6201
a(g81
Vf(g(5, 6))
p6202
tp6203
a(g826
V\u000a
p6204
tp6205
a(g81
V                    \u000a
p6206
tp6207
a(g826
Vwhile
p6208
tp6209
a(g826
V\u000a
p6210
tp6211
a(g826
V\u000a
p6212
tp6213
a(g205
V::
p6214
tp6215
a(g826
V\u000a\u000a
p6216
tp6217
a(g81
V        
p6218
tp6219
a(g81
Vcompose(f, g, unpack=True)(5, 6)
p6220
tp6221
a(g826
V\u000a
p6222
tp6223
a(g81
V                    \u000a
p6224
tp6225
a(g826
Vis equivalent to
p6226
tp6227
a(g205
V::
p6228
tp6229
a(g826
V\u000a\u000a
p6230
tp6231
a(g81
V        
p6232
tp6233
a(g81
Vf(*g(5, 6))
p6234
tp6235
a(g826
V\u000a
p6236
tp6237
a(g81
V\u000a
p6238
tp6239
a(g826
VEven though 
p6240
tp6241
a(g81
V``
p6242
tp6243
a(g81
Vcompose()
p6244
tp6245
a(g81
V``
p6246
tp6247
a(g826
V only accepts two functions, it's trivial to
p6248
tp6249
a(g826
V\u000a
p6250
tp6251
a(g826
Vbuild up a version that will compose any number of functions. We'll
p6252
tp6253
a(g826
V\u000a
p6254
tp6255
a(g826
Vuse 
p6256
tp6257
a(g81
V``
p6258
tp6259
a(g81
Vreduce()
p6260
tp6261
a(g81
V``
p6262
tp6263
a(g826
V, 
p6264
tp6265
a(g81
V``
p6266
tp6267
a(g81
Vcompose()
p6268
tp6269
a(g81
V``
p6270
tp6271
a(g826
V and 
p6272
tp6273
a(g81
V``
p6274
tp6275
a(g81
Vpartial()
p6276
tp6277
a(g81
V``
p6278
tp6279
a(g826
V (the last of which
p6280
tp6281
a(g826
V\u000a
p6282
tp6283
a(g826
Vis provided by both 
p6284
tp6285
a(g81
V``
p6286
tp6287
a(g81
Vfunctional
p6288
tp6289
a(g81
V``
p6290
tp6291
a(g826
V and 
p6292
tp6293
a(g81
V``
p6294
tp6295
a(g81
Vfunctools
p6296
tp6297
a(g81
V``
p6298
tp6299
a(g826
V).
p6300
tp6301
a(g826
V\u000a
p6302
tp6303
a(g826
V\u000a
p6304
tp6305
a(g205
V::
p6306
tp6307
a(g826
V\u000a\u000a
p6308
tp6309
a(g81
V        
p6310
tp6311
a(g81
Vfrom functional import compose, partial
p6312
tp6313
a(g826
V\u000a
p6314
tp6315
a(g81
V        \u000a        multi_compose = partial(reduce, compose)\u000a        \u000a
p6316
tp6317
a(g826
V    
p6318
tp6319
a(g826
V\u000a
p6320
tp6321
a(g826
VWe can also use 
p6322
tp6323
a(g81
V``
p6324
tp6325
a(g81
Vmap()
p6326
tp6327
a(g81
V``
p6328
tp6329
a(g826
V, 
p6330
tp6331
a(g81
V``
p6332
tp6333
a(g81
Vcompose()
p6334
tp6335
a(g81
V``
p6336
tp6337
a(g826
V and 
p6338
tp6339
a(g81
V``
p6340
tp6341
a(g81
Vpartial()
p6342
tp6343
a(g81
V``
p6344
tp6345
a(g826
V to craft a
p6346
tp6347
a(g826
V\u000a
p6348
tp6349
a(g826
Vversion of 
p6350
tp6351
a(g81
V``
p6352
tp6353
a(g81
V"".join(...)
p6354
tp6355
a(g81
V``
p6356
tp6357
a(g826
V that converts its arguments to string
p6358
tp6359
a(g205
V::
p6360
tp6361
a(g826
V\u000a\u000a
p6362
tp6363
a(g81
V        
p6364
tp6365
a(g81
Vfrom functional import compose, partial
p6366
tp6367
a(g826
V\u000a
p6368
tp6369
a(g81
V        \u000a        join = compose("".join, partial(map, str))\u000a\u000a\u000a
p6370
tp6371
a(g81
V``
p6372
tp6373
a(g81
Vflip(func)
p6374
tp6375
a(g81
V``
p6376
tp6377
a(g826
V\u000a
p6378
tp6379
a(g826
V                    
p6380
tp6381
a(g826
V\u000a
p6382
tp6383
a(g81
V``
p6384
tp6385
a(g81
Vflip()
p6386
tp6387
a(g81
V``
p6388
tp6389
a(g826
V wraps the callable in 
p6390
tp6391
a(g81
V``
p6392
tp6393
a(g81
Vfunc
p6394
tp6395
a(g81
V``
p6396
tp6397
a(g826
V and  
p6398
tp6399
a(g826
V\u000a
p6400
tp6401
a(g826
Vcauses it to receive its non-keyword arguments in reverse order.
p6402
tp6403
a(g826
V\u000a
p6404
tp6405
a(g826
V\u000a
p6406
tp6407
a(g205
V::
p6408
tp6409
a(g826
V\u000a\u000a
p6410
tp6411
a(g81
V        
p6412
tp6413
a(g81
V>>> def triple(a, b, c):
p6414
tp6415
a(g826
V\u000a
p6416
tp6417
a(g81
V        ...     return (a, b, c)\u000a        ...\u000a        >>> triple(5, 6, 7)\u000a        (5, 6, 7)\u000a        >>>\u000a        >>> flipped_triple = flip(triple)\u000a        >>> flipped_triple(5, 6, 7)\u000a        (7, 6, 5)\u000a\u000a
p6418
tp6419
a(g81
V``
p6420
tp6421
a(g81
Vfoldl(func, start, iterable)
p6422
tp6423
a(g81
V``
p6424
tp6425
a(g826
V\u000a
p6426
tp6427
a(g826
V                    
p6428
tp6429
a(g826
V\u000a
p6430
tp6431
a(g81
V``
p6432
tp6433
a(g81
Vfoldl()
p6434
tp6435
a(g81
V``
p6436
tp6437
a(g826
V takes a binary function, a starting value (usually some kind of 'zero'), and an iterable.
p6438
tp6439
a(g826
V\u000a
p6440
tp6441
a(g826
VThe function is applied to the starting value and the first element of the list, then the result of
p6442
tp6443
a(g826
V\u000a
p6444
tp6445
a(g826
Vthat and the second element of the list, then the result of that and the third element of the list,
p6446
tp6447
a(g826
V\u000a
p6448
tp6449
a(g826
Vand so on.
p6450
tp6451
a(g826
V\u000a
p6452
tp6453
a(g826
V\u000a
p6454
tp6455
a(g826
VThis means that a call such as
p6456
tp6457
a(g205
V::
p6458
tp6459
a(g826
V\u000a\u000a
p6460
tp6461
a(g81
V        
p6462
tp6463
a(g81
Vfoldl(f, 0, [1, 2, 3])
p6464
tp6465
a(g826
V\u000a
p6466
tp6467
a(g81
V\u000a
p6468
tp6469
a(g826
Vis equivalent to
p6470
tp6471
a(g205
V::
p6472
tp6473
a(g826
V\u000a\u000a
p6474
tp6475
a(g81
V        
p6476
tp6477
a(g81
Vf(f(f(0, 1), 2), 3)
p6478
tp6479
a(g826
V\u000a
p6480
tp6481
a(g81
V\u000a
p6482
tp6483
a(g826
V    
p6484
tp6485
a(g826
V\u000a
p6486
tp6487
a(g81
V``
p6488
tp6489
a(g81
Vfoldl()
p6490
tp6491
a(g81
V``
p6492
tp6493
a(g826
V is roughly equivalent to the following recursive function
p6494
tp6495
a(g205
V::
p6496
tp6497
a(g826
V\u000a\u000a
p6498
tp6499
a(g81
V        
p6500
tp6501
a(g81
Vdef foldl(func, start, seq):
p6502
tp6503
a(g826
V\u000a
p6504
tp6505
a(g81
V            if len(seq) == 0:\u000a                return start\u000a\u000a            return foldl(func, func(start, seq[0]), seq[1:])\u000a\u000a
p6506
tp6507
a(g826
VSpeaking of equivalence, the above 
p6508
tp6509
a(g81
V``
p6510
tp6511
a(g81
Vfoldl
p6512
tp6513
a(g81
V``
p6514
tp6515
a(g826
V call can be expressed in terms of the built-in 
p6516
tp6517
a(g81
V``
p6518
tp6519
a(g81
Vreduce
p6520
tp6521
a(g81
V``
p6522
tp6523
a(g826
V like
p6524
tp6525
a(g826
V\u000a
p6526
tp6527
a(g826
Vso
p6528
tp6529
a(g205
V::
p6530
tp6531
a(g826
V\u000a\u000a
p6532
tp6533
a(g81
V        
p6534
tp6535
a(g81
Vreduce(f, [1, 2, 3], 0)
p6536
tp6537
a(g826
V\u000a
p6538
tp6539
a(g81
V\u000a\u000a
p6540
tp6541
a(g826
VWe can use 
p6542
tp6543
a(g81
V``
p6544
tp6545
a(g81
Vfoldl()
p6546
tp6547
a(g81
V``
p6548
tp6549
a(g826
V, 
p6550
tp6551
a(g81
V``
p6552
tp6553
a(g81
Voperator.concat()
p6554
tp6555
a(g81
V``
p6556
tp6557
a(g826
V and 
p6558
tp6559
a(g81
V``
p6560
tp6561
a(g81
Vpartial()
p6562
tp6563
a(g81
V``
p6564
tp6565
a(g826
V to
p6566
tp6567
a(g826
V\u000a
p6568
tp6569
a(g826
Vwrite a cleaner, more aesthetically-pleasing version of Python's
p6570
tp6571
a(g826
V\u000a
p6572
tp6573
a(g81
V``
p6574
tp6575
a(g81
V"".join(...)
p6576
tp6577
a(g81
V``
p6578
tp6579
a(g826
V idiom
p6580
tp6581
a(g205
V::
p6582
tp6583
a(g826
V\u000a\u000a
p6584
tp6585
a(g81
V        
p6586
tp6587
a(g81
Vfrom functional import foldl, partial
p6588
tp6589
a(g826
V\u000a
p6590
tp6591
a(g81
V        from operator import concat\u000a        \u000a        join = partial(foldl, concat, "")\u000a\u000a\u000a
p6592
tp6593
a(g8
VRevision History and Acknowledgements
p6594
tp6595
a(g826
V\u000a
p6596
tp6597
a(g8
V------------------------------------------------
p6598
tp6599
a(g826
V\u000a
p6600
tp6601
a(g826
V\u000a
p6602
tp6603
a(g826
VThe author would like to thank the following people for offering
p6604
tp6605
a(g826
V\u000a
p6606
tp6607
a(g826
Vsuggestions, corrections and assistance with various drafts of this
p6608
tp6609
a(g826
V\u000a
p6610
tp6611
a(g826
Varticle
p6612
tp6613
a(g826
g1072
tp6614
a(g826
V Ian Bicking, Nick Coghlan, Nick Efford, Raymond Hettinger,
p6615
tp6616
a(g826
V\u000a
p6617
tp6618
a(g826
VJim Jewett, Mike Krell, Leandro Lameiro, Jussi Salmela, 
p6619
tp6620
a(g826
V\u000a
p6621
tp6622
a(g826
VCollin Winter, Blake Winton.
p6623
tp6624
a(g826
V\u000a
p6625
tp6626
a(g826
V\u000a
p6627
tp6628
a(g826
VVersion 0.1
p6629
tp6630
a(g826
g1072
tp6631
a(g826
V posted June 30 2006.
p6632
tp6633
a(g826
V\u000a
p6634
tp6635
a(g826
V\u000a
p6636
tp6637
a(g826
VVersion 0.11
p6638
tp6639
a(g826
g1072
tp6640
a(g826
V posted July 1 2006.  Typo fixes.
p6641
tp6642
a(g826
V\u000a
p6643
tp6644
a(g826
V\u000a
p6645
tp6646
a(g826
VVersion 0.2
p6647
tp6648
a(g826
g1072
tp6649
a(g826
V posted July 10 2006.  Merged genexp and listcomp
p6650
tp6651
a(g826
V\u000a
p6652
tp6653
a(g826
Vsections into one.  Typo fixes.
p6654
tp6655
a(g826
V\u000a
p6656
tp6657
a(g826
V\u000a
p6658
tp6659
a(g826
VVersion 0.21
p6660
tp6661
a(g826
g1072
tp6662
a(g826
V Added more references suggested on the tutor mailing list.
p6663
tp6664
a(g826
V\u000a
p6665
tp6666
a(g826
V\u000a
p6667
tp6668
a(g826
VVersion 0.30
p6669
tp6670
a(g826
g1072
tp6671
a(g826
V Adds a section on the 
p6672
tp6673
a(g81
V``
p6674
tp6675
a(g81
Vfunctional
p6676
tp6677
a(g81
V``
p6678
tp6679
a(g826
V module written by
p6680
tp6681
a(g826
V\u000a
p6682
tp6683
a(g826
VCollin Winter; adds short section on the operator module; a few other
p6684
tp6685
a(g826
V\u000a
p6686
tp6687
a(g826
Vedits.
p6688
tp6689
a(g826
V\u000a
p6690
tp6691
a(g826
V\u000a
p6692
tp6693
a(g826
V\u000a
p6694
tp6695
a(g8
VReferences
p6696
tp6697
a(g826
V\u000a
p6698
tp6699
a(g8
V--------------------
p6700
tp6701
a(g826
V\u000a
p6702
tp6703
a(g826
V\u000a
p6704
tp6705
a(g8
VGeneral
p6706
tp6707
a(g826
V\u000a
p6708
tp6709
a(g8
V'''''''''''''''
p6710
tp6711
a(g826
V\u000a
p6712
tp6713
a(g826
V\u000a
p6714
tp6715
a(g922
V**Structure and Interpretation of Computer Programs**
p6716
tp6717
a(g826
V, by 
p6718
tp6719
a(g826
V\u000a
p6720
tp6721
a(g826
VHarold Abelson and Gerald Jay Sussman with Julie Sussman.
p6722
tp6723
a(g826
V\u000a
p6724
tp6725
a(g826
VFull text at http
p6726
tp6727
a(g826
g1072
tp6728
a(g826
V//mitpress.mit.edu/sicp/.
p6729
tp6730
a(g826
V\u000a
p6731
tp6732
a(g826
VIn this classic textbook of computer science,  chapters 2 and 3 discuss the
p6733
tp6734
a(g826
V\u000a
p6735
tp6736
a(g826
Vuse of sequences and streams to organize the data flow inside a
p6737
tp6738
a(g826
V\u000a
p6739
tp6740
a(g826
Vprogram.  The book uses Scheme for its examples, but many of the
p6741
tp6742
a(g826
V\u000a
p6743
tp6744
a(g826
Vdesign approaches described in these chapters are applicable to
p6745
tp6746
a(g826
V\u000a
p6747
tp6748
a(g826
Vfunctional-style Python code.
p6749
tp6750
a(g826
V\u000a
p6751
tp6752
a(g826
V\u000a
p6753
tp6754
a(g826
Vhttp
p6755
tp6756
a(g826
g1072
tp6757
a(g826
V//www.defmacro.org/ramblings/fp.html
p6758
tp6759
a(g826
g1072
tp6760
a(g826
V A general 
p6761
tp6762
a(g826
V\u000a
p6763
tp6764
a(g826
Vintroduction to functional programming that uses Java examples
p6765
tp6766
a(g826
V\u000a
p6767
tp6768
a(g826
Vand has a lengthy historical introduction.
p6769
tp6770
a(g826
V\u000a
p6771
tp6772
a(g826
V\u000a
p6773
tp6774
a(g826
Vhttp
p6775
tp6776
a(g826
g1072
tp6777
a(g826
V//en.wikipedia.org/wiki/Functional_programming
p6778
tp6779
a(g826
g1072
tp6780
a(g826
V\u000a
p6781
tp6782
a(g826
VGeneral Wikipedia entry describing functional programming.
p6783
tp6784
a(g826
V\u000a
p6785
tp6786
a(g826
V\u000a
p6787
tp6788
a(g826
Vhttp
p6789
tp6790
a(g826
g1072
tp6791
a(g826
V//en.wikipedia.org/wiki/Coroutine
p6792
tp6793
a(g826
g1072
tp6794
a(g826
V\u000a
p6795
tp6796
a(g826
VEntry for coroutines.
p6797
tp6798
a(g826
V\u000a
p6799
tp6800
a(g826
V\u000a
p6801
tp6802
a(g826
Vhttp
p6803
tp6804
a(g826
g1072
tp6805
a(g826
V//en.wikipedia.org/wiki/Currying
p6806
tp6807
a(g826
g1072
tp6808
a(g826
V\u000a
p6809
tp6810
a(g826
VEntry for the concept of currying.
p6811
tp6812
a(g826
V\u000a
p6813
tp6814
a(g826
V\u000a
p6815
tp6816
a(g8
VPython-specific
p6817
tp6818
a(g826
V\u000a
p6819
tp6820
a(g8
V'''''''''''''''''''''''''''
p6821
tp6822
a(g826
V\u000a
p6823
tp6824
a(g826
V\u000a
p6825
tp6826
a(g826
Vhttp
p6827
tp6828
a(g826
g1072
tp6829
a(g826
V//gnosis.cx/TPiP/
p6830
tp6831
a(g826
g1072
tp6832
a(g826
V\u000a
p6833
tp6834
a(g826
VThe first chapter of David Mertz's book 
p6835
tp6836
a(g571
V:title-reference:
p6837
tp6838
a(g345
V`Text Processing in Python`
p6839
tp6840
a(g826
g1032
tp6841
a(g826
V\u000a
p6842
tp6843
a(g826
Vdiscusses functional programming for text processing, in the section titled
p6844
tp6845
a(g826
V\u000a
p6846
tp6847
a(g826
V"Utilizing Higher-Order Functions in Text Processing".
p6848
tp6849
a(g826
V\u000a
p6850
tp6851
a(g826
V\u000a
p6852
tp6853
a(g826
VMertz also wrote a 3-part series of articles on functional programming
p6854
tp6855
a(g826
V\u000a
p6856
tp6857
a(g826
Vfor IBM's DeveloperWorks site; see 
p6858
tp6859
a(g826
V\u000a
p6860
tp6861
a(g81
V`part 1 
p6862
tp6863
a(g117
V<http://www-128.ibm.com/developerworks/library/l-prog.html>
p6864
tp6865
a(g81
V`__
p6866
tp6867
a(g826
g1896
tp6868
a(g826
V\u000a
p6869
tp6870
a(g81
V`part 2 
p6871
tp6872
a(g117
V<http://www-128.ibm.com/developerworks/library/l-prog2.html>
p6873
tp6874
a(g81
V`__
p6875
tp6876
a(g826
V, and
p6877
tp6878
a(g826
V\u000a
p6879
tp6880
a(g81
V`part 3 
p6881
tp6882
a(g117
V<http://www-128.ibm.com/developerworks/linux/library/l-prog3.html>
p6883
tp6884
a(g81
V`__
p6885
tp6886
a(g826
g1896
tp6887
a(g826
V\u000a
p6888
tp6889
a(g826
V\u000a
p6890
tp6891
a(g826
V\u000a
p6892
tp6893
a(g8
VPython documentation
p6894
tp6895
a(g826
V\u000a
p6896
tp6897
a(g8
V'''''''''''''''''''''''''''
p6898
tp6899
a(g826
V\u000a
p6900
tp6901
a(g826
V\u000a
p6902
tp6903
a(g826
Vhttp
p6904
tp6905
a(g826
g1072
tp6906
a(g826
V//docs.python.org/lib/module-itertools.html
p6907
tp6908
a(g826
g1072
tp6909
a(g826
V\u000a
p6910
tp6911
a(g826
VDocumentation for the 
p6912
tp6913
a(g81
V``
p6914
tp6915
a(g81
Vitertools
p6916
tp6917
a(g81
V``
p6918
tp6919
a(g826
V module.
p6920
tp6921
a(g826
V\u000a
p6922
tp6923
a(g826
V\u000a
p6924
tp6925
a(g826
Vhttp
p6926
tp6927
a(g826
g1072
tp6928
a(g826
V//docs.python.org/lib/module-operator.html
p6929
tp6930
a(g826
g1072
tp6931
a(g826
V\u000a
p6932
tp6933
a(g826
VDocumentation for the 
p6934
tp6935
a(g81
V``
p6936
tp6937
a(g81
Voperator
p6938
tp6939
a(g81
V``
p6940
tp6941
a(g826
V module.
p6942
tp6943
a(g826
V\u000a
p6944
tp6945
a(g826
V\u000a
p6946
tp6947
a(g826
Vhttp
p6948
tp6949
a(g826
g1072
tp6950
a(g826
V//www.python.org/dev/peps/pep-0289/
p6951
tp6952
a(g826
g1072
tp6953
a(g826
V\u000a
p6954
tp6955
a(g826
VPEP 289
p6956
tp6957
a(g826
g1072
tp6958
a(g826
V "Generator Expressions"
p6959
tp6960
a(g826
V\u000a
p6961
tp6962
a(g826
V\u000a
p6963
tp6964
a(g826
Vhttp
p6965
tp6966
a(g826
g1072
tp6967
a(g826
V//www.python.org/dev/peps/pep-0342/
p6968
tp6969
a(g826
V\u000a
p6970
tp6971
a(g826
VPEP 342
p6972
tp6973
a(g826
g1072
tp6974
a(g826
V "Coroutines via Enhanced Generators" describes the new generator
p6975
tp6976
a(g826
V\u000a
p6977
tp6978
a(g826
Vfeatures in Python 2.5.
p6979
tp6980
a(g826
V\u000a
p6981
tp6982
a(g826
V\u000a
p6983
tp6984
a(g655
V.. comment\u000a\u000a    Topics to place\u000a    -----------------------------\u000a\u000a    XXX os.walk()\u000a\u000a    XXX Need a large example.\u000a\u000a    But will an example add much?  I'll post a first draft and see\u000a    what the comments say.\u000a\u000a
p6985
tp6986
a(g655
V.. comment\u000a\u000a    Original outline:\u000a    Introduction\u000a            Idea of FP\u000a                    Programs built out of functions\u000a                    Functions are strictly input-output, no internal state\u000a            Opposed to OO programming, where objects have state\u000a\u000a            Why FP?\u000a                    Formal provability\u000a                            Assignment is difficult to reason about\u000a                            Not very relevant to Python\u000a                    Modularity\u000a                            Small functions that do one thing\u000a                    Debuggability:\u000a                            Easy to test due to lack of state\u000a                            Easy to verify output from intermediate steps\u000a                    Composability\u000a                            You assemble a toolbox of functions that can be mixed\u000a\u000a    Tackling a problem\u000a            Need a significant example\u000a\u000a    Iterators\u000a    Generators\u000a    The itertools module\u000a    List comprehensions\u000a    Small functions and the lambda statement\u000a    Built-in functions\u000a            map\u000a            filter\u000a            reduce\u000a\u000a
p6987
tp6988
a(g655
V.. comment\u000a\u000a    Handy little function for printing part of an iterator -- used\u000a    while writing this document.\u000a\u000a    import itertools\u000a    def print_iter(it):\u000a         slice = itertools.islice(it, 10)\u000a         for elem in slice[:-1]:\u000a             sys.stdout.write(str(elem))\u000a             sys.stdout.write(', ')\u000a        print elem[-1]\u000a
p6989
tp6990
a.