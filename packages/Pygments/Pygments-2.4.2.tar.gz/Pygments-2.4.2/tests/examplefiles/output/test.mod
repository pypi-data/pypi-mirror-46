(lp0
(ccopy_reg
_reconstructor
p1
(cpygments.token
_TokenType
p2
c__builtin__
tuple
p3
(S'Comment'
p4
S'Multiline'
p5
tp6
tp7
Rp8
(dp9
S'parent'
p10
g1
(g2
g3
(g4
tp11
tp12
Rp13
(dp14
S'Multi'
p15
g1
(g2
g3
(g4
g15
tp16
tp17
Rp18
(dp19
g10
g13
sS'subtypes'
p20
c__builtin__
set
p21
((lp22
tp23
Rp24
sbsg10
g1
(g2
g3
(ttp25
Rp26
(dp27
S'Number'
p28
g1
(g2
g3
(S'Literal'
p29
g28
tp30
tp31
Rp32
(dp33
S'Integer'
p34
g1
(g2
g3
(g29
g28
g34
tp35
tp36
Rp37
(dp38
g10
g32
sS'Long'
p39
g1
(g2
g3
(g29
g28
g34
g39
tp40
tp41
Rp42
(dp43
g10
g37
sg20
g21
((lp44
tp45
Rp46
sbsg20
g21
((lp47
g42
atp48
Rp49
sbsg10
g1
(g2
g3
(g29
tp50
tp51
Rp52
(dp53
S'Scalar'
p54
g1
(g2
g3
(g29
g54
tp55
tp56
Rp57
(dp58
g10
g52
sg20
g21
((lp59
g1
(g2
g3
(g29
g54
S'Plain'
p60
tp61
tp62
Rp63
(dp64
g10
g57
sg20
g21
((lp65
tp66
Rp67
sbatp68
Rp69
sg60
g63
sbsg28
g32
sg10
g26
sS'Other'
p70
g1
(g2
g3
(g29
g70
tp71
tp72
Rp73
(dp74
g10
g52
sg20
g21
((lp75
tp76
Rp77
sbsS'Char'
p78
g1
(g2
g3
(g29
g78
tp79
tp80
Rp81
(dp82
g10
g52
sg20
g21
((lp83
tp84
Rp85
sbsS'String'
p86
g1
(g2
g3
(g29
g86
tp87
tp88
Rp89
(dp90
g78
g1
(g2
g3
(g29
g86
g78
tp91
tp92
Rp93
(dp94
g10
g89
sg20
g21
((lp95
tp96
Rp97
sbsS'Backtick'
p98
g1
(g2
g3
(g29
g86
g98
tp99
tp100
Rp101
(dp102
g10
g89
sg20
g21
((lp103
tp104
Rp105
sbsS'Heredoc'
p106
g1
(g2
g3
(g29
g86
g106
tp107
tp108
Rp109
(dp110
g10
g89
sg20
g21
((lp111
tp112
Rp113
sbsS'Symbol'
p114
g1
(g2
g3
(g29
g86
g114
tp115
tp116
Rp117
(dp118
g10
g89
sg20
g21
((lp119
tp120
Rp121
sbsS'Interpol'
p122
g1
(g2
g3
(g29
g86
g122
tp123
tp124
Rp125
(dp126
g10
g89
sg20
g21
((lp127
tp128
Rp129
sbsS'Delimiter'
p130
g1
(g2
g3
(g29
g86
g130
tp131
tp132
Rp133
(dp134
g10
g89
sg20
g21
((lp135
tp136
Rp137
sbsS'Boolean'
p138
g1
(g2
g3
(g29
g86
g138
tp139
tp140
Rp141
(dp142
g10
g89
sg20
g21
((lp143
tp144
Rp145
sbsS'Character'
p146
g1
(g2
g3
(g29
g86
g146
tp147
tp148
Rp149
(dp150
g10
g89
sg20
g21
((lp151
tp152
Rp153
sbsS'Double'
p154
g1
(g2
g3
(g29
g86
g154
tp155
tp156
Rp157
(dp158
g10
g89
sg20
g21
((lp159
tp160
Rp161
sbsS'Delimeter'
p162
g1
(g2
g3
(g29
g86
g162
tp163
tp164
Rp165
(dp166
g10
g89
sg20
g21
((lp167
tp168
Rp169
sbsS'Atom'
p170
g1
(g2
g3
(g29
g86
g170
tp171
tp172
Rp173
(dp174
g10
g89
sg20
g21
((lp175
tp176
Rp177
sbsS'Affix'
p178
g1
(g2
g3
(g29
g86
g178
tp179
tp180
Rp181
(dp182
g10
g89
sg20
g21
((lp183
tp184
Rp185
sbsS'Name'
p186
g1
(g2
g3
(g29
g86
g186
tp187
tp188
Rp189
(dp190
g10
g89
sg20
g21
((lp191
tp192
Rp193
sbsS'Regex'
p194
g1
(g2
g3
(g29
g86
g194
tp195
tp196
Rp197
(dp198
g10
g89
sg20
g21
((lp199
tp200
Rp201
sbsS'Interp'
p202
g1
(g2
g3
(g29
g86
g202
tp203
tp204
Rp205
(dp206
g10
g89
sg20
g21
((lp207
tp208
Rp209
sbsS'Escape'
p210
g1
(g2
g3
(g29
g86
g210
tp211
tp212
Rp213
(dp214
g10
g89
sg20
g21
((lp215
tp216
Rp217
sbsg20
g21
((lp218
g133
ag117
ag197
ag1
(g2
g3
(g29
g86
S'Doc'
p219
tp220
tp221
Rp222
(dp223
g10
g89
sg20
g21
((lp224
tp225
Rp226
sbag149
ag141
ag157
ag125
ag173
ag165
ag189
ag213
ag1
(g2
g3
(g29
g86
S'Single'
p227
tp228
tp229
Rp230
(dp231
g10
g89
sg20
g21
((lp232
tp233
Rp234
sbag1
(g2
g3
(g29
g86
g70
tp235
tp236
Rp237
(dp238
g10
g89
sg20
g21
((lp239
tp240
Rp241
sbag205
ag101
ag181
ag1
(g2
g3
(g29
g86
S'Moment'
p242
tp243
tp244
Rp245
(dp246
g10
g89
sg20
g21
((lp247
tp248
Rp249
sbag93
ag109
atp250
Rp251
sg227
g230
sg242
g245
sg10
g52
sg70
g237
sg219
g222
sbsg20
g21
((lp252
g89
ag81
ag73
ag1
(g2
g3
(g29
S'Date'
p253
tp254
tp255
Rp256
(dp257
g10
g52
sg20
g21
((lp258
tp259
Rp260
sbag57
ag32
atp261
Rp262
sg253
g256
sbsS'Bin'
p263
g1
(g2
g3
(g29
g28
g263
tp264
tp265
Rp266
(dp267
g10
g32
sg20
g21
((lp268
tp269
Rp270
sbsS'Radix'
p271
g1
(g2
g3
(g29
g28
g271
tp272
tp273
Rp274
(dp275
g10
g32
sg20
g21
((lp276
tp277
Rp278
sbsS'Oct'
p279
g1
(g2
g3
(g29
g28
g279
tp280
tp281
Rp282
(dp283
g10
g32
sg20
g21
((lp284
tp285
Rp286
sbsS'Dec'
p287
g1
(g2
g3
(g29
g28
g287
tp288
tp289
Rp290
(dp291
g10
g32
sg20
g21
((lp292
tp293
Rp294
sbsS'Hex'
p295
g1
(g2
g3
(g29
g28
g295
tp296
tp297
Rp298
(dp299
g10
g32
sg20
g21
((lp300
tp301
Rp302
sbsg20
g21
((lp303
g37
ag274
ag290
ag1
(g2
g3
(g29
g28
S'Decimal'
p304
tp305
tp306
Rp307
(dp308
g10
g32
sg20
g21
((lp309
tp310
Rp311
sbag266
ag1
(g2
g3
(g29
g28
S'Float'
p312
tp313
tp314
Rp315
(dp316
g10
g32
sg20
g21
((lp317
tp318
Rp319
sbag282
ag298
atp320
Rp321
sg304
g307
sg312
g315
sbsS'Generic'
p322
g1
(g2
g3
(g322
tp323
tp324
Rp325
(dp326
g10
g26
sS'Deleted'
p327
g1
(g2
g3
(g322
g327
tp328
tp329
Rp330
(dp331
g10
g325
sg20
g21
((lp332
tp333
Rp334
sbsS'Subheading'
p335
g1
(g2
g3
(g322
g335
tp336
tp337
Rp338
(dp339
g10
g325
sg20
g21
((lp340
tp341
Rp342
sbsS'Heading'
p343
g1
(g2
g3
(g322
g343
tp344
tp345
Rp346
(dp347
g10
g325
sg20
g21
((lp348
tp349
Rp350
sbsS'Emph'
p351
g1
(g2
g3
(g322
g351
tp352
tp353
Rp354
(dp355
g10
g325
sg20
g21
((lp356
tp357
Rp358
sbsS'Prompt'
p359
g1
(g2
g3
(g322
g359
tp360
tp361
Rp362
(dp363
g10
g325
sg20
g21
((lp364
tp365
Rp366
sbsS'Inserted'
p367
g1
(g2
g3
(g322
g367
tp368
tp369
Rp370
(dp371
g10
g325
sg20
g21
((lp372
tp373
Rp374
sbsS'Strong'
p375
g1
(g2
g3
(g322
g375
tp376
tp377
Rp378
(dp379
g10
g325
sg20
g21
((lp380
tp381
Rp382
sbsS'Error'
p383
g1
(g2
g3
(g322
g383
tp384
tp385
Rp386
(dp387
g10
g325
sg20
g21
((lp388
tp389
Rp390
sbsS'Traceback'
p391
g1
(g2
g3
(g322
g391
tp392
tp393
Rp394
(dp395
g10
g325
sg20
g21
((lp396
tp397
Rp398
sbsg20
g21
((lp399
g346
ag338
ag1
(g2
g3
(g322
S'Output'
p400
tp401
tp402
Rp403
(dp404
g10
g325
sg20
g21
((lp405
tp406
Rp407
sbag378
ag354
ag386
ag394
ag370
ag362
ag330
atp408
Rp409
sg400
g403
sbsS'Operator'
p410
g1
(g2
g3
(g410
tp411
tp412
Rp413
(dp414
g10
g26
sS'DBS'
p415
g1
(g2
g3
(g410
g415
tp416
tp417
Rp418
(dp419
g10
g413
sg20
g21
((lp420
tp421
Rp422
sbsg20
g21
((lp423
g418
ag1
(g2
g3
(g410
S'Word'
p424
tp425
tp426
Rp427
(dp428
g10
g413
sg20
g21
((lp429
tp430
Rp431
sbatp432
Rp433
sg424
g427
sbsg86
g89
sg186
g1
(g2
g3
(g186
tp434
tp435
Rp436
(dp437
S'Variable'
p438
g1
(g2
g3
(g186
g438
tp439
tp440
Rp441
(dp442
g10
g436
sS'Class'
p443
g1
(g2
g3
(g186
g438
g443
tp444
tp445
Rp446
(dp447
g10
g441
sg20
g21
((lp448
tp449
Rp450
sbsS'Anonymous'
p451
g1
(g2
g3
(g186
g438
g451
tp452
tp453
Rp454
(dp455
g10
g441
sg20
g21
((lp456
tp457
Rp458
sbsS'Instance'
p459
g1
(g2
g3
(g186
g438
g459
tp460
tp461
Rp462
(dp463
g10
g441
sg20
g21
((lp464
tp465
Rp466
sbsS'Global'
p467
g1
(g2
g3
(g186
g438
g467
tp468
tp469
Rp470
(dp471
g10
g441
sg20
g21
((lp472
tp473
Rp474
sbsg20
g21
((lp475
g454
ag462
ag1
(g2
g3
(g186
g438
S'Magic'
p476
tp477
tp478
Rp479
(dp480
g10
g441
sg20
g21
((lp481
tp482
Rp483
sbag470
ag446
atp484
Rp485
sg476
g479
sbsg410
g1
(g2
g3
(g186
g410
tp486
tp487
Rp488
(dp489
g10
g436
sg20
g21
((lp490
tp491
Rp492
sbsS'Decorator'
p493
g1
(g2
g3
(g186
g493
tp494
tp495
Rp496
(dp497
g10
g436
sg20
g21
((lp498
tp499
Rp500
sbsS'Entity'
p501
g1
(g2
g3
(g186
g501
tp502
tp503
Rp504
(dp505
g10
g436
sg415
g1
(g2
g3
(g186
g501
g415
tp506
tp507
Rp508
(dp509
g10
g504
sg20
g21
((lp510
tp511
Rp512
sbsg20
g21
((lp513
g508
atp514
Rp515
sbsg114
g1
(g2
g3
(g186
g114
tp516
tp517
Rp518
(dp519
g10
g436
sg20
g21
((lp520
tp521
Rp522
sbsS'Property'
p523
g1
(g2
g3
(g186
g523
tp524
tp525
Rp526
(dp527
g10
g436
sg20
g21
((lp528
tp529
Rp530
sbsS'Pseudo'
p531
g1
(g2
g3
(g186
g531
tp532
tp533
Rp534
(dp535
g10
g436
sg20
g21
((lp536
tp537
Rp538
sbsS'Type'
p539
g1
(g2
g3
(g186
g539
tp540
tp541
Rp542
(dp543
g10
g436
sg20
g21
((lp544
tp545
Rp546
sbsS'Classes'
p547
g1
(g2
g3
(g186
g547
tp548
tp549
Rp550
(dp551
g10
g436
sg20
g21
((lp552
tp553
Rp554
sbsS'Tag'
p555
g1
(g2
g3
(g186
g555
tp556
tp557
Rp558
(dp559
g10
g436
sg20
g21
((lp560
tp561
Rp562
sbsS'Constant'
p563
g1
(g2
g3
(g186
g563
tp564
tp565
Rp566
(dp567
g10
g436
sg20
g21
((lp568
tp569
Rp570
sbsS'Function'
p571
g1
(g2
g3
(g186
g571
tp572
tp573
Rp574
(dp575
g10
g436
sg20
g21
((lp576
g1
(g2
g3
(g186
g571
g476
tp577
tp578
Rp579
(dp580
g10
g574
sg20
g21
((lp581
tp582
Rp583
sbatp584
Rp585
sg476
g579
sbsS'Blubb'
p586
g1
(g2
g3
(g186
g586
tp587
tp588
Rp589
(dp590
g10
g436
sg20
g21
((lp591
tp592
Rp593
sbsS'Label'
p594
g1
(g2
g3
(g186
g594
tp595
tp596
Rp597
(dp598
g10
g436
sg20
g21
((lp599
tp600
Rp601
sbsS'Field'
p602
g1
(g2
g3
(g186
g602
tp603
tp604
Rp605
(dp606
g10
g436
sg20
g21
((lp607
tp608
Rp609
sbsS'Exception'
p610
g1
(g2
g3
(g186
g610
tp611
tp612
Rp613
(dp614
g10
g436
sg20
g21
((lp615
tp616
Rp617
sbsS'Namespace'
p618
g1
(g2
g3
(g186
g618
tp619
tp620
Rp621
(dp622
g10
g436
sg20
g21
((lp623
tp624
Rp625
sbsg20
g21
((lp626
g496
ag589
ag534
ag504
ag441
ag613
ag526
ag558
ag574
ag550
ag1
(g2
g3
(g186
g443
tp627
tp628
Rp629
(dp630
g10
g436
sg415
g1
(g2
g3
(g186
g443
g415
tp631
tp632
Rp633
(dp634
g10
g629
sg20
g21
((lp635
tp636
Rp637
sbsg20
g21
((lp638
g1
(g2
g3
(g186
g443
S'Start'
p639
tp640
tp641
Rp642
(dp643
g10
g629
sg20
g21
((lp644
tp645
Rp646
sbag633
atp647
Rp648
sg639
g642
sbag1
(g2
g3
(g186
g70
tp649
tp650
Rp651
(dp652
g10
g436
sS'Member'
p653
g1
(g2
g3
(g186
g70
g653
tp654
tp655
Rp656
(dp657
g10
g651
sg20
g21
((lp658
tp659
Rp660
sbsg20
g21
((lp661
g656
atp662
Rp663
sbag597
ag488
ag621
ag1
(g2
g3
(g186
S'Attribute'
p664
tp665
tp666
Rp667
(dp668
g10
g436
sg438
g1
(g2
g3
(g186
g664
g438
tp669
tp670
Rp671
(dp672
g10
g667
sg20
g21
((lp673
tp674
Rp675
sbsg20
g21
((lp676
g671
atp677
Rp678
sbag566
ag1
(g2
g3
(g186
S'Builtin'
p679
tp680
tp681
Rp682
(dp683
g10
g436
sg539
g1
(g2
g3
(g186
g679
g539
tp684
tp685
Rp686
(dp687
g10
g682
sg20
g21
((lp688
tp689
Rp690
sbsg20
g21
((lp691
g1
(g2
g3
(g186
g679
g531
tp692
tp693
Rp694
(dp695
g10
g682
sg20
g21
((lp696
tp697
Rp698
sbag686
atp699
Rp700
sg531
g694
sbag605
ag542
ag518
atp701
Rp702
sg10
g26
sg443
g629
sg679
g682
sg664
g667
sg70
g651
sbsS'Punctuation'
p703
g1
(g2
g3
(g703
tp704
tp705
Rp706
(dp707
g10
g26
sg20
g21
((lp708
g1
(g2
g3
(g703
S'Indicator'
p709
tp710
tp711
Rp712
(dp713
g10
g706
sg20
g21
((lp714
tp715
Rp716
sbatp717
Rp718
sg709
g712
sbsg4
g13
sg29
g52
sg70
g1
(g2
g3
(g70
tp719
tp720
Rp721
(dp722
g10
g26
sg20
g21
((lp723
tp724
Rp725
sbsg383
g1
(g2
g3
(g383
tp726
tp727
Rp728
(dp729
g10
g26
sg20
g21
((lp730
tp731
Rp732
sbsS'Token'
p733
g26
sg210
g1
(g2
g3
(g210
tp734
tp735
Rp736
(dp737
g10
g26
sg20
g21
((lp738
tp739
Rp740
sbsg20
g21
((lp741
g436
ag721
ag1
(g2
g3
(S'Keyword'
p742
tp743
tp744
Rp745
(dp746
g10
g26
sg539
g1
(g2
g3
(g742
g539
tp747
tp748
Rp749
(dp750
g10
g745
sg20
g21
((lp751
tp752
Rp753
sbsS'Control'
p754
g1
(g2
g3
(g742
g754
tp755
tp756
Rp757
(dp758
g10
g745
sg20
g21
((lp759
tp760
Rp761
sbsg563
g1
(g2
g3
(g742
g563
tp762
tp763
Rp764
(dp765
g10
g745
sg20
g21
((lp766
tp767
Rp768
sbsg618
g1
(g2
g3
(g742
g618
tp769
tp770
Rp771
(dp772
g10
g745
sg20
g21
((lp773
tp774
Rp775
sbsS'PreProc'
p776
g1
(g2
g3
(g742
g776
tp777
tp778
Rp779
(dp780
g10
g745
sg20
g21
((lp781
tp782
Rp783
sbsg531
g1
(g2
g3
(g742
g531
tp784
tp785
Rp786
(dp787
g10
g745
sg20
g21
((lp788
tp789
Rp790
sbsS'Reserved'
p791
g1
(g2
g3
(g742
g791
tp792
tp793
Rp794
(dp795
g10
g745
sg20
g21
((lp796
tp797
Rp798
sbsg20
g21
((lp799
g771
ag1
(g2
g3
(g742
g424
tp800
tp801
Rp802
(dp803
g10
g745
sg20
g21
((lp804
tp805
Rp806
sbag757
ag1
(g2
g3
(g742
S'Declaration'
p807
tp808
tp809
Rp810
(dp811
g10
g745
sg20
g21
((lp812
tp813
Rp814
sbag1
(g2
g3
(g742
g742
tp815
tp816
Rp817
(dp818
g10
g745
sg20
g21
((lp819
tp820
Rp821
sbag786
ag764
ag749
ag794
ag779
atp822
Rp823
sg742
g817
sg807
g810
sg424
g802
sbag325
ag1
(g2
g3
(S'Text'
p824
tp825
tp826
Rp827
(dp828
S'Beer'
p829
g1
(g2
g3
(g824
g829
tp830
tp831
Rp832
(dp833
g10
g827
sg20
g21
((lp834
tp835
Rp836
sbsS'Whitespace'
p837
g1
(g2
g3
(g824
g837
tp838
tp839
Rp840
(dp841
g10
g827
sg20
g21
((lp842
tp843
Rp844
sbsg10
g26
sS'Root'
p845
g1
(g2
g3
(g824
g845
tp846
tp847
Rp848
(dp849
g10
g827
sg20
g21
((lp850
tp851
Rp852
sbsg114
g1
(g2
g3
(g824
g114
tp853
tp854
Rp855
(dp856
g10
g827
sg20
g21
((lp857
tp858
Rp859
sbsg703
g1
(g2
g3
(g824
g703
tp860
tp861
Rp862
(dp863
g10
g827
sg20
g21
((lp864
tp865
Rp866
sbsg20
g21
((lp867
g848
ag855
ag862
ag840
ag832
ag1
(g2
g3
(g824
S'Rag'
p868
tp869
tp870
Rp871
(dp872
g10
g827
sg20
g21
((lp873
tp874
Rp875
sbatp876
Rp877
sg868
g871
sbag413
ag736
ag706
ag13
ag728
ag52
atp878
Rp879
sg742
g745
sg824
g827
sbsS'Special'
p880
g1
(g2
g3
(g4
g880
tp881
tp882
Rp883
(dp884
g10
g13
sg20
g21
((lp885
tp886
Rp887
sbsS'Hashbang'
p888
g1
(g2
g3
(g4
g888
tp889
tp890
Rp891
(dp892
g10
g13
sg20
g21
((lp893
tp894
Rp895
sbsS'Preproc'
p896
g1
(g2
g3
(g4
g896
tp897
tp898
Rp899
(dp900
g10
g13
sg20
g21
((lp901
tp902
Rp903
sbsg227
g1
(g2
g3
(g4
g227
tp904
tp905
Rp906
(dp907
g10
g13
sg20
g21
((lp908
tp909
Rp910
sbsS'Directive'
p911
g1
(g2
g3
(g4
g911
tp912
tp913
Rp914
(dp915
g10
g13
sg20
g21
((lp916
tp917
Rp918
sbsg219
g1
(g2
g3
(g4
g219
tp919
tp920
Rp921
(dp922
g10
g13
sg20
g21
((lp923
tp924
Rp925
sbsS'Singleline'
p926
g1
(g2
g3
(g4
g926
tp927
tp928
Rp929
(dp930
g10
g13
sg20
g21
((lp931
tp932
Rp933
sbsg5
g8
sg20
g21
((lp934
g921
ag914
ag891
ag18
ag929
ag899
ag8
ag906
ag1
(g2
g3
(g4
S'PreprocFile'
p935
tp936
tp937
Rp938
(dp939
g10
g13
sg20
g21
((lp940
tp941
Rp942
sbag1
(g2
g3
(g4
S'SingleLine'
p943
tp944
tp945
Rp946
(dp947
g10
g13
sg20
g21
((lp948
tp949
Rp950
sbag883
atp951
Rp952
sg935
g938
sg943
g946
sbsg20
g21
((lp953
tp954
Rp955
sbV(* LIFO Storage Library\u000a *\u000a *  @file LIFO.mod\u000a *  LIFO implementation\u000a *\u000a *  Universal Dynamic Stack\u000a *\u000a *  Author: Benjamin Kowarsch\u000a *\u000a *  Copyright (C) 2009 Benjamin Kowarsch. All rights reserved.\u000a *\u000a *  License:\u000a *\u000a *  Redistribution  and  use  in source  and  binary forms,  with  or  without\u000a *  modification, are permitted provided that the following conditions are met\u000a *\u000a *  1) NO FEES may be charged for the provision of the software.  The software\u000a *     may  NOT  be published  on websites  that contain  advertising,  unless\u000a *     specific  prior  written  permission has been obtained.\u000a *\u000a *  2) Redistributions  of source code must retain the above copyright notice,\u000a *     this list of conditions and the following disclaimer.\u000a *\u000a *  3) Redistributions  in binary form  must  reproduce  the  above  copyright\u000a *     notice,  this list of conditions  and  the following disclaimer  in the\u000a *     documentation and other materials provided with the distribution.\u000a *\u000a *  4) Neither the author's name nor the names of any contributors may be used\u000a *     to endorse  or  promote  products  derived  from this software  without\u000a *     specific prior written permission.\u000a *\u000a *  5) Where this list of conditions  or  the following disclaimer, in part or\u000a *     as a whole is overruled  or  nullified by applicable law, no permission\u000a *     is granted to use the software.\u000a *\u000a * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\u000a * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE\u000a * IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A PARTICULAR PURPOSE\u000a * ARE DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\u000a * LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR\u000a * CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT OF\u000a * SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA,  OR PROFITS; OR BUSINESS\u000a * INTERRUPTION)  HOWEVER  CAUSED  AND ON ANY THEORY OF LIABILITY,  WHETHER IN\u000a * CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)\u000a * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  EVEN IF ADVISED OF THE\u000a * POSSIBILITY OF SUCH DAMAGE.\u000a *  \u000a *)
p956
tp957
a(g827
V\u000a\u000a\u000a
p958
tp959
a(g794
VIMPLEMENTATION
p960
tp961
a(g827
V 
p962
tp963
a(g8
V(* OF *)
p964
tp965
a(g827
g962
tp966
a(g794
VMODULE
p967
tp968
a(g827
g962
tp969
a(g436
VLIFO
p970
tp971
a(g706
V;
p972
tp973
a(g827
V\u000a\u000a
p974
tp975
a(g794
VFROM
p976
tp977
a(g827
g962
tp978
a(g694
VSYSTEM
p979
tp980
a(g827
g962
tp981
a(g794
VIMPORT
p982
tp983
a(g827
g962
tp984
a(g694
VADDRESS
p985
tp986
a(g706
V,
p987
tp988
a(g827
g962
tp989
a(g694
VADR
p990
tp991
a(g706
g987
tp992
a(g827
g962
tp993
a(g682
VTSIZE
p994
tp995
a(g706
g972
tp996
a(g827
V\u000a
p997
tp998
a(g794
VFROM
p999
tp1000
a(g827
g962
tp1001
a(g436
VStorage
p1002
tp1003
a(g827
g962
tp1004
a(g794
VIMPORT
p1005
tp1006
a(g827
g962
tp1007
a(g436
VALLOCATE
p1008
tp1009
a(g706
g987
tp1010
a(g827
g962
tp1011
a(g436
VDEALLOCATE
p1012
tp1013
a(g706
g972
tp1014
a(g827
V\u000a\u000a\u000a
p1015
tp1016
a(g8
V(* ---------------------------------------------------------------------------\u000a// Private type : ListEntry\u000a// ---------------------------------------------------------------------------\u000a*)
p1017
tp1018
a(g827
V\u000a
p1019
tp1020
a(g794
VTYPE
p1021
tp1022
a(g827
g962
tp1023
a(g436
VListPtr
p1024
tp1025
a(g827
g962
tp1026
a(g413
V=
p1027
tp1028
a(g827
g962
tp1029
a(g794
VPOINTER
p1030
tp1031
a(g827
g962
tp1032
a(g794
VTO
p1033
tp1034
a(g827
g962
tp1035
a(g436
VListEntry
p1036
tp1037
a(g706
g972
tp1038
a(g827
V\u000a\u000a
p1039
tp1040
a(g794
VTYPE
p1041
tp1042
a(g827
g962
tp1043
a(g436
VListEntry
p1044
tp1045
a(g827
g962
tp1046
a(g413
g1027
tp1047
a(g827
g962
tp1048
a(g794
VRECORD
p1049
tp1050
a(g827
V\u000a
p1051
tp1052
a(g827
V    
p1053
tp1054
a(g436
Vvalue
p1055
tp1056
a(g827
g962
tp1057
a(g706
V:
p1058
tp1059
a(g827
g962
tp1060
a(g436
VDataPtr
p1061
tp1062
a(g706
g972
tp1063
a(g827
V\u000a
p1064
tp1065
a(g827
V    
p1066
tp1067
a(g436
Vnext
p1068
tp1069
a(g827
V  
p1070
tp1071
a(g706
g1058
tp1072
a(g827
g962
tp1073
a(g436
VListPtr
p1074
tp1075
a(g827
V\u000a
p1076
tp1077
a(g794
VEND
p1078
tp1079
a(g706
g972
tp1080
a(g827
g962
tp1081
a(g8
V(* ListEntry *)
p1082
tp1083
a(g827
V\u000a\u000a\u000a
p1084
tp1085
a(g8
V(* ---------------------------------------------------------------------------\u000a// Opaque type : LIFO.Stack\u000a// ---------------------------------------------------------------------------\u000a// CAUTION:  Modula-2 does not support the use of variable length array fields\u000a// in records.  VLAs can  only  be implemented  using pointer arithmetic which\u000a// means  there is  no type checking  and  no boundary checking  on the array.\u000a// It also means that  array notation cannot be used on the array  which makes\u000a// the code  difficult to read  and maintain.  As a result,  Modula-2  is less\u000a// safe and less readable than C when it comes to using VLAs.  Great care must\u000a// be taken to make sure that the code accessing VLA fields is safe.  Boundary\u000a// checks must be inserted manually.  Size checks must be inserted manually to\u000a// compensate for the absence of type checks. *)
p1086
tp1087
a(g827
V\u000a\u000a
p1088
tp1089
a(g794
VTYPE
p1090
tp1091
a(g827
g962
tp1092
a(g436
VStack
p1093
tp1094
a(g827
g962
tp1095
a(g413
g1027
tp1096
a(g827
g962
tp1097
a(g794
VPOINTER
p1098
tp1099
a(g827
g962
tp1100
a(g794
VTO
p1101
tp1102
a(g827
g962
tp1103
a(g436
VStackDescriptor
p1104
tp1105
a(g706
g972
tp1106
a(g827
V\u000a\u000a
p1107
tp1108
a(g794
VTYPE
p1109
tp1110
a(g827
g962
tp1111
a(g436
VStackDescriptor
p1112
tp1113
a(g827
g962
tp1114
a(g413
g1027
tp1115
a(g827
g962
tp1116
a(g794
VRECORD
p1117
tp1118
a(g827
V\u000a
p1119
tp1120
a(g827
V    
p1121
tp1122
a(g436
Voverflow
p1123
tp1124
a(g827
V   
p1125
tp1126
a(g706
g1058
tp1127
a(g827
g962
tp1128
a(g436
VListPtr
p1129
tp1130
a(g706
g972
tp1131
a(g827
V\u000a
p1132
tp1133
a(g827
V    
p1134
tp1135
a(g436
VentryCount
p1136
tp1137
a(g827
g962
tp1138
a(g706
g1058
tp1139
a(g827
g962
tp1140
a(g436
VStackSize
p1141
tp1142
a(g706
g972
tp1143
a(g827
V\u000a
p1144
tp1145
a(g827
V    
p1146
tp1147
a(g436
VarraySize
p1148
tp1149
a(g827
V  
p1150
tp1151
a(g706
g1058
tp1152
a(g827
g962
tp1153
a(g436
VStackSize
p1154
tp1155
a(g706
g972
tp1156
a(g827
V\u000a
p1157
tp1158
a(g827
V    
p1159
tp1160
a(g436
Varray
p1161
tp1162
a(g827
V      
p1163
tp1164
a(g706
g1058
tp1165
a(g827
g962
tp1166
a(g694
VADDRESS
p1167
tp1168
a(g827
g962
tp1169
a(g8
V(* ARRAY OF DataPtr *)
p1170
tp1171
a(g827
V\u000a
p1172
tp1173
a(g794
VEND
p1174
tp1175
a(g706
g972
tp1176
a(g827
g962
tp1177
a(g8
V(* StackDescriptor *)
p1178
tp1179
a(g827
V\u000a\u000a\u000a
p1180
tp1181
a(g8
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.new( initial_size, status )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Creates  and  returns  a new LIFO stack object  with an initial capacity of\u000a// <initialSize>.  If  zero  is passed in  for <initialSize>,  then  the stack\u000a// will be created  with an  initial capacity  of  LIFO.defaultStackSize.  The\u000a// function fails  if a value greater than   LIFO.maximumStackSize  is  passed\u000a// in  for <initialSize> or if memory could not be allocated.\u000a//\u000a// The initial capacity of a stack is the number of entries that can be stored\u000a// in the stack without enlargement.\u000a//\u000a// The status of the operation  is passed back in <status>. *)
p1182
tp1183
a(g827
V\u000a\u000a
p1184
tp1185
a(g794
VPROCEDURE
p1186
tp1187
a(g827
g962
tp1188
a(g436
Vnew
p1189
tp1190
a(g827
g962
tp1191
a(g706
V(
p1192
tp1193
a(g827
g962
tp1194
a(g436
VinitialSize
p1195
tp1196
a(g827
g962
tp1197
a(g706
g1058
tp1198
a(g827
g962
tp1199
a(g436
VStackSize
p1200
tp1201
a(g706
g972
tp1202
a(g827
g962
tp1203
a(g794
VVAR
p1204
tp1205
a(g827
g962
tp1206
a(g436
Vstatus
p1207
tp1208
a(g827
g962
tp1209
a(g706
g1058
tp1210
a(g827
g962
tp1211
a(g436
VStatus
p1212
tp1213
a(g827
g962
tp1214
a(g706
V)
p1215
tp1216
a(g827
g962
tp1217
a(g706
g1058
tp1218
a(g827
g962
tp1219
a(g436
VStack
p1220
tp1221
a(g706
g972
tp1222
a(g827
V\u000a\u000a
p1223
tp1224
a(g794
VVAR
p1225
tp1226
a(g827
V\u000a
p1227
tp1228
a(g827
V    
p1229
tp1230
a(g436
VnewStack
p1231
tp1232
a(g827
g962
tp1233
a(g706
g1058
tp1234
a(g827
g962
tp1235
a(g436
VStack
p1236
tp1237
a(g706
g972
tp1238
a(g827
V\u000a
p1239
tp1240
a(g827
V    \u000a
p1241
tp1242
a(g794
VBEGIN
p1243
tp1244
a(g827
V\u000a\u000a
p1245
tp1246
a(g827
V    
p1247
tp1248
a(g8
V(* zero size means default *)
p1249
tp1250
a(g827
V\u000a
p1251
tp1252
a(g827
V    
p1253
tp1254
a(g794
VIF
p1255
tp1256
a(g827
g962
tp1257
a(g436
VinitialSize
p1258
tp1259
a(g827
g962
tp1260
a(g413
g1027
tp1261
a(g827
g962
tp1262
a(g37
V0
p1263
tp1264
a(g827
g962
tp1265
a(g794
VTHEN
p1266
tp1267
a(g827
V\u000a
p1268
tp1269
a(g827
V        
p1270
tp1271
a(g436
VinitialSize
p1272
tp1273
a(g827
g962
tp1274
a(g413
V:=
p1275
tp1276
a(g827
g962
tp1277
a(g436
VdefaultStackSize
p1278
tp1279
a(g706
g972
tp1280
a(g827
V\u000a
p1281
tp1282
a(g827
V    
p1283
tp1284
a(g794
VEND
p1285
tp1286
a(g706
g972
tp1287
a(g827
g962
tp1288
a(g8
V(* IF *)
p1289
tp1290
a(g827
V\u000a
p1291
tp1292
a(g827
V    \u000a    
p1293
tp1294
a(g8
V(* bail out if initial size is too high *)
p1295
tp1296
a(g827
V\u000a
p1297
tp1298
a(g827
V    
p1299
tp1300
a(g794
VIF
p1301
tp1302
a(g827
g962
tp1303
a(g436
VinitialSize
p1304
tp1305
a(g827
g962
tp1306
a(g413
V>
p1307
tp1308
a(g827
g962
tp1309
a(g436
VmaximumStackSize
p1310
tp1311
a(g827
g962
tp1312
a(g794
VTHEN
p1313
tp1314
a(g827
V\u000a
p1315
tp1316
a(g827
V        
p1317
tp1318
a(g436
Vstatus
p1319
tp1320
a(g827
g962
tp1321
a(g413
V:=
p1322
tp1323
a(g827
g962
tp1324
a(g436
VinvalidSize
p1325
tp1326
a(g706
g972
tp1327
a(g827
V\u000a
p1328
tp1329
a(g827
V        
p1330
tp1331
a(g794
VRETURN
p1332
tp1333
a(g827
g962
tp1334
a(g682
VNIL
p1335
tp1336
a(g706
g972
tp1337
a(g827
V\u000a
p1338
tp1339
a(g827
V    
p1340
tp1341
a(g794
VEND
p1342
tp1343
a(g706
g972
tp1344
a(g827
g962
tp1345
a(g8
V(* IF *)
p1346
tp1347
a(g827
V\u000a
p1348
tp1349
a(g827
V    \u000a    
p1350
tp1351
a(g8
V(* allocate new stack object *)
p1352
tp1353
a(g827
V\u000a
p1354
tp1355
a(g827
V    
p1356
tp1357
a(g436
VALLOCATE
p1358
tp1359
a(g706
g1192
tp1360
a(g436
VnewStack
p1361
tp1362
a(g706
g987
tp1363
a(g827
g962
tp1364
a(g682
VTSIZE
p1365
tp1366
a(g706
g1192
tp1367
a(g436
VStack
p1368
tp1369
a(g706
g1215
tp1370
a(g827
g962
tp1371
a(g413
V+
p1372
tp1373
a(g827
g962
tp1374
a(g682
VTSIZE
p1375
tp1376
a(g706
g1192
tp1377
a(g436
VDataPtr
p1378
tp1379
a(g706
g1215
tp1380
a(g827
g962
tp1381
a(g413
V*
p1382
tp1383
a(g827
g962
tp1384
a(g706
g1192
tp1385
a(g436
VinitialSize
p1386
tp1387
a(g827
g962
tp1388
a(g413
V-
p1389
tp1390
a(g827
g962
tp1391
a(g37
V1
p1392
tp1393
a(g706
g1215
tp1394
a(g706
g1215
tp1395
a(g706
g972
tp1396
a(g827
V\u000a
p1397
tp1398
a(g827
V    \u000a    
p1399
tp1400
a(g8
V(* bail out if allocation failed *)
p1401
tp1402
a(g827
V\u000a
p1403
tp1404
a(g827
V    
p1405
tp1406
a(g794
VIF
p1407
tp1408
a(g827
g962
tp1409
a(g436
VnewStack
p1410
tp1411
a(g827
g962
tp1412
a(g413
g1027
tp1413
a(g827
g962
tp1414
a(g682
VNIL
p1415
tp1416
a(g827
g962
tp1417
a(g794
VTHEN
p1418
tp1419
a(g827
V\u000a
p1420
tp1421
a(g827
V        
p1422
tp1423
a(g436
Vstatus
p1424
tp1425
a(g827
g962
tp1426
a(g413
V:=
p1427
tp1428
a(g827
g962
tp1429
a(g436
VallocationFailed
p1430
tp1431
a(g706
g972
tp1432
a(g827
V\u000a
p1433
tp1434
a(g827
V        
p1435
tp1436
a(g794
VRETURN
p1437
tp1438
a(g827
g962
tp1439
a(g682
VNIL
p1440
tp1441
a(g706
g972
tp1442
a(g827
V\u000a
p1443
tp1444
a(g827
V    
p1445
tp1446
a(g794
VEND
p1447
tp1448
a(g706
g972
tp1449
a(g827
g962
tp1450
a(g8
V(* IF *)
p1451
tp1452
a(g827
V\u000a
p1453
tp1454
a(g827
V        \u000a    
p1455
tp1456
a(g8
V(* initialise meta data *)
p1457
tp1458
a(g827
V\u000a
p1459
tp1460
a(g827
V    
p1461
tp1462
a(g436
VnewStack
p1463
tp1464
a(g413
V^
p1465
tp1466
a(g706
V.
p1467
tp1468
a(g436
VarraySize
p1469
tp1470
a(g827
g962
tp1471
a(g413
V:=
p1472
tp1473
a(g827
g962
tp1474
a(g436
VinitialSize
p1475
tp1476
a(g706
g972
tp1477
a(g827
V\u000a
p1478
tp1479
a(g827
V    
p1480
tp1481
a(g436
VnewStack
p1482
tp1483
a(g413
g1465
tp1484
a(g706
g1467
tp1485
a(g436
VentryCount
p1486
tp1487
a(g827
g962
tp1488
a(g413
V:=
p1489
tp1490
a(g827
g962
tp1491
a(g37
g1263
tp1492
a(g706
g972
tp1493
a(g827
V\u000a
p1494
tp1495
a(g827
V    
p1496
tp1497
a(g436
VnewStack
p1498
tp1499
a(g413
g1465
tp1500
a(g706
g1467
tp1501
a(g436
Voverflow
p1502
tp1503
a(g827
g962
tp1504
a(g413
V:=
p1505
tp1506
a(g827
g962
tp1507
a(g682
VNIL
p1508
tp1509
a(g706
g972
tp1510
a(g827
V\u000a
p1511
tp1512
a(g827
V    \u000a    
p1513
tp1514
a(g8
V(* pass status and new stack to caller *)
p1515
tp1516
a(g827
V\u000a
p1517
tp1518
a(g827
V    
p1519
tp1520
a(g436
Vstatus
p1521
tp1522
a(g827
g962
tp1523
a(g413
V:=
p1524
tp1525
a(g827
g962
tp1526
a(g436
Vsuccess
p1527
tp1528
a(g706
g972
tp1529
a(g827
V\u000a
p1530
tp1531
a(g827
V    
p1532
tp1533
a(g794
VRETURN
p1534
tp1535
a(g827
g962
tp1536
a(g436
VnewStack
p1537
tp1538
a(g827
V\u000a
p1539
tp1540
a(g827
V    \u000a
p1541
tp1542
a(g794
VEND
p1543
tp1544
a(g827
g962
tp1545
a(g436
Vnew
p1546
tp1547
a(g706
g972
tp1548
a(g827
V\u000a\u000a\u000a
p1549
tp1550
a(g8
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.push( stack, value, status )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Adds a  new entry <value>  to the top of stack <stack>.  The  new entry  is\u000a// added by reference,  no data is copied.  However,  no entry is added if the\u000a// the stack is full,  that is  when the number of entries stored in the stack\u000a// has reached LIFO.maximumStackSize.  The function fails  if NIL is passed in\u000a// for <stack> or <value>,  or if memory could not be allocated.\u000a//\u000a// New entries are allocated dynamically  if the number of entries exceeds the\u000a// initial capacity of the stack.\u000a//\u000a// The status of the operation is passed back in <status>. *)
p1551
tp1552
a(g827
V\u000a\u000a
p1553
tp1554
a(g794
VPROCEDURE
p1555
tp1556
a(g827
g962
tp1557
a(g436
Vpush
p1558
tp1559
a(g827
g962
tp1560
a(g706
g1192
tp1561
a(g827
g962
tp1562
a(g794
VVAR
p1563
tp1564
a(g827
g962
tp1565
a(g436
Vstack
p1566
tp1567
a(g827
g962
tp1568
a(g706
g1058
tp1569
a(g827
g962
tp1570
a(g436
VStack
p1571
tp1572
a(g706
g972
tp1573
a(g827
g962
tp1574
a(g436
Vvalue
p1575
tp1576
a(g827
g962
tp1577
a(g706
g1058
tp1578
a(g827
g962
tp1579
a(g436
VDataPtr
p1580
tp1581
a(g706
g972
tp1582
a(g827
g962
tp1583
a(g794
VVAR
p1584
tp1585
a(g827
g962
tp1586
a(g436
Vstatus
p1587
tp1588
a(g827
g962
tp1589
a(g706
g1058
tp1590
a(g827
g962
tp1591
a(g436
VStatus
p1592
tp1593
a(g827
g962
tp1594
a(g706
g1215
tp1595
a(g706
g972
tp1596
a(g827
V\u000a
p1597
tp1598
a(g794
VVAR
p1599
tp1600
a(g827
V\u000a
p1601
tp1602
a(g827
V    
p1603
tp1604
a(g436
VnewEntry
p1605
tp1606
a(g827
g962
tp1607
a(g706
g1058
tp1608
a(g827
g962
tp1609
a(g436
VListPtr
p1610
tp1611
a(g706
g972
tp1612
a(g827
V\u000a
p1613
tp1614
a(g827
V    
p1615
tp1616
a(g436
VvaluePtr
p1617
tp1618
a(g827
g962
tp1619
a(g706
g1058
tp1620
a(g827
g962
tp1621
a(g794
VPOINTER
p1622
tp1623
a(g827
g962
tp1624
a(g794
VTO
p1625
tp1626
a(g827
g962
tp1627
a(g436
VDataPtr
p1628
tp1629
a(g706
g972
tp1630
a(g827
V\u000a\u000a
p1631
tp1632
a(g794
VBEGIN
p1633
tp1634
a(g827
V\u000a\u000a
p1635
tp1636
a(g827
V    
p1637
tp1638
a(g8
V(* bail out if stack is NIL *)
p1639
tp1640
a(g827
V\u000a
p1641
tp1642
a(g827
V    
p1643
tp1644
a(g794
VIF
p1645
tp1646
a(g827
g962
tp1647
a(g436
Vstack
p1648
tp1649
a(g827
g962
tp1650
a(g413
g1027
tp1651
a(g827
g962
tp1652
a(g682
VNIL
p1653
tp1654
a(g827
g962
tp1655
a(g794
VTHEN
p1656
tp1657
a(g827
V\u000a
p1658
tp1659
a(g827
V        
p1660
tp1661
a(g436
Vstatus
p1662
tp1663
a(g827
g962
tp1664
a(g413
V:=
p1665
tp1666
a(g827
g962
tp1667
a(g436
VinvalidStack
p1668
tp1669
a(g706
g972
tp1670
a(g827
V\u000a
p1671
tp1672
a(g827
V        
p1673
tp1674
a(g794
VRETURN
p1675
tp1676
a(g706
g972
tp1677
a(g827
V\u000a
p1678
tp1679
a(g827
V    
p1680
tp1681
a(g794
VEND
p1682
tp1683
a(g706
g972
tp1684
a(g827
g962
tp1685
a(g8
V(* IF *)
p1686
tp1687
a(g827
V\u000a
p1688
tp1689
a(g827
V    \u000a    
p1690
tp1691
a(g8
V(* bail out if value is NIL *)
p1692
tp1693
a(g827
V\u000a
p1694
tp1695
a(g827
V    
p1696
tp1697
a(g794
VIF
p1698
tp1699
a(g827
g962
tp1700
a(g436
Vvalue
p1701
tp1702
a(g827
g962
tp1703
a(g413
g1027
tp1704
a(g827
g962
tp1705
a(g682
VNIL
p1706
tp1707
a(g827
g962
tp1708
a(g794
VTHEN
p1709
tp1710
a(g827
V\u000a
p1711
tp1712
a(g827
V        
p1713
tp1714
a(g436
Vstatus
p1715
tp1716
a(g827
g962
tp1717
a(g413
V:=
p1718
tp1719
a(g827
g962
tp1720
a(g436
VinvalidData
p1721
tp1722
a(g706
g972
tp1723
a(g827
V\u000a
p1724
tp1725
a(g827
V        
p1726
tp1727
a(g794
VRETURN
p1728
tp1729
a(g706
g972
tp1730
a(g827
V\u000a
p1731
tp1732
a(g827
V    
p1733
tp1734
a(g794
VEND
p1735
tp1736
a(g706
g972
tp1737
a(g827
g962
tp1738
a(g8
V(* IF *)
p1739
tp1740
a(g827
V\u000a\u000a
p1741
tp1742
a(g827
V    
p1743
tp1744
a(g8
V(* bail out if stack is full *)
p1745
tp1746
a(g827
V\u000a
p1747
tp1748
a(g827
V    
p1749
tp1750
a(g794
VIF
p1751
tp1752
a(g827
g962
tp1753
a(g436
Vstack
p1754
tp1755
a(g413
g1465
tp1756
a(g706
g1467
tp1757
a(g436
VentryCount
p1758
tp1759
a(g827
g962
tp1760
a(g413
V>=
p1761
tp1762
a(g827
g962
tp1763
a(g436
VmaximumStackSize
p1764
tp1765
a(g827
g962
tp1766
a(g794
VTHEN
p1767
tp1768
a(g827
V\u000a
p1769
tp1770
a(g827
V        
p1771
tp1772
a(g436
Vstatus
p1773
tp1774
a(g827
g962
tp1775
a(g413
V:=
p1776
tp1777
a(g827
g962
tp1778
a(g436
VstackFull
p1779
tp1780
a(g706
g972
tp1781
a(g827
V\u000a
p1782
tp1783
a(g827
V        
p1784
tp1785
a(g794
VRETURN
p1786
tp1787
a(g706
g972
tp1788
a(g827
V\u000a
p1789
tp1790
a(g827
V    
p1791
tp1792
a(g794
VEND
p1793
tp1794
a(g706
g972
tp1795
a(g827
g962
tp1796
a(g8
V(* IF *)
p1797
tp1798
a(g827
V\u000a\u000a
p1799
tp1800
a(g827
V    
p1801
tp1802
a(g8
V(* check if index falls within array segment *)
p1803
tp1804
a(g827
V\u000a
p1805
tp1806
a(g827
V    
p1807
tp1808
a(g794
VIF
p1809
tp1810
a(g827
g962
tp1811
a(g436
Vstack
p1812
tp1813
a(g413
g1465
tp1814
a(g706
g1467
tp1815
a(g436
VentryCount
p1816
tp1817
a(g827
g962
tp1818
a(g413
V<
p1819
tp1820
a(g827
g962
tp1821
a(g436
Vstack
p1822
tp1823
a(g413
g1465
tp1824
a(g706
g1467
tp1825
a(g436
VarraySize
p1826
tp1827
a(g827
g962
tp1828
a(g794
VTHEN
p1829
tp1830
a(g827
V\u000a
p1831
tp1832
a(g827
V    \u000a        
p1833
tp1834
a(g8
V(* store value in array segment *)
p1835
tp1836
a(g827
V\u000a
p1837
tp1838
a(g827
V        \u000a        
p1839
tp1840
a(g8
V(* stack^.array^[stack^.entryCount] := value; *)
p1841
tp1842
a(g827
V\u000a
p1843
tp1844
a(g827
V        
p1845
tp1846
a(g436
VvaluePtr
p1847
tp1848
a(g827
g962
tp1849
a(g413
V:=
p1850
tp1851
a(g827
g962
tp1852
a(g694
VADR
p1853
tp1854
a(g706
g1192
tp1855
a(g436
Vstack
p1856
tp1857
a(g413
g1465
tp1858
a(g706
g1467
tp1859
a(g436
Varray
p1860
tp1861
a(g706
g1215
tp1862
a(g827
g962
tp1863
a(g413
g1372
tp1864
a(g827
g962
tp1865
a(g682
VTSIZE
p1866
tp1867
a(g706
g1192
tp1868
a(g436
VDataPtr
p1869
tp1870
a(g706
g1215
tp1871
a(g827
g962
tp1872
a(g413
g1382
tp1873
a(g827
g962
tp1874
a(g436
Vstack
p1875
tp1876
a(g413
g1465
tp1877
a(g706
g1467
tp1878
a(g436
VentryCount
p1879
tp1880
a(g706
g972
tp1881
a(g827
V\u000a
p1882
tp1883
a(g827
V        
p1884
tp1885
a(g436
VvaluePtr
p1886
tp1887
a(g413
g1465
tp1888
a(g827
g962
tp1889
a(g413
V:=
p1890
tp1891
a(g827
g962
tp1892
a(g436
Vvalue
p1893
tp1894
a(g706
g972
tp1895
a(g827
V\u000a
p1896
tp1897
a(g827
V        \u000a    
p1898
tp1899
a(g794
VELSE
p1900
tp1901
a(g827
g962
tp1902
a(g8
V(* index falls within overflow segment *)
p1903
tp1904
a(g827
V\u000a
p1905
tp1906
a(g827
V    \u000a        
p1907
tp1908
a(g8
V(* allocate new entry slot *)
p1909
tp1910
a(g827
V\u000a
p1911
tp1912
a(g827
V        
p1913
tp1914
a(g794
VNEW
p1915
tp1916
a(g706
g1192
tp1917
a(g436
VnewEntry
p1918
tp1919
a(g706
g1215
tp1920
a(g706
g972
tp1921
a(g827
V\u000a
p1922
tp1923
a(g827
V        \u000a        
p1924
tp1925
a(g8
V(* bail out if allocation failed *)
p1926
tp1927
a(g827
V\u000a
p1928
tp1929
a(g827
V        
p1930
tp1931
a(g794
VIF
p1932
tp1933
a(g827
g962
tp1934
a(g436
VnewEntry
p1935
tp1936
a(g827
g962
tp1937
a(g413
g1027
tp1938
a(g827
g962
tp1939
a(g682
VNIL
p1940
tp1941
a(g827
g962
tp1942
a(g794
VTHEN
p1943
tp1944
a(g827
V\u000a
p1945
tp1946
a(g827
V            
p1947
tp1948
a(g436
Vstatus
p1949
tp1950
a(g827
g962
tp1951
a(g413
V:=
p1952
tp1953
a(g827
g962
tp1954
a(g436
VallocationFailed
p1955
tp1956
a(g706
g972
tp1957
a(g827
V\u000a
p1958
tp1959
a(g827
V            
p1960
tp1961
a(g794
VRETURN
p1962
tp1963
a(g706
g972
tp1964
a(g827
V\u000a
p1965
tp1966
a(g827
V        
p1967
tp1968
a(g794
VEND
p1969
tp1970
a(g706
g972
tp1971
a(g827
g962
tp1972
a(g8
V(* IF *)
p1973
tp1974
a(g827
V\u000a
p1975
tp1976
a(g827
V        \u000a        
p1977
tp1978
a(g8
V(* initialise new entry *)
p1979
tp1980
a(g827
V\u000a
p1981
tp1982
a(g827
V        
p1983
tp1984
a(g436
VnewEntry
p1985
tp1986
a(g413
g1465
tp1987
a(g706
g1467
tp1988
a(g436
Vvalue
p1989
tp1990
a(g827
g962
tp1991
a(g413
V:=
p1992
tp1993
a(g827
g962
tp1994
a(g436
Vvalue
p1995
tp1996
a(g706
g972
tp1997
a(g827
V\u000a
p1998
tp1999
a(g827
V        \u000a        
p2000
tp2001
a(g8
V(* link new entry into overflow list *)
p2002
tp2003
a(g827
V\u000a
p2004
tp2005
a(g827
V        
p2006
tp2007
a(g436
VnewEntry
p2008
tp2009
a(g413
g1465
tp2010
a(g706
g1467
tp2011
a(g436
Vnext
p2012
tp2013
a(g827
g962
tp2014
a(g413
V:=
p2015
tp2016
a(g827
g962
tp2017
a(g436
Vstack
p2018
tp2019
a(g413
g1465
tp2020
a(g706
g1467
tp2021
a(g436
Voverflow
p2022
tp2023
a(g706
g972
tp2024
a(g827
V\u000a
p2025
tp2026
a(g827
V        
p2027
tp2028
a(g436
Vstack
p2029
tp2030
a(g413
g1465
tp2031
a(g706
g1467
tp2032
a(g436
Voverflow
p2033
tp2034
a(g827
g962
tp2035
a(g413
V:=
p2036
tp2037
a(g827
g962
tp2038
a(g436
VnewEntry
p2039
tp2040
a(g706
g972
tp2041
a(g827
V\u000a
p2042
tp2043
a(g827
V    \u000a    
p2044
tp2045
a(g794
VEND
p2046
tp2047
a(g706
g972
tp2048
a(g827
g962
tp2049
a(g8
V(* IF *)
p2050
tp2051
a(g827
V\u000a
p2052
tp2053
a(g827
V    \u000a    
p2054
tp2055
a(g8
V(* update entry counter *)
p2056
tp2057
a(g827
V\u000a
p2058
tp2059
a(g827
V    
p2060
tp2061
a(g682
VINC
p2062
tp2063
a(g706
g1192
tp2064
a(g436
Vstack
p2065
tp2066
a(g413
g1465
tp2067
a(g706
g1467
tp2068
a(g436
VentryCount
p2069
tp2070
a(g706
g1215
tp2071
a(g706
g972
tp2072
a(g827
V\u000a
p2073
tp2074
a(g827
V    \u000a    
p2075
tp2076
a(g8
V(* pass status to caller *)
p2077
tp2078
a(g827
V\u000a
p2079
tp2080
a(g827
V    
p2081
tp2082
a(g436
Vstatus
p2083
tp2084
a(g827
g962
tp2085
a(g413
V:=
p2086
tp2087
a(g827
g962
tp2088
a(g436
Vsuccess
p2089
tp2090
a(g706
g972
tp2091
a(g827
V\u000a
p2092
tp2093
a(g827
V    
p2094
tp2095
a(g794
VRETURN
p2096
tp2097
a(g827
V\u000a\u000a
p2098
tp2099
a(g794
VEND
p2100
tp2101
a(g827
g962
tp2102
a(g436
Vpush
p2103
tp2104
a(g706
g972
tp2105
a(g827
V\u000a\u000a\u000a
p2106
tp2107
a(g8
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.pop( stack, status )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Removes the top most value from stack <stack> and returns it.  If the stack\u000a// is empty,  that  is  when the  number  of  entries  stored in the stack has\u000a// reached zero,  then NIL is returned.\u000a//\u000a// Entries which were allocated dynamically (above the initial capacity) are\u000a// deallocated when their values are popped.\u000a//\u000a// The status of the operation is passed back in <status>. *)
p2108
tp2109
a(g827
V\u000a\u000a
p2110
tp2111
a(g794
VPROCEDURE
p2112
tp2113
a(g827
g962
tp2114
a(g436
Vpop
p2115
tp2116
a(g827
g962
tp2117
a(g706
g1192
tp2118
a(g827
g962
tp2119
a(g794
VVAR
p2120
tp2121
a(g827
g962
tp2122
a(g436
Vstack
p2123
tp2124
a(g827
g962
tp2125
a(g706
g1058
tp2126
a(g827
g962
tp2127
a(g436
VStack
p2128
tp2129
a(g706
g972
tp2130
a(g827
g962
tp2131
a(g794
VVAR
p2132
tp2133
a(g827
g962
tp2134
a(g436
Vstatus
p2135
tp2136
a(g827
g962
tp2137
a(g706
g1058
tp2138
a(g827
g962
tp2139
a(g436
VStatus
p2140
tp2141
a(g827
g962
tp2142
a(g706
g1215
tp2143
a(g827
g962
tp2144
a(g706
g1058
tp2145
a(g827
g962
tp2146
a(g436
VDataPtr
p2147
tp2148
a(g706
g972
tp2149
a(g827
V\u000a\u000a
p2150
tp2151
a(g794
VVAR
p2152
tp2153
a(g827
V\u000a
p2154
tp2155
a(g827
V    
p2156
tp2157
a(g436
VthisValue
p2158
tp2159
a(g827
g962
tp2160
a(g706
g1058
tp2161
a(g827
g962
tp2162
a(g436
VDataPtr
p2163
tp2164
a(g706
g972
tp2165
a(g827
V\u000a
p2166
tp2167
a(g827
V    
p2168
tp2169
a(g436
VthisEntry
p2170
tp2171
a(g827
g962
tp2172
a(g706
g1058
tp2173
a(g827
g962
tp2174
a(g436
VListPtr
p2175
tp2176
a(g706
g972
tp2177
a(g827
V\u000a
p2178
tp2179
a(g827
V    
p2180
tp2181
a(g436
VvaluePtr
p2182
tp2183
a(g827
g962
tp2184
a(g706
g1058
tp2185
a(g827
g962
tp2186
a(g794
VPOINTER
p2187
tp2188
a(g827
g962
tp2189
a(g794
VTO
p2190
tp2191
a(g827
g962
tp2192
a(g436
VDataPtr
p2193
tp2194
a(g706
g972
tp2195
a(g827
V\u000a\u000a
p2196
tp2197
a(g794
VBEGIN
p2198
tp2199
a(g827
V\u000a\u000a
p2200
tp2201
a(g827
V    
p2202
tp2203
a(g8
V(* bail out if stack is NIL *)
p2204
tp2205
a(g827
V\u000a
p2206
tp2207
a(g827
V    
p2208
tp2209
a(g794
VIF
p2210
tp2211
a(g827
g962
tp2212
a(g436
Vstack
p2213
tp2214
a(g827
g962
tp2215
a(g413
g1027
tp2216
a(g827
g962
tp2217
a(g682
VNIL
p2218
tp2219
a(g827
g962
tp2220
a(g794
VTHEN
p2221
tp2222
a(g827
V\u000a
p2223
tp2224
a(g827
V        
p2225
tp2226
a(g436
Vstatus
p2227
tp2228
a(g827
g962
tp2229
a(g413
V:=
p2230
tp2231
a(g827
g962
tp2232
a(g436
VinvalidStack
p2233
tp2234
a(g706
g972
tp2235
a(g827
V\u000a
p2236
tp2237
a(g827
V        
p2238
tp2239
a(g794
VRETURN
p2240
tp2241
a(g827
g962
tp2242
a(g682
VNIL
p2243
tp2244
a(g706
g972
tp2245
a(g827
V\u000a
p2246
tp2247
a(g827
V    
p2248
tp2249
a(g794
VEND
p2250
tp2251
a(g706
g972
tp2252
a(g827
g962
tp2253
a(g8
V(* IF *)
p2254
tp2255
a(g827
V\u000a
p2256
tp2257
a(g827
V    \u000a    
p2258
tp2259
a(g8
V(* bail out if stack is empty *)
p2260
tp2261
a(g827
V\u000a
p2262
tp2263
a(g827
V    
p2264
tp2265
a(g794
VIF
p2266
tp2267
a(g827
g962
tp2268
a(g436
Vstack
p2269
tp2270
a(g413
g1465
tp2271
a(g706
g1467
tp2272
a(g436
VentryCount
p2273
tp2274
a(g827
g962
tp2275
a(g413
g1027
tp2276
a(g827
g962
tp2277
a(g37
g1263
tp2278
a(g827
g962
tp2279
a(g794
VTHEN
p2280
tp2281
a(g827
V\u000a
p2282
tp2283
a(g827
V        
p2284
tp2285
a(g436
Vstatus
p2286
tp2287
a(g827
g962
tp2288
a(g413
V:=
p2289
tp2290
a(g827
g962
tp2291
a(g436
VstackEmpty
p2292
tp2293
a(g706
g972
tp2294
a(g827
V\u000a
p2295
tp2296
a(g827
V        
p2297
tp2298
a(g794
VRETURN
p2299
tp2300
a(g827
g962
tp2301
a(g682
VNIL
p2302
tp2303
a(g706
g972
tp2304
a(g827
V\u000a
p2305
tp2306
a(g827
V    
p2307
tp2308
a(g794
VEND
p2309
tp2310
a(g706
g972
tp2311
a(g827
g962
tp2312
a(g8
V(* IF *)
p2313
tp2314
a(g827
V\u000a\u000a
p2315
tp2316
a(g827
V    
p2317
tp2318
a(g682
VDEC
p2319
tp2320
a(g706
g1192
tp2321
a(g436
Vstack
p2322
tp2323
a(g413
g1465
tp2324
a(g706
g1467
tp2325
a(g436
VentryCount
p2326
tp2327
a(g706
g1215
tp2328
a(g706
g972
tp2329
a(g827
V\u000a
p2330
tp2331
a(g827
V    \u000a    
p2332
tp2333
a(g8
V(* check if index falls within array segment *)
p2334
tp2335
a(g827
V\u000a
p2336
tp2337
a(g827
V    
p2338
tp2339
a(g794
VIF
p2340
tp2341
a(g827
g962
tp2342
a(g436
Vstack
p2343
tp2344
a(g413
g1465
tp2345
a(g706
g1467
tp2346
a(g436
VentryCount
p2347
tp2348
a(g827
g962
tp2349
a(g413
g1819
tp2350
a(g827
g962
tp2351
a(g436
Vstack
p2352
tp2353
a(g413
g1465
tp2354
a(g706
g1467
tp2355
a(g436
VarraySize
p2356
tp2357
a(g827
g962
tp2358
a(g794
VTHEN
p2359
tp2360
a(g827
V\u000a
p2361
tp2362
a(g827
V        \u000a        
p2363
tp2364
a(g8
V(* obtain value at index entryCount in array segment *)
p2365
tp2366
a(g827
V\u000a
p2367
tp2368
a(g827
V        \u000a        
p2369
tp2370
a(g8
V(* thisValue := stack^.array^[stack^.entryCount]; *)
p2371
tp2372
a(g827
V\u000a
p2373
tp2374
a(g827
V        
p2375
tp2376
a(g436
VvaluePtr
p2377
tp2378
a(g827
g962
tp2379
a(g413
V:=
p2380
tp2381
a(g827
g962
tp2382
a(g694
VADR
p2383
tp2384
a(g706
g1192
tp2385
a(g436
Vstack
p2386
tp2387
a(g413
g1465
tp2388
a(g706
g1467
tp2389
a(g436
Varray
p2390
tp2391
a(g706
g1215
tp2392
a(g827
g962
tp2393
a(g413
g1372
tp2394
a(g827
g962
tp2395
a(g682
VTSIZE
p2396
tp2397
a(g706
g1192
tp2398
a(g436
VDataPtr
p2399
tp2400
a(g706
g1215
tp2401
a(g827
g962
tp2402
a(g413
g1382
tp2403
a(g827
g962
tp2404
a(g436
Vstack
p2405
tp2406
a(g413
g1465
tp2407
a(g706
g1467
tp2408
a(g436
VentryCount
p2409
tp2410
a(g706
g972
tp2411
a(g827
V\u000a
p2412
tp2413
a(g827
V        
p2414
tp2415
a(g436
VthisValue
p2416
tp2417
a(g827
g962
tp2418
a(g413
V:=
p2419
tp2420
a(g827
g962
tp2421
a(g436
VvaluePtr
p2422
tp2423
a(g413
g1465
tp2424
a(g706
g972
tp2425
a(g827
V\u000a
p2426
tp2427
a(g827
V        \u000a    
p2428
tp2429
a(g794
VELSE
p2430
tp2431
a(g827
g962
tp2432
a(g8
V(* index falls within overflow segment *)
p2433
tp2434
a(g827
V\u000a
p2435
tp2436
a(g827
V        \u000a        
p2437
tp2438
a(g8
V(* obtain value of first entry in overflow list *)
p2439
tp2440
a(g827
V\u000a
p2441
tp2442
a(g827
V        
p2443
tp2444
a(g436
VthisValue
p2445
tp2446
a(g827
g962
tp2447
a(g413
V:=
p2448
tp2449
a(g827
g962
tp2450
a(g436
Vstack
p2451
tp2452
a(g413
g1465
tp2453
a(g706
g1467
tp2454
a(g436
Voverflow
p2455
tp2456
a(g413
g1465
tp2457
a(g706
g1467
tp2458
a(g436
Vvalue
p2459
tp2460
a(g706
g972
tp2461
a(g827
V\u000a
p2462
tp2463
a(g827
V        \u000a        
p2464
tp2465
a(g8
V(* isolate first entry in overflow list *)
p2466
tp2467
a(g827
V\u000a
p2468
tp2469
a(g827
V        
p2470
tp2471
a(g436
VthisEntry
p2472
tp2473
a(g827
g962
tp2474
a(g413
V:=
p2475
tp2476
a(g827
g962
tp2477
a(g436
Vstack
p2478
tp2479
a(g413
g1465
tp2480
a(g706
g1467
tp2481
a(g436
Voverflow
p2482
tp2483
a(g706
g972
tp2484
a(g827
V\u000a
p2485
tp2486
a(g827
V        
p2487
tp2488
a(g436
Vstack
p2489
tp2490
a(g413
g1465
tp2491
a(g706
g1467
tp2492
a(g436
Voverflow
p2493
tp2494
a(g827
g962
tp2495
a(g413
V:=
p2496
tp2497
a(g827
g962
tp2498
a(g436
Vstack
p2499
tp2500
a(g413
g1465
tp2501
a(g706
g1467
tp2502
a(g436
Voverflow
p2503
tp2504
a(g413
g1465
tp2505
a(g706
g1467
tp2506
a(g436
Vnext
p2507
tp2508
a(g706
g972
tp2509
a(g827
V\u000a
p2510
tp2511
a(g827
V        \u000a        
p2512
tp2513
a(g8
V(* remove the entry from overflow list *)
p2514
tp2515
a(g827
V\u000a
p2516
tp2517
a(g827
V        
p2518
tp2519
a(g682
VDISPOSE
p2520
tp2521
a(g706
g1192
tp2522
a(g436
VthisEntry
p2523
tp2524
a(g706
g1215
tp2525
a(g706
g972
tp2526
a(g827
V\u000a
p2527
tp2528
a(g827
V                \u000a    
p2529
tp2530
a(g794
VEND
p2531
tp2532
a(g706
g972
tp2533
a(g827
g962
tp2534
a(g8
V(* IF *)
p2535
tp2536
a(g827
V\u000a\u000a
p2537
tp2538
a(g827
V    
p2539
tp2540
a(g8
V(* return value and status to caller *)
p2541
tp2542
a(g827
V\u000a
p2543
tp2544
a(g827
V    
p2545
tp2546
a(g436
Vstatus
p2547
tp2548
a(g827
g962
tp2549
a(g413
V:=
p2550
tp2551
a(g827
g962
tp2552
a(g436
Vsuccess
p2553
tp2554
a(g706
g972
tp2555
a(g827
V\u000a
p2556
tp2557
a(g827
V    
p2558
tp2559
a(g794
VRETURN
p2560
tp2561
a(g827
g962
tp2562
a(g436
VthisValue
p2563
tp2564
a(g827
V\u000a\u000a
p2565
tp2566
a(g794
VEND
p2567
tp2568
a(g827
g962
tp2569
a(g436
Vpop
p2570
tp2571
a(g706
g972
tp2572
a(g827
V\u000a\u000a\u000a
p2573
tp2574
a(g8
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.stackSize( stack )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Returns the current capacity of <stack>.  The current capacity is the total\u000a// number of allocated entries. Returns zero if NIL is passed in for <stack>.\u000a*)
p2575
tp2576
a(g827
V\u000a
p2577
tp2578
a(g794
VPROCEDURE
p2579
tp2580
a(g827
g962
tp2581
a(g436
VstackSize
p2582
tp2583
a(g706
g1192
tp2584
a(g827
g962
tp2585
a(g794
VVAR
p2586
tp2587
a(g827
g962
tp2588
a(g436
Vstack
p2589
tp2590
a(g827
g962
tp2591
a(g706
g1058
tp2592
a(g827
g962
tp2593
a(g436
VStack
p2594
tp2595
a(g827
g962
tp2596
a(g706
g1215
tp2597
a(g827
g962
tp2598
a(g706
g1058
tp2599
a(g827
g962
tp2600
a(g436
VStackSize
p2601
tp2602
a(g706
g972
tp2603
a(g827
V\u000a\u000a
p2604
tp2605
a(g794
VBEGIN
p2606
tp2607
a(g827
V\u000a\u000a
p2608
tp2609
a(g827
V    
p2610
tp2611
a(g8
V(* bail out if stack is NIL *)
p2612
tp2613
a(g827
V\u000a
p2614
tp2615
a(g827
V    
p2616
tp2617
a(g794
VIF
p2618
tp2619
a(g827
g962
tp2620
a(g436
Vstack
p2621
tp2622
a(g827
g962
tp2623
a(g413
g1027
tp2624
a(g827
g962
tp2625
a(g682
VNIL
p2626
tp2627
a(g827
g962
tp2628
a(g794
VTHEN
p2629
tp2630
a(g827
V\u000a
p2631
tp2632
a(g827
V        
p2633
tp2634
a(g794
VRETURN
p2635
tp2636
a(g827
g962
tp2637
a(g37
g1263
tp2638
a(g706
g972
tp2639
a(g827
V\u000a
p2640
tp2641
a(g827
V    
p2642
tp2643
a(g794
VEND
p2644
tp2645
a(g706
g972
tp2646
a(g827
g962
tp2647
a(g8
V(* IF *)
p2648
tp2649
a(g827
V\u000a\u000a
p2650
tp2651
a(g827
V    
p2652
tp2653
a(g794
VIF
p2654
tp2655
a(g827
g962
tp2656
a(g436
Vstack
p2657
tp2658
a(g413
g1465
tp2659
a(g706
g1467
tp2660
a(g436
VentryCount
p2661
tp2662
a(g827
g962
tp2663
a(g413
g1819
tp2664
a(g827
g962
tp2665
a(g436
Vstack
p2666
tp2667
a(g413
g1465
tp2668
a(g706
g1467
tp2669
a(g436
VarraySize
p2670
tp2671
a(g827
g962
tp2672
a(g794
VTHEN
p2673
tp2674
a(g827
V\u000a
p2675
tp2676
a(g827
V        
p2677
tp2678
a(g794
VRETURN
p2679
tp2680
a(g827
g962
tp2681
a(g436
Vstack
p2682
tp2683
a(g413
g1465
tp2684
a(g706
g1467
tp2685
a(g436
VarraySize
p2686
tp2687
a(g706
g972
tp2688
a(g827
V\u000a
p2689
tp2690
a(g827
V    
p2691
tp2692
a(g794
VELSE
p2693
tp2694
a(g827
V\u000a
p2695
tp2696
a(g827
V        
p2697
tp2698
a(g794
VRETURN
p2699
tp2700
a(g827
g962
tp2701
a(g436
Vstack
p2702
tp2703
a(g413
g1465
tp2704
a(g706
g1467
tp2705
a(g436
VentryCount
p2706
tp2707
a(g706
g972
tp2708
a(g827
V\u000a
p2709
tp2710
a(g827
V    
p2711
tp2712
a(g794
VEND
p2713
tp2714
a(g706
g972
tp2715
a(g827
g962
tp2716
a(g8
V(* IF *)
p2717
tp2718
a(g827
V\u000a
p2719
tp2720
a(g827
V    \u000a
p2721
tp2722
a(g794
VEND
p2723
tp2724
a(g827
g962
tp2725
a(g436
VstackSize
p2726
tp2727
a(g706
g972
tp2728
a(g827
V\u000a\u000a\u000a
p2729
tp2730
a(g8
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.stackEntries( stack )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Returns  the  number of entries  stored in stack <stack>,  returns  zero if\u000a// NIL is passed in for <stack>. *)
p2731
tp2732
a(g827
V\u000a\u000a
p2733
tp2734
a(g794
VPROCEDURE
p2735
tp2736
a(g827
g962
tp2737
a(g436
VstackEntries
p2738
tp2739
a(g706
g1192
tp2740
a(g827
g962
tp2741
a(g794
VVAR
p2742
tp2743
a(g827
g962
tp2744
a(g436
Vstack
p2745
tp2746
a(g827
g962
tp2747
a(g706
g1058
tp2748
a(g827
g962
tp2749
a(g436
VStack
p2750
tp2751
a(g827
g962
tp2752
a(g706
g1215
tp2753
a(g827
g962
tp2754
a(g706
g1058
tp2755
a(g827
g962
tp2756
a(g436
VStackSize
p2757
tp2758
a(g706
g972
tp2759
a(g827
V\u000a\u000a
p2760
tp2761
a(g794
VBEGIN
p2762
tp2763
a(g827
V\u000a\u000a
p2764
tp2765
a(g827
V    
p2766
tp2767
a(g8
V(* bail out if stack is NIL *)
p2768
tp2769
a(g827
V\u000a
p2770
tp2771
a(g827
V    
p2772
tp2773
a(g794
VIF
p2774
tp2775
a(g827
g962
tp2776
a(g436
Vstack
p2777
tp2778
a(g827
g962
tp2779
a(g413
g1027
tp2780
a(g827
g962
tp2781
a(g682
VNIL
p2782
tp2783
a(g827
g962
tp2784
a(g794
VTHEN
p2785
tp2786
a(g827
V\u000a
p2787
tp2788
a(g827
V        
p2789
tp2790
a(g794
VRETURN
p2791
tp2792
a(g827
g962
tp2793
a(g37
g1263
tp2794
a(g706
g972
tp2795
a(g827
V\u000a
p2796
tp2797
a(g827
V    
p2798
tp2799
a(g794
VEND
p2800
tp2801
a(g706
g972
tp2802
a(g827
g962
tp2803
a(g8
V(* IF *)
p2804
tp2805
a(g827
V\u000a\u000a
p2806
tp2807
a(g827
V    
p2808
tp2809
a(g794
VRETURN
p2810
tp2811
a(g827
g962
tp2812
a(g436
Vstack
p2813
tp2814
a(g413
g1465
tp2815
a(g706
g1467
tp2816
a(g436
VentryCount
p2817
tp2818
a(g827
V\u000a
p2819
tp2820
a(g827
V    \u000a
p2821
tp2822
a(g794
VEND
p2823
tp2824
a(g827
g962
tp2825
a(g436
VstackEntries
p2826
tp2827
a(g706
g972
tp2828
a(g827
V\u000a\u000a\u000a
p2829
tp2830
a(g8
V(* ---------------------------------------------------------------------------\u000a// function:  LIFO.dispose( stack )\u000a// ---------------------------------------------------------------------------\u000a//\u000a// Disposes of LIFO stack object <stack>.  Returns NIL. *)
p2831
tp2832
a(g827
V\u000a\u000a
p2833
tp2834
a(g794
VPROCEDURE
p2835
tp2836
a(g827
g962
tp2837
a(g436
Vdispose
p2838
tp2839
a(g827
g962
tp2840
a(g706
g1192
tp2841
a(g827
g962
tp2842
a(g794
VVAR
p2843
tp2844
a(g827
g962
tp2845
a(g436
Vstack
p2846
tp2847
a(g827
g962
tp2848
a(g706
g1058
tp2849
a(g827
g962
tp2850
a(g436
VStack
p2851
tp2852
a(g827
g962
tp2853
a(g706
g1215
tp2854
a(g827
g962
tp2855
a(g706
g1058
tp2856
a(g827
g962
tp2857
a(g436
VStack
p2858
tp2859
a(g706
g972
tp2860
a(g827
V\u000a\u000a
p2861
tp2862
a(g794
VVAR
p2863
tp2864
a(g827
V\u000a
p2865
tp2866
a(g827
V    
p2867
tp2868
a(g436
VthisEntry
p2869
tp2870
a(g827
g962
tp2871
a(g706
g1058
tp2872
a(g827
g962
tp2873
a(g436
VListPtr
p2874
tp2875
a(g706
g972
tp2876
a(g827
V\u000a\u000a
p2877
tp2878
a(g794
VBEGIN
p2879
tp2880
a(g827
V\u000a\u000a
p2881
tp2882
a(g827
V    
p2883
tp2884
a(g8
V(* bail out if stack is NIL *)
p2885
tp2886
a(g827
V\u000a
p2887
tp2888
a(g827
V    
p2889
tp2890
a(g794
VIF
p2891
tp2892
a(g827
g962
tp2893
a(g436
Vstack
p2894
tp2895
a(g827
g962
tp2896
a(g413
g1027
tp2897
a(g827
g962
tp2898
a(g682
VNIL
p2899
tp2900
a(g827
g962
tp2901
a(g794
VTHEN
p2902
tp2903
a(g827
V\u000a
p2904
tp2905
a(g827
V        
p2906
tp2907
a(g794
VRETURN
p2908
tp2909
a(g827
g962
tp2910
a(g682
VNIL
p2911
tp2912
a(g706
g972
tp2913
a(g827
V\u000a
p2914
tp2915
a(g827
V    
p2916
tp2917
a(g794
VEND
p2918
tp2919
a(g706
g972
tp2920
a(g827
g962
tp2921
a(g8
V(* IF *)
p2922
tp2923
a(g827
V\u000a
p2924
tp2925
a(g827
V    \u000a    
p2926
tp2927
a(g8
V(* deallocate any entries in stack's overflow list *)
p2928
tp2929
a(g827
V\u000a
p2930
tp2931
a(g827
V    
p2932
tp2933
a(g794
VWHILE
p2934
tp2935
a(g827
g962
tp2936
a(g436
Vstack
p2937
tp2938
a(g413
g1465
tp2939
a(g706
g1467
tp2940
a(g436
Voverflow
p2941
tp2942
a(g827
g962
tp2943
a(g413
V#
p2944
tp2945
a(g827
g962
tp2946
a(g682
VNIL
p2947
tp2948
a(g827
g962
tp2949
a(g794
VDO
p2950
tp2951
a(g827
V\u000a
p2952
tp2953
a(g827
V        \u000a        
p2954
tp2955
a(g8
V(* isolate first entry in overflow list *)
p2956
tp2957
a(g827
V\u000a
p2958
tp2959
a(g827
V        
p2960
tp2961
a(g436
VthisEntry
p2962
tp2963
a(g827
g962
tp2964
a(g413
V:=
p2965
tp2966
a(g827
g962
tp2967
a(g436
Vstack
p2968
tp2969
a(g413
g1465
tp2970
a(g706
g1467
tp2971
a(g436
Voverflow
p2972
tp2973
a(g706
g972
tp2974
a(g827
V\u000a
p2975
tp2976
a(g827
V        
p2977
tp2978
a(g436
Vstack
p2979
tp2980
a(g413
g1465
tp2981
a(g706
g1467
tp2982
a(g436
Voverflow
p2983
tp2984
a(g827
g962
tp2985
a(g413
V:=
p2986
tp2987
a(g827
g962
tp2988
a(g436
Vstack
p2989
tp2990
a(g413
g1465
tp2991
a(g706
g1467
tp2992
a(g436
Voverflow
p2993
tp2994
a(g413
g1465
tp2995
a(g706
g1467
tp2996
a(g436
Vnext
p2997
tp2998
a(g706
g972
tp2999
a(g827
V\u000a
p3000
tp3001
a(g827
V        \u000a        
p3002
tp3003
a(g8
V(* deallocate the entry *)
p3004
tp3005
a(g827
V\u000a
p3006
tp3007
a(g827
V        
p3008
tp3009
a(g682
VDISPOSE
p3010
tp3011
a(g706
g1192
tp3012
a(g436
VthisEntry
p3013
tp3014
a(g706
g1215
tp3015
a(g706
g972
tp3016
a(g827
V\u000a
p3017
tp3018
a(g827
V        \u000a    
p3019
tp3020
a(g794
VEND
p3021
tp3022
a(g706
g972
tp3023
a(g827
g962
tp3024
a(g8
V(* WHILE *)
p3025
tp3026
a(g827
V\u000a
p3027
tp3028
a(g827
V    \u000a    
p3029
tp3030
a(g8
V(* deallocate stack object and pass NIL to caller *)
p3031
tp3032
a(g827
V\u000a
p3033
tp3034
a(g827
V    
p3035
tp3036
a(g436
VDEALLOCATE
p3037
tp3038
a(g706
g1192
tp3039
a(g436
Vstack
p3040
tp3041
a(g706
g987
tp3042
a(g827
g962
tp3043
a(g682
VTSIZE
p3044
tp3045
a(g706
g1192
tp3046
a(g436
VStack
p3047
tp3048
a(g706
g1215
tp3049
a(g827
g962
tp3050
a(g413
g1372
tp3051
a(g827
g962
tp3052
a(g682
VTSIZE
p3053
tp3054
a(g706
g1192
tp3055
a(g436
VDataPtr
p3056
tp3057
a(g706
g1215
tp3058
a(g827
g962
tp3059
a(g413
g1382
tp3060
a(g827
g962
tp3061
a(g706
g1192
tp3062
a(g436
Vstack
p3063
tp3064
a(g413
g1465
tp3065
a(g706
g1467
tp3066
a(g436
VarraySize
p3067
tp3068
a(g827
g962
tp3069
a(g413
g1389
tp3070
a(g827
g962
tp3071
a(g37
g1392
tp3072
a(g706
g1215
tp3073
a(g706
g1215
tp3074
a(g706
g972
tp3075
a(g827
V\u000a
p3076
tp3077
a(g827
V    
p3078
tp3079
a(g794
VRETURN
p3080
tp3081
a(g827
g962
tp3082
a(g682
VNIL
p3083
tp3084
a(g827
V\u000a\u000a
p3085
tp3086
a(g794
VEND
p3087
tp3088
a(g827
g962
tp3089
a(g436
Vdispose
p3090
tp3091
a(g706
g972
tp3092
a(g827
V\u000a\u000a\u000a
p3093
tp3094
a(g794
VEND
p3095
tp3096
a(g827
g962
tp3097
a(g436
VLIFO
p3098
tp3099
a(g706
g1467
tp3100
a(g827
V\u000a
p3101
tp3102
a.